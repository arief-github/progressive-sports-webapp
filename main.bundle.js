/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 240:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(776)["default"]);

function _regeneratorRuntime() {
  "use strict";
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) {
            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
          }

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 776:
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 657:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

// TODO(Babel 8): Remove this file.
var runtime = __webpack_require__(240)();

module.exports = runtime; // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

/***/ }),

/***/ 743:
/***/ ((module) => {

"use strict";

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ 570:
/***/ ((module) => {

"use strict";


module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ 957:
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
(function (global, factory) {
  "use strict";

  if (( false ? 0 : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info.
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error("jQuery requires a window with a document");
      }

      return factory(w);
    };
  } else {
    factory(global);
  } // Pass this if window is not defined yet

})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var flat = arr.flat ? function (array) {
    return arr.flat.call(array);
  } : function (array) {
    return arr.concat.apply([], array);
  };
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var document = window.document;
  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
        val,
        script = doc.createElement("script");
    script.text = code;

    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);

        if (val) {
          script.setAttribute(i, val);
        }
      }
    }

    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    } // Support: Android <=2.3 only (functionish RegExp)


    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module


  var version = "3.6.0",
      // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      } // Return just the one element from the set


      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    even: function even() {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return (i + 1) % 2;
      }));
    },
    odd: function odd() {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return i % 2;
      }));
    },
    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name]; // Prevent Object.prototype pollution
          // Prevent never-ending loop

          if (name === "__proto__" || target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name]; // Ensure proper type for the source value

            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }

            copyIsArray = false; // Never move original objects, clone them

            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor; // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects

      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

      if (!proto) {
        return true;
      } // Objects with prototype are plain iff they were constructed by a global Object function


      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function globalEval(code, options, doc) {
      DOMEval(code, {
        nonce: options && options.nonce
      }, doc);
    },
    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return flat(ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  } // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  var Sizzle =
  /*!
   * Sizzle CSS Selector Engine v2.3.6
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2021-02-16
   */
  function (window) {
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function sortOrder(a, b) {
      if (a === b) {
        hasDuplicate = true;
      }

      return 0;
    },
        // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        pushNative = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
    // https://jsperf.com/thor-indexof-vs-for/5
    indexOf = function indexOf(list, elem) {
      var i = 0,
          len = list.length;

      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }

      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
    identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
    // or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
    ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rdescend = new RegExp(whitespace + "|>"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
        funescape = function funescape(escape, nonHex) {
      var high = "0x" + escape.slice(1) - 0x10000;
      return nonHex ? // Strip the backslash prefix from a non-hex escape sequence
      nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point
      // Support: IE <=11+
      // For values outside the Basic Multilingual Plane (BMP), manually construct a
      // surrogate pair
      high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },
        // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function fcssescape(ch, asCodePoint) {
      if (asCodePoint) {
        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
        if (ch === "\0") {
          return "\uFFFD";
        } // Control characters and (dependent upon position) numbers get escaped as code points


        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
      } // Other potentially-special ASCII characters get backslash-escaped


      return "\\" + ch;
    },
        // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function unloadHandler() {
      setDocument();
    },
        inDisabledFieldset = addCombinator(function (elem) {
      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
    }, {
      dir: "parentNode",
      next: "legend"
    }); // Optimize for push.apply( _, NodeList )


    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
      // Detect silently failing push.apply
      // eslint-disable-next-line no-unused-expressions

      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          pushNative.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0; // Can't trust NodeList.length

          while (target[j++] = els[i++]) {}

          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
      results = results || []; // Return early from calls with invalid selector or context

      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      } // Try to shortcut find operations (as opposed to filters) in HTML documents


      if (!seed) {
        setDocument(context);
        context = context || document;

        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                } // Element context

              } else {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } // Type selector

            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results; // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          } // Take advantage of querySelectorAll


          if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only
          // Exclude object elements
          nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
            newSelector = selector;
            newContext = context; // qSA considers elements outside a scoping root when evaluating child or
            // descendant combinators, which is not what we want.
            // In such cases, we work around the behavior by prefixing every selector in the
            // list with an ID selector referencing the scope context.
            // The technique has to be used as well when a leading combinator is used
            // as such selectors are not recognized by querySelectorAll.
            // Thanks to Andrew Dupont for this technique.

            if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
              // Expand context for sibling selectors
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser
              // supports it & if we're not changing the context.

              if (newContext !== context || !support.scope) {
                // Capture the context ID, setting it first if necessary
                if (nid = context.getAttribute("id")) {
                  nid = nid.replace(rcssescape, fcssescape);
                } else {
                  context.setAttribute("id", nid = expando);
                }
              } // Prefix every selector in the list


              groups = tokenize(selector);
              i = groups.length;

              while (i--) {
                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
              }

              newSelector = groups.join(",");
            }

            try {
              push.apply(results, newContext.querySelectorAll(newSelector));
              return results;
            } catch (qsaError) {
              nonnativeSelectorCache(selector, true);
            } finally {
              if (nid === expando) {
                context.removeAttribute("id");
              }
            }
          }
        }
      } // All others


      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */


    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }

        return cache[key + " "] = value;
      }

      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */


    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */


    function assert(fn) {
      var el = document.createElement("fieldset");

      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        } // release memory in IE


        el = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */


    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */


    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

      if (diff) {
        return diff;
      } // Check if b follows a


      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */


    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */


    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */


    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            } // Support: IE 6 - 11
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors


            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

            /* jshint -W018 */
            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
          }

          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        } // Remaining elements are neither :enabled nor :disabled


        return false;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */


    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length; // Match elements found at the specified indexes

          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */


    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    } // Expose support vars for convenience


    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

    isXML = Sizzle.isXML = function (elem) {
      var namespace = elem && elem.namespaceURI,
          docElem = elem && (elem.ownerDocument || elem).documentElement; // Support: IE <=8
      // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
      // https://bugs.jquery.com/ticket/4833

      return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */


    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq

      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      } // Update global variables


      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq

      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 11, Edge
        if (subWindow.addEventListener) {
          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
        } else if (subWindow.attachEvent) {
          subWindow.attachEvent("onunload", unloadHandler);
        }
      } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
      // Safari 4 - 5 only, Opera <=11.6 - 12.x only
      // IE/Edge & older browsers don't support the :scope pseudo-class.
      // Support: Safari 6.0 only
      // Safari 6.0 supports :scope but it's an alias of :root there.


      support.scope = assert(function (el) {
        docElem.appendChild(el).appendChild(document.createElement("div"));
        return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
      });
      /* Attributes
      ---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)

      support.attributes = assert(function (el) {
        el.className = "i";
        return !el.getAttribute("className");
      });
      /* getElement(s)By*
      ---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements

      support.getElementsByTagName = assert(function (el) {
        el.appendChild(document.createComment(""));
        return !el.getElementsByTagName("*").length;
      }); // Support: IE<9

      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test

      support.getById = assert(function (el) {
        docElem.appendChild(el).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      }); // ID filter and find

      if (support.getById) {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };

        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        }; // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut


        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
                i,
                elems,
                elem = context.getElementById(id);

            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");

              if (node && node.value === id) {
                return [elem];
              } // Fall back on getElementsByName


              elems = context.getElementsByName(id);
              i = 0;

              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");

                if (node && node.value === id) {
                  return [elem];
                }
              }
            }

            return [];
          }
        };
      } // Tag


      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag); // Filter out possible comments

        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }

        return results;
      }; // Class

      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See https://bugs.jquery.com/ticket/13378

      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (el) {
          var input; // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // https://bugs.jquery.com/ticket/12359

          docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

          if (el.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          } // Support: IE8
          // Boolean attributes and "value" are not treated correctly


          if (!el.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          } // Support: IE 11+, Edge 15 - 18+
          // IE 11/Edge don't find elements on a `[name='']` query in some cases.
          // Adding a temporary attribute to the document before the selection works
          // around the issue.
          // Interestingly, IE 10 & older don't seem to have the issue.


          input = document.createElement("input");
          input.setAttribute("name", "");
          el.appendChild(input);

          if (!el.querySelectorAll("[name='']").length) {
            rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
          } // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests


          if (!el.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          } // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibling-combinator selector` fails


          if (!el.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          } // Support: Firefox <=3.6 - 5 only
          // Old Firefox doesn't throw on a badly-escaped identifier.


          el.querySelectorAll("\\\f");
          rbuggyQSA.push("[\\r\\n\\f]");
        });
        assert(function (el) {
          el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment

          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          el.appendChild(input).setAttribute("name", "D"); // Support: IE8
          // Enforce case-sensitivity of name attribute

          if (el.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests


          if (el.querySelectorAll(":enabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: IE9-11+
          // IE's :disabled selector does not pick up the children of disabled fieldsets


          docElem.appendChild(el).disabled = true;

          if (el.querySelectorAll(":disabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: Opera 10 - 11 only
          // Opera 10-11 does not throw on post-comma invalid pseudos


          el.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (el) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
          // Gecko does not error, returns false instead

          matches.call(el, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
      /* Contains
      ---------------------------------------------------------------------- */

      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself

      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }

        return false;
      };
      /* Sorting
      ---------------------------------------------------------------------- */
      // Document order sorting

      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        } // Sort on method existence if only one input has compareDocumentPosition


        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

        if (compare) {
          return compare;
        } // Calculate position if both inputs belong to the same document
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq


        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1; // Disconnected nodes

        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
            return -1;
          } // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq


          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
            return 1;
          } // Maintain original order


          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b]; // Parentless nodes are either documents or disconnected

        if (!aup || !bup) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.

          /* eslint-disable eqeqeq */
          return a == document ? -1 : b == document ? 1 :
          /* eslint-enable eqeqeq */
          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        } // Otherwise we need full lists of their ancestors for comparison


        cur = a;

        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }

        cur = b;

        while (cur = cur.parentNode) {
          bp.unshift(cur);
        } // Walk down the tree looking for a discrepancy


        while (ap[i] === bp[i]) {
          i++;
        }

        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.

        /* eslint-disable eqeqeq */
        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :
        /* eslint-enable eqeqeq */
        0;
      };
      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      setDocument(elem);

      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {
          nonnativeSelectorCache(expr, true);
        }
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((context.ownerDocument || context) != document) {
        setDocument(context);
      }

      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq
      if ((elem.ownerDocument || elem) != document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.escape = function (sel) {
      return (sel + "").replace(rcssescape, fcssescape);
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */


    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0; // Unless we *know* we can detect duplicates, assume their presence

      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }

        while (j--) {
          results.splice(duplicates[j], 1);
        }
      } // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225


      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */


    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      } // Do not include comment or processing instruction nodes


      return ret;
    };

    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        "ATTR": function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },
        "CHILD": function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            } // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1


            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },
        "PSEUDO": function PSEUDO(match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          } // Accept quoted arguments as-is


          if (match[3]) {
            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          } // Return only captures needed by the pseudo filter method (type and argument)


          return match.slice(0, 3);
        }
      },
      filter: {
        "TAG": function TAG(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        "CLASS": function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        "ATTR": function ATTR(name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }

            if (!operator) {
              return true;
            }

            result += "";
            /* eslint-disable max-len */

            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
            /* eslint-enable max-len */
          };
        },
        "CHILD": function CHILD(type, what, _argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, _context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;

                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  } // Reverse direction for :only-* (if we haven't yet done so)


                  start = dir = type === "only" && !start && "nextSibling";
                }

                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                } // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)

                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              } // Incorporate the offset, then check against cycle size


              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        "PSEUDO": function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does

          if (fn[expando]) {
            return fn(argument);
          } // But maintain support for old signatures


          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;

              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length; // Match elements unmatched by `matcher`

            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, _context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results); // Don't keep the element (issue #299)

            input[0] = null;
            return !results.pop();
          };
        }),
        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }

          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;

            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);

            return false;
          };
        }),
        // Miscellaneous
        "target": function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        "root": function root(elem) {
          return elem === docElem;
        },
        "focus": function focus(elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        "enabled": createDisabledPseudo(false),
        "disabled": createDisabledPseudo(true),
        "checked": function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },
        "selected": function selected(elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            // eslint-disable-next-line no-unused-expressions
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },
        // Contents
        "empty": function empty(elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }

          return true;
        },
        "parent": function parent(elem) {
          return !Expr.pseudos["empty"](elem);
        },
        // Element/input types
        "header": function header(elem) {
          return rheader.test(elem.nodeName);
        },
        "input": function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        "button": function button(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },
        "text": function text(elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),
        "last": createPositionalPseudo(function (_matchIndexes, length) {
          return [length - 1];
        }),
        "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument > length ? length : argument;

          for (; --i >= 0;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; ++i < length;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        })
      }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }

    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    } // Easy API for creating new setFilters


    function setFilters() {}

    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }

          groups.push(tokens = []);
        }

        matched = false; // Combinators

        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        } // Filters


        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      } // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens


      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";

      for (; i < len; i++) {
        selector += tokens[i].value;
      }

      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }

        return false;
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if (skip && skip === elem.nodeName.toLowerCase()) {
                elem = elem[dir] || elem;
              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;

        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }

        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;

      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }

      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);

            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }

      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }

      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
        [] : // ...otherwise use results directly
        results : matcherIn; // Find primary matches

        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        } // Apply postFilter


        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

          i = temp.length;

          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;

              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }

              postFinder(null, matcherOut = [], temp, xml);
            } // Move matched elements from seed to results to keep them synchronized


            i = matcherOut.length;

            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          } // Add elements to results, through postFinder if defined

        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;

            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }

            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }

          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function superMatcher(seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          outermostContext = context == document || context || outermost;
        } // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0; // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq

            if (!context && elem.ownerDocument != document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }

            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }

            if (outermost) {
              dirruns = dirrunsUnique;
            }
          } // Track unmatched elements for set filters


          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            } // Lengthen the array for every element, matched or not


            if (seed) {
              unmatched.push(elem);
            }
          }
        } // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.


        matchedCount += i; // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.

        if (bySet && i !== matchedCount) {
          j = 0;

          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            } // Discard index placeholder values to get only actual matches


            setMatched = condense(setMatched);
          } // Add matches to results


          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        } // Override manipulation of globals by nested matchers


        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match
    /* Internal Use Only */
    ) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }

        i = match.length;

        while (i--) {
          cached = matcherFromTokens(match[i]);

          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        } // Cache the compiled function


        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

        cached.selector = selector;
      }

      return cached;
    };
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */


    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)

      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);

        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

          if (!context) {
            return results; // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        } // Fetch a seed set for right-to-left matching


        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

        while (i--) {
          token = tokens[i]; // Abort if we hit a combinator

          if (Expr.relative[type = token.type]) {
            break;
          }

          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);

              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      } // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above


      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }; // One-time assignments
    // Sort stability


    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function

    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*

    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    }); // Support: IE<8
    // Prevent attribute/property "interpolation"
    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

    if (!assert(function (el) {
      el.innerHTML = "<a href='#'></a>";
      return el.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    } // Support: IE<9
    // Use defaultValue in place of getAttribute("value")


    if (!support.attributes || !assert(function (el) {
      el.innerHTML = "<input/>";
      el.firstChild.setAttribute("value", "");
      return el.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, _name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    } // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies


    if (!assert(function (el) {
      return el.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;

        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors; // Deprecated

  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function dir(elem, _dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };

  var _siblings = function siblings(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }

  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    } // Single element


    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    } // Arraylike of elements (jQuery, arguments, Array)


    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    } // Filtered directly for both simple and complex selectors


    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          ret,
          len = this.length,
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  }); // Initialize a jQuery object
  // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  // Shortcut simple #id case for speed
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]);

          if (elem) {
            // Inject the element directly into the jQuery object
            this[0] = elem;
            this.length = 1;
          }

          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, _i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, _i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, _i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (elem.contentDocument != null && // Support: IE 11+
      // <object> elements with no `data` attribute has an object
      // `contentDocument` with a `null` prototype.
      getProto(elem.contentDocument)) {
        return elem.contentDocument;
      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.


      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }

      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    _fired,
        // Flag to prevent firing
    _locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function fire() {
      // Enforce single-firing
      _locked = _locked || options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      _fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (_locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && toType(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];

        if (!memory && !firing) {
          list = memory = "";
        }

        return this;
      },
      locked: function locked() {
        return !!_locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  function Identity(v) {
    return v;
  }

  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject); // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject); // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      } // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.

    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [// action, add listener, callbacks,
      // ... .then handlers, argument index, [final state]
      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        "catch": function _catch(fn) {
          return _promise.then(null, fn);
        },
        // Keep pipe for back-compat
        pipe: function
          /* fnDone, fnFail, fnProgress */
        pipe() {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (_i, tuple) {
              // Map tuples (progress, done, fail) to arguments (done, fail, progress)
              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
              // deferred.done(function() { bind to newDefer or newDefer.resolve })
              // deferred.fail(function() { bind to newDefer or newDefer.reject })

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        then: function then(onFulfilled, onRejected, onProgress) {
          var maxDepth = 0;

          function resolve(depth, deferred, handler, special) {
            return function () {
              var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                // https://promisesaplus.com/#point-59
                // Ignore double-resolution attempts

                if (depth < maxDepth) {
                  return;
                }

                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                // https://promisesaplus.com/#point-48

                if (returned === deferred.promise()) {
                  throw new TypeError("Thenable self-resolution");
                } // Support: Promises/A+ sections 2.3.3.1, 3.5
                // https://promisesaplus.com/#point-54
                // https://promisesaplus.com/#point-75
                // Retrieve `then` only once


                then = returned && ( // Support: Promises/A+ section 2.3.4
                // https://promisesaplus.com/#point-64
                // Only check objects and functions for thenability
                _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                if (isFunction(then)) {
                  // Special processors (notify) just wait for resolution
                  if (special) {
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                  } else {
                    // ...and disregard older resolution values
                    maxDepth++;
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                  } // Handle all other returned values

                } else {
                  // Only substitute handlers pass on context
                  // and multiple values (non-spec behavior)
                  if (handler !== Identity) {
                    that = undefined;
                    args = [returned];
                  } // Process the value(s)
                  // Default process is resolve


                  (special || deferred.resolveWith)(that, args);
                }
              },
                  // Only normal processors (resolve) catch and reject exceptions
              process = special ? mightThrow : function () {
                try {
                  mightThrow();
                } catch (e) {
                  if (jQuery.Deferred.exceptionHook) {
                    jQuery.Deferred.exceptionHook(e, process.stackTrace);
                  } // Support: Promises/A+ section 2.3.3.3.4.1
                  // https://promisesaplus.com/#point-61
                  // Ignore post-resolution exceptions


                  if (depth + 1 >= maxDepth) {
                    // Only substitute handlers pass on context
                    // and multiple values (non-spec behavior)
                    if (handler !== Thrower) {
                      that = undefined;
                      args = [e];
                    }

                    deferred.rejectWith(that, args);
                  }
                }
              }; // Support: Promises/A+ section 2.3.3.3.1
              // https://promisesaplus.com/#point-57
              // Re-resolve promises immediately to dodge false rejection from
              // subsequent errors


              if (depth) {
                process();
              } else {
                // Call an optional hook to record the stack, in case of exception
                // since it's otherwise lost when execution goes async
                if (jQuery.Deferred.getStackHook) {
                  process.stackTrace = jQuery.Deferred.getStackHook();
                }

                window.setTimeout(process);
              }
            };
          }

          return jQuery.Deferred(function (newDefer) {
            // progress_handlers.add( ... )
            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {}; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[5]; // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add

        _promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          }, // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable, // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable, // progress_callbacks.lock
          tuples[0][2].lock, // progress_handlers.lock
          tuples[0][3].lock);
        } // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire


        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }

        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        }; // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith


        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      _promise.promise(deferred); // Call given func if any


      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var // count of uncompleted subordinates
      remaining = arguments.length,
          // count of unprocessed arguments
      i = remaining,
          // subordinate fulfillment data
      resolveContexts = Array(i),
          resolveValues = _slice.call(arguments),
          // the primary Deferred
      primary = jQuery.Deferred(),
          // subordinate callback factory
      updateFunc = function updateFunc(i) {
        return function (value) {
          resolveContexts[i] = this;
          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

          if (! --remaining) {
            primary.resolveWith(resolveContexts, resolveValues);
          }
        };
      }; // Single- and empty arguments are adopted like Promise.resolve


      if (remaining <= 1) {
        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return primary.then();
        }
      } // Multiple arguments are aggregated like Promise.all array elements


      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }

      return primary.promise();
    }
  }); // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.

  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  }; // The deferred used on DOM ready


  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    ["catch"](function (error) {
      jQuery.readyException(error);
    });
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  } // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon


  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

    window.addEventListener("load", completed);
  } // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function


  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (toType(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function fn(elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    } // Gets


    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  }; // Matches dashed string for camelizing


  var rmsPrefix = /^-ms-/,
      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  } // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)


  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }

  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = {}; // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)

      if (typeof data === "string") {
        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }

      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key); // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace

          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data(); //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    } // Only convert to a number if it doesn't change the string


    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, key);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];
  var documentElement = document.documentElement;

  var isAttached = function isAttached(elem) {
    return jQuery.contains(elem.ownerDocument, elem);
  },
      composed = {
    composed: true
  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.


  if (documentElement.getRootNode) {
    isAttached = function isAttached(elem) {
      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }

  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem; // Inline style trumps all

    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && jQuery.css(elem, "display") === "none";
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2; // Trust units reported by jQuery.css

      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);

        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }

        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
        doc = elem.ownerDocument,
        nodeName = elem.nodeName,
        display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }

    defaultDisplayMap[nodeName] = display;
    return display;
  }

  function showHide(elements, show) {
    var display,
        elem,
        values = [],
        index = 0,
        length = elements.length; // Determine new display value for elements that need to change

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      display = elem.style.display;

      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;

          if (!values[index]) {
            elem.style.display = "";
          }
        }

        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none"; // Remember what we're overwriting

          dataPriv.set(elem, "display", display);
        }
      }
    } // Set the display of the elements in a second loop to avoid constant reflow


    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.

    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })(); // We have to close these tags to support XHTML (#13200)


  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td; // Support: IE <=9 only

  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
  }

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }

    return ret;
  } // Mark scripts as having already been evaluated


  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        attached,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      attached = isAttached(elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (attached) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).


  function expectSync(elem, type) {
    return elem === safeActiveElement() === (type === "focus");
  } // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393


  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Only attach events to objects that accept data

      if (!acceptData(elem)) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)


      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue,
          args = new Array(arguments.length),
          // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(nativeEvent),
          handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
          handleObj,
          sel,
          matchedHandlers,
          matchedSelectors,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target; // Find delegate handlers

      if (delegateCount && // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType && // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};

            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }

            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      cur = this;

      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function setup(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Claim the first handler

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", returnTrue);
          } // Return false to allow normal processing in the caller


          return false;
        },
        trigger: function trigger(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Force setup before triggering a click

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            leverageNative(el, "click");
          } // Return non-false to allow normal event-path propagation


          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function _default(event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  }; // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.

  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }

      return;
    } // Register the controller as a special universal handler for all event namespaces


    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function handler(event) {
        var notAsync,
            result,
            saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = _slice.call(arguments);
            dataPriv.set(this, type, saved); // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous

            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);

            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }

            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault(); // Support: Chrome 86+
              // In Chrome, if an element having a focusout handler is blurred by
              // clicking outside of it, it invokes the handler synchronously. If
              // that handler calls `.remove()` on the element, the data is cleared,
              // leaving `result` undefined. We need to guard against this.

              return result && result.value;
            } // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.

          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          } // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments

        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger( // Support: IE <=9 - 11+
            // Extend with the prototype to reset the above stopImmediatePropagation()
            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
          }); // Abort handling of the native event

          event.stopImmediatePropagation();
        }
      }
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse; // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)

      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Includes all common event props including KeyEvent and MouseEvent specific props

  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: true
  }, jQuery.event.addProp);
  jQuery.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function setup() {
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller

        return false;
      },
      trigger: function trigger() {
        // Force setup before trigger
        leverageNative(this, type); // Return non-false to allow normal event-path propagation

        return true;
      },
      // Suppress native focus or blur as it's already being fired
      // in leverageNative.
      _default: function _default() {
        return true;
      },
      delegateType: delegateType
    };
  }); // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var // Support: IE <=10 - 11, Edge 12 - 13 only
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;

      if (events) {
        dataPriv.remove(dest, "handle events");

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  }, doc);
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html;
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = isAttached(elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function swap(elem, options, callback) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.call(elem); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't

      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements

      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)

      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed

      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
        boxSizingReliableVal,
        scrollboxSizeVal,
        pixelBoxStylesVal,
        reliableTrDimensionsVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      },
      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function reliableTrDimensions() {
        var table, tr, trChild, trStyle;

        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");
          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
          tr.style.cssText = "border:1px solid"; // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.

          tr.style.height = "1px";
          trChild.style.height = "9px"; // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is display: block
          // gets around this issue.

          trChild.style.display = "block";
          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
          documentElement.removeChild(table);
        }

        return reliableTrDimensionsVal;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        // Support: Firefox 51+
    // Retrieving style before computed somehow
    // fixes an issue with getting wrong values
    // on detached elements
    style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)

    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      } // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values


      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var cssPrefixes = ["Webkit", "Moz", "ms"],
      emptyStyle = document.createElement("div").style,
      vendorProps = {}; // Return a vendor-prefixed property or undefined

  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property


  function finalPropName(name) {
    var _final = jQuery.cssProps[name] || vendorProps[name];

    if (_final) {
      return _final;
    }

    if (name in emptyStyle) {
      return name;
    }

    return vendorProps[name] = vendorPropName(name) || name;
  }

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      rcustomProp = /^--/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  };

  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
        extra = 0,
        delta = 0; // Adjustment may not be necessary

    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        } // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"

      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // For "content" or "padding", subtract border


        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    } // Account for positive content-box scroll gutter when requested by providing computedVal


    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
    // Fake content-box until we know it's needed to know the true value.
    boxSizingNeeded = !support.boxSizingReliable() || extra,
        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
        valueIsBorderBox = isBorderBox,
        val = curCSS(elem, dimension, styles),
        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.

    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }

      val = "auto";
    } // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.


    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
    // IE/Edge misreport `getComputedStyle` of table rows with width/height
    // set in CSS while `offset*` properties report correct values.
    // Interestingly, in some cases IE 9 doesn't suffer from this issue.
    !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    val === "auto" || // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
    elem.getClientRects().length) {
      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.

      valueIsBorderBox = offsetProp in elem;

      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    } // Normalize "" and auto


    val = parseFloat(val) || 0; // Adjust for the element's box model

    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "gridArea": true,
      "gridColumn": true,
      "gridColumnEnd": true,
      "gridColumnStart": true,
      "gridRow": true,
      "gridRowEnd": true,
      "gridRowStart": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name),
          style = elem.style; // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Gets hook for the prefixed version, then unprefixed version


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug #9237

          type = "number";
        } // Make sure that null and NaN values aren't set (#7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.


        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Try prefixed name followed by the unprefixed name


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
            styles = getStyles(elem),
            // Only read styles.position if the test has a chance to fail
        // to avoid forcing a reflow.
        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
        boxSizingNeeded = scrollboxSizeBuggy || extra,
            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)

        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        } // Convert to pixels if value adjustment is needed


        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }

  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
          hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }

      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }

      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result; // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.

        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        } // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.


        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  }; // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes

  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point

  jQuery.fx.step = {};
  var fxNow,
      inProgress,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  } // Animations created synchronously will run synchronously


  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  } // Generate parameters to create a standard animation


  function genFx(type, includeWidth) {
    var which,
        i = 0,
        attrs = {
      height: type
    }; // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right

    includeWidth = includeWidth ? 1 : 0;

    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
        index = 0,
        length = collection.length;

    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
        value,
        toggle,
        hooks,
        oldfire,
        propTween,
        restoreDisplay,
        display,
        isBox = "width" in props || "height" in props,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHiddenWithinTree(elem),
        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks

    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");

      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;

        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }

      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;

          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    } // Detect show/hide animations


    for (prop in props) {
      value = props[prop];

      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";

        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true; // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }

        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    } // Bail out if this is a no-op like .hide().hide()


    propTween = !jQuery.isEmptyObject(props);

    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    } // Restrict "overflow" and "display" styles during box animations


    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade

      restoreDisplay = dataShow && dataShow.display;

      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }

      display = jQuery.css(elem, "display");

      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      } // Animate inline elements as inline-block


      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });

            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }

          style.display = "inline-block";
        }
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    } // Implement show/hide animations


    propTween = false;

    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"


        if (toggle) {
          dataShow.hidden = !hidden;
        } // Show elements before animating them


        if (hidden) {
          showHide([elem], true);
        }
        /* eslint-disable no-loop-func */


        anim.done(function () {
          /* eslint-enable no-loop-func */
          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }

          dataPriv.remove(elem, "fxshow");

          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      } // Per-property setup


      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;

        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];

      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];

      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"

        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
        stopped,
        index = 0,
        length = Animation.prefilters.length,
        deferred = jQuery.Deferred().always(function () {
      // Don't match elem in the :animated selector
      delete tick.elem;
    }),
        tick = function tick() {
      if (stopped) {
        return false;
      }

      var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
      temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

      for (; index < length; index++) {
        animation.tweens[index].run(percent);
      }

      deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield

      if (percent < 1 && length) {
        return remaining;
      } // If this was an empty animation, synthesize a final progress notification


      if (!length) {
        deferred.notifyWith(elem, [animation, 1, 0]);
      } // Resolve the animation and report its conclusion


      deferred.resolveWith(elem, [animation]);
      return false;
    },
        animation = deferred.promise({
      elem: elem,
      props: jQuery.extend({}, properties),
      opts: jQuery.extend(true, {
        specialEasing: {},
        easing: jQuery.easing._default
      }, options),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function createTween(prop, end) {
        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
        animation.tweens.push(tween);
        return tween;
      },
      stop: function stop(gotoEnd) {
        var index = 0,
            // If we are going to the end, we want to run all the tweens
        // otherwise we skip this part
        length = gotoEnd ? animation.tweens.length : 0;

        if (stopped) {
          return this;
        }

        stopped = true;

        for (; index < length; index++) {
          animation.tweens[index].run(1);
        } // Resolve when we played the last frame; otherwise, reject


        if (gotoEnd) {
          deferred.notifyWith(elem, [animation, 1, 0]);
          deferred.resolveWith(elem, [animation, gotoEnd]);
        } else {
          deferred.rejectWith(elem, [animation, gotoEnd]);
        }

        return this;
      }
    }),
        props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }

        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    } // Attach callbacks from options


    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
          index = 0,
          length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    }; // Go to the end state if fx are off

    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    } // Normalize opt.queue - true/undefined/null -> "fx"


    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    } // Queueing


    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
          optall = jQuery.speed(speed, easing, callback),
          doAnimation = function doAnimation() {
        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

        if (empty || dataPriv.get(this, "finish")) {
          anim.stop(true);
        }
      };

      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }

      if (clearQueue) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        } // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.


        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }

      return this.each(function () {
        var index,
            data = dataPriv.get(this),
            queue = data[type + "queue"],
            hooks = data[type + "queueHooks"],
            timers = jQuery.timers,
            length = queue ? queue.length : 0; // Enable finishing flag on private data

        data.finish = true; // Empty the queue first

        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        } // Look for any active animations, and finish them


        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        } // Look for any animations in the old queue and finish them


        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        } // Turn off finishing flag


        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function (_i, name) {
    var cssFn = jQuery.fn[name];

    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  }); // Generate shortcuts for custom animations

  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];

  jQuery.fx.tick = function () {
    var timer,
        i = 0,
        timers = jQuery.timers;
    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)

      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }

    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;

  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  }; // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox"; // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE <=11 only
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: IE <=11 only
    // An input loses its value after becoming a radio

    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
          i = 0,
          // Attribute names can contain non-HTML whitespace characters
      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
      attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
          handle,
          lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }

      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }

          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  }); // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }

    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }

    return [];
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var type = _typeof(value),
          isValidValue = type === "string" || Array.isArray(value);

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          valueIsFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value; // Handle most common string cases

          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } // Handle cases where value is null/undef or number


          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE <=10 - 11 only
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              i,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one",
              values = one ? null : [],
              max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          } // Loop through all the selected options


          for (; i < max; i++) {
            option = options[i]; // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)

            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
            /* eslint-enable no-cond-assign */

          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  }); // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      stopPropagationCallback = function stopPropagationCallback(e) {
    e.stopPropagation();
  };

  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          lastElement,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  }); // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this.document || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  var location = window.location;
  var nonce = {
    guid: Date.now()
  };
  var rquery = /\?/; // Cross-browser xml parsing

  jQuery.parseXML = function (data) {
    var xml, parserErrorElem;

    if (!data || typeof data !== "string") {
      return null;
    } // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.


    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {}

    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];

    if (!xml || parserErrorElem) {
      jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {
        return el.textContent;
      }).join("\n") : data));
    }

    return xml;
  };

  var rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, valueOrFunction) {
      // If value is a function, invoke it and use its return value
      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
    };

    if (a == null) {
      return "";
    } // If an array was passed in, assume that it is an array of form elements.


    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (_i, elem) {
        var val = jQuery(this).val();

        if (val == null) {
          return null;
        }

        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }

        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  var r20 = /%20/g,
      rhash = /#.*$/,
      rantiCache = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
      // #7653, #8125, #8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},
      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
  allTypes = "*/".concat("*"),
      // Anchor tag for parsing the document origin
  originAnchor = document.createElement("a");
  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  } // Base inspection function for prefilters and transports


  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
        seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  } // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887


  function ajaxExtend(target, src) {
    var key,
        deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }

    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */


  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
        type,
        finalDataType,
        firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

    while (dataTypes[0] === "*") {
      dataTypes.shift();

      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    } // Check if we're dealing with a known content-type


    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    } // Check to see if we have a response for the expected dataType


    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }

        if (!firstDataType) {
          firstDataType = type;
        }
      } // Or just use first one


      finalDataType = finalDataType || firstDataType;
    } // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response


    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }

      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */


  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
        current,
        conv,
        tmp,
        prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift(); // Convert to each sequential dataType

    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      } // Apply the dataFilter if provided


      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev; // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");

              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }

                  break;
                }
              }
            }
          } // Apply converter (if not an equivalence)


          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s["throws"]) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return {
      state: "success",
      data: response
    };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ? // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      } // Force options to be an object


      options = options || {};

      var transport,
          // URL without anti-cache param
      cacheURL,
          // Response headers
      responseHeadersString,
          responseHeaders,
          // timeout handle
      timeoutTimer,
          // Url cleanup var
      urlAnchor,
          // Request state (becomes false upon send and true upon completion)
      completed,
          // To know if global events are to be dispatched
      fireGlobals,
          // Loop variable
      i,
          // uncached part of the url
      uncached,
          // Create the final options object
      s = jQuery.ajaxSetup({}, options),
          // Callbacks context
      callbackContext = s.context || s,
          // Context for global events is callbackContext if it is a DOM node or jQuery collection
      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
          // Deferreds
      deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),
          // Status-dependent callbacks
      _statusCode = s.statusCode || {},
          // Headers (they are sent all at once)
      requestHeaders = {},
          requestHeadersNames = {},
          // Default abort message
      strAbort = "canceled",
          // Fake xhr
      jqXHR = {
        readyState: 0,
        // Builds headers hashtable if needed
        getResponseHeader: function getResponseHeader(key) {
          var match;

          if (completed) {
            if (!responseHeaders) {
              responseHeaders = {};

              while (match = rheaders.exec(responseHeadersString)) {
                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
              }
            }

            match = responseHeaders[key.toLowerCase() + " "];
          }

          return match == null ? null : match.join(", ");
        },
        // Raw string
        getAllResponseHeaders: function getAllResponseHeaders() {
          return completed ? responseHeadersString : null;
        },
        // Caches the header
        setRequestHeader: function setRequestHeader(name, value) {
          if (completed == null) {
            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
            requestHeaders[name] = value;
          }

          return this;
        },
        // Overrides response content-type header
        overrideMimeType: function overrideMimeType(type) {
          if (completed == null) {
            s.mimeType = type;
          }

          return this;
        },
        // Status-dependent callbacks
        statusCode: function statusCode(map) {
          var code;

          if (map) {
            if (completed) {
              // Execute the appropriate callbacks
              jqXHR.always(map[jqXHR.status]);
            } else {
              // Lazy-add the new callbacks in a way that preserves old ones
              for (code in map) {
                _statusCode[code] = [_statusCode[code], map[code]];
              }
            }
          }

          return this;
        },
        // Cancel the request
        abort: function abort(statusText) {
          var finalText = statusText || strAbort;

          if (transport) {
            transport.abort(finalText);
          }

          done(0, finalText);
          return this;
        }
      }; // Attach deferreds


      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available

      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004

      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/

        try {
          urlAnchor.href = s.url; // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative

          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      } // Convert data if not already a string


      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      } // Apply prefilters


      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

      if (completed) {
        return jqXHR;
      } // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      } // Uppercase the type


      s.type = s.type.toUpperCase(); // Determine if request has content

      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation

      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content

      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url

        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

          delete s.data;
        } // Add or update anti-cache param if needed


        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
        } // Put hash and anti-cache on the URL that will be requested (gh-1732)


        s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }

        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      } // Set the correct header, if data is being sent


      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      } // Set the Accepts header for the server, depending on the dataType


      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      } // Allow custom headers/mimetypes and early abort


      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      } // Aborting is no longer a cancellation


      strAbort = "abort"; // Install callbacks on deferreds

      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error); // Get transport

      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1; // Send global event

        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        } // If request was aborted inside ajaxSend, stop there


        if (completed) {
          return jqXHR;
        } // Timeout


        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          } // Propagate others as results


          done(-1, e);
        }
      } // Callback for when everything is done


      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
            success,
            error,
            response,
            modified,
            statusText = nativeStatusText; // Ignore repeat invocations

        if (completed) {
          return;
        }

        completed = true; // Clear timeout if it exists

        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        } // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)


        transport = undefined; // Cache response headers

        responseHeadersString = headers || ""; // Set readyState

        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        } // Use a noop converter for missing script but not if jsonp


        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
          s.converters["text script"] = function () {};
        } // Convert no matter what (that way responseXXX fields are always set)


        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");

            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }

            modified = jqXHR.getResponseHeader("etag");

            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          } // if no content


          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent"; // if not modified
          } else if (status === 304) {
            statusText = "notmodified"; // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;

          if (status || !statusText) {
            statusText = "error";

            if (status < 0) {
              status = 0;
            }
          }
        } // Set data for the fake xhr object


        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        } // Status-dependent callbacks


        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        } // Complete


        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each(["get", "post"], function (_i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      } // The url can be an options object (which then must have .url)


      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });
  jQuery.ajaxPrefilter(function (s) {
    var i;

    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });

  jQuery._evalUrl = function (url, options, doc) {
    return jQuery.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function textScript() {}
      },
      dataFilter: function dataFilter(response) {
        jQuery.globalEval(response, options, doc);
      }
    });
  };

  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        } // The elements to wrap the target around


        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };

  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
    // File protocol always yields status code 0, assume 200
    0: 200,
    // Support: IE <=9 only
    // #1450: sometimes IE returns 1223 when it should be 204
    1223: 204
  },
      xhrSupported = jQuery.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest


    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
              xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          } // Override mime type if needed


          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          } // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.


          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          } // Set headers


          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          } // Callback


          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete( // File: protocol always yields status 0; see #8605, #14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          }; // Listen to events


          xhr.onload = _callback();
          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error"); // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts

          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          } // Create the abort callback


          _callback = _callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  }); // Install script dataType

  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function textScript(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  }); // Handle cache's special case and crossDomain

  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }

    if (s.crossDomain) {
      s.type = "GET";
    }
  }); // Bind script tag hack transport

  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, _callback2;

      return {
        send: function send(_, complete) {
          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback2 = function callback(evt) {
            script.remove();
            _callback2 = null;

            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          }); // Use native DOM manipulation to avoid our domManip AJAX trickery

          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback2) {
            _callback2();
          }
        }
      };
    }
  });
  var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    }
  }); // Detect, normalize options and install callbacks for jsonp requests

  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
        overwritten,
        responseContainer,
        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      } // Use data converter to retrieve json after script execution


      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }

        return responseContainer[0];
      }; // Force json dataType


      s.dataTypes[0] = "json"; // Install callback

      overwritten = window[callbackName];

      window[callbackName] = function () {
        responseContainer = arguments;
      }; // Clean-up function (fires after converters)


      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        } // Save back as free


        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

          oldCallbacks.push(callbackName);
        } // Call if it was a function and we have a response


        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      }); // Delegate to script

      return "script";
    }
  }); // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337

  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }(); // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string


  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)

        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };
  /**
   * Load a url into a page
   */


  jQuery.fn.load = function (url, params, callback) {
    var selector,
        type,
        response,
        self = this,
        off = url.indexOf(" ");

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    } // If it's a function


    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined; // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    } // If we have elements to modify, make the request


    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }

    return this;
  };

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var rect,
          win,
          elem = this[0];

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          doc,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // position:fixed elements are offset from the viewport, which itself always has zero offset

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified

        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;

        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }

        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;

        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  }); // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP

  var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g; // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon

  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = _slice.call(arguments, 2);

    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };

  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  };

  jQuery.trim = function (text) {
    return text == null ? "" : (text + "").replace(rtrim, "");
  }; // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon


  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return jQuery;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }

  var // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  }; // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)


  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});

/***/ }),

/***/ 358:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function (window, factory) {
  var lazySizes = factory(window, window.document, Date);
  window.lazySizes = lazySizes;

  if (( false ? 0 : _typeof(module)) == 'object' && module.exports) {
    module.exports = lazySizes;
  }
})(typeof window != 'undefined' ? window : {},
/**
 * import("./types/global")
 * @typedef { import("./types/lazysizes-config").LazySizesConfigPartial } LazySizesConfigPartial
 */
function l(window, document, Date) {
  // Pass in the window Date function also for SSR because the Date class can be lost
  'use strict';
  /*jshint eqnull:true */

  var lazysizes,
  /**
   * @type { LazySizesConfigPartial }
   */
  lazySizesCfg;

  (function () {
    var prop;
    var lazySizesDefaults = {
      lazyClass: 'lazyload',
      loadedClass: 'lazyloaded',
      loadingClass: 'lazyloading',
      preloadClass: 'lazypreload',
      errorClass: 'lazyerror',
      //strictClass: 'lazystrict',
      autosizesClass: 'lazyautosizes',
      fastLoadedClass: 'ls-is-cached',
      iframeLoadMode: 0,
      srcAttr: 'data-src',
      srcsetAttr: 'data-srcset',
      sizesAttr: 'data-sizes',
      //preloadAfterLoad: false,
      minSize: 40,
      customMedia: {},
      init: true,
      expFactor: 1.5,
      hFac: 0.8,
      loadMode: 2,
      loadHidden: true,
      ricTimeout: 0,
      throttleDelay: 125
    };
    lazySizesCfg = window.lazySizesConfig || window.lazysizesConfig || {};

    for (prop in lazySizesDefaults) {
      if (!(prop in lazySizesCfg)) {
        lazySizesCfg[prop] = lazySizesDefaults[prop];
      }
    }
  })();

  if (!document || !document.getElementsByClassName) {
    return {
      init: function init() {},

      /**
       * @type { LazySizesConfigPartial }
       */
      cfg: lazySizesCfg,

      /**
       * @type { true }
       */
      noSupport: true
    };
  }

  var docElem = document.documentElement;
  var supportPicture = window.HTMLPictureElement;
  var _addEventListener = 'addEventListener';
  var _getAttribute = 'getAttribute';
  /**
   * Update to bind to window because 'this' becomes null during SSR
   * builds.
   */

  var addEventListener = window[_addEventListener].bind(window);

  var setTimeout = window.setTimeout;
  var requestAnimationFrame = window.requestAnimationFrame || setTimeout;
  var requestIdleCallback = window.requestIdleCallback;
  var regPicture = /^picture$/i;
  var loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];
  var regClassCache = {};
  var forEach = Array.prototype.forEach;
  /**
   * @param ele {Element}
   * @param cls {string}
   */

  var hasClass = function hasClass(ele, cls) {
    if (!regClassCache[cls]) {
      regClassCache[cls] = new RegExp('(\\s|^)' + cls + '(\\s|$)');
    }

    return regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];
  };
  /**
   * @param ele {Element}
   * @param cls {string}
   */


  var addClass = function addClass(ele, cls) {
    if (!hasClass(ele, cls)) {
      ele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);
    }
  };
  /**
   * @param ele {Element}
   * @param cls {string}
   */


  var removeClass = function removeClass(ele, cls) {
    var reg;

    if (reg = hasClass(ele, cls)) {
      ele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));
    }
  };

  var addRemoveLoadEvents = function addRemoveLoadEvents(dom, fn, add) {
    var action = add ? _addEventListener : 'removeEventListener';

    if (add) {
      addRemoveLoadEvents(dom, fn);
    }

    loadEvents.forEach(function (evt) {
      dom[action](evt, fn);
    });
  };
  /**
   * @param elem { Element }
   * @param name { string }
   * @param detail { any }
   * @param noBubbles { boolean }
   * @param noCancelable { boolean }
   * @returns { CustomEvent }
   */


  var triggerEvent = function triggerEvent(elem, name, detail, noBubbles, noCancelable) {
    var event = document.createEvent('Event');

    if (!detail) {
      detail = {};
    }

    detail.instance = lazysizes;
    event.initEvent(name, !noBubbles, !noCancelable);
    event.detail = detail;
    elem.dispatchEvent(event);
    return event;
  };

  var updatePolyfill = function updatePolyfill(el, full) {
    var polyfill;

    if (!supportPicture && (polyfill = window.picturefill || lazySizesCfg.pf)) {
      if (full && full.src && !el[_getAttribute]('srcset')) {
        el.setAttribute('srcset', full.src);
      }

      polyfill({
        reevaluate: true,
        elements: [el]
      });
    } else if (full && full.src) {
      el.src = full.src;
    }
  };

  var getCSS = function getCSS(elem, style) {
    return (getComputedStyle(elem, null) || {})[style];
  };
  /**
   *
   * @param elem { Element }
   * @param parent { Element }
   * @param [width] {number}
   * @returns {number}
   */


  var getWidth = function getWidth(elem, parent, width) {
    width = width || elem.offsetWidth;

    while (width < lazySizesCfg.minSize && parent && !elem._lazysizesWidth) {
      width = parent.offsetWidth;
      parent = parent.parentNode;
    }

    return width;
  };

  var rAF = function () {
    var running, waiting;
    var firstFns = [];
    var secondFns = [];
    var fns = firstFns;

    var run = function run() {
      var runFns = fns;
      fns = firstFns.length ? secondFns : firstFns;
      running = true;
      waiting = false;

      while (runFns.length) {
        runFns.shift()();
      }

      running = false;
    };

    var rafBatch = function rafBatch(fn, queue) {
      if (running && !queue) {
        fn.apply(this, arguments);
      } else {
        fns.push(fn);

        if (!waiting) {
          waiting = true;
          (document.hidden ? setTimeout : requestAnimationFrame)(run);
        }
      }
    };

    rafBatch._lsFlush = run;
    return rafBatch;
  }();

  var rAFIt = function rAFIt(fn, simple) {
    return simple ? function () {
      rAF(fn);
    } : function () {
      var that = this;
      var args = arguments;
      rAF(function () {
        fn.apply(that, args);
      });
    };
  };

  var throttle = function throttle(fn) {
    var running;
    var lastTime = 0;
    var gDelay = lazySizesCfg.throttleDelay;
    var rICTimeout = lazySizesCfg.ricTimeout;

    var run = function run() {
      running = false;
      lastTime = Date.now();
      fn();
    };

    var idleCallback = requestIdleCallback && rICTimeout > 49 ? function () {
      requestIdleCallback(run, {
        timeout: rICTimeout
      });

      if (rICTimeout !== lazySizesCfg.ricTimeout) {
        rICTimeout = lazySizesCfg.ricTimeout;
      }
    } : rAFIt(function () {
      setTimeout(run);
    }, true);
    return function (isPriority) {
      var delay;

      if (isPriority = isPriority === true) {
        rICTimeout = 33;
      }

      if (running) {
        return;
      }

      running = true;
      delay = gDelay - (Date.now() - lastTime);

      if (delay < 0) {
        delay = 0;
      }

      if (isPriority || delay < 9) {
        idleCallback();
      } else {
        setTimeout(idleCallback, delay);
      }
    };
  }; //based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html


  var debounce = function debounce(func) {
    var timeout, timestamp;
    var wait = 99;

    var run = function run() {
      timeout = null;
      func();
    };

    var later = function later() {
      var last = Date.now() - timestamp;

      if (last < wait) {
        setTimeout(later, wait - last);
      } else {
        (requestIdleCallback || run)(run);
      }
    };

    return function () {
      timestamp = Date.now();

      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
    };
  };

  var loader = function () {
    var preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;
    var eLvW, elvH, eLtop, eLleft, eLright, eLbottom, isBodyHidden;
    var regImg = /^img$/i;
    var regIframe = /^iframe$/i;
    var supportScroll = 'onscroll' in window && !/(gle|ing)bot/.test(navigator.userAgent);
    var shrinkExpand = 0;
    var currentExpand = 0;
    var isLoading = 0;
    var lowRuns = -1;

    var resetPreloading = function resetPreloading(e) {
      isLoading--;

      if (!e || isLoading < 0 || !e.target) {
        isLoading = 0;
      }
    };

    var isVisible = function isVisible(elem) {
      if (isBodyHidden == null) {
        isBodyHidden = getCSS(document.body, 'visibility') == 'hidden';
      }

      return isBodyHidden || !(getCSS(elem.parentNode, 'visibility') == 'hidden' && getCSS(elem, 'visibility') == 'hidden');
    };

    var isNestedVisible = function isNestedVisible(elem, elemExpand) {
      var outerRect;
      var parent = elem;
      var visible = isVisible(elem);
      eLtop -= elemExpand;
      eLbottom += elemExpand;
      eLleft -= elemExpand;
      eLright += elemExpand;

      while (visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem) {
        visible = (getCSS(parent, 'opacity') || 1) > 0;

        if (visible && getCSS(parent, 'overflow') != 'visible') {
          outerRect = parent.getBoundingClientRect();
          visible = eLright > outerRect.left && eLleft < outerRect.right && eLbottom > outerRect.top - 1 && eLtop < outerRect.bottom + 1;
        }
      }

      return visible;
    };

    var checkElements = function checkElements() {
      var eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal, beforeExpandVal, defaultExpand, preloadExpand, hFac;
      var lazyloadElems = lazysizes.elements;

      if ((loadMode = lazySizesCfg.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)) {
        i = 0;
        lowRuns++;

        for (; i < eLlen; i++) {
          if (!lazyloadElems[i] || lazyloadElems[i]._lazyRace) {
            continue;
          }

          if (!supportScroll || lazysizes.prematureUnveil && lazysizes.prematureUnveil(lazyloadElems[i])) {
            unveilElement(lazyloadElems[i]);
            continue;
          }

          if (!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)) {
            elemExpand = currentExpand;
          }

          if (!defaultExpand) {
            defaultExpand = !lazySizesCfg.expand || lazySizesCfg.expand < 1 ? docElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370 : lazySizesCfg.expand;
            lazysizes._defEx = defaultExpand;
            preloadExpand = defaultExpand * lazySizesCfg.expFactor;
            hFac = lazySizesCfg.hFac;
            isBodyHidden = null;

            if (currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden) {
              currentExpand = preloadExpand;
              lowRuns = 0;
            } else if (loadMode > 1 && lowRuns > 1 && isLoading < 6) {
              currentExpand = defaultExpand;
            } else {
              currentExpand = shrinkExpand;
            }
          }

          if (beforeExpandVal !== elemExpand) {
            eLvW = innerWidth + elemExpand * hFac;
            elvH = innerHeight + elemExpand;
            elemNegativeExpand = elemExpand * -1;
            beforeExpandVal = elemExpand;
          }

          rect = lazyloadElems[i].getBoundingClientRect();

          if ((eLbottom = rect.bottom) >= elemNegativeExpand && (eLtop = rect.top) <= elvH && (eLright = rect.right) >= elemNegativeExpand * hFac && (eLleft = rect.left) <= eLvW && (eLbottom || eLright || eLleft || eLtop) && (lazySizesCfg.loadHidden || isVisible(lazyloadElems[i])) && (isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4) || isNestedVisible(lazyloadElems[i], elemExpand))) {
            unveilElement(lazyloadElems[i]);
            loadedSomething = true;

            if (isLoading > 9) {
              break;
            }
          } else if (!loadedSomething && isCompleted && !autoLoadElem && isLoading < 4 && lowRuns < 4 && loadMode > 2 && (preloadElems[0] || lazySizesCfg.preloadAfterLoad) && (preloadElems[0] || !elemExpandVal && (eLbottom || eLright || eLleft || eLtop || lazyloadElems[i][_getAttribute](lazySizesCfg.sizesAttr) != 'auto'))) {
            autoLoadElem = preloadElems[0] || lazyloadElems[i];
          }
        }

        if (autoLoadElem && !loadedSomething) {
          unveilElement(autoLoadElem);
        }
      }
    };

    var throttledCheckElements = throttle(checkElements);

    var switchLoadingClass = function switchLoadingClass(e) {
      var elem = e.target;

      if (elem._lazyCache) {
        delete elem._lazyCache;
        return;
      }

      resetPreloading(e);
      addClass(elem, lazySizesCfg.loadedClass);
      removeClass(elem, lazySizesCfg.loadingClass);
      addRemoveLoadEvents(elem, rafSwitchLoadingClass);
      triggerEvent(elem, 'lazyloaded');
    };

    var rafedSwitchLoadingClass = rAFIt(switchLoadingClass);

    var rafSwitchLoadingClass = function rafSwitchLoadingClass(e) {
      rafedSwitchLoadingClass({
        target: e.target
      });
    };

    var changeIframeSrc = function changeIframeSrc(elem, src) {
      var loadMode = elem.getAttribute('data-load-mode') || lazySizesCfg.iframeLoadMode; // loadMode can be also a string!

      if (loadMode == 0) {
        elem.contentWindow.location.replace(src);
      } else if (loadMode == 1) {
        elem.src = src;
      }
    };

    var handleSources = function handleSources(source) {
      var customMedia;

      var sourceSrcset = source[_getAttribute](lazySizesCfg.srcsetAttr);

      if (customMedia = lazySizesCfg.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) {
        source.setAttribute('media', customMedia);
      }

      if (sourceSrcset) {
        source.setAttribute('srcset', sourceSrcset);
      }
    };

    var lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg) {
      var src, srcset, parent, isPicture, event, firesLoad;

      if (!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented) {
        if (sizes) {
          if (isAuto) {
            addClass(elem, lazySizesCfg.autosizesClass);
          } else {
            elem.setAttribute('sizes', sizes);
          }
        }

        srcset = elem[_getAttribute](lazySizesCfg.srcsetAttr);
        src = elem[_getAttribute](lazySizesCfg.srcAttr);

        if (isImg) {
          parent = elem.parentNode;
          isPicture = parent && regPicture.test(parent.nodeName || '');
        }

        firesLoad = detail.firesLoad || 'src' in elem && (srcset || src || isPicture);
        event = {
          target: elem
        };
        addClass(elem, lazySizesCfg.loadingClass);

        if (firesLoad) {
          clearTimeout(resetPreloadingTimer);
          resetPreloadingTimer = setTimeout(resetPreloading, 2500);
          addRemoveLoadEvents(elem, rafSwitchLoadingClass, true);
        }

        if (isPicture) {
          forEach.call(parent.getElementsByTagName('source'), handleSources);
        }

        if (srcset) {
          elem.setAttribute('srcset', srcset);
        } else if (src && !isPicture) {
          if (regIframe.test(elem.nodeName)) {
            changeIframeSrc(elem, src);
          } else {
            elem.src = src;
          }
        }

        if (isImg && (srcset || isPicture)) {
          updatePolyfill(elem, {
            src: src
          });
        }
      }

      if (elem._lazyRace) {
        delete elem._lazyRace;
      }

      removeClass(elem, lazySizesCfg.lazyClass);
      rAF(function () {
        // Part of this can be removed as soon as this fix is older: https://bugs.chromium.org/p/chromium/issues/detail?id=7731 (2015)
        var isLoaded = elem.complete && elem.naturalWidth > 1;

        if (!firesLoad || isLoaded) {
          if (isLoaded) {
            addClass(elem, lazySizesCfg.fastLoadedClass);
          }

          switchLoadingClass(event);
          elem._lazyCache = true;
          setTimeout(function () {
            if ('_lazyCache' in elem) {
              delete elem._lazyCache;
            }
          }, 9);
        }

        if (elem.loading == 'lazy') {
          isLoading--;
        }
      }, true);
    });
    /**
     *
     * @param elem { Element }
     */

    var unveilElement = function unveilElement(elem) {
      if (elem._lazyRace) {
        return;
      }

      var detail;
      var isImg = regImg.test(elem.nodeName); //allow using sizes="auto", but don't use. it's invalid. Use data-sizes="auto" or a valid value for sizes instead (i.e.: sizes="80vw")

      var sizes = isImg && (elem[_getAttribute](lazySizesCfg.sizesAttr) || elem[_getAttribute]('sizes'));

      var isAuto = sizes == 'auto';

      if ((isAuto || !isCompleted) && isImg && (elem[_getAttribute]('src') || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesCfg.errorClass) && hasClass(elem, lazySizesCfg.lazyClass)) {
        return;
      }

      detail = triggerEvent(elem, 'lazyunveilread').detail;

      if (isAuto) {
        autoSizer.updateElem(elem, true, elem.offsetWidth);
      }

      elem._lazyRace = true;
      isLoading++;
      lazyUnveil(elem, detail, isAuto, sizes, isImg);
    };

    var afterScroll = debounce(function () {
      lazySizesCfg.loadMode = 3;
      throttledCheckElements();
    });

    var altLoadmodeScrollListner = function altLoadmodeScrollListner() {
      if (lazySizesCfg.loadMode == 3) {
        lazySizesCfg.loadMode = 2;
      }

      afterScroll();
    };

    var onload = function onload() {
      if (isCompleted) {
        return;
      }

      if (Date.now() - started < 999) {
        setTimeout(onload, 999);
        return;
      }

      isCompleted = true;
      lazySizesCfg.loadMode = 3;
      throttledCheckElements();
      addEventListener('scroll', altLoadmodeScrollListner, true);
    };

    return {
      _: function _() {
        started = Date.now();
        lazysizes.elements = document.getElementsByClassName(lazySizesCfg.lazyClass);
        preloadElems = document.getElementsByClassName(lazySizesCfg.lazyClass + ' ' + lazySizesCfg.preloadClass);
        addEventListener('scroll', throttledCheckElements, true);
        addEventListener('resize', throttledCheckElements, true);
        addEventListener('pageshow', function (e) {
          if (e.persisted) {
            var loadingElements = document.querySelectorAll('.' + lazySizesCfg.loadingClass);

            if (loadingElements.length && loadingElements.forEach) {
              requestAnimationFrame(function () {
                loadingElements.forEach(function (img) {
                  if (img.complete) {
                    unveilElement(img);
                  }
                });
              });
            }
          }
        });

        if (window.MutationObserver) {
          new MutationObserver(throttledCheckElements).observe(docElem, {
            childList: true,
            subtree: true,
            attributes: true
          });
        } else {
          docElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);

          docElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);

          setInterval(throttledCheckElements, 999);
        }

        addEventListener('hashchange', throttledCheckElements, true); //, 'fullscreenchange'

        ['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend'].forEach(function (name) {
          document[_addEventListener](name, throttledCheckElements, true);
        });

        if (/d$|^c/.test(document.readyState)) {
          onload();
        } else {
          addEventListener('load', onload);

          document[_addEventListener]('DOMContentLoaded', throttledCheckElements);

          setTimeout(onload, 20000);
        }

        if (lazysizes.elements.length) {
          checkElements();

          rAF._lsFlush();
        } else {
          throttledCheckElements();
        }
      },
      checkElems: throttledCheckElements,
      unveil: unveilElement,
      _aLSL: altLoadmodeScrollListner
    };
  }();

  var autoSizer = function () {
    var autosizesElems;
    var sizeElement = rAFIt(function (elem, parent, event, width) {
      var sources, i, len;
      elem._lazysizesWidth = width;
      width += 'px';
      elem.setAttribute('sizes', width);

      if (regPicture.test(parent.nodeName || '')) {
        sources = parent.getElementsByTagName('source');

        for (i = 0, len = sources.length; i < len; i++) {
          sources[i].setAttribute('sizes', width);
        }
      }

      if (!event.detail.dataAttr) {
        updatePolyfill(elem, event.detail);
      }
    });
    /**
     *
     * @param elem {Element}
     * @param dataAttr
     * @param [width] { number }
     */

    var getSizeElement = function getSizeElement(elem, dataAttr, width) {
      var event;
      var parent = elem.parentNode;

      if (parent) {
        width = getWidth(elem, parent, width);
        event = triggerEvent(elem, 'lazybeforesizes', {
          width: width,
          dataAttr: !!dataAttr
        });

        if (!event.defaultPrevented) {
          width = event.detail.width;

          if (width && width !== elem._lazysizesWidth) {
            sizeElement(elem, parent, event, width);
          }
        }
      }
    };

    var updateElementsSizes = function updateElementsSizes() {
      var i;
      var len = autosizesElems.length;

      if (len) {
        i = 0;

        for (; i < len; i++) {
          getSizeElement(autosizesElems[i]);
        }
      }
    };

    var debouncedUpdateElementsSizes = debounce(updateElementsSizes);
    return {
      _: function _() {
        autosizesElems = document.getElementsByClassName(lazySizesCfg.autosizesClass);
        addEventListener('resize', debouncedUpdateElementsSizes);
      },
      checkElems: debouncedUpdateElementsSizes,
      updateElem: getSizeElement
    };
  }();

  var init = function init() {
    if (!init.i && document.getElementsByClassName) {
      init.i = true;

      autoSizer._();

      loader._();
    }
  };

  setTimeout(function () {
    if (lazySizesCfg.init) {
      init();
    }
  });
  lazysizes = {
    /**
     * @type { LazySizesConfigPartial }
     */
    cfg: lazySizesCfg,
    autoSizer: autoSizer,
    loader: loader,
    init: init,
    uP: updatePolyfill,
    aC: addClass,
    rC: removeClass,
    hC: hasClass,
    fire: triggerEvent,
    gW: getWidth,
    rAF: rAF
  };
  return lazysizes;
});

/***/ }),

/***/ 9:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  define(Gp, iteratorSymbol, function () {
    return this;
  });
  define(Gp, "toString", function () {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
( false ? 0 : _typeof(module)) === "object" ? module.exports : {});

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

/***/ }),

/***/ 858:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var _require = __webpack_require__(311),
    snackbar = _require.snackbar;

var h = __webpack_require__(699);

var options = __webpack_require__(684);

var numbers = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "zero", "ten", "eleven"];

var Snackbar = /*#__PURE__*/function () {
  function Snackbar(color, icon, duration, positionX, positionY, fontColor, fontTone, shape, speed) {
    _classCallCheck(this, Snackbar);

    this.color = color, this.icon = icon, this.duration = duration, this.positionX = positionX, this.positionY = positionY, this.fontColor = fontColor, this.fontTone = fontTone, this.shape = shape, this.speed = speed, this.buttons = [], this.html, this.id, this.title, this.message;
  }

  _createClass(Snackbar, [{
    key: "as",
    value: function as(shape) {
      this.shape = shape;
      return this;
    }
  }, {
    key: "for",
    value: function _for(ms) {
      this.duration = ms;
      return this;
    }
  }, {
    key: "from",
    value: function from(positionY) {
      var positionX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.positionX;
      this.positionY = positionY;
      this.positionX = positionX;
      return this;
    }
  }, {
    key: "with",
    value: function _with(params) {
      var _this = this;

      Object.keys(params).forEach(function (p) {
        var object = params;

        if (options.includes(p)) {
          _this[p] = object[p];
        }
      });
      return this;
    }
  }, {
    key: "default",
    value: function _default(title, message) {
      this.title = title;
      this.message = message;
      return this;
    }
  }, {
    key: "danger",
    value: function danger(title, message) {
      this.title = title;
      this.message = message;
      this.color = "red";
      this.fontColor = "gray";
      this.icon = "fas fa-hand-paper";
      return this;
    }
  }, {
    key: "success",
    value: function success(title, message) {
      this.title = title;
      this.message = message;
      this.color = "green";
      this.fontColor = "gray";
      this.icon = "fas fa-check";
      return this;
    }
  }, {
    key: "warning",
    value: function warning(title, message) {
      this.title = title;
      this.message = message;
      this.color = "yellow";
      this.fontColor = "gray";
      this.icon = "fas fa-exclamation-triangle";
      return this;
    }
  }, {
    key: "addButtons",
    value: function addButtons() {
      for (var _len = arguments.length, buttonObjects = new Array(_len), _key = 0; _key < _len; _key++) {
        buttonObjects[_key] = arguments[_key];
      }

      this.buttons = buttonObjects;
      return this;
    }
  }, {
    key: "hide",
    value: function hide() {
      var snackbar = document.querySelector("#" + this.id);
      snackbar.classList.remove("".concat(this.positionY === "top" ? "translate-y-36" : "-translate-y-36"));
      snackbar.classList.add("".concat(this.positionY === "top" ? "-translate-y-36" : "translate-y-36"));
      setTimeout(function () {
        snackbar.remove();
      }, this.speed + 100);
    }
  }, {
    key: "show",
    value: function show() {
      var _this2 = this;

      this.shape = this.shape === "pill" ? "rounded-full" : "rounded";
      var wrapper = document.createElement("DIV");
      wrapper.classList = "z-10 fixed ease-in-out transform duration-".concat(this.speed, " -").concat(this.positionY, "-24 flex justify-").concat(this.positionX, " w-full");
      wrapper.innerHTML = "<div class=\"twsnackbar mx-4 text-".concat(this.fontColor, "-").concat(this.fontTone, " px-6 py-4 border-0 ").concat(this.shape, " relative mb-4 ").concat(this.color, " flex items-center justify-center\">\n              <span class=\"text-xl inline-block mr-5\">\n                <i class=\"").concat(this.icon, "\"></i>\n              </span>\n              <span class=\"inline-block mr-8\">\n                <b class=\"title\">").concat(this.title, "</b> ").concat(this.message, "\n              </span>\n              <div id=\"buttons\" class=\"flex justify-center items-center\">\n              </div>\n            </div>");
      this.id = "tawilwind-snackbar-".concat(numbers[Math.floor(Math.random() * Math.floor(11))]);
      wrapper.id = this.id;
      var buttonWrapper = wrapper.querySelector(".twsnackbar").querySelector("#buttons");
      this.buttons.forEach(function (button) {
        var newButton = document.createElement("DIV");
        newButton.classList = "cursor-pointer p-2 rounded flex justify-center items-center";
        newButton.innerHTML = "<b class=\"uppercase\"> ".concat(Object.keys(button)[0], "</b>");
        newButton.onclick = Object.values(button)[0];
        buttonWrapper.append(newButton);
      });
      document.body.prepend(wrapper);
      var snackbar = document.querySelector("#" + this.id);
      console.log(snackbar);
      setTimeout(function () {
        document.querySelector("#" + _this2.id).classList.add("".concat(_this2.positionY === "top" ? "translate-y-36" : "-translate-y-36"));
      }, 1);
      setTimeout(function () {
        var snackbar = document.querySelector("#" + _this2.id);
        snackbar.classList.remove("".concat(_this2.positionY === "top" ? "-translate-y-36" : "translate-y-36"));
        snackbar.classList.add("".concat(_this2.positionY === "top" ? "translate-y-36" : "-translate-y-36"));
      }, this.duration);
      setTimeout(function () {
        snackbar.remove();
      }, this.duration + this.speed + 100);
    }
  }]);

  return Snackbar;
}();

module.exports = Snackbar;

/***/ }),

/***/ 846:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var h = __webpack_require__(699);

var options = __webpack_require__(684);

var numbers = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "zero", "ten", "eleven"];

var Toast = /*#__PURE__*/function () {
  function Toast(color, icon, duration, positionX, positionY, fontColor, fontTone, shape, speed) {
    _classCallCheck(this, Toast);

    this.color = color, this.icon = icon, this.duration = duration, this.positionX = positionX, this.positionY = positionY, this.fontColor = fontColor, this.fontTone = fontTone, this.shape = shape, this.speed = speed, this.buttons = [], this.html, this.id, this.title, this.message;
  }

  _createClass(Toast, [{
    key: "as",
    value: function as(shape) {
      this.shape = shape;
      return this;
    }
  }, {
    key: "for",
    value: function _for(ms) {
      this.duration = ms;
      return this;
    }
  }, {
    key: "from",
    value: function from(positionY) {
      var positionX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.positionX;
      this.positionY = positionY;
      this.positionX = positionX;
      return this;
    }
  }, {
    key: "with",
    value: function _with(params) {
      var _this = this;

      Object.keys(params).forEach(function (p) {
        var object = params;

        if (options.includes(p)) {
          _this[p] = object[p];
        }
      });
      return this;
    }
  }, {
    key: "default",
    value: function _default(title, message) {
      this.title = title;
      this.message = message;
      return this;
    }
  }, {
    key: "danger",
    value: function danger(title, message) {
      this.title = title;
      this.message = message;
      this.color = "red";
      this.fontColor = "gray";
      this.icon = "fas fa-hand-paper";
      return this;
    }
  }, {
    key: "success",
    value: function success(title, message) {
      this.title = title;
      this.message = message;
      this.color = "green";
      this.fontColor = "gray";
      this.icon = "fas fa-check";
      return this;
    }
  }, {
    key: "warning",
    value: function warning(title, message) {
      this.title = title;
      this.message = message;
      this.color = "yellow";
      this.fontColor = "gray";
      this.icon = "fas fa-exclamation-triangle";
      return this;
    }
  }, {
    key: "show",
    value: function show() {
      var _this2 = this;

      this.shape = this.shape === "pill" ? "rounded-full" : "rounded";
      var wrapper = document.createElement("DIV");
      wrapper.classList = "z-50 fixed ease-in-out transform duration-".concat(this.speed, " -").concat(this.positionY, "-24 flex justify-").concat(this.positionX, " w-full");
      wrapper.innerHTML = "<div class=\"twthis mx-4 text-".concat(this.fontColor, "-").concat(this.fontTone, " px-6 py-4 border-0 ").concat(this.shape, " relative mb-4 ").concat(this.color, "\">\n      <span class=\"text-xl inline-block mr-5 align-middle\">\n        <i class=\"").concat(this.icon, "\"></i>\n      </span>\n      <span class=\"inline-block align-middle mr-8\">\n        <b class=\"title\">").concat(this.title, "</b> ").concat(this.message, "\n      </span>\n    </div>");
      this.id = "tawilwind-toast-".concat(numbers[Math.floor(Math.random() * Math.floor(11))]);
      wrapper.id = this.id;
      document.body.prepend(wrapper);
      var toast = document.querySelector("#" + this.id);
      setTimeout(function () {
        toast.classList.add("".concat(_this2.positionY === "top" ? "translate-y-36" : "-translate-y-36"));
      }, 1);
      setTimeout(function () {
        var toast = document.querySelector("#" + _this2.id);
        toast.classList.remove("".concat(_this2.positionY === "top" ? "-translate-y-36" : "translate-y-36"));
        toast.classList.add("".concat(_this2.positionY === "top" ? "translate-y-36" : "-translate-y-36"));
      }, this.duration);
      setTimeout(function () {
        toast.remove();
      }, this.duration + this.speed + 100);
    }
  }]);

  return Toast;
}();

module.exports = Toast;

/***/ }),

/***/ 806:
/***/ (() => {

{
  //default values
  modules: [//custom modules
  ];
}

/***/ }),

/***/ 311:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var config = __webpack_require__(806);

var Toast = __webpack_require__(846);

var Snackbar = __webpack_require__(858);

if (config.methods) {
  config.methods.forEach(function (method) {
    eval("Toast.prototype." + Object.keys(method)[0] + " = " + Object.values(method));
    eval("Snackbar.prototype." + Object.keys(method)[0] + " = " + Object.values(method));
  });
}

module.exports = {
  toast: function toast() {
    return new Toast(config.color ? config.color : "blue-500", config.icon ? config.icon : "fas fa-bell", config.duration ? config.duration : 3000, config.positionX ? config.positionX : "center", config.positionY ? config.positionY : "top", config.fontColor ? config.fontColor : "grey", config.fontTone ? config.fontTone : 100, config.shape ? config.shape : "square", config.speed ? config.speed : 500);
  },
  snackbar: function snackbar() {
    return new Snackbar(config.color ? config.color : "blue-500", config.icon ? config.icon : "fas fa-bell", config.duration ? config.duration : 3000, config.positionX ? config.positionX : "center", config.positionY ? config.positionY : "top", config.fontColor ? config.fontColor : "grey", config.fontTone ? config.fontTone : 100, config.shape ? config.shape : "square", config.speed ? config.speed : 500);
  }
};

/***/ }),

/***/ 699:
/***/ ((module) => {

function getFile(file) {
  var x = new XMLHttpRequest();
  x.open('GET', file, false);
  x.send();
  return x.responseText;
}

module.exports = {
  getFile: getFile
};

/***/ }),

/***/ 526:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * Toastify js 1.11.2
 * https://github.com/apvarun/toastify-js
 * @license MIT licensed
 *
 * Copyright (C) 2018 Varun A P
 */
(function (root, factory) {
  if (( false ? 0 : _typeof(module)) === "object" && module.exports) {
    module.exports = factory();
  } else {
    root.Toastify = factory();
  }
})(this, function (global) {
  // Object initialization
  var Toastify = function Toastify(options) {
    // Returning a new init object
    return new Toastify.lib.init(options);
  },
      // Library version
  version = "1.11.2"; // Set the default global options


  Toastify.defaults = {
    oldestFirst: true,
    text: "Toastify is awesome!",
    node: undefined,
    duration: 3000,
    selector: undefined,
    callback: function callback() {},
    destination: undefined,
    newWindow: false,
    close: false,
    gravity: "toastify-top",
    positionLeft: false,
    position: '',
    backgroundColor: '',
    avatar: "",
    className: "",
    stopOnFocus: true,
    onClick: function onClick() {},
    offset: {
      x: 0,
      y: 0
    },
    escapeMarkup: true,
    style: {
      background: ''
    }
  }; // Defining the prototype of the object

  Toastify.lib = Toastify.prototype = {
    toastify: version,
    constructor: Toastify,
    // Initializing the object with required parameters
    init: function init(options) {
      // Verifying and validating the input object
      if (!options) {
        options = {};
      } // Creating the options object


      this.options = {};
      this.toastElement = null; // Validating the options

      this.options.text = options.text || Toastify.defaults.text; // Display message

      this.options.node = options.node || Toastify.defaults.node; // Display content as node

      this.options.duration = options.duration === 0 ? 0 : options.duration || Toastify.defaults.duration; // Display duration

      this.options.selector = options.selector || Toastify.defaults.selector; // Parent selector

      this.options.callback = options.callback || Toastify.defaults.callback; // Callback after display

      this.options.destination = options.destination || Toastify.defaults.destination; // On-click destination

      this.options.newWindow = options.newWindow || Toastify.defaults.newWindow; // Open destination in new window

      this.options.close = options.close || Toastify.defaults.close; // Show toast close icon

      this.options.gravity = options.gravity === "bottom" ? "toastify-bottom" : Toastify.defaults.gravity; // toast position - top or bottom

      this.options.positionLeft = options.positionLeft || Toastify.defaults.positionLeft; // toast position - left or right

      this.options.position = options.position || Toastify.defaults.position; // toast position - left or right

      this.options.backgroundColor = options.backgroundColor || Toastify.defaults.backgroundColor; // toast background color

      this.options.avatar = options.avatar || Toastify.defaults.avatar; // img element src - url or a path

      this.options.className = options.className || Toastify.defaults.className; // additional class names for the toast

      this.options.stopOnFocus = options.stopOnFocus === undefined ? Toastify.defaults.stopOnFocus : options.stopOnFocus; // stop timeout on focus

      this.options.onClick = options.onClick || Toastify.defaults.onClick; // Callback after click

      this.options.offset = options.offset || Toastify.defaults.offset; // toast offset

      this.options.escapeMarkup = options.escapeMarkup !== undefined ? options.escapeMarkup : Toastify.defaults.escapeMarkup;
      this.options.style = options.style || Toastify.defaults.style;

      if (options.backgroundColor) {
        this.options.style.background = options.backgroundColor;
      } // Returning the current object for chaining functions


      return this;
    },
    // Building the DOM element
    buildToast: function buildToast() {
      // Validating if the options are defined
      if (!this.options) {
        throw "Toastify is not initialized";
      } // Creating the DOM object


      var divElement = document.createElement("div");
      divElement.className = "toastify on " + this.options.className; // Positioning toast to left or right or center

      if (!!this.options.position) {
        divElement.className += " toastify-" + this.options.position;
      } else {
        // To be depreciated in further versions
        if (this.options.positionLeft === true) {
          divElement.className += " toastify-left";
          console.warn('Property `positionLeft` will be depreciated in further versions. Please use `position` instead.');
        } else {
          // Default position
          divElement.className += " toastify-right";
        }
      } // Assigning gravity of element


      divElement.className += " " + this.options.gravity;

      if (this.options.backgroundColor) {
        // This is being deprecated in favor of using the style HTML DOM property
        console.warn('DEPRECATION NOTICE: "backgroundColor" is being deprecated. Please use the "style.background" property.');
      } // Loop through our style object and apply styles to divElement


      for (var property in this.options.style) {
        divElement.style[property] = this.options.style[property];
      } // Adding the toast message/node


      if (this.options.node && this.options.node.nodeType === Node.ELEMENT_NODE) {
        // If we have a valid node, we insert it
        divElement.appendChild(this.options.node);
      } else {
        if (this.options.escapeMarkup) {
          divElement.innerText = this.options.text;
        } else {
          divElement.innerHTML = this.options.text;
        }

        if (this.options.avatar !== "") {
          var avatarElement = document.createElement("img");
          avatarElement.src = this.options.avatar;
          avatarElement.className = "toastify-avatar";

          if (this.options.position == "left" || this.options.positionLeft === true) {
            // Adding close icon on the left of content
            divElement.appendChild(avatarElement);
          } else {
            // Adding close icon on the right of content
            divElement.insertAdjacentElement("afterbegin", avatarElement);
          }
        }
      } // Adding a close icon to the toast


      if (this.options.close === true) {
        // Create a span for close element
        var closeElement = document.createElement("span");
        closeElement.innerHTML = "&#10006;";
        closeElement.className = "toast-close"; // Triggering the removal of toast from DOM on close click

        closeElement.addEventListener("click", function (event) {
          event.stopPropagation();
          this.removeElement(this.toastElement);
          window.clearTimeout(this.toastElement.timeOutValue);
        }.bind(this)); //Calculating screen width

        var width = window.innerWidth > 0 ? window.innerWidth : screen.width; // Adding the close icon to the toast element
        // Display on the right if screen width is less than or equal to 360px

        if ((this.options.position == "left" || this.options.positionLeft === true) && width > 360) {
          // Adding close icon on the left of content
          divElement.insertAdjacentElement("afterbegin", closeElement);
        } else {
          // Adding close icon on the right of content
          divElement.appendChild(closeElement);
        }
      } // Clear timeout while toast is focused


      if (this.options.stopOnFocus && this.options.duration > 0) {
        var self = this; // stop countdown

        divElement.addEventListener("mouseover", function (event) {
          window.clearTimeout(divElement.timeOutValue);
        }); // add back the timeout

        divElement.addEventListener("mouseleave", function () {
          divElement.timeOutValue = window.setTimeout(function () {
            // Remove the toast from DOM
            self.removeElement(divElement);
          }, self.options.duration);
        });
      } // Adding an on-click destination path


      if (typeof this.options.destination !== "undefined") {
        divElement.addEventListener("click", function (event) {
          event.stopPropagation();

          if (this.options.newWindow === true) {
            window.open(this.options.destination, "_blank");
          } else {
            window.location = this.options.destination;
          }
        }.bind(this));
      }

      if (typeof this.options.onClick === "function" && typeof this.options.destination === "undefined") {
        divElement.addEventListener("click", function (event) {
          event.stopPropagation();
          this.options.onClick();
        }.bind(this));
      } // Adding offset


      if (_typeof(this.options.offset) === "object") {
        var x = getAxisOffsetAValue("x", this.options);
        var y = getAxisOffsetAValue("y", this.options);
        var xOffset = this.options.position == "left" ? x : "-" + x;
        var yOffset = this.options.gravity == "toastify-top" ? y : "-" + y;
        divElement.style.transform = "translate(" + xOffset + "," + yOffset + ")";
      } // Returning the generated element


      return divElement;
    },
    // Displaying the toast
    showToast: function showToast() {
      // Creating the DOM object for the toast
      this.toastElement = this.buildToast(); // Getting the root element to with the toast needs to be added

      var rootElement;

      if (typeof this.options.selector === "string") {
        rootElement = document.getElementById(this.options.selector);
      } else if (this.options.selector instanceof HTMLElement || typeof ShadowRoot !== 'undefined' && this.options.selector instanceof ShadowRoot) {
        rootElement = this.options.selector;
      } else {
        rootElement = document.body;
      } // Validating if root element is present in DOM


      if (!rootElement) {
        throw "Root element is not defined";
      } // Adding the DOM element


      var elementToInsert = Toastify.defaults.oldestFirst ? rootElement.firstChild : rootElement.lastChild;
      rootElement.insertBefore(this.toastElement, elementToInsert); // Repositioning the toasts in case multiple toasts are present

      Toastify.reposition();

      if (this.options.duration > 0) {
        this.toastElement.timeOutValue = window.setTimeout(function () {
          // Remove the toast from DOM
          this.removeElement(this.toastElement);
        }.bind(this), this.options.duration); // Binding `this` for function invocation
      } // Supporting function chaining


      return this;
    },
    hideToast: function hideToast() {
      if (this.toastElement.timeOutValue) {
        clearTimeout(this.toastElement.timeOutValue);
      }

      this.removeElement(this.toastElement);
    },
    // Removing the element from the DOM
    removeElement: function removeElement(toastElement) {
      // Hiding the element
      // toastElement.classList.remove("on");
      toastElement.className = toastElement.className.replace(" on", ""); // Removing the element from DOM after transition end

      window.setTimeout(function () {
        // remove options node if any
        if (this.options.node && this.options.node.parentNode) {
          this.options.node.parentNode.removeChild(this.options.node);
        } // Remove the element from the DOM, only when the parent node was not removed before.


        if (toastElement.parentNode) {
          toastElement.parentNode.removeChild(toastElement);
        } // Calling the callback function


        this.options.callback.call(toastElement); // Repositioning the toasts again

        Toastify.reposition();
      }.bind(this), 400); // Binding `this` for function invocation
    }
  }; // Positioning the toasts on the DOM

  Toastify.reposition = function () {
    // Top margins with gravity
    var topLeftOffsetSize = {
      top: 15,
      bottom: 15
    };
    var topRightOffsetSize = {
      top: 15,
      bottom: 15
    };
    var offsetSize = {
      top: 15,
      bottom: 15
    }; // Get all toast messages on the DOM

    var allToasts = document.getElementsByClassName("toastify");
    var classUsed; // Modifying the position of each toast element

    for (var i = 0; i < allToasts.length; i++) {
      // Getting the applied gravity
      if (containsClass(allToasts[i], "toastify-top") === true) {
        classUsed = "toastify-top";
      } else {
        classUsed = "toastify-bottom";
      }

      var height = allToasts[i].offsetHeight;
      classUsed = classUsed.substr(9, classUsed.length - 1); // Spacing between toasts

      var offset = 15;
      var width = window.innerWidth > 0 ? window.innerWidth : screen.width; // Show toast in center if screen with less than or equal to 360px

      if (width <= 360) {
        // Setting the position
        allToasts[i].style[classUsed] = offsetSize[classUsed] + "px";
        offsetSize[classUsed] += height + offset;
      } else {
        if (containsClass(allToasts[i], "toastify-left") === true) {
          // Setting the position
          allToasts[i].style[classUsed] = topLeftOffsetSize[classUsed] + "px";
          topLeftOffsetSize[classUsed] += height + offset;
        } else {
          // Setting the position
          allToasts[i].style[classUsed] = topRightOffsetSize[classUsed] + "px";
          topRightOffsetSize[classUsed] += height + offset;
        }
      }
    } // Supporting function chaining


    return this;
  }; // Helper function to get offset.


  function getAxisOffsetAValue(axis, options) {
    if (options.offset[axis]) {
      if (isNaN(options.offset[axis])) {
        return options.offset[axis];
      } else {
        return options.offset[axis] + 'px';
      }
    }

    return '0px';
  }

  function containsClass(elem, yourClass) {
    if (!elem || typeof yourClass !== "string") {
      return false;
    } else if (elem.className && elem.className.trim().split(/\s+/gi).indexOf(yourClass) > -1) {
      return true;
    } else {
      return false;
    }
  } // Setting up the prototype for the init object


  Toastify.lib.init.prototype = Toastify.lib; // Returning the Toastify function to be assigned to the window object/module

  return Toastify;
});

/***/ }),

/***/ 883:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(570);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(743);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*\n! tailwindcss v3.0.24 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput:-ms-input-placeholder, textarea:-ms-input-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/*\nEnsure the default browser behavior of the `hidden` attribute.\n*/\n\n[hidden] {\n  display: none;\n}\r\n    * {\r\n        font-family: sans-serif;\r\n    }\r\n\r\n    body {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\n\n*, ::before, ::after {\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\r\n.container {\n  width: 100%;\n}\r\n@media (min-width: 640px) {\n\n  .container {\n    max-width: 640px;\n  }\n}\r\n@media (min-width: 768px) {\n\n  .container {\n    max-width: 768px;\n  }\n}\r\n@media (min-width: 1024px) {\n\n  .container {\n    max-width: 1024px;\n  }\n}\r\n@media (min-width: 1280px) {\n\n  .container {\n    max-width: 1280px;\n  }\n}\r\n@media (min-width: 1536px) {\n\n  .container {\n    max-width: 1536px;\n  }\n}\r\n.skip-link {\n  clip: rect(1px,1px,1px,1px);\n  display: block;\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  width: 1px;\n  z-index: 999;\n}\r\n.skip-link:focus {\n  clip: auto;\n  height: auto;\n  overflow: visible;\n  width: auto;\n}\r\n/* be careful what selector you write for */\r\n/* these styles are applyng just for card item card-item */\r\n.card-league {\n  margin-left: 1.25rem;\n  margin-right: 1.25rem;\n  max-width: 20rem;\n  border-radius: 0.5rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n  padding-left: 2rem;\n  padding-right: 2rem;\n  padding-top: 2.5rem;\n  padding-bottom: 2.5rem;\n  text-align: center;\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.card-league h2 {\n  margin-top: 1rem;\n  font-size: 1.5rem;\n  line-height: 2rem;\n  font-weight: 700;\n}\r\n.card-league p {\n  margin-top: 1rem;\n}\r\n.card-game {\n  margin-left: 5rem;\n  margin-right: 5rem;\n  margin-top: 5rem;\n  border-radius: 0.5rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n  padding-left: 3.5rem;\n  padding-right: 3.5rem;\n  padding-top: 2.5rem;\n  padding-bottom: 2.5rem;\n  text-align: center;\n  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.card-comment {\n  margin-left: 1.25rem;\n  margin-right: 1.25rem;\n  margin-top: 5rem;\n  height: 8rem;\n  width: 16rem;\n  border-radius: 0.5rem;\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n  padding-left: 2.5rem;\n  padding-right: 2.5rem;\n  padding-top: 0.5rem;\n  text-align: center;\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n/* end card-item */\r\n/* detail-league-page style */\r\n.detailLeague, .detailLeague p {\n  margin-bottom: 2.75rem;\n  text-align: center;\n  font-weight: 700;\n}\r\n#table-header {\n  margin: 1.5rem;\n  border-collapse: collapse;\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(100 116 139 / var(--tw-border-opacity));\n  text-align: center;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\r\nthead {\n  font-size: 0.75rem;\n  line-height: 1rem;\n  text-transform: uppercase;\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\r\ntr>th {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n  padding-top: 1.5rem;\n  padding-bottom: 1.5rem;\n}\r\ntbody {\n  border-collapse: collapse;\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(100 116 139 / var(--tw-border-opacity));\n}\r\ntbody>th {\n  white-space: nowrap;\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\r\n/* Info Player  */\r\n.info {\r\n        min-width: 12.5rem;\r\n        margin: 1rem;\r\n        max-width: 24rem;\r\n        border-radius: 0.75rem;\r\n        --tw-bg-opacity: 1;\r\n        background-color: rgb(255 255 255 / var(--tw-bg-opacity));\r\n        padding: 1.75rem;\r\n    }\r\n.info td:first-child {\n  font-weight: 700;\n}\r\n/* accordion for tab players  */\r\n.accordion-content {\r\n        transition: max-height 0.3s ease-out, padding 0.3s ease;\r\n    }\r\n/* dark mode  */\r\n.dark .side-top {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\r\n.dark .text-next-match span i {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n.dark button[id^=\"select\"] {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\r\n.dark .item-list {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\r\n.dark .list-history tbody {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\r\n/* these styles are applying just for footer */\r\nnav img {\n  height: 2rem;\n}\r\nfooter p {\n  margin-top: 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\r\nfooter h3 {\n  margin-bottom: 1rem;\n  font-size: 1.5rem;\n  line-height: 2rem;\n  font-weight: 700;\n  --tw-text-opacity: 1;\n  color: rgb(7 89 133 / var(--tw-text-opacity));\n}\r\nfooter form {\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 42rem;\n  padding: 1rem;\n}\r\nfooter label {\n  display: block;\n}\r\nfooter input, footer textarea {\n  margin-top: 0.25rem;\n  width: 100%;\n  resize: none;\n  border-radius: 0.375rem;\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\r\nfooter button {\n  display: inline-block;\n  border-radius: 9999px;\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n  font-weight: 700;\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n.footer-col ul li {\n  margin-bottom: 1.5rem;\n  display: flex;\n  gap: 1.25rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n@media (min-width: 768px) {\n\n  .footer-col ul li {\n    font-size: 1.5rem;\n    line-height: 2rem;\n  }\n}\r\n/* end footer */\r\n.fade-in {\n  opacity: 0;\n}\r\n.fade-in.lazyloaded {\n  opacity: 1;\r\n        transition: opacity 3000ms 300ms;\n}\r\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\r\n.fixed {\n  position: fixed;\n}\r\n.absolute {\n  position: absolute;\n}\r\n.relative {\n  position: relative;\n}\r\n.bottom-10 {\n  bottom: 2.5rem;\n}\r\n.right-8 {\n  right: 2rem;\n}\r\n.right-5 {\n  right: 1.25rem;\n}\r\n.bottom-5 {\n  bottom: 1.25rem;\n}\r\n.top-0 {\n  top: 0px;\n}\r\n.left-1\\/3 {\n  left: 33.333333%;\n}\r\n.z-10 {\n  z-index: 10;\n}\r\n.col-span-full {\n  grid-column: 1 / -1;\n}\r\n.col-span-2 {\n  grid-column: span 2 / span 2;\n}\r\n.m-auto {\n  margin: auto;\n}\r\n.m-4 {\n  margin: 1rem;\n}\r\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\r\n.my-auto {\n  margin-top: auto;\n  margin-bottom: auto;\n}\r\n.my-\\[5px\\] {\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\r\n.my-5 {\n  margin-top: 1.25rem;\n  margin-bottom: 1.25rem;\n}\r\n.my-10 {\n  margin-top: 2.5rem;\n  margin-bottom: 2.5rem;\n}\r\n.my-20 {\n  margin-top: 5rem;\n  margin-bottom: 5rem;\n}\r\n.mx-5 {\n  margin-left: 1.25rem;\n  margin-right: 1.25rem;\n}\r\n.mx-7 {\n  margin-left: 1.75rem;\n  margin-right: 1.75rem;\n}\r\n.-mx-1\\.5 {\n  margin-left: -0.375rem;\n  margin-right: -0.375rem;\n}\r\n.-my-1\\.5 {\n  margin-top: -0.375rem;\n  margin-bottom: -0.375rem;\n}\r\n.-mx-1 {\n  margin-left: -0.25rem;\n  margin-right: -0.25rem;\n}\r\n.-my-1 {\n  margin-top: -0.25rem;\n  margin-bottom: -0.25rem;\n}\r\n.my-4 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\r\n.mx-10 {\n  margin-left: 2.5rem;\n  margin-right: 2.5rem;\n}\r\n.mx-4 {\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\r\n.mr-4 {\n  margin-right: 1rem;\n}\r\n.mt-\\[2px\\] {\n  margin-top: 2px;\n}\r\n.ml-auto {\n  margin-left: auto;\n}\r\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\r\n.mb-6 {\n  margin-bottom: 1.5rem;\n}\r\n.ml-20 {\n  margin-left: 5rem;\n}\r\n.mt-4 {\n  margin-top: 1rem;\n}\r\n.ml-10 {\n  margin-left: 2.5rem;\n}\r\n.mb-4 {\n  margin-bottom: 1rem;\n}\r\n.mb-5 {\n  margin-bottom: 1.25rem;\n}\r\n.mt-10 {\n  margin-top: 2.5rem;\n}\r\n.ml-3 {\n  margin-left: 0.75rem;\n}\r\n.mt-3 {\n  margin-top: 0.75rem;\n}\r\n.mr-2 {\n  margin-right: 0.5rem;\n}\r\n.mr-3 {\n  margin-right: 0.75rem;\n}\r\n.mt-8 {\n  margin-top: 2rem;\n}\r\n.mb-10 {\n  margin-bottom: 2.5rem;\n}\r\n.mt-auto {\n  margin-top: auto;\n}\r\n.ml-8 {\n  margin-left: 2rem;\n}\r\n.mr-auto {\n  margin-right: auto;\n}\r\n.mb-auto {\n  margin-bottom: auto;\n}\r\n.mt-7 {\n  margin-top: 1.75rem;\n}\r\n.mt-5 {\n  margin-top: 1.25rem;\n}\r\n.mb-20 {\n  margin-bottom: 5rem;\n}\r\n.mt-1 {\n  margin-top: 0.25rem;\n}\r\n.mt-2 {\n  margin-top: 0.5rem;\n}\r\n.ml-6 {\n  margin-left: 1.5rem;\n}\r\n.ml-2 {\n  margin-left: 0.5rem;\n}\r\n.mr-6 {\n  margin-right: 1.5rem;\n}\r\n.block {\n  display: block;\n}\r\n.inline-block {\n  display: inline-block;\n}\r\n.inline {\n  display: inline;\n}\r\n.flex {\n  display: flex;\n}\r\n.inline-flex {\n  display: inline-flex;\n}\r\n.table {\n  display: table;\n}\r\n.grid {\n  display: grid;\n}\r\n.hidden {\n  display: none;\n}\r\n.h-\\[400px\\] {\n  height: 400px;\n}\r\n.h-3\\/6 {\n  height: 50%;\n}\r\n.h-full {\n  height: 100%;\n}\r\n.h-2\\/6 {\n  height: 33.333333%;\n}\r\n.h-1\\/6 {\n  height: 16.666667%;\n}\r\n.h-5\\/6 {\n  height: 83.333333%;\n}\r\n.h-6 {\n  height: 1.5rem;\n}\r\n.h-\\[25px\\] {\n  height: 25px;\n}\r\n.h-24 {\n  height: 6rem;\n}\r\n.h-14 {\n  height: 3.5rem;\n}\r\n.h-5 {\n  height: 1.25rem;\n}\r\n.h-\\[40\\%\\] {\n  height: 40%;\n}\r\n.h-36 {\n  height: 9rem;\n}\r\n.h-20 {\n  height: 5rem;\n}\r\n.h-8 {\n  height: 2rem;\n}\r\n.h-4 {\n  height: 1rem;\n}\r\n.h-screen {\n  height: 100vh;\n}\r\n.h-\\[5\\%\\] {\n  height: 5%;\n}\r\n.h-auto {\n  height: auto;\n}\r\n.h-\\[300px\\] {\n  height: 300px;\n}\r\n.h-9 {\n  height: 2.25rem;\n}\r\n.h-\\[200px\\] {\n  height: 200px;\n}\r\n.h-fit {\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\r\n.h-10 {\n  height: 2.5rem;\n}\r\n.h-\\[340px\\] {\n  height: 340px;\n}\r\n.h-\\[70\\%\\] {\n  height: 70%;\n}\r\n.h-1 {\n  height: 0.25rem;\n}\r\n.h-72 {\n  height: 18rem;\n}\r\n.max-h-\\[50\\%\\] {\n  max-height: 50%;\n}\r\n.max-h-0 {\n  max-height: 0px;\n}\r\n.min-h-\\[50\\%\\] {\n  min-height: 50%;\n}\r\n.min-h-\\[400px\\] {\n  min-height: 400px;\n}\r\n.w-full {\n  width: 100%;\n}\r\n.w-\\[30\\%\\] {\n  width: 30%;\n}\r\n.w-6 {\n  width: 1.5rem;\n}\r\n.w-\\[25px\\] {\n  width: 25px;\n}\r\n.w-24 {\n  width: 6rem;\n}\r\n.w-14 {\n  width: 3.5rem;\n}\r\n.w-2\\/4 {\n  width: 50%;\n}\r\n.w-5 {\n  width: 1.25rem;\n}\r\n.w-3\\/4 {\n  width: 75%;\n}\r\n.w-\\[40\\%\\] {\n  width: 40%;\n}\r\n.w-20 {\n  width: 5rem;\n}\r\n.w-96 {\n  width: 24rem;\n}\r\n.w-8 {\n  width: 2rem;\n}\r\n.w-auto {\n  width: auto;\n}\r\n.w-80 {\n  width: 20rem;\n}\r\n.w-4 {\n  width: 1rem;\n}\r\n.w-\\[5\\%\\] {\n  width: 5%;\n}\r\n.w-1\\/4 {\n  width: 25%;\n}\r\n.w-\\[100px\\] {\n  width: 100px;\n}\r\n.w-2\\/6 {\n  width: 33.333333%;\n}\r\n.w-6\\/12 {\n  width: 50%;\n}\r\n.w-\\[200px\\] {\n  width: 200px;\n}\r\n.w-fit {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n}\r\n.w-1\\/6 {\n  width: 16.666667%;\n}\r\n.w-10 {\n  width: 2.5rem;\n}\r\n.w-1\\/2 {\n  width: 50%;\n}\r\n.w-5\\/6 {\n  width: 83.333333%;\n}\r\n.w-\\[70\\%\\] {\n  width: 70%;\n}\r\n.min-w-\\[85\\%\\] {\n  min-width: 85%;\n}\r\n.max-w-6xl {\n  max-width: 72rem;\n}\r\n.max-w-4xl {\n  max-width: 56rem;\n}\r\n.max-w-3xl {\n  max-width: 48rem;\n}\r\n.flex-shrink-0 {\n  flex-shrink: 0;\n}\r\n.flex-grow {\n  flex-grow: 1;\n}\r\n.table-auto {\n  table-layout: auto;\n}\r\n.translate-y-\\[-100\\%\\] {\n  --tw-translate-y: -100%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.transform {\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n@-webkit-keyframes spin {\n\n  to {\n    transform: rotate(360deg);\n  }\n}\r\n@keyframes spin {\n\n  to {\n    transform: rotate(360deg);\n  }\n}\r\n.animate-spin {\n  -webkit-animation: spin 1s linear infinite;\n          animation: spin 1s linear infinite;\n}\r\n.cursor-pointer {\n  cursor: pointer;\n}\r\n.list-none {\n  list-style-type: none;\n}\r\n.grid-cols-1 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\r\n.grid-cols-3 {\n  grid-template-columns: repeat(3, minmax(0, 1fr));\n}\r\n.grid-cols-7 {\n  grid-template-columns: repeat(7, minmax(0, 1fr));\n}\r\n.grid-cols-4 {\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n}\r\n.flex-row {\n  flex-direction: row;\n}\r\n.flex-col {\n  flex-direction: column;\n}\r\n.flex-wrap {\n  flex-wrap: wrap;\n}\r\n.place-items-center {\n  place-items: center;\n}\r\n.content-around {\n  align-content: space-around;\n}\r\n.items-center {\n  align-items: center;\n}\r\n.items-stretch {\n  align-items: stretch;\n}\r\n.justify-start {\n  justify-content: flex-start;\n}\r\n.justify-center {\n  justify-content: center;\n}\r\n.justify-between {\n  justify-content: space-between;\n}\r\n.justify-around {\n  justify-content: space-around;\n}\r\n.gap-4 {\n  gap: 1rem;\n}\r\n.gap-2 {\n  gap: 0.5rem;\n}\r\n.gap-8 {\n  gap: 2rem;\n}\r\n.space-x-7 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1.75rem * var(--tw-space-x-reverse));\n  margin-left: calc(1.75rem * calc(1 - var(--tw-space-x-reverse)));\n}\r\n.space-x-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\r\n.space-x-5 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1.25rem * var(--tw-space-x-reverse));\n  margin-left: calc(1.25rem * calc(1 - var(--tw-space-x-reverse)));\n}\r\n.overflow-hidden {\n  overflow: hidden;\n}\r\n.truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\r\n.rounded-\\[8\\%\\] {\n  border-radius: 8%;\n}\r\n.rounded-\\[15\\%\\] {\n  border-radius: 15%;\n}\r\n.rounded-\\[100\\%\\] {\n  border-radius: 100%;\n}\r\n.rounded-\\[10\\%\\] {\n  border-radius: 10%;\n}\r\n.rounded {\n  border-radius: 0.25rem;\n}\r\n.rounded-lg {\n  border-radius: 0.5rem;\n}\r\n.rounded-full {\n  border-radius: 9999px;\n}\r\n.rounded-md {\n  border-radius: 0.375rem;\n}\r\n.border-0 {\n  border-width: 0px;\n}\r\n.border {\n  border-width: 1px;\n}\r\n.border-2 {\n  border-width: 2px;\n}\r\n.border-b-4 {\n  border-bottom-width: 4px;\n}\r\n.border-gray-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\r\n.border-green-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(34 197 94 / var(--tw-border-opacity));\n}\r\n.border-transparent {\n  border-color: transparent;\n}\r\n.border-black {\n  --tw-border-opacity: 1;\n  border-color: rgb(0 0 0 / var(--tw-border-opacity));\n}\r\n.bg-\\[\\#f2f2f2\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(242 242 242 / var(--tw-bg-opacity));\n}\r\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\r\n.bg-\\[\\#f9f9f9\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 249 249 / var(--tw-bg-opacity));\n}\r\n.bg-green-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n}\r\n.bg-green-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 252 231 / var(--tw-bg-opacity));\n}\r\n.bg-gray-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity));\n}\r\n.bg-green-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(21 128 61 / var(--tw-bg-opacity));\n}\r\n.bg-gray-900 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(17 24 39 / var(--tw-bg-opacity));\n}\r\n.bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\r\n.bg-indigo-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(238 242 255 / var(--tw-bg-opacity));\n}\r\n.bg-green-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(74 222 128 / var(--tw-bg-opacity));\n}\r\n.bg-green-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(187 247 208 / var(--tw-bg-opacity));\n}\r\n.bg-black {\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\r\n.bg-green-300 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(134 239 172 / var(--tw-bg-opacity));\n}\r\n.bg-opacity-50 {\n  --tw-bg-opacity: 0.5;\n}\r\n.bg-gradient-to-r {\n  background-image: linear-gradient(to right, var(--tw-gradient-stops));\n}\r\n.from-black {\n  --tw-gradient-from: #000;\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgb(0 0 0 / 0));\n}\r\n.via-white {\n  --tw-gradient-stops: var(--tw-gradient-from), #fff, var(--tw-gradient-to, rgb(255 255 255 / 0));\n}\r\n.to-green-500 {\n  --tw-gradient-to: #22c55e;\n}\r\n.bg-cover {\n  background-size: cover;\n}\r\n.bg-fixed {\n  background-attachment: fixed;\n}\r\n.bg-center {\n  background-position: center;\n}\r\n.fill-gray-500 {\n  fill: #6b7280;\n}\r\n.object-cover {\n  -o-object-fit: cover;\n     object-fit: cover;\n}\r\n.object-center {\n  -o-object-position: center;\n     object-position: center;\n}\r\n.p-4 {\n  padding: 1rem;\n}\r\n.p-1\\.5 {\n  padding: 0.375rem;\n}\r\n.p-1 {\n  padding: 0.25rem;\n}\r\n.p-2\\.5 {\n  padding: 0.625rem;\n}\r\n.p-2 {\n  padding: 0.5rem;\n}\r\n.p-8 {\n  padding: 2rem;\n}\r\n.p-6 {\n  padding: 1.5rem;\n}\r\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\r\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\r\n.py-5 {\n  padding-top: 1.25rem;\n  padding-bottom: 1.25rem;\n}\r\n.py-2\\.5 {\n  padding-top: 0.625rem;\n  padding-bottom: 0.625rem;\n}\r\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\r\n.py-4 {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\r\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\r\n.py-12 {\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n}\r\n.px-8 {\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\r\n.py-8 {\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n}\r\n.py-\\[1px\\] {\n  padding-top: 1px;\n  padding-bottom: 1px;\n}\r\n.px-7 {\n  padding-left: 1.75rem;\n  padding-right: 1.75rem;\n}\r\n.py-24 {\n  padding-top: 6rem;\n  padding-bottom: 6rem;\n}\r\n.pt-2 {\n  padding-top: 0.5rem;\n}\r\n.pt-0 {\n  padding-top: 0px;\n}\r\n.pb-0 {\n  padding-bottom: 0px;\n}\r\n.text-center {\n  text-align: center;\n}\r\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\r\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\r\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\r\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\r\n.text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}\r\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.text-\\[3vw\\] {\n  font-size: 3vw;\n}\r\n.text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\r\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\r\n.text-5xl {\n  font-size: 3rem;\n  line-height: 1;\n}\r\n.font-semibold {\n  font-weight: 600;\n}\r\n.font-medium {\n  font-weight: 500;\n}\r\n.font-bold {\n  font-weight: 700;\n}\r\n.uppercase {\n  text-transform: uppercase;\n}\r\n.leading-relaxed {\n  line-height: 1.625;\n}\r\n.tracking-widest {\n  letter-spacing: 0.1em;\n}\r\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\r\n.text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\r\n.text-black {\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\r\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n.text-green-700 {\n  --tw-text-opacity: 1;\n  color: rgb(21 128 61 / var(--tw-text-opacity));\n}\r\n.text-green-500 {\n  --tw-text-opacity: 1;\n  color: rgb(34 197 94 / var(--tw-text-opacity));\n}\r\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\r\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\r\n.text-gray-200 {\n  --tw-text-opacity: 1;\n  color: rgb(229 231 235 / var(--tw-text-opacity));\n}\r\n.text-gray-100 {\n  --tw-text-opacity: 1;\n  color: rgb(243 244 246 / var(--tw-text-opacity));\n}\r\n.text-gray-300 {\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\r\n.text-gray-800 {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\r\n.text-red-400 {\n  --tw-text-opacity: 1;\n  color: rgb(248 113 113 / var(--tw-text-opacity));\n}\r\n.text-green-600 {\n  --tw-text-opacity: 1;\n  color: rgb(22 163 74 / var(--tw-text-opacity));\n}\r\n.text-slate-900 {\n  --tw-text-opacity: 1;\n  color: rgb(15 23 42 / var(--tw-text-opacity));\n}\r\n.text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity));\n}\r\n.text-gray-600 {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\r\n.underline {\n  -webkit-text-decoration-line: underline;\n          text-decoration-line: underline;\n}\r\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.shadow-inner {\n  --tw-shadow: inset 0 2px 4px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: inset 0 2px 4px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.shadow-gray-400 {\n  --tw-shadow-color: #9ca3af;\n  --tw-shadow: var(--tw-shadow-colored);\n}\r\n.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\r\n.brightness-150 {\n  --tw-brightness: brightness(1.5);\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\r\n.drop-shadow-lg {\n  --tw-drop-shadow: drop-shadow(0 10px 8px rgb(0 0 0 / 0.04)) drop-shadow(0 4px 3px rgb(0 0 0 / 0.1));\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\r\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\r\n.transition {\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\r\n.duration-300 {\n  transition-duration: 300ms;\n}\r\n.duration-200 {\n  transition-duration: 200ms;\n}\r\n@-webkit-keyframes bounce {\n\n  0%, 100% {\n    transform: translateY(-25%);\n    -webkit-animation-timing-function: cubic-bezier(0.8,0,1,1);\n            animation-timing-function: cubic-bezier(0.8,0,1,1);\n  }\n\n  50% {\n    transform: none;\n    -webkit-animation-timing-function: cubic-bezier(0,0,0.2,1);\n            animation-timing-function: cubic-bezier(0,0,0.2,1);\n  }\n}\r\n@keyframes bounce {\n\n  0%, 100% {\n    transform: translateY(-25%);\n    -webkit-animation-timing-function: cubic-bezier(0.8,0,1,1);\n            animation-timing-function: cubic-bezier(0.8,0,1,1);\n  }\n\n  50% {\n    transform: none;\n    -webkit-animation-timing-function: cubic-bezier(0,0,0.2,1);\n            animation-timing-function: cubic-bezier(0,0,0.2,1);\n  }\n}\r\n.hover\\:animate-bounce:hover {\n  -webkit-animation: bounce 1s infinite;\n          animation: bounce 1s infinite;\n}\r\n.hover\\:bg-green-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(21 128 61 / var(--tw-bg-opacity));\n}\r\n.hover\\:bg-green-200:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(187 247 208 / var(--tw-bg-opacity));\n}\r\n.hover\\:bg-green-800:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(22 101 52 / var(--tw-bg-opacity));\n}\r\n.hover\\:bg-green-500:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n}\r\n.hover\\:bg-gray-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\r\n.hover\\:bg-indigo-50:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(238 242 255 / var(--tw-bg-opacity));\n}\r\n.hover\\:bg-blue-800:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 64 175 / var(--tw-bg-opacity));\n}\r\n.hover\\:bg-green-400:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(74 222 128 / var(--tw-bg-opacity));\n}\r\n.hover\\:stroke-cyan-700:hover {\n  stroke: #0e7490;\n}\r\n.hover\\:text-green-500:hover {\n  --tw-text-opacity: 1;\n  color: rgb(34 197 94 / var(--tw-text-opacity));\n}\r\n.hover\\:text-green-400:hover {\n  --tw-text-opacity: 1;\n  color: rgb(74 222 128 / var(--tw-text-opacity));\n}\r\n.hover\\:shadow-inner:hover {\n  --tw-shadow: inset 0 2px 4px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: inset 0 2px 4px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.hover\\:drop-shadow-2xl:hover {\n  --tw-drop-shadow: drop-shadow(0 25px 25px rgb(0 0 0 / 0.15));\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\r\n.focus\\:translate-y-\\[5\\%\\]:focus {\n  --tw-translate-y: 5%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.focus\\:border-green-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(34 197 94 / var(--tw-border-opacity));\n}\r\n.focus\\:border-black:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(0 0 0 / var(--tw-border-opacity));\n}\r\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\r\n.focus\\:ring:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\r\n.focus\\:ring-2:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\r\n.focus\\:ring-4:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\r\n.focus\\:ring-green-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(34 197 94 / var(--tw-ring-opacity));\n}\r\n.focus\\:ring-green-400:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(74 222 128 / var(--tw-ring-opacity));\n}\r\n.focus\\:ring-green-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(134 239 172 / var(--tw-ring-opacity));\n}\r\n.focus\\:ring-black:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(0 0 0 / var(--tw-ring-opacity));\n}\r\n.focus\\:ring-blue-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(147 197 253 / var(--tw-ring-opacity));\n}\r\n.group:hover .group-hover\\:text-black {\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\r\n.dark .dark\\:border-gray-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(75 85 99 / var(--tw-border-opacity));\n}\r\n.dark .dark\\:bg-gray-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\r\n.dark .dark\\:bg-green-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(187 247 208 / var(--tw-bg-opacity));\n}\r\n.dark .dark\\:bg-gray-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\r\n.dark .dark\\:bg-green-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(22 163 74 / var(--tw-bg-opacity));\n}\r\n.dark .dark\\:bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\r\n.dark .dark\\:text-gray-200 {\n  --tw-text-opacity: 1;\n  color: rgb(229 231 235 / var(--tw-text-opacity));\n}\r\n.dark .dark\\:text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n.dark .dark\\:text-green-800 {\n  --tw-text-opacity: 1;\n  color: rgb(22 101 52 / var(--tw-text-opacity));\n}\r\n.dark .dark\\:text-green-600 {\n  --tw-text-opacity: 1;\n  color: rgb(22 163 74 / var(--tw-text-opacity));\n}\r\n.dark .dark\\:text-gray-300 {\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\r\n.dark .dark\\:text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\r\n.dark .dark\\:text-gray-800 {\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\r\n.dark .dark\\:placeholder-gray-400::-moz-placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-placeholder-opacity));\n}\r\n.dark .dark\\:placeholder-gray-400:-ms-input-placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-placeholder-opacity));\n}\r\n.dark .dark\\:placeholder-gray-400::placeholder {\n  --tw-placeholder-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-placeholder-opacity));\n}\r\n.dark .dark\\:hover\\:bg-green-300:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(134 239 172 / var(--tw-bg-opacity));\n}\r\n.dark .dark\\:hover\\:bg-green-500:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n}\r\n@media (min-width: 640px) {\n\n  .sm\\:mb-4 {\n    margin-bottom: 1rem;\n  }\n\n  .sm\\:ml-auto {\n    margin-left: auto;\n  }\n\n  .sm\\:inline {\n    display: inline;\n  }\n\n  .sm\\:h-72 {\n    height: 18rem;\n  }\n\n  .sm\\:w-1\\/2 {\n    width: 50%;\n  }\n\n  .sm\\:w-auto {\n    width: auto;\n  }\n\n  .sm\\:w-full {\n    width: 100%;\n  }\n\n  .sm\\:grid-cols-4 {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n\n  .sm\\:grid-cols-7 {\n    grid-template-columns: repeat(7, minmax(0, 1fr));\n  }\n\n  .sm\\:grid-cols-6 {\n    grid-template-columns: repeat(6, minmax(0, 1fr));\n  }\n\n  .sm\\:grid-cols-2 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n\n  .sm\\:flex-row {\n    flex-direction: row;\n  }\n\n  .sm\\:items-center {\n    align-items: center;\n  }\n\n  .sm\\:text-center {\n    text-align: center;\n  }\n\n  .sm\\:text-4xl {\n    font-size: 2.25rem;\n    line-height: 2.5rem;\n  }\n}\r\n@media (min-width: 768px) {\n\n  .md\\:col-span-1 {\n    grid-column: span 1 / span 1;\n  }\n\n  .md\\:mr-6 {\n    margin-right: 1.5rem;\n  }\n\n  .md\\:mr-5 {\n    margin-right: 1.25rem;\n  }\n\n  .md\\:inline {\n    display: inline;\n  }\n\n  .md\\:flex {\n    display: flex;\n  }\n\n  .md\\:hidden {\n    display: none;\n  }\n\n  .md\\:h-64 {\n    height: 16rem;\n  }\n\n  .md\\:w-full {\n    width: 100%;\n  }\n\n  .md\\:w-auto {\n    width: auto;\n  }\n\n  .md\\:w-5\\/6 {\n    width: 83.333333%;\n  }\n\n  .md\\:w-1\\/6 {\n    width: 16.666667%;\n  }\n\n  .md\\:w-fit {\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n  }\n\n  .md\\:w-1\\/2 {\n    width: 50%;\n  }\n\n  .md\\:grid-cols-4 {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n\n  .md\\:grid-cols-9 {\n    grid-template-columns: repeat(9, minmax(0, 1fr));\n  }\n\n  .md\\:grid-cols-7 {\n    grid-template-columns: repeat(7, minmax(0, 1fr));\n  }\n\n  .md\\:grid-cols-8 {\n    grid-template-columns: repeat(8, minmax(0, 1fr));\n  }\n\n  .md\\:grid-cols-3 {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n\n  .md\\:flex-row {\n    flex-direction: row;\n  }\n\n  .md\\:text-\\[1\\.5vw\\] {\n    font-size: 1.5vw;\n  }\n\n  .md\\:text-base {\n    font-size: 1rem;\n    line-height: 1.5rem;\n  }\n\n  .md\\:text-lg {\n    font-size: 1.125rem;\n    line-height: 1.75rem;\n  }\n\n  .md\\:text-2xl {\n    font-size: 1.5rem;\n    line-height: 2rem;\n  }\n\n  .md\\:font-semibold {\n    font-weight: 600;\n  }\n}\r\n@media (min-width: 1024px) {\n\n  .lg\\:mb-0 {\n    margin-bottom: 0px;\n  }\n\n  .lg\\:inline {\n    display: inline;\n  }\n\n  .lg\\:hidden {\n    display: none;\n  }\n\n  .lg\\:h-60 {\n    height: 15rem;\n  }\n\n  .lg\\:w-1\\/2 {\n    width: 50%;\n  }\n\n  .lg\\:grid-cols-5 {\n    grid-template-columns: repeat(5, minmax(0, 1fr));\n  }\n\n  .lg\\:grid-cols-9 {\n    grid-template-columns: repeat(9, minmax(0, 1fr));\n  }\n\n  .lg\\:grid-cols-7 {\n    grid-template-columns: repeat(7, minmax(0, 1fr));\n  }\n\n  .lg\\:grid-cols-11 {\n    grid-template-columns: repeat(11, minmax(0, 1fr));\n  }\n\n  .lg\\:grid-cols-3 {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n\n  .lg\\:justify-evenly {\n    justify-content: space-evenly;\n  }\n\n  .lg\\:text-4xl {\n    font-size: 2.25rem;\n    line-height: 2.5rem;\n  }\n\n  .lg\\:text-sm {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n\n  .lg\\:text-2xl {\n    font-size: 1.5rem;\n    line-height: 2rem;\n  }\n\n  .lg\\:text-5xl {\n    font-size: 3rem;\n    line-height: 1;\n  }\n}\r\n@media (min-width: 1280px) {\n\n  .xl\\:inline {\n    display: inline;\n  }\n\n  .xl\\:h-56 {\n    height: 14rem;\n  }\n\n  .xl\\:w-1\\/3 {\n    width: 33.333333%;\n  }\n\n  .xl\\:grid-cols-6 {\n    grid-template-columns: repeat(6, minmax(0, 1fr));\n  }\n\n  .xl\\:grid-cols-9 {\n    grid-template-columns: repeat(9, minmax(0, 1fr));\n  }\n\n  .xl\\:grid-cols-7 {\n    grid-template-columns: repeat(7, minmax(0, 1fr));\n  }\n\n  .xl\\:grid-cols-11 {\n    grid-template-columns: repeat(11, minmax(0, 1fr));\n  }\n\n  .xl\\:grid-cols-4 {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n}\r\n@media (min-width: 1536px) {\n\n  .\\32xl\\:grid-cols-6 {\n    grid-template-columns: repeat(6, minmax(0, 1fr));\n  }\n\n  .\\32xl\\:grid-cols-9 {\n    grid-template-columns: repeat(9, minmax(0, 1fr));\n  }\n\n  .\\32xl\\:grid-cols-7 {\n    grid-template-columns: repeat(7, minmax(0, 1fr));\n  }\n\n  .\\32xl\\:grid-cols-11 {\n    grid-template-columns: repeat(11, minmax(0, 1fr));\n  }\n\n  .\\32xl\\:grid-cols-5 {\n    grid-template-columns: repeat(5, minmax(0, 1fr));\n  }\n}", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 379:
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ 569:
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ 216:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ 565:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ 795:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ 589:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ 684:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('["color","title","message","icon","duration","positionX","positionY","fontColor","fontTone","shape","speed"]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js
var runtime = __webpack_require__(9);
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function asyncToGenerator_asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(657);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);
;// CONCATENATED MODULE: ./src/scripts/routes/url-parser.js
var UrlParser = {
  parseActiveUrlWithCombiner: function parseActiveUrlWithCombiner() {
    var url = window.location.hash.slice(1).toLowerCase();
    var splitedUrl = this.urlSplitter(url);
    return this.urlCombiner(splitedUrl);
  },
  parseActiveUrlWithoutCombiner: function parseActiveUrlWithoutCombiner() {
    var url = window.location.hash.slice(1).toLowerCase();
    return this.urlSplitter(url);
  },
  urlSplitter: function urlSplitter(url) {
    var urlsSplits = url.split('/');
    return {
      resource: urlsSplits[1] || null,
      id: urlsSplits[2] || null,
      verb: urlsSplits[3] || null
    };
  },
  urlsSplitterAllVerb: function urlsSplitterAllVerb(url) {
    return url.split('/');
  },
  urlCombiner: function urlCombiner(splitedUrl) {
    return (splitedUrl.resource ? "/".concat(splitedUrl.resource) : '/') + (splitedUrl.id ? '/:id' : '') + (splitedUrl.verb ? "/".concat(splitedUrl.verb) : '');
  }
};
/* harmony default export */ const url_parser = (UrlParser);
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js




function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
;// CONCATENATED MODULE: ./src/scripts/views/components/hero-image.js
/* eslint-disable max-len */
var heroImage = " \n\t\t\t<header class=\"mb-6 dark:bg-gray-800\">\n\t\t\t\n\t\t\t<div class=\"w-full bg-center bg-cover bg-fixed\"\n\t\t\t\tstyle=\"background-image: url('./images/hero.jpg');\">\n\t\t\t\t<div class=\"flex items-center justify-center w-full h-full bg-gray-900 bg-opacity-50 py-12\">\n\t\t\t\t\t<div class=\"text-center\">\n\t\t\t\t\t<div class=\"container px-4 mx-auto\">\n\t\t\t\t\t\t<div class=\"max-w-4xl mx-auto text-center\">\n\t\t\t\t\t\t\t<span class=\"text-gray-200 font-semibold uppercase tracking-widest\">SPORTS APP</span>\n\t\t\t\t\t\t\t<h2 class=\"mt-8 mb-6 text-4xl lg:text-5xl font-bold text-gray-100\">Progressive Sports</h2>\n\t\t\t\t\t\t\t<p class=\"max-w-3xl mx-auto mb-10 text-lg text-gray-300\">\n\t\t\t\t\t\t\t\tweb sport app in your hand\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<a class=\"inline-block w-auto md:w-full mb-4 md:mr-6 py-5 px-8 text-sm font-bold uppercase border-2 border-transparent bg-gray-200 rounded hover:bg-gray-100 text-gray-800 transition duration-200 focus:outline-none focus:ring focus:ring-green-500\"\n\t\t\t\t\t\t\t\thref=\"#league\">start explore</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</header>\n\t";
/* harmony default export */ const hero_image = (heroImage);
;// CONCATENATED MODULE: ./src/scripts/views/components/card-item-favorite.js
var cardItemFavorite = function cardItemFavorite(_ref) {
  var idTeam = _ref.idTeam,
      nameTeam = _ref.nameTeam,
      location = _ref.location,
      stadion = _ref.stadion,
      pathImage = _ref.pathImage,
      clubColor = _ref.clubColor;

  var render = function render() {
    return "\n\t\t  <div class=\"item-card w-full dark:bg-gray-800 h-[400px] flex flex-col bg-[#f2f2f2] rounded-[8%] shadow-lg\">\n\t\t\t  <div class=\"side-top w-full h-3/6 max-h-[50%] min-h-[50%] flex items-center bg-white p-4\">\n\t\t\t    <img class=\"lazyload fade-in mx-auto h-full\" data-src=\"".concat(pathImage, "\" alt=\"picture team\">\n\t\t\t  </div>\n\t\t\t  <div class=\"side-mid flex pt-2 px-4 h-2/6 w-full items-center\">\n\t\t\t\t  <div class=\"description min-w-[85%] mr-4 dark:text-white\">\n\t\t\t\t  \t<h1 class=\"truncate text-2xl font-semibold\">").concat(nameTeam, "</h1>\n\t\t\t\t  \t<h2 class=\"truncate text-lg mt-[2px] dark:text-white text-gray-700\">").concat(location, "</h2>\n\t\t\t\t  \t<h3 class=\"truncate text-md mt-[2px] dark:text-white text-gray-700\">").concat(stadion, "</h3>\n\t\t\t\t  </div>\n\t\t\t\t  <div class=\"colors-team ml-auto flex flex-col items-center\">\n\t\t\t\t  \t").concat(addColorsTeams(clubColor), "\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  <div class=\"side-bottom w-full h-1/6 mb-2 flex\">\n\t\t\t  \t\t<button class=\"btn-favorite rounded-[15%] w-[30%] h-5/6 dark:bg-gray-800 bg-[#f9f9f9] mx-auto my-auto shadow-md group hover:shadow-inner flex\" data=\"").concat(idTeam, "\">\n\t\t\t\t\t\t\n\t\t\t\t\t</button>\n\t\t\t  \t\t<a href=\"#/teams/").concat(idTeam, "\" class=\"btn-detail rounded-[15%] w-[30%] h-5/6 dark:bg-gray-800 bg-[#f9f9f9] mx-auto my-auto shadow-md group hover:shadow-inner flex\">\n\t\t\t  \t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"m-auto h-6 w-6 text-gray-400 group-hover:text-black\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t\t  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n\t\t\t\t\t\t</svg>\n\t\t\t  \t\t</a>\n\t\t\t  </div>\n\t\t  </div>\n\t\t");
  };

  var addColorsTeams = function addColorsTeams(colors) {
    var item = '';
    var maxItem = {
      'start': 0,
      'stop': 3
    };
    colors.forEach(function (e) {
      if (maxItem['start'] != maxItem['stop']) {
        var deleteSpaceInText = e.toLowerCase().replace(/\s/g, '');
        var color = typoColorNames[deleteSpaceInText] != null ? typoColorNames[deleteSpaceInText] : deleteSpaceInText;
        item += "<div style=\"background-color : ".concat(color, "\" class=\"w-[25px] h-[25px] rounded-[100%] my-[5px] shadow-inner\"></div>");
      }

      maxItem['start']++;
    });
    return item;
  };

  var typoColorNames = {
    "navyblue": "navy",
    "claret": "#811331"
  };
  return render();
};

/* harmony default export */ const card_item_favorite = (cardItemFavorite);
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
;// CONCATENATED MODULE: ./src/scripts/data/footballDataApi.js
/* provided dependency */ var $ = __webpack_require__(957);






var FootballDataApi = /*#__PURE__*/function () {
  function FootballDataApi() {
    _classCallCheck(this, FootballDataApi);

    _defineProperty(this, "APIKey", "");

    _defineProperty(this, "baseUrl", "");

    _defineProperty(this, "PRECACHE_PREFIX", "");

    _defineProperty(this, "PRECACHE_SUFFIX", "");

    _defineProperty(this, "PRECACHE_NAME", "");

    _defineProperty(this, "API_CACHE_NAME", "");

    _defineProperty(this, "IMAGE_CACHE_NAME", "");

    this.APIKey = "fdaae91cecbc4992be43f96cc4ba9598";
    this.baseUrl = "https://api.football-data.org/v2";
    this.PRECACHE_PREFIX = "progressive-sports";
    this.PRECACHE_SUFFIX = "v1";
    this.PRECACHE_NAME = "precache";
    this.API_CACHE_NAME = "api-cache";
    this.IMAGE_CACHE_NAME = "img-cache";
  }

  _createClass(FootballDataApi, [{
    key: "request",
    value: function () {
      var _request2 = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(_request) {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return $.ajax({
                  type: "GET",
                  url: "".concat(this.baseUrl, "/").concat(_request),
                  headers: {
                    "X-Auth-Token": this.APIKey
                  }
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function request(_x) {
        return _request2.apply(this, arguments);
      }

      return request;
    }()
  }, {
    key: "getAllMatches",
    value: function () {
      var _getAllMatches = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2(_ref) {
        var dateFrom, dateTo, data;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                dateFrom = _ref.dateFrom, dateTo = _ref.dateTo;
                _context2.next = 3;
                return this.request("matches?dateFrom=".concat(dateFrom, "&dateTo=").concat(dateTo)).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context2.abrupt("return", data);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getAllMatches(_x2) {
        return _getAllMatches.apply(this, arguments);
      }

      return getAllMatches;
    }()
  }, {
    key: "getMatchById",
    value: function () {
      var _getMatchById = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3(_ref2) {
        var id, data;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                id = _ref2.id;
                _context3.next = 3;
                return this.request("matches/".concat(id)).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context3.abrupt("return", data);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getMatchById(_x3) {
        return _getMatchById.apply(this, arguments);
      }

      return getMatchById;
    }()
  }, {
    key: "getAllCompetitions",
    value: function () {
      var _getAllCompetitions = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
        var data;
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.request('competitions/').then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 2:
                return _context4.abrupt("return", data);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getAllCompetitions() {
        return _getAllCompetitions.apply(this, arguments);
      }

      return getAllCompetitions;
    }()
  }, {
    key: "getCompetitionsById",
    value: function () {
      var _getCompetitionsById = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5(_ref3) {
        var id, data;
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                id = _ref3.id;
                _context5.next = 3;
                return this.request("competitions/".concat(id)).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context5.abrupt("return", data);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getCompetitionsById(_x4) {
        return _getCompetitionsById.apply(this, arguments);
      }

      return getCompetitionsById;
    }()
  }, {
    key: "getAllTeamsByIdCompetitions",
    value: function () {
      var _getAllTeamsByIdCompetitions = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6(_ref4) {
        var id, data;
        return regenerator_default().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                id = _ref4.id;
                _context6.next = 3;
                return this.request("competitions/".concat(id, "/teams")).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context6.abrupt("return", data);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getAllTeamsByIdCompetitions(_x5) {
        return _getAllTeamsByIdCompetitions.apply(this, arguments);
      }

      return getAllTeamsByIdCompetitions;
    }()
  }, {
    key: "getTeams",
    value: function () {
      var _getTeams = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7(_ref5) {
        var id, data;
        return regenerator_default().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                id = _ref5.id;
                _context7.next = 3;
                return this.request("teams/".concat(id)).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context7.abrupt("return", data);

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getTeams(_x6) {
        return _getTeams.apply(this, arguments);
      }

      return getTeams;
    }()
  }, {
    key: "getAllCompetitionStandingsById",
    value: function () {
      var _getAllCompetitionStandingsById = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee8(_ref6) {
        var id, data;
        return regenerator_default().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                id = _ref6.id;
                _context8.next = 3;
                return this.request("competitions/".concat(id, "/standings")).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context8.abrupt("return", data);

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getAllCompetitionStandingsById(_x7) {
        return _getAllCompetitionStandingsById.apply(this, arguments);
      }

      return getAllCompetitionStandingsById;
    }()
  }, {
    key: "getMatchesByIdCompetitions",
    value: function () {
      var _getMatchesByIdCompetitions = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee9(_ref7) {
        var id, dateFrom, dateTo, data;
        return regenerator_default().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                id = _ref7.id, dateFrom = _ref7.dateFrom, dateTo = _ref7.dateTo;
                _context9.next = 3;
                return this.request("competitions/".concat(id, "/matches?dateFrom=").concat(dateFrom, "&dateTo=").concat(dateTo)).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context9.abrupt("return", data);

              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getMatchesByIdCompetitions(_x8) {
        return _getMatchesByIdCompetitions.apply(this, arguments);
      }

      return getMatchesByIdCompetitions;
    }()
  }, {
    key: "getTopScorersByIdCompetitions",
    value: function () {
      var _getTopScorersByIdCompetitions = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee10(_ref8) {
        var id, data;
        return regenerator_default().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                id = _ref8.id;
                _context10.next = 3;
                return this.request("competitions/".concat(id, "/scorers")).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context10.abrupt("return", data);

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getTopScorersByIdCompetitions(_x9) {
        return _getTopScorersByIdCompetitions.apply(this, arguments);
      }

      return getTopScorersByIdCompetitions;
    }()
  }, {
    key: "getDetailPlayers",
    value: function () {
      var _getDetailPlayers = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee11(_ref9) {
        var id, data;
        return regenerator_default().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                id = _ref9.id;
                _context11.next = 3;
                return this.request("players/".concat(id)).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context11.abrupt("return", data);

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getDetailPlayers(_x10) {
        return _getDetailPlayers.apply(this, arguments);
      }

      return getDetailPlayers;
    }()
  }, {
    key: "getDetailPlayersAndMatch",
    value: function () {
      var _getDetailPlayersAndMatch = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee12(_ref10) {
        var id, data;
        return regenerator_default().wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                id = _ref10.id;
                _context12.next = 3;
                return this.request("players/".concat(id, "/matches")).then(function (response, status) {
                  data = status !== 'error' ? response : status;
                });

              case 3:
                return _context12.abrupt("return", data);

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function getDetailPlayersAndMatch(_x11) {
        return _getDetailPlayersAndMatch.apply(this, arguments);
      }

      return getDetailPlayersAndMatch;
    }()
  }]);

  return FootballDataApi;
}();

/* harmony default export */ const data_footballDataApi = (FootballDataApi);
;// CONCATENATED MODULE: ./src/scripts/data/idCompetitions.js
var availableCompetitions = [{
  id: 2000,
  name: "FIFA World Cup"
}, {
  id: 2001,
  name: "UEFA Champions League"
}, {
  id: 2002,
  name: "Bundesliga"
}, {
  id: 2003,
  name: "Eredivisie"
}, {
  id: 2013,
  name: "Campeonato Brasileiro Série A"
}, {
  id: 2014,
  name: "Primera Division"
}, {
  id: 2015,
  name: "Ligue 1"
}, {
  id: 2016,
  name: "Championship"
}, {
  id: 2017,
  name: "Primeira Liga"
}, {
  id: 2018,
  name: "European Championship"
}, {
  id: 2019,
  name: "Serie A"
}, {
  id: 2021,
  name: "Premier League"
}, {
  id: 2152,
  name: "Copa Libertadores"
}];
/* harmony default export */ const idCompetitions = (availableCompetitions);
;// CONCATENATED MODULE: ./node_modules/idb/build/wrap-idb-value.js
var instanceOfAny = function instanceOfAny(object, constructors) {
  return constructors.some(function (c) {
    return object instanceof c;
  });
};

var idbProxyableTypes;
var cursorAdvanceMethods; // This is a function to prevent it throwing up in node environments.

function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
} // This is a function to prevent it throwing up in node environments.


function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [IDBCursor.prototype.advance, IDBCursor.prototype["continue"], IDBCursor.prototype.continuePrimaryKey]);
}

var cursorRequestMap = new WeakMap();
var transactionDoneMap = new WeakMap();
var transactionStoreNamesMap = new WeakMap();
var transformCache = new WeakMap();
var reverseTransformCache = new WeakMap();

function promisifyRequest(request) {
  var promise = new Promise(function (resolve, reject) {
    var unlisten = function unlisten() {
      request.removeEventListener('success', success);
      request.removeEventListener('error', error);
    };

    var success = function success() {
      resolve(wrap_idb_value_wrap(request.result));
      unlisten();
    };

    var error = function error() {
      reject(request.error);
      unlisten();
    };

    request.addEventListener('success', success);
    request.addEventListener('error', error);
  });
  promise.then(function (value) {
    // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
    // (see wrapFunction).
    if (value instanceof IDBCursor) {
      cursorRequestMap.set(value, request);
    } // Catching to avoid "Uncaught Promise exceptions"

  })["catch"](function () {}); // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
  // is because we create many promises from a single IDBRequest.

  reverseTransformCache.set(promise, request);
  return promise;
}

function cacheDonePromiseForTransaction(tx) {
  // Early bail if we've already created a done promise for this transaction.
  if (transactionDoneMap.has(tx)) return;
  var done = new Promise(function (resolve, reject) {
    var unlisten = function unlisten() {
      tx.removeEventListener('complete', complete);
      tx.removeEventListener('error', error);
      tx.removeEventListener('abort', error);
    };

    var complete = function complete() {
      resolve();
      unlisten();
    };

    var error = function error() {
      reject(tx.error || new DOMException('AbortError', 'AbortError'));
      unlisten();
    };

    tx.addEventListener('complete', complete);
    tx.addEventListener('error', error);
    tx.addEventListener('abort', error);
  }); // Cache it for later retrieval.

  transactionDoneMap.set(tx, done);
}

var idbProxyTraps = {
  get: function get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      // Special handling for transaction.done.
      if (prop === 'done') return transactionDoneMap.get(target); // Polyfill for objectStoreNames because of Edge.

      if (prop === 'objectStoreNames') {
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      } // Make tx.store return the only store in the transaction, or undefined if there are many.


      if (prop === 'store') {
        return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);
      }
    } // Else transform whatever we get back.


    return wrap_idb_value_wrap(target[prop]);
  },
  set: function set(target, prop, value) {
    target[prop] = value;
    return true;
  },
  has: function has(target, prop) {
    if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) {
      return true;
    }

    return prop in target;
  }
};

function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}

function wrapFunction(func) {
  // Due to expected object equality (which is enforced by the caching in `wrap`), we
  // only create one new func per func.
  // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
  if (func === IDBDatabase.prototype.transaction && !('objectStoreNames' in IDBTransaction.prototype)) {
    return function (storeNames) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var tx = func.call.apply(func, [unwrap(this), storeNames].concat(args));
      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
      return wrap_idb_value_wrap(tx);
    };
  } // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
  // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
  // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
  // with real promises, so each advance methods returns a new promise for the cursor object, or
  // undefined if the end of the cursor has been reached.


  if (getCursorAdvanceMethods().includes(func)) {
    return function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
      // the original object.
      func.apply(unwrap(this), args);
      return wrap_idb_value_wrap(cursorRequestMap.get(this));
    };
  }

  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
    // the original object.
    return wrap_idb_value_wrap(func.apply(unwrap(this), args));
  };
}

function transformCachableValue(value) {
  if (typeof value === 'function') return wrapFunction(value); // This doesn't return, it just creates a 'done' promise for the transaction,
  // which is later returned for transaction.done (see idbObjectHandler).

  if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);
  if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps); // Return the same value back if we're not going to transform it.

  return value;
}

function wrap_idb_value_wrap(value) {
  // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
  // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
  if (value instanceof IDBRequest) return promisifyRequest(value); // If we've already transformed this value before, reuse the transformed value.
  // This is faster, but it also provides object equality.

  if (transformCache.has(value)) return transformCache.get(value);
  var newValue = transformCachableValue(value); // Not all types are transformed.
  // These may be primitive types, so they can't be WeakMap keys.

  if (newValue !== value) {
    transformCache.set(value, newValue);
    reverseTransformCache.set(newValue, value);
  }

  return newValue;
}

var unwrap = function unwrap(value) {
  return reverseTransformCache.get(value);
};


;// CONCATENATED MODULE: ./node_modules/idb/build/index.js
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { build_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function build_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function build_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function build_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { build_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { build_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }



/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */

function openDB(name, version) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      blocked = _ref.blocked,
      upgrade = _ref.upgrade,
      blocking = _ref.blocking,
      terminated = _ref.terminated;

  var request = indexedDB.open(name, version);
  var openPromise = wrap_idb_value_wrap(request);

  if (upgrade) {
    request.addEventListener('upgradeneeded', function (event) {
      upgrade(wrap_idb_value_wrap(request.result), event.oldVersion, event.newVersion, wrap_idb_value_wrap(request.transaction));
    });
  }

  if (blocked) request.addEventListener('blocked', function () {
    return blocked();
  });
  openPromise.then(function (db) {
    if (terminated) db.addEventListener('close', function () {
      return terminated();
    });
    if (blocking) db.addEventListener('versionchange', function () {
      return blocking();
    });
  })["catch"](function () {});
  return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */


function deleteDB(name) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      blocked = _ref2.blocked;

  var request = indexedDB.deleteDatabase(name);
  if (blocked) request.addEventListener('blocked', function () {
    return blocked();
  });
  return wrap(request).then(function () {
    return undefined;
  });
}

var readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
var writeMethods = ['put', 'add', 'delete', 'clear'];
var cachedMethods = new Map();

function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) {
    return;
  }

  if (cachedMethods.get(prop)) return cachedMethods.get(prop);
  var targetFuncName = prop.replace(/FromIndex$/, '');
  var useIndex = prop !== targetFuncName;
  var isWrite = writeMethods.includes(targetFuncName);

  if ( // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
  !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {
    return;
  }

  var method = /*#__PURE__*/function () {
    var _ref3 = build_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(storeName) {
      var _target;

      var tx,
          target,
          _len,
          args,
          _key,
          _args = arguments;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
              tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
              target = tx.store;

              for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = _args[_key];
              }

              if (useIndex) target = target.index(args.shift()); // Must reject if op rejects.
              // If it's a write operation, must reject if tx.done rejects.
              // Must reject with op rejection first.
              // Must resolve with op value.
              // Must handle both promises (no unhandled rejections)

              _context.next = 6;
              return Promise.all([(_target = target)[targetFuncName].apply(_target, args), isWrite && tx.done]);

            case 6:
              return _context.abrupt("return", _context.sent[0]);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function method(_x) {
      return _ref3.apply(this, arguments);
    };
  }();

  cachedMethods.set(prop, method);
  return method;
}

replaceTraps(function (oldTraps) {
  return _objectSpread(_objectSpread({}, oldTraps), {}, {
    get: function get(target, prop, receiver) {
      return getMethod(target, prop) || oldTraps.get(target, prop, receiver);
    },
    has: function has(target, prop) {
      return !!getMethod(target, prop) || oldTraps.has(target, prop);
    }
  });
});

;// CONCATENATED MODULE: ./src/scripts/data/favoriteTeamIDB.js



var CONFIG = {
  DATABASE_NAME: "ProgresiveSport",
  DATABASE_VERSION: 1,
  OBJECT_STORE_NAME: "FavoriteTeam"
};
var DATABASE_NAME = CONFIG.DATABASE_NAME,
    DATABASE_VERSION = CONFIG.DATABASE_VERSION,
    OBJECT_STORE_NAME = CONFIG.OBJECT_STORE_NAME;
var dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {
  upgrade: function upgrade(database) {
    database.createObjectStore(OBJECT_STORE_NAME, {
      keyPath: 'id'
    });
  }
});
var FavoriteTeamIDB = {
  getTeam: function getTeam(id) {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return dbPromise;

            case 2:
              return _context.abrupt("return", _context.sent.get(OBJECT_STORE_NAME, id));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  getAllTeams: function getAllTeams() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return dbPromise;

            case 2:
              return _context2.abrupt("return", _context2.sent.getAll(OBJECT_STORE_NAME));

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  putTeam: function putTeam(team) {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
      return regenerator_default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return dbPromise;

            case 2:
              return _context3.abrupt("return", _context3.sent.put(OBJECT_STORE_NAME, team));

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  deleteTeam: function deleteTeam(id) {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
      return regenerator_default().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return dbPromise;

            case 2:
              return _context4.abrupt("return", _context4.sent["delete"](OBJECT_STORE_NAME, id));

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }))();
  }
};
/* harmony default export */ const favoriteTeamIDB = (FavoriteTeamIDB);
// EXTERNAL MODULE: ./node_modules/toastify-js/src/toastify.js
var toastify = __webpack_require__(526);
var toastify_default = /*#__PURE__*/__webpack_require__.n(toastify);
;// CONCATENATED MODULE: ./src/scripts/views/pages/favoritePage.js
/* provided dependency */ var favoritePage_$ = __webpack_require__(957);









var favoritePage = {
  init: function init() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", "\n\t\t\t<div class=\"favorite-page dark:bg-gray-800 w-full h-auto flex-row \">\n\t\t\t\t<div id=\"hero-image\"></div>\n\t\t\t\t<div class=\"title flex sm:flex-row font-semibold ml-6 text-2xl sm:items-center\">\n\t\t\t\t\t<div class=\"title-favorite-teams my-auto flex items-center w-2/4 \">\n\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\" h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t\t\t  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<span class=\"my-auto ml-2 text-xl\">\n\t\t\t\t\t\t\tYour Favorite Teams\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"search-favorite-teams sm:ml-auto mr-6 flex w-2/4\">\n\t\t\t\t\t\t<div class=\"ml-auto flex items-center border border-gray-300 w-4/4 sm:2/4 shadow-inner rounded-md \">\n\t\t\t\t\t\t\t<button id=\"btn-search-teams\" class=\"hover:shadow-inner dark:text-white m-auto flex items-center p-2\">\n\t\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t\t\t\t  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<input type=\"text\" id=\"search-team\" class=\"w-5/6 dark:bg-gray-800 dark:text-white  text-xl sm:ml-auto hidden focus:outline-none\" placeholder=\"Search Team\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<custom-loading></custom-loading>\n\n\t\t\t\t<div id=\"list-teams\" class=\"list-teams w-full h-auto p-8 grid gap-8 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5\">\n\t\t\t\t</div>\n\t\t\t</div>");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  afterRender: function afterRender() {
    var _this = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              document.querySelector('#hero-image').innerHTML += hero_image;
              _context2.next = 3;
              return favoriteTeamIDB.getAllTeams();

            case 3:
              _this.allTeams = _context2.sent;
              _context2.next = 6;
              return _this.updateTeams();

            case 6:
              _context2.next = 8;
              return _this.domSearchTeam();

            case 8:
              _context2.next = 10;
              return _this.domShowFormSeach();

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  addColorsTeams: function addColorsTeams() {
    var colors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ["black", "white"];
    var colorsHex = [];
    var typoColorNames = {
      "navyblue": "navy",
      "claret": "#811331"
    };
    var item = '';
    var maxItem = {
      'start': 0,
      'stop': 3
    };
    colors.forEach(function (e) {
      if (maxItem['start'] != maxItem['stop']) {
        var deleteSpaceInText = e.toLowerCase().replace(/\s/g, '');
        var color = typoColorNames[deleteSpaceInText] != null ? typoColorNames[deleteSpaceInText] : deleteSpaceInText;
        colorsHex.push(color);
      }

      maxItem['start']++;
    });
    return colorsHex;
  },
  allButton: function allButton(colors) {
    var buttons = {
      "afterAdd": "<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"color:".concat(colors[0] == "white" ? colors[1] : colors[0], "\" class=\" m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n\t\t\t\t\t\t   </svg>"),
      "beforeAdd": "<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"color:".concat(colors[0] == "white" ? colors[1] : colors[0], "\" class=\" m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n\t\t\t\t\t\t  </svg>")
    };
    return buttons;
  },
  updateTeams: function updateTeams() {
    var _this2 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
      var prosesBtn, prosesEventClickFavorite;
      return regenerator_default().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return favoriteTeamIDB.getAllTeams().then(function (value) {
                document.querySelector('.list-teams').innerHTML = "";
                favoritePage_$("custom-loading").remove();

                if (value.length == 0) {
                  document.querySelector('.favorite-page').innerHTML += "<message-null></message-null>";
                } else {
                  value.forEach(function (e) {
                    var spitClubColors = e.clubColors.split(" / ");
                    document.querySelector('.list-teams').innerHTML += card_item_favorite({
                      idTeam: e.id,
                      nameTeam: e.shortName,
                      location: e.address,
                      stadion: e.venue,
                      pathImage: e.crestUrl,
                      clubColor: spitClubColors
                    });
                  });
                }
              })["catch"](function (e) {
                document.querySelector('.favorite-page').innerHTML += "<message-error message=\"".concat(e.statusText, "\"></message-error>");
              });

            case 2:
              prosesBtn = function prosesBtn() {
                favoritePage_$('.btn-favorite').each( /*#__PURE__*/function () {
                  var _ref = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3(i, obj) {
                    var id, data;
                    return regenerator_default().wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            _context3.prev = 0;
                            id = obj.attributes[1].value;
                            data = _this2.allTeams.find(function (value) {
                              return value.id == id;
                            });
                            _context3.next = 5;
                            return favoriteTeamIDB.getTeam(data.id);

                          case 5:
                            if (!_context3.sent) {
                              _context3.next = 9;
                              break;
                            }

                            obj.innerHTML = _this2.allButton(_this2.addColorsTeams(data.clubColors.split(" / ")))["afterAdd"];
                            _context3.next = 10;
                            break;

                          case 9:
                            obj.innerHTML = _this2.allButton(_this2.addColorsTeams(data.clubColors.split(" / ")))["beforeAdd"];

                          case 10:
                            _context3.next = 14;
                            break;

                          case 12:
                            _context3.prev = 12;
                            _context3.t0 = _context3["catch"](0);

                          case 14:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3, null, [[0, 12]]);
                  }));

                  return function (_x, _x2) {
                    return _ref.apply(this, arguments);
                  };
                }());
              };

              prosesEventClickFavorite = function prosesEventClickFavorite() {
                favoritePage_$('.btn-favorite').on('click', /*#__PURE__*/function () {
                  var _ref2 = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5(e) {
                    var id, data;
                    return regenerator_default().wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            id = e.currentTarget.attributes[1].value;
                            data = _this2.allTeams.find(function (value) {
                              return value.id == id;
                            });
                            _context5.next = 4;
                            return favoriteTeamIDB.getTeam(data.id);

                          case 4:
                            if (!_context5.sent) {
                              _context5.next = 9;
                              break;
                            }

                            _context5.next = 7;
                            return favoriteTeamIDB.deleteTeam(data.id).then( /*#__PURE__*/asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
                              return regenerator_default().wrap(function _callee4$(_context4) {
                                while (1) {
                                  switch (_context4.prev = _context4.next) {
                                    case 0:
                                      _context4.next = 2;
                                      return favoriteTeamIDB.getAllTeams();

                                    case 2:
                                      _this2.allTeams = _context4.sent;
                                      _context4.next = 5;
                                      return _this2.updateTeams();

                                    case 5:
                                    case "end":
                                      return _context4.stop();
                                  }
                                }
                              }, _callee4);
                            }))).then(function () {
                              var message = "".concat(data.name, " sucessfuly deleted from favorite");
                              toastify_default()({
                                text: "".concat(data.name, " sucessfuly deleted from favorite"),
                                duration: 3000,
                                destination: "#/",
                                close: true,
                                gravity: "top",
                                // `top` or `bottom`
                                position: "center",
                                // `left`, `center` or `right`
                                stopOnFocus: true,
                                // Prevents dismissing of toast on hover
                                style: {
                                  background: "linear-gradient(to right, #00b09b, #96c93d)"
                                },
                                onClick: function onClick() {} // Callback after click

                              }).showToast();

                              _this2.showNotification(message);
                            });

                          case 7:
                            _context5.next = 11;
                            break;

                          case 9:
                            _context5.next = 11;
                            return favoriteTeamIDB.putTeam(data).then(function () {
                              var target = e.currentTarget;
                              target.innerHTML = _this2.allButton(_this2.addColorsTeams(data.clubColors.split(" / ")))["afterAdd"];
                            });

                          case 11:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  }));

                  return function (_x3) {
                    return _ref2.apply(this, arguments);
                  };
                }());
              };

              prosesBtn();
              prosesEventClickFavorite();

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }))();
  },
  domSearchTeam: function domSearchTeam() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7() {
      return regenerator_default().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              favoritePage_$('#search-team').on('keyup', function () {
                var value = favoritePage_$('#search-team').val();

                var cardTeams = _toConsumableArray(favoritePage_$('#list-teams .item-card'));

                cardTeams.filter(function (e) {
                  var listTeams = e.querySelector('.side-mid .description h1');

                  if (listTeams.innerText.toLowerCase().indexOf(value.toLowerCase()) > -1) {
                    e.classList.add("inline");
                    e.classList.remove("hidden");
                  } else {
                    e.classList.add("hidden");
                    e.classList.remove("inline");
                  }
                });
              });

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }))();
  },
  domShowFormSeach: function domShowFormSeach() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee8() {
      return regenerator_default().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              favoritePage_$('#btn-search-teams').on('click', function () {
                favoritePage_$('#search-team').toggleClass('hidden');
              });

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }))();
  },
  showNotification: function showNotification(message) {
    var title = "Progressive Web Apps";
    var options = {
      body: message,
      icon: "icon.png",
      badge: "icon.png"
    };

    if (Notification.permission === 'granted') {
      navigator.serviceWorker.ready.then(function (registration) {
        registration.showNotification(title, options);
      });
    } else {
      console.error("Feature Notification Not Allowed");
    }
  }
};
/* harmony default export */ const pages_favoritePage = (favoritePage);
;// CONCATENATED MODULE: ./src/scripts/views/components/header.js
/* provided dependency */ var header_$ = __webpack_require__(957);
var header = {
  init: function init() {
    return "\n\t\t\t<nav class=\"bg-white dark:bg-gray-700\">\n\t\t\t<div class=\"max-w-6xl mx-auto px-4\">\n\t\t\t\t\t<div class=\"flex justify-between space-x-7\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<!-- Website Logo -->\n\n\t\t\t\t\t\t\t<a href=\"#\" class=\"flex items-center dark:text-white py-4 px-2 focus:outline-none focus:ring focus:ring-green-500\">\n\t\t\t\t\t\t\t\t<img src=\"./images/Progressive-Sport-Logo.png\" alt=\"Logo\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<!-- Primary Navbar items -->\n\t\t\t\t\t\t<div class=\"hidden md:flex items-center space-x-2 desktop-navbar focus:outline-none focus:ring focus:ring-green-500\">\n\t\t\t\t\t\t\t<a href=\"#/\" class=\"py-4 px-2 font-semibold border-b-4 border-green-500 dark:text-white text-green-500 \">Home</a>\n\t\t\t\t\t\t\t<a href=\"#/news-page\" class=\"py-4 px-2 dark:text-white text-gray-500 font-semibold hover:text-green-500 transition duration-300\">News</a>\n\t\t\t\t\t\t\t<a href=\"#/favorite-page\" class=\"py-4 px-2 dark:text-white text-gray-500 font-semibold hover:text-green-500 transition duration-300\">Favorite Teams</a>\n\t\t\t\t\t\t\t<a href=\"#/game-page\" class=\"py-4 px-2 dark:text-white text-gray-500 font-semibold hover:text-green-500 transition duration-300 \">Game</a>\n\t\t\t\t\t\t\t<a href=\"javascript:scrollingDown()\" class=\"scrPy py-4 px-2 dark:text-white text-gray-500 font-semibold hover:text-green-500 transition duration-300\">Contact Us</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<!-- Mobile menu button -->\n\t\t\t\t\t<div class=\"md:hidden flex items-center \">\n\t\t\t\t\t\t<button class=\"outline-none mobile-menu-button  focus:outline-none focus:ring focus:ring-green-500\">\n\t\t\t\t\t\t<svg class=\" w-6 h-6 text-gray-500 hover:text-green-500 \"\n\t\t\t\t\t\t\tx-show=\"!showMenu\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path d=\"M4 6h16M4 12h16M4 18h16\"></path>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- mobile menu -->\n\t\t\t<div class=\"hidden md:hidden relative mobile-menu z-10\">\n\t\t\t\t<ul class=\"absolute bg-white w-full focus:outline-none focus:ring focus:ring-green-500\">\n\t\t\t\t\t<li><a href=\"#/\" class=\"block text-sm px-2 py-4 hover:bg-green-500 transition duration-300 bg-green-500 text-white\">Home</a></li>\n\t\t\t\t\t<li><a href=\"#/favorite-page\" class=\"block text-sm px-2 py-4 hover:bg-green-500 transition duration-300\">Favorite Teams</a></li>\n\t\t\t\t\t<li><a href=\"#/news-page\" class=\"block text-sm px-2 py-4 hover:bg-green-500 transition duration-300\">News</a></li>\n\t\t\t\t\t<li><a href=\"#/game-page\" class=\"block text-sm px-2 py-4 hover:bg-green-500 transition duration-300\">Game</a></li>\n\t\t\t\t\t<li><a href=\"javascript:scrollingDown()\" class=\"scrPy block text-sm px-2 py-4 hover:bg-green-500 transition duration-300\">Contact Us</a></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t\t";
  },
  afterRender: function afterRender() {
    this.clickingButton();
    this.changeActiveClass();
    this.scrollingDown();
  },
  clickingButton: function clickingButton() {
    var button = document.querySelector('button.mobile-menu-button');
    var menu = document.querySelector('.mobile-menu');
    button.addEventListener('click', function () {
      menu.classList.toggle('hidden');
    });
  },
  changeActiveClass: function changeActiveClass() {
    header_$('.desktop-navbar a').click(function (event) {
      header_$('.desktop-navbar').children().removeClass('border-b-4 border-green-500 text-green-500');
      header_$(event.target).toggleClass('border-b-4 border-green-500 text-green-500');
    });
    header_$('.mobile-menu ul li').click(function (event) {
      header_$('.mobile-menu ul li').children().removeClass('bg-green-500 text-white');
      console.log(event.target);
      header_$(event.target).toggleClass('bg-green-500 text-white');
    });
  },
  scrollingDown: function scrollingDown() {
    header_$('.scrPy').click(function () {
      var y = header_$(window).scrollTop();
      header_$('html, body').animate({
        scrollTop: y + header_$(document).height()
      }, 1000);
    });
  }
};
/* harmony default export */ const components_header = (header);
;// CONCATENATED MODULE: ./src/scripts/views/components/footer.js
/* provided dependency */ var footer_$ = __webpack_require__(957);
var footer = {
  init: function init() {
    return "\n            <div id=\"alert-3\" class=\" hidden alert-success flex p-4 m-auto w-96  bg-green-100 rounded-lg dark:bg-green-200\" role=\"alert\">\n              <svg class=\"flex-shrink-0 w-5 h-5 text-green-700 dark:text-green-800\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"></path></svg>\n              <div class=\"ml-3 text-sm font-medium text-green-700 dark:text-green-800\">\n                Thank You! \uD83D\uDC4D Your message has been accepted.\n              </div>\n              <button type=\"button\" class=\"alert-del ml-auto -mx-1.5 -my-1.5 bg-green-100 text-green-500 rounded-lg focus:ring-2 focus:ring-green-400 p-1.5 hover:bg-green-200 inline-flex h-8 w-8 dark:bg-green-200 dark:text-green-600 dark:hover:bg-green-300\" data-dismiss-target=\"#alert-3\" aria-label=\"Close\">\n                <span class=\"sr-only\">Close</span>\n                <svg class=\" w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg>\n              </button>\n            </div>\n        <footer class=\"flex relative justify-around flex-wrap md:w-full bg-full bg-cover bg-fixed\" style=\"background-image:url('./images/footer.jpg');\">\n            <div class=\"footer-col mt-3 sm:mb-4\">\n                <ul class=\"list-none inline\">\n                    <li>\n                        <h3 class=\"dark:text-green-600\">Progressive Sport</h3>\n                    </li>\n                    <li>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                        </svg>\n                        Jalan Pahlawan\n                    </li>\n                    <li>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\" />\n                        </svg>\n                        progressive-sport@gmail.com\n                    </li>\n                    <li>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                        </svg>\n                        CPNG-81\n                    </li>\n                </ul>\n            </div>\n            <div class=\"footer-col mt-3\">\n                <h3 class=\"dark:text-green-600\">Contact Us</h3>\n                <form name=\"kotak-informasi\">\n                  <div class=\"mb-6 w-auto\">\n                    <label for=\"email\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your email</label>\n                    <input type=\"email\" name=\"email\" id=\"email\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-green-500 focus:border-green-500 block w-80 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white focus:outline-none focus:ring focus:ring-green-500\" placeholder=\"name@gmail.com\" required>\n                  </div>\n                  <div class=\"mb-6\">\n                    <label for=\"message\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400\">Your message</label>\n                <textarea id=z\"message\" name=\"message\" rows=\"4\" class=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300  focus:border-green-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white focus:outline-none focus:ring focus:ring-green-500\" placeholder=\"Leave a comment...\"></textarea>\n                  </div>\n                  <button type=\"submit\" class=\"btn-send text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm w-80 sm:w-auto px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-500 dark: focus:ring focus:ring-green-500\">Submit</button>\n                <button disabled type=\"button\" class=\"hidden btn-loading text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 dark:bg-green-600 focus:outline-none focus:ring focus:ring-green-500 inline-flex items-center\">\n                    <svg role=\"status\" class=\"inline w-4 h-4 mr-3 text-white animate-spin\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"#E5E7EB\"/>\n                    <path d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\" fill=\"currentColor\"/>\n                    </svg>\n                    Loading...\n                </button>\n            </form>\n            </div>\n            <div class=\"absolute right-5 bottom-5 text-green-700\">\n                <button class=\"scrollTop\">\n                    <svg class=\"w-14 h-14 dark:text-white\" fill=\"text-green-700\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 11l3-3m0 0l3 3m-3-3v8m0-13a9 9 0 110 18 9 9 0 010-18z\"></path></svg>\n                </button>       \n            </div>      \n        </footer>\n        ";
  },
  formSubmitting: function formSubmitting() {
    var scriptURL = 'https://script.google.com/macros/s/AKfycbzj4aHimj0V43dxno8mmTvb-0lMgb7C58GNlpt65BBFusAmt0iT6zPjm-mTvM5TIqV7tA/exec';
    var form = document.forms['kotak-informasi'];
    var btnSend = document.querySelector('.btn-send');
    var btnLoading = document.querySelector('.btn-loading');
    var closeAlert = document.querySelector('.alert-del');
    form.addEventListener('submit', function (event) {
      event.preventDefault(); // when submit button has clicked, show btn loading, hide btn submit

      btnLoading.classList.toggle('hidden');
      btnSend.classList.toggle('hidden');
      footer_$(form).find('button.btn-send').prop('disabled', true);
      fetch(scriptURL, {
        method: 'POST',
        body: new FormData(form)
      }).then(function (response) {
        console.log('Success!', response);
        btnLoading.classList.toggle('hidden');
        btnSend.classList.toggle('hidden'); // success alert

        footer_$('.alert-success').toggleClass('hidden');
        footer_$('.alert-success').find('button.alert-del').on('click', function () {
          footer_$('.alert-success').addClass('hidden');
        });
        form.reset();
        footer_$(form).find('button.btn-send').prop('disabled', false);
      })["catch"](function (error) {
        return console.log('Error!', error.message);
      });
    });
  },
  scrollingTop: function scrollingTop() {
    footer_$('button.scrollTop').click(function () {
      footer_$('html,body').animate({
        scrollTop: 0
      }, "slow");
      return false;
    });
  },
  afterRender: function afterRender() {
    this.formSubmitting();
    this.scrollingTop();
  }
};
/* harmony default export */ const components_footer = (footer);
;// CONCATENATED MODULE: ./src/scripts/views/components/card-league.js
var cardsLeague = function cardsLeague(_ref) {
  var idLeague = _ref.idLeague,
      emblemUrl = _ref.emblemUrl,
      leagueName = _ref.leagueName,
      leagueAreaName = _ref.leagueAreaName,
      currentSeasonStartDate = _ref.currentSeasonStartDate,
      currentSeasonEndDate = _ref.currentSeasonEndDate;

  var render = function render() {
    return "\n\t\t   <div id=\"".concat(idLeague, "\" class=\"card-league dark:bg-gray-800 dark:text-white w-full h-[400px] flex flex-col bg-[#f2f2f2] rounded-[8%] shadow-lg m-auto\">\n\t\t\t\t  <div class=\"side-top w-full h-3/6 flex items-center bg-white p-4\">\n\t\t\t\t    <img class=\"lazyload fade-in mx-auto w-full h-full\" data-src=\"").concat(emblemUrl, "\" alt=\"picture team\">\n\t\t\t\t  </div>\n\t\t\t\t  <div class=\"side-mid flex pt-2 px-4 h-2/6 w-full items-center\">\n\t\t\t\t\t  <div class=\"description w-full m-auto\">\n\t\t\t\t\t  \t<h1 class=\"truncate text-2xl font-semibold\">").concat(leagueName, "</h1>\n\t\t\t\t\t  \t<h3 class=\"truncate text-md mt-[2px] dark:text-white text-gray-700\">Start : ").concat(currentSeasonStartDate, "</h3>\n\t\t\t\t\t  \t<h3 class=\"truncate text-md mt-[2px] dark:text-white text-gray-700\">End : ").concat(currentSeasonEndDate, "</h3>\n\t\t\t\t\t  </div>\n\t\t\t\t  </div>\n\t\t\t\t  <div class=\"side-bottom w-2/4 mx-auto h-1/6 mt-4 flex\">\n\t\t\t\t  \t\t<a href=\"#/league/").concat(idLeague, "\" class=\"btn-detail-liga w-full h-full dark:bg-gray-800 flex rounded bg-[#f9f9f9] shadow-md group hover:shadow-inner focus:outline-none focus:ring focus:ring-green-500\">\n\t             \t\t\t<svg class=\" m-auto h-5 w-5 text-black dark:text-white\"  width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">  <path stroke=\"none\" d=\"M0 0h24v24H0z\"/>  <line x1=\"13\" y1=\"20\" x2=\"20\" y2=\"13\" />  <path d=\"M13 20v-6a1 1 0 0 1 1 -1h6v-7a2 2 0 0 0 -2 -2h-12a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7\" /></svg>\n\t\t\t\t\t\t</a>\n\t\t\t\t  </div>\n\t\t  \t</div>\n\n\t\t");
  };

  return render();
};

/* harmony default export */ const card_league = (cardsLeague);
;// CONCATENATED MODULE: ./src/scripts/views/pages/homePage.js
/* provided dependency */ var homePage_$ = __webpack_require__(957);









var homePage = {
  init: function init() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", "\n        <a href=\"#league\" class=\"skip-link translate-y-[-100%] top-0 w-full left-1/3 md:w-fit mb-4 md:mr-5 py-5 px-7 text-sm text-black font-bold uppercase border-2 border-transparent rounded hover:text-green-400 transition duration-200 focus:outline-none focus:ring focus:ring-green-500 focus:translate-y-[5%]\" tabindex=\"1\">Skip to main content &rarr;</a>\n        <div id=\"hero-image\"></div>\n        <div class=\"flex dark:bg-gray-800\">\n            <div class=\"w-2/4 ml-6\">\n                <h1 class=\"text-xl font-bold  md:text-2xl md:font-semibold \">LEAGUES</h1>\n            </div>\n            <div class=\"search-league mr-6 flex w-2/4\">\n                <div class=\"ml-auto flex items-center border border-gray-300 w-4/4 shadow-inner rounded-md \">\n                    <button id=\"btn-search-leagues\" class=\"hover:shadow-inner m-auto flex items-center p-2\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                        </svg>\n                    </button>\n                    <input type=\"text\" id=\"search-league\" class=\"w-5/6 dark:bg-gray-800 text-xl sm:ml-auto hidden focus:outline-none\" placeholder=\"Search leagues\">\n                </div>\n            </div>\n        </div>\n        <div id=\"league\" class=\"league-container dark:bg-gray-800 w-full h-auto p-8 grid gap-8 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5\">\n            <custom-loading class=\"col-span-full\"></custom-loading>\n        </div>\n        \n        ");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  afterRender: function afterRender() {
    var _this = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              document.getElementById('hero-image').innerHTML = hero_image;
              _context2.next = 3;
              return _this.renderCompetitions();

            case 3:
              _context2.next = 5;
              return _this.searchingForLeague();

            case 5:
              _context2.next = 7;
              return _this.showingResults();

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  renderCompetitions: function renderCompetitions() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
      var leaguesCardContainer, footballDataApi;
      return regenerator_default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              leaguesCardContainer = document.querySelector('.league-container');
              footballDataApi = new data_footballDataApi();
              _context3.next = 4;
              return footballDataApi.getAllCompetitions().then(function (value) {
                homePage_$("custom-loading").remove();
                var leagues = Array();
                idCompetitions.forEach(function (competition) {
                  leagues.push(value.competitions.find(function (value) {
                    return value.id == competition.id;
                  }));
                });
                leagues.forEach(function (item) {
                  leaguesCardContainer.innerHTML += card_league({
                    idLeague: item.id,
                    emblemUrl: item.emblemUrl,
                    leagueName: item.name,
                    leagueAreaName: item.area.name,
                    currentSeasonStartDate: item.currentSeason.startDate,
                    currentSeasonEndDate: item.currentSeason.endDate
                  });
                });
              })["catch"](function (e) {
                if (e.status == 0) {
                  leaguesCardContainer.innerHTML = "<message-error message=\"Limit Request waiting 1 minute\" class=\"col-span-full\"></message-error>";
                } else {
                  leaguesCardContainer.innerHTML = "<message-error message=\"".concat(e.statusText, "\"></message-error>");
                }
              });

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  searchingForLeague: function searchingForLeague() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
      return regenerator_default().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              homePage_$('#search-league').on('keyup', function () {
                var value = homePage_$('#search-league').val();

                var cardsLeague = _toConsumableArray(homePage_$('.league-container .card-league'));

                cardsLeague.filter(function (item) {
                  var listCards = item.querySelector('.side-mid .description h1');

                  if (listCards.innerText.toLowerCase().indexOf(value.toLowerCase()) > -1) {
                    item.classList.add('inline');
                    item.classList.remove('hidden');
                  } else {
                    item.classList.add('hidden');
                    item.classList.remove('inline');
                  }
                });
              });

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }))();
  },
  showingResults: function showingResults() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
      return regenerator_default().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              homePage_$('#btn-search-leagues').on('click', function () {
                homePage_$('#search-league').toggleClass('hidden');
              });

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }))();
  }
};
/* harmony default export */ const pages_homePage = (homePage);
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js


function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/construct.js


function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js




function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}
;// CONCATENATED MODULE: ./src/scripts/views/components/custom-loading.js









function _createSuper(Derived) { var hasNativeReflectConstruct = custom_loading_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function custom_loading_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Loading = /*#__PURE__*/function (_HTMLElement) {
  _inherits(Loading, _HTMLElement);

  var _super = _createSuper(Loading);

  function Loading() {
    _classCallCheck(this, Loading);

    return _super.apply(this, arguments);
  }

  _createClass(Loading, [{
    key: "connectedCallback",
    value: function () {
      var _connectedCallback = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.innerHTML = "\n            <div class=\"lds-ring\">\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n            <style>\n                .lds-ring {\n                  width: 0px;\n                  height: 0px;\n                  margin: auto;\n                  padding: 25% 0;\n                }\n                .lds-ring div {\n                  box-sizing: border-box;\n                  display: block;\n                  position: absolute;\n                  width: 50px;\n                  height: 50px;\n                  margin: 8px;\n                  border: 8px solid #fff;\n                  border-radius: 50%;\n                  animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n                  border-color: black transparent rgb(34 197 94) transparent;\n                }\n                .lds-ring div:nth-child(1) {\n                  animation-delay: -0.45s;\n                }\n                .lds-ring div:nth-child(2) {\n                  animation-delay: -0.3s;\n                }\n                .lds-ring div:nth-child(3) {\n                  animation-delay: -0.15s;\n                }\n                @keyframes lds-ring {\n                  0% {\n                    transform: rotate(0deg);\n                  }\n                  100% {\n                    transform: rotate(360deg);\n                  }\n                }\n            </style>";

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectedCallback() {
        return _connectedCallback.apply(this, arguments);
      }

      return connectedCallback;
    }()
  }]);

  return Loading;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

customElements.define('custom-loading', Loading);
;// CONCATENATED MODULE: ./src/scripts/views/pages/gamePage.js
/* provided dependency */ var gamePage_$ = __webpack_require__(957);







var gamePage = {
  init: function init() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", "\n        <div class=\"relative\">\n            <p class=\"my-10 text-4xl font-semibold text-center\">Games Scheduled</p>\n        </div>\n\n        <custom-loading></custom-loading>\n        \n        <div id=\"next-match\" class=\"next-match w-full my-4 p-8 text-2xl grid gap-8 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5\">\n        </div>\n        \n          ");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  afterRender: function afterRender() {
    var _this = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.getDataAndFilter();

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  card: function card(_ref) {
    var element = _ref.element;
    var time = new Date(element.utcDate).toLocaleTimeString("en-US");
    var date = new Date(element.utcDate).toLocaleDateString("en-US");
    return "\n            <div class=\"bg-[#f2f2f2] dark:bg-gray-800 rounded-[8%] shadow-lg w-full h-[340px] flex flex-col\">\n                <div class=\"mx-auto flex h-3/6 w-full bg-white\">\n                    <span class=\"font-semibold w-full flex flex-col text-black \"> \n                        <img class=\"lazyload fade-in w-[70%] h-[70%] m-auto brightness-150\" data-src=\"".concat(element.competition.area.ensignUrl, "\">\n                    </span>\n                </div>\n                <div class=\"text-sm h-2/6 px-4 mt-4\">\n                    <div class=\"text-next-match truncate flex\">\n                    <span class=\"font-semibold flex-col text-black\"> \n                        <i class=\"truncate m-auto\">").concat(element.homeTeam.name, "</i> \n                        <i class=\"m-auto\">VS</i> \n                        <i class=\"truncate m-auto\">").concat(element.awayTeam.name, "</i>\n                    </span>\n                    </div>\n                    <div class=\"truncate\">Competition : ").concat(element.competition.name, "</div>\n                    <div class=\"truncate\">Match Day : ").concat(element.matchday, "</div>\n                    <div class=\"truncate\">Time : ").concat(time, "</div>\n                    <div class=\"truncate\">Date : ").concat(date, "</div>\n                </div>\n                <div class=\"text-4xl w-2/4 mb-2 m-auto h-1/6 bg-white flex rounded-[15%] shadow-md group hover:shadow-inner bg-[#f9f9f9]\">\n                    <a href=\"#/matches/").concat(element.id, "\" class=\" mx-auto my-auto w-full h-full flex\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"m-auto h-6 w-6 text-gray-400 group-hover:text-black\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                        </svg>\n                    </a>\n                </div>\n            </div>\n        ");
  },
  configurationDate: function configurationDate(value) {
    var date = new Date();
    date.setDate(date.getDate() + value);
    var dateFrom = date.toLocaleDateString("en-US").split('/');
    return "".concat(dateFrom[2], "-").concat(dateFrom[0] >= 9 ? dateFrom[0] : "0".concat(dateFrom[0]), "-").concat(dateFrom[1] >= 9 ? dateFrom[1] : "0".concat(dateFrom[1]));
  },
  getDataAndFilter: function getDataAndFilter() {
    var _this2 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
      var footballDataApi;
      return regenerator_default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              footballDataApi = new data_footballDataApi();
              _context3.next = 3;
              return footballDataApi.getAllMatches({
                dateFrom: _this2.configurationDate(1),
                dateTo: _this2.configurationDate(10)
              }).then(function (value) {
                _this2.dataMatch = Array();
                idCompetitions.forEach(function (e) {
                  var tamp = value.matches.filter(function (match) {
                    return match.competition.id == e.id;
                  });

                  if (tamp.length != 0) {
                    _this2.dataMatch.push(tamp);
                  }
                });

                _this2.nextMatch();
              })["catch"](function (e) {
                gamePage_$("custom-loading").remove();

                if (e.status == 0) {
                  document.querySelector('.next-match').innerHTML = "<message-error message=\"Limit Request waiting 1 minute\" class=\"col-span-full\"></message-error>";
                } else {
                  document.querySelector('.next-match').innerHTML = "<message-error message=\"".concat(e.statusText, "\" class=\"col-span-full\"></message-error>");
                }
              });

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  nextMatch: function nextMatch() {
    var _this3 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
      return regenerator_default().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              gamePage_$("custom-loading").remove();

              _this3.dataMatch.forEach(function (value) {
                value.filter(function (matches) {
                  return matches.status === "SCHEDULED";
                }).forEach(function (e) {
                  document.querySelector('.next-match').innerHTML += _this3.card({
                    element: e
                  });
                });
              });

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }))();
  }
};
/* harmony default export */ const pages_gamePage = (gamePage);
;// CONCATENATED MODULE: ./src/scripts/views/pages/clubPage.js
/* provided dependency */ var clubPage_$ = __webpack_require__(957);







var _require = __webpack_require__(311),
    toast = _require.toast;

var clubPage = {
  init: function init() {
    var _this = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      var html;
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.getData();

            case 2:
              _this.data = _context.sent;
              _this.activeCompt = _this.renderCompetitions({
                data: _this.data
              });
              _this.colors = _this.addColorsTeams(_this.data.clubColors.split(" / "));
              _context.next = 7;
              return _this.createHTML({
                value: _this.data,
                colors: _this.colors,
                activeComptData: _this.activeCompt
              });

            case 7:
              html = _context.sent;
              return _context.abrupt("return", html);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  getData: function getData() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      var footballDataApi, url;
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              footballDataApi = new data_footballDataApi();
              url = url_parser.parseActiveUrlWithoutCombiner();
              _context2.next = 4;
              return footballDataApi.getTeams({
                id: url.id
              });

            case 4:
              return _context2.abrupt("return", _context2.sent);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  createHTML: function createHTML(_ref) {
    var _this2 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
      var value, colors, activeComptData;
      return regenerator_default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              value = _ref.value, colors = _ref.colors, activeComptData = _ref.activeComptData;
              _context3.t0 = "\n\t\t\t<div class=\"w-full h-auto bg-white dark:bg-gray-800\">\n\t\t\t\t<div class=\"hero-image w-full h-[300px] relative bg-gradient-to-r from-black via-white to-green-500 py-8 flex\"\n\t\t\t\t\tstyle = \"\n\t\t\t\t\t\t--tw-gradient-stops: ".concat(colors[0], ",").concat(colors[1], ",").concat(colors[2] || colors[0], ";\">\n\t\t\t\t\t<img class=\"lazyload fade-in m-auto h-full\" data-src=\"").concat(value.crestUrl || '?', "\"></img>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"flex flex-col md:flex-row w-full h-auto\">\n\t\t\t\t\t<div class=\"detail flex flex-col w-full md:w-5/6 h-full\">\n\t\t\t\t\t\t<div class=\"flex p-8\">\n\t\t\t\t\t\t\t<h1 class=\"mr-4 font-bold text-3xl\">").concat(value.shortName || '?', "</h1>\n\t\t\t\t\t\t\t<h3 class=\"mt-auto text-md\">").concat(value.name || '?', "</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"flex ml-8 my-4\">\n\t\t\t\t\t\t\t<h2 class=\"w-1/4 mr-auto font-semibold text-lg\">Stadion</h2>\n\t\t\t\t\t\t\t<h2 class=\"w-3/4 mt-auto  font-semibold text-lg\">").concat(value.venue || '?', "</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"flex ml-8 my-4\">\n\t\t\t\t\t\t\t<h2 class=\"w-1/4 mr-auto font-semibold text-lg\">Email</h2>\n\t\t\t\t\t\t\t<h2 class=\"w-3/4 mt-auto  font-semibold text-lg\">").concat(value.email || '?', "</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"flex ml-8 my-4\">\n\t\t\t\t\t\t\t<h2 class=\"w-1/4 mr-auto font-semibold text-lg\">Address</h2>\n\t\t\t\t\t\t\t<h2 class=\"w-3/4 mt-auto  font-semibold text-lg\">").concat(value.address || '?', "</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"flex ml-8 my-4\">\n\t\t\t\t\t\t\t<h2 class=\"w-1/4 mr-auto font-semibold text-lg\">Phone</h2>\n\t\t\t\t\t\t\t<h2 class=\"w-3/4 mt-auto  font-semibold text-lg\">").concat(value.phone || '?', "</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"flex ml-8 my-4\">\n\t\t\t\t\t\t\t<h2 class=\"w-1/4 mr-auto font-semibold text-lg\">Active Competitions</h2>\n\t\t\t\t\t\t\t<h2 class=\"w-3/4 mt-auto  font-semibold text-lg\">").concat(activeComptData || '?', "</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"allButton w-full md:w-1/6 flex\">\n\t\t\t\t\t\t<button id=\"addToFavorite\" class=\"mb-auto mx-auto mt-7 w-[100px] rounded-md shadow-lg shadow text-center p-2 bg-white\">\n\t\t\t\t\t\t\t");
              _context3.next = 4;
              return favoriteTeamIDB.getTeam(value.id);

            case 4:
              if (!_context3.sent) {
                _context3.next = 8;
                break;
              }

              _context3.t1 = _this2.allButton(colors)["afterAdd"];
              _context3.next = 9;
              break;

            case 8:
              _context3.t1 = _this2.allButton(colors)["beforeAdd"];

            case 9:
              _context3.t2 = _context3.t1;
              return _context3.abrupt("return", _context3.t0.concat.call(_context3.t0, _context3.t2, "\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<a href=\"").concat(value.website, "\" rel=\"noopener noreferrer\" target=\"_blank\" class=\"mb-auto mx-auto mt-7 w-[100px] rounded-md shadow-lg shadow text-center p-2 bg-white\">\n\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"color:").concat(colors[0] == "white" ? colors[1] : colors[0], "\" class=\" m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9\" />\n\t\t\t\t\t\t\t</svg>\t\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"new-bar w-full h-8 flex my-4\">\n\t\t\t\t\t<div style=\"background-color : ").concat(colors[0], "\" class=\"w-2/6 shadow-gray-400 shadow-inner\"></div>\n\t\t\t\t\t<div style=\"background-color : ").concat(colors[1], "\" class=\"w-2/6 shadow-gray-400 shadow-inner mx-10\"></div>\n\t\t\t\t\t<div style=\"background-color : ").concat(colors[2] || colors[0], "\" class=\"w-2/6 shadow-gray-400 shadow-inner\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"squad flex flex-col\">\n\t\t\t\t\t<h2 class=\"font-semibold text-2xl mx-auto\">Squad</h2>\n\t\t\t\t\t<div class=\"squad-team h-full mt-5 mb-5 grid place-items-center\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>"));

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  renderCompetitions: function renderCompetitions(_ref2) {
    var data = _ref2.data;
    var activeCompetitions = [];
    data.activeCompetitions.forEach(function (activeComp) {
      activeCompetitions.push(activeComp.name);
    });

    if (activeCompetitions.length === 0) {
      activeCompetitions.push("None");
    } else {
      activeCompetitions = activeCompetitions.join(", ");
    }

    return activeCompetitions;
  },
  allButton: function allButton(colors) {
    var buttons = {
      "afterAdd": "<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"afterAdd\" style=\"color:".concat(colors[0] == "white" ? colors[1] : colors[0], "\" class=\" m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n\t\t\t\t\t\t   </svg>"),
      "beforeAdd": "<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"beforeAdd\" style=\"color:".concat(colors[0] == "white" ? colors[1] : colors[0], "\" class=\" m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n\t\t\t\t\t\t  </svg>")
    };
    return buttons;
  },
  itemSquad: function itemSquad(e) {
    return "\n\t\t\t   <div class=\"w-6/12 mx-auto rounded border\">\n\t\t\t    <div class=\"bg-white dark:bg-gray-800 p-1 shadow-lg\">\n\t\t\t        <div class=\"transition hover:bg-indigo-50 dark:bg-gray-800\">\n\t\t\t        <!-- header -->\n\t\t\t        <div class=\"accordion-header cursor-pointer transition flex space-x-5 px-5 items-center h-9\">\n\t\t\t            <i class=\"fas fa-info\"></i>\n\t\t\t            <h3>".concat(e.name || '?', "</h3>\n\t\t\t        </div>\n\t\t\t        <!-- Content -->\n\t\t\t        <div class=\"accordion-content px-5 pt-0 overflow-hidden max-h-0\">\n\t\t\t        \t<table class=\"table-auto\">\n\t\t\t\t\t\t  <thead>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t  </thead>\n\t\t\t\t\t\t  <tbody class =\"border-0\">\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <td>Name Player</td>\n\t\t\t\t\t\t      <td>").concat(e.name, "</td>\n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <td>Date of Birth</td>\n\t\t\t\t\t\t      <td>").concat(e.dateOfBirth, "</td> \n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <td>Nationality</td>\n\t\t\t\t\t\t      <td>").concat(e.nationality, "</td> \n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <td>Position</td>\n\t\t\t\t\t\t      <td>").concat(e.position, "</td> \n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t    <tr>\n\t\t\t\t\t\t      <td>Shirt Number</td>\n\t\t\t\t\t\t      <td>").concat(e.shirtNumber || '?', "</td> \n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t     <tr>\n\t\t\t\t\t\t      <td>More Detail</td>\n\t\t\t\t\t\t      <td><a href=\"#/players/").concat(e.id, "\"><i class=\"fas fa-info\"></i></a></td> \n\t\t\t\t\t\t    </tr>\n\t\t\t\t\t\t  </tbody>\n\t\t\t\t\t\t</table>\n\t\t\t        </div>\n\t\t\t        </div>\n\t\t\t    </div>\n    \t\t  </div>\t\t\n\t\t");
  },
  afterRender: function afterRender(data) {
    var _this3 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
      return regenerator_default().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              clubPage_$('.allButton #addToFavorite').on('click', /*#__PURE__*/asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
                return regenerator_default().wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.next = 2;
                        return _this3.addToFavoriteTeamIDB(_this3.data || data);

                      case 2:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              })));

              _this3.data.squad.forEach(function (e) {
                document.querySelector('.squad div.squad-team').innerHTML += _this3.itemSquad(e);
              });

              _this3.accordionToggle();

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }))();
  },
  accordionToggle: function accordionToggle() {
    var accordionHeader = document.querySelectorAll('.accordion-header');
    accordionHeader.forEach(function (header) {
      header.addEventListener('click', function () {
        var accordionContent = header.parentElement.querySelector('.accordion-content');
        var accordionMaxHeight = accordionContent.style.maxHeight;

        if (accordionMaxHeight === "0px" || accordionMaxHeight.length == 0) {
          accordionContent.style.maxHeight = "".concat(accordionContent.scrollHeight + 32, "px");
          header.querySelector(".fas").classList.remove("fa-info");
          header.querySelector(".fas").classList.add("fa-minus");
          header.parentElement.classList.add("bg-indigo-50");
        } else {
          accordionContent.style.maxHeight = "0px";
          header.querySelector(".fas").classList.add("fa-info");
          header.querySelector(".fas").classList.remove("fa-minus");
          header.parentElement.classList.remove("bg-indigo-50");
        }
      });
    });
  },
  addColorsTeams: function addColorsTeams(colors) {
    var colorsHex = [];
    var typoColorNames = {
      "navyblue": "navy",
      "claret": "#811331"
    };
    var item = '';
    var maxItem = {
      'start': 0,
      'stop': 3
    };
    colors.forEach(function (e) {
      if (maxItem['start'] != maxItem['stop']) {
        var deleteSpaceInText = e.toLowerCase().replace(/\s/g, '');
        var color = typoColorNames[deleteSpaceInText] != null ? typoColorNames[deleteSpaceInText] : deleteSpaceInText;
        colorsHex.push(color);
      }

      maxItem['start']++;
    });
    return colorsHex;
  },
  addToFavoriteTeamIDB: function addToFavoriteTeamIDB(data) {
    var _this4 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
      return regenerator_default().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return favoriteTeamIDB.getTeam(data.id);

            case 2:
              if (!_context6.sent) {
                _context6.next = 7;
                break;
              }

              _context6.next = 5;
              return favoriteTeamIDB.deleteTeam(data.id).then(function () {
                clubPage_$('.allButton #addToFavorite').empty();
                clubPage_$('.allButton #addToFavorite').append(_this4.allButton(_this4.colors)["beforeAdd"]);
                var message = "".concat(data.name, " sucessfuly deleted from favorite");
                toastify_default()({
                  text: "".concat(data.name, " sucessfuly deleted from favorite"),
                  duration: 3000,
                  destination: "#/favorite-page",
                  close: true,
                  gravity: "top",
                  // `top` or `bottom`
                  position: "center",
                  // `left`, `center` or `right`
                  stopOnFocus: true,
                  // Prevents dismissing of toast on hover
                  style: {
                    background: "linear-gradient(to right, #00b09b, #96c93d)"
                  },
                  onClick: function onClick() {} // Callback after click

                }).showToast();

                _this4.showNotification(message);
              });

            case 5:
              _context6.next = 9;
              break;

            case 7:
              _context6.next = 9;
              return favoriteTeamIDB.putTeam(data).then(function () {
                clubPage_$('.allButton #addToFavorite').empty();
                clubPage_$('.allButton #addToFavorite').append(_this4.allButton(_this4.colors)["afterAdd"]);
                var message = "".concat(data.name, " sucessfuly added to favorite");
                toastify_default()({
                  text: "".concat(data.name, " sucessfuly added to favorite"),
                  duration: 3000,
                  destination: "#/favorite-page",
                  close: true,
                  gravity: "top",
                  // `top` or `bottom`
                  position: "center",
                  // `left`, `center` or `right`
                  stopOnFocus: true,
                  // Prevents dismissing of toast on hover
                  style: {
                    background: "linear-gradient(to right, #00b09b, #96c93d)"
                  },
                  onClick: function onClick() {} // Callback after click

                }).showToast();

                _this4.showNotification(message);
              });

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }))();
  },
  showNotification: function showNotification(message) {
    var title = "Progressive Web Apps";
    var options = {
      body: message,
      icon: "./icons/icon.png",
      badge: "./icons/icon.png"
    };

    if (Notification.permission === 'granted') {
      navigator.serviceWorker.ready.then(function (registration) {
        registration.showNotification(title, options);
      });
    } else {
      console.error("Feature Notification Not Allowed");
    }
  }
};
/* harmony default export */ const pages_clubPage = (clubPage);
;// CONCATENATED MODULE: ./src/scripts/views/pages/newsPage.js
/* provided dependency */ var newsPage_$ = __webpack_require__(957);


var newsCode = {
  laliga: 'https://site.api.espn.com/apis/site/v2/sports/soccer/esp.1/news',
  epl: 'https://site.api.espn.com/apis/site/v2/sports/soccer/eng.1/news',
  bundesliga: 'https://site.api.espn.com/apis/site/v2/sports/soccer/ger.1/news',
  portugal: 'https://site.api.espn.com/apis/site/v2/sports/soccer/por.1/news',
  ligue1: 'https://site.api.espn.com/apis/site/v2/sports/soccer/fra.1/news',
  serieA: 'https://site.api.espn.com/apis/site/v2/sports/soccer/ita.1/news',
  ucl: 'https://site.api.espn.com/apis/site/v2/sports/soccer/uefa.champions/news',
  eredivisie: 'https://site.api.espn.com/apis/site/v2/sports/soccer/ned.1/news'
};
var NewsPage = {
  init: function init() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", " \n          <custom-loading></custom-loading>\n\t\t<section class=\"text-gray-600 body-font\">\n\t        <div class=\"container px-5 py-24 mx-auto max-w-7x1\">\n\t            <div class=\"flex flex-wrap w-full mb-4 p-4\">\n\t                <div class=\"w-full mb-6 lg:mb-0\">\n                     <h1 class=\"sm:text-4xl text-5xl font-medium font-bold title-font mb-2 text-gray-900 dark:text-white\">News Feed</h1>\n\t                   <div class=\"h-1 w-20 bg-green-400 rounded\"></div>\n\t                </div>\n\t            </div>\n\t            <div class=\"news flex flex-wrap m-4 mb-6 items-stretch\">\n\t                \n\t            </div>\n\t        </div>\n    \t</section>\n\n\t\t");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  afterRender: function afterRender() {
    var _this = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.fetchRequest({
                id: newsCode.bundesliga
              });

            case 2:
              _context2.next = 4;
              return _this.fetchRequest({
                id: newsCode.laliga
              });

            case 4:
              _context2.next = 6;
              return _this.fetchRequest({
                id: newsCode.epl
              });

            case 6:
              _context2.next = 8;
              return _this.fetchRequest({
                id: newsCode.portugal
              });

            case 8:
              _context2.next = 10;
              return _this.fetchRequest({
                id: newsCode.ligue1
              });

            case 10:
              _context2.next = 12;
              return _this.fetchRequest({
                id: newsCode.serieA
              });

            case 12:
              _context2.next = 14;
              return _this.fetchRequest({
                id: newsCode.ucl
              });

            case 14:
              _context2.next = 16;
              return _this.fetchRequest({
                id: newsCode.eredivisie
              });

            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  fetchRequest: function fetchRequest(_ref) {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
      var id, response, data;
      return regenerator_default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              id = _ref.id;
              _context3.next = 3;
              return fetch(id);

            case 3:
              response = _context3.sent;
              _context3.next = 6;
              return response.json();

            case 6:
              data = _context3.sent;

              try {
                data.articles.forEach(function (item) {
                  // console.log(item.images[0].url);
                  newsPage_$('custom-loading').remove();
                  document.querySelector('.news').innerHTML += "\n            \t<div class=\"xl:w-1/3 md:w-1/2 p-4\">\n\t                    <div class=\"bg-white dark:bg-gray-800 shadow-lg p-6 rounded-lg h-full\">\n\t                    \t<img class=\"lg:h-60 xl:h-56 md:h-64 sm:h-72 xs:h-72 h-72  rounded w-full object-cover object-center mb-6\" src=\"".concat(item.images[0].url, "\" alt=\"Image Size 720x400\">\t\t\t\t\n\t\t\t\t\t      \t<h3 class=\"tracking-widest text-green-500 text-xs font-medium title-font\">").concat(item.published, "</h3>\n\t\t\t\t\t        <a href=\"").concat(item.links.web.href, "\" class=\"hover:text-green-500\"> <h2 class=\"text-lg dark:text-white text-gray-900 font-medium title-font mb-4\">").concat(item.headline, "</h2></a>\t\t           \n\t\t\t\t\t        <p class=\"leading-relaxed text-base dark:text-white mb-6\">").concat(item.description, "</p>\n\n\t                    </div>\n\t            </div>\n\t\t\t\t\t\t  ");
                });
              } catch (error) {}

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  }
};
/* harmony default export */ const newsPage = (NewsPage);
;// CONCATENATED MODULE: ./src/scripts/views/components/detail-game.js
var detailGame = function detailGame(_ref) {
  var teamOne = _ref.teamOne,
      teamTwo = _ref.teamTwo,
      nameLeague = _ref.nameLeague,
      pathImage = _ref.pathImage,
      ScoreOne = _ref.ScoreOne,
      ScoreTwo = _ref.ScoreTwo,
      Venue = _ref.Venue,
      Date = _ref.Date,
      Status = _ref.Status,
      Stage = _ref.Stage;

  var render = function render() {
    return "\n\t\t<div class=\" container dark:bg-gray-800 shadow-lg w-3/4 sm:w-1/2 lg:w-1/2 grid grid-cols-1 gap-4 content-around rounded-lg px-5 py-5  mx-auto  bg-white  shadow-md \">\n\t\t\t\t\t<div class=\"text-center  text-xl mb-5 font-semibold lg:text-4xl uppercase brightness-150\">Detail Game</div>\n                    <div class=\"truncate text-xs lg:text-sm\">COMPETITION : ".concat(nameLeague, "</div>\n                    <div class=\"truncate text-xs lg:text-sm\">STATUS :  ").concat(Status, "  </div>\n                    <div class=\"truncate text-xs lg:text-sm\">Venue : ").concat(Venue == null ? "No Data" : Venue, "</div>\n                    <div class=\"truncate text-xs lg:text-sm\">Date : ").concat(Date, "</div>\n\t\t\t\t\t<div class=\"truncate text-xs lg:text-sm\">STAGE : ").concat(Stage, "</div>\n                </div>\n            </div>\n\t\t\t<div class=\"text-center text-xl my-5 lg:text-4xl font-semibold uppercase\">Scores</div>\n\t  <div id=\"lastMatch\" class=\"container bg-white dark:bg-gray-800 shadow-lg w-3/4 sm:w-1/2 lg:w-1/2 flex justify-around mx-auto px-5 py-5 my-10 mt-10 rounded lg:justify-evenly\">\n\t  <div class=\"text-center sm:text-center\">\n\t  <img data-src=\"").concat(pathImage, "\" alt=\"team one\"class=\"lazyload mt-4 fade-in m-auto w-[40%] h-[40%] h-36 brightness-150\">\n\t\t\t  <h2 class=\"text-xs lg:\">").concat(teamOne, "</h2>\n\t\t\t  </div>\n\t\t\t\t<h2 class=\"text-xs my-20 sm: lg:text-2xl   \">").concat(ScoreOne == null ? "" : ScoreOne, "</h2>\n\t\t\t\t<h2 class=\"text-xs my-20 sm: px-4 lg:text-2xl \">-</h2>\n\t\t\t\t<h2 class=\"text-xs my-20 sm:  lg:text-2xl \">").concat(ScoreTwo == null ? "" : ScoreTwo, "</h2>\n\t  <div class=\"text-center  sm:text-center\">\n\t  <img data-src=\"").concat(pathImage, "\" alt=\"team two\" class=\"lazyload mt-4 fade-in m-auto w-[40%] h-[40%]  h-36 brightness-150\">\n\t\t\t  <h2 class=\"text-xs lg: \">").concat(teamTwo, "</h2>\n\n\t</div>\n\t\t");
  };

  return render();
};

/* harmony default export */ const detail_game = (detailGame);
;// CONCATENATED MODULE: ./src/scripts/views/components/detail-table.js
var detailStat = function detailStat(_ref) {
  var ScoreFullAway = _ref.ScoreFullAway,
      ScoreHalfAway = _ref.ScoreHalfAway,
      ScoreFullHome = _ref.ScoreFullHome,
      ScoreHalfHome = _ref.ScoreHalfHome,
      teamOne = _ref.teamOne,
      teamTwo = _ref.teamTwo,
      DrawAway = _ref.DrawAway,
      WonAway = _ref.WonAway,
      LoseAway = _ref.LoseAway,
      DrawHome = _ref.DrawHome,
      WonHome = _ref.WonHome,
      LoseHome = _ref.LoseHome;

  var render = function render() {
    return "\n        <div class=\"w-full text-xs mx-5 \">".concat(teamOne, "</div>\n        <div class=\"w-full text-xs mx-7 \">").concat(WonAway, "</div>\n        <div class=\"w-full text-xs mx-7 \">").concat(LoseAway, "</div>\n        <div class=\"w-full text-xs hidden mx-7 md:inline\">").concat(DrawAway, "</div>\n        <div class=\"w-full text-xs hidden mx-5 lg:hidden xl:inline\">").concat(ScoreHalfAway == null ? "Sedang Berlangsung" : ScoreHalfAway, "</div>\n        <div class=\"w-full text-xs hidden mx-5 lg:inline xl:inline\">").concat(ScoreFullAway == null ? "Sedang Berlangsung" : ScoreFullAway, "</div>\n\n        <div class=\"w-full text-xs mx-5 \">").concat(teamTwo, "</div>\n        <div class=\"w-full text-xs mx-7 \">").concat(WonHome, "</div>\n        <div class=\"w-full text-xs mx-7 \">").concat(LoseHome, "</div>\n        <div class=\"w-full text-xs hidden mx-7 md:inline\">").concat(DrawHome, "</div>\n        <div class=\"w-full text-xs hidden mx-5 lg:hidden inline xl:inline\">").concat(ScoreHalfHome == null ? "Sedang Berlangsung" : ScoreHalfHome, " </div>\n        <div class=\"w-full text-xs hidden mx-5 lg:inline xl:inline \">").concat(ScoreFullHome == null ? "Sedang Berlangsung" : ScoreFullHome, "</div>\n       \n        \n\t\t");
  };

  return render();
};

/* harmony default export */ const detail_table = (detailStat);
;// CONCATENATED MODULE: ./node_modules/@firebase/util/dist/index.esm2017.js
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = index_esm2017_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || index_esm2017_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function index_esm2017_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return index_esm2017_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return index_esm2017_arrayLikeToArray(o, minLen); }

function index_esm2017_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function index_esm2017_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) index_esm2017_setPrototypeOf(subClass, superClass); }

function index_esm2017_createSuper(Derived) { var hasNativeReflectConstruct = index_esm2017_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = index_esm2017_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = index_esm2017_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return index_esm2017_possibleConstructorReturn(this, result); }; }

function index_esm2017_possibleConstructorReturn(self, call) { if (call && (index_esm2017_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return index_esm2017_assertThisInitialized(self); }

function index_esm2017_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function index_esm2017_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; index_esm2017_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !index_esm2017_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return index_esm2017_construct(Class, arguments, index_esm2017_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return index_esm2017_setPrototypeOf(Wrapper, Class); }; return index_esm2017_wrapNativeSuper(Class); }

function index_esm2017_construct(Parent, args, Class) { if (index_esm2017_isNativeReflectConstruct()) { index_esm2017_construct = Reflect.construct; } else { index_esm2017_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) index_esm2017_setPrototypeOf(instance, Class.prototype); return instance; }; } return index_esm2017_construct.apply(null, arguments); }

function index_esm2017_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function index_esm2017_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function index_esm2017_setPrototypeOf(o, p) { index_esm2017_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return index_esm2017_setPrototypeOf(o, p); }

function index_esm2017_getPrototypeOf(o) { index_esm2017_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return index_esm2017_getPrototypeOf(o); }

function index_esm2017_typeof(obj) { "@babel/helpers - typeof"; return index_esm2017_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, index_esm2017_typeof(obj); }

function index_esm2017_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function index_esm2017_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function index_esm2017_createClass(Constructor, protoProps, staticProps) { if (protoProps) index_esm2017_defineProperties(Constructor.prototype, protoProps); if (staticProps) index_esm2017_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
var CONSTANTS = {
  /**
   * @define {boolean} Whether this is the client Node.js SDK.
   */
  NODE_CLIENT: false,

  /**
   * @define {boolean} Whether this is the Admin Node.js SDK.
   */
  NODE_ADMIN: false,

  /**
   * Firebase SDK Version
   */
  SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Throws an error if the provided assertion is falsy
 */

var assert = function assert(assertion, message) {
  if (!assertion) {
    throw assertionError(message);
  }
};
/**
 * Returns an Error object suitable for throwing.
 */


var assertionError = function assertionError(message) {
  return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var stringToByteArray$1 = function stringToByteArray$1(str) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
      // Surrogate Pair
      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */


var byteArrayToString = function byteArrayToString(bytes) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var pos = 0,
      c = 0;

  while (pos < bytes.length) {
    var c1 = bytes[pos++];

    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      // Surrogate Pair
      var _c = bytes[pos++];
      var c3 = bytes[pos++];
      var c4 = bytes[pos++];
      var u = ((c1 & 7) << 18 | (_c & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
      out[c++] = String.fromCharCode(0xd800 + (u >> 10));
      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
    } else {
      var _c2 = bytes[pos++];
      var _c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (_c2 & 63) << 6 | _c3 & 63);
    }
  }

  return out.join('');
}; // We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()


var base64 = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,

  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,

  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,

  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,

  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',

  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + '+/=';
  },

  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + '-_.';
  },

  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob === 'function',

  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray: function encodeByteArray(input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error('encodeByteArray takes an array as a parameter');
    }

    this.init_();
    var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    var output = [];

    for (var i = 0; i < input.length; i += 3) {
      var byte1 = input[i];
      var haveByte2 = i + 1 < input.length;
      var byte2 = haveByte2 ? input[i + 1] : 0;
      var haveByte3 = i + 2 < input.length;
      var byte3 = haveByte3 ? input[i + 2] : 0;
      var outByte1 = byte1 >> 2;
      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
      var outByte4 = byte3 & 0x3f;

      if (!haveByte3) {
        outByte4 = 64;

        if (!haveByte2) {
          outByte3 = 64;
        }
      }

      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }

    return output.join('');
  },

  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString: function encodeString(input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }

    return this.encodeByteArray(stringToByteArray$1(input), webSafe);
  },

  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString: function decodeString(input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }

    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },

  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray: function decodeStringToByteArray(input, webSafe) {
    this.init_();
    var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    var output = [];

    for (var i = 0; i < input.length;) {
      var byte1 = charToByteMap[input.charAt(i++)];
      var haveByte2 = i < input.length;
      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      var haveByte3 = i < input.length;
      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      var haveByte4 = i < input.length;
      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;

      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw Error();
      }

      var outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);

      if (byte3 !== 64) {
        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
        output.push(outByte2);

        if (byte4 !== 64) {
          var outByte3 = byte3 << 6 & 0xc0 | byte4;
          output.push(outByte3);
        }
      }
    }

    return output;
  },

  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_: function init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {}; // We want quick mappings back and forth, so we precompute two maps.

      for (var i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i; // Be forgiving when decoding and correctly decode both encodings.

        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
/**
 * URL-safe base64 encoding
 */

var base64Encode = function base64Encode(str) {
  var utf8Bytes = stringToByteArray$1(str);
  return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */


var base64urlEncodeWithoutPadding = function base64urlEncodeWithoutPadding(str) {
  // Use base64url encoding and remove padding in the end (dot characters).
  return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */


var base64Decode = function base64Decode(str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error('base64Decode failed: ', e);
  }

  return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */


function deepCopy(value) {
  return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */


function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }

  switch (source.constructor) {
    case Date:
      // Treat Dates like scalars; if the target date object had any child
      // properties - they will be lost!
      var dateValue = source;
      return new Date(dateValue.getTime());

    case Object:
      if (target === undefined) {
        target = {};
      }

      break;

    case Array:
      // Always copy the array source and overwrite the target.
      target = [];
      break;

    default:
      // Not a plain Object - treat it as a scalar.
      return source;
  }

  for (var prop in source) {
    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
      continue;
    }

    target[prop] = deepExtend(target[prop], source[prop]);
  }

  return target;
}

function isValidKey(key) {
  return key !== '__proto__';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Deferred = /*#__PURE__*/function () {
  function Deferred() {
    var _this = this;

    index_esm2017_classCallCheck(this, Deferred);

    this.reject = function () {};

    this.resolve = function () {};

    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */


  index_esm2017_createClass(Deferred, [{
    key: "wrapCallback",
    value: function wrapCallback(callback) {
      var _this2 = this;

      return function (error, value) {
        if (error) {
          _this2.reject(error);
        } else {
          _this2.resolve(value);
        }

        if (typeof callback === 'function') {
          // Attaching noop handler just in case developer wasn't expecting
          // promises
          _this2.promise["catch"](function () {}); // Some of our callbacks don't expect a value and our own tests
          // assert that the parameter length is 1


          if (callback.length === 1) {
            callback(error);
          } else {
            callback(error, value);
          }
        }
      };
    }
  }]);

  return Deferred;
}();
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function index_esm2017_createMockUserToken(token, projectId) {
  if (token.uid) {
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  } // Unsecured JWTs use "none" as the algorithm.


  var header = {
    alg: 'none',
    type: 'JWT'
  };
  var project = projectId || 'demo-project';
  var iat = token.iat || 0;
  var sub = token.sub || token.user_id;

  if (!sub) {
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  }

  var payload = Object.assign({
    // Set all required fields to decent defaults
    iss: "https://securetoken.google.com/".concat(project),
    aud: project,
    iat: iat,
    exp: iat + 3600,
    auth_time: iat,
    sub: sub,
    user_id: sub,
    firebase: {
      sign_in_provider: 'custom',
      identities: {}
    }
  }, token); // Unsecured JWTs use the empty string as a signature.

  var signature = '';
  return [base64urlEncodeWithoutPadding(JSON.stringify(header)), base64urlEncodeWithoutPadding(JSON.stringify(payload)), signature].join('.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */


function index_esm2017_getUA() {
  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
    return navigator['userAgent'];
  } else {
    return '';
  }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */


function index_esm2017_isMobileCordova() {
  return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(index_esm2017_getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/


function isNode() {
  try {
    return Object.prototype.toString.call(__webpack_require__.g.process) === '[object process]';
  } catch (e) {
    return false;
  }
}
/**
 * Detect Browser Environment
 */


function isBrowser() {
  return (typeof self === "undefined" ? "undefined" : index_esm2017_typeof(self)) === 'object' && self.self === self;
}

function index_esm2017_isBrowserExtension() {
  var runtime = (typeof chrome === "undefined" ? "undefined" : index_esm2017_typeof(chrome)) === 'object' ? chrome.runtime : (typeof browser === "undefined" ? "undefined" : index_esm2017_typeof(browser)) === 'object' ? browser.runtime : undefined;
  return index_esm2017_typeof(runtime) === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */


function index_esm2017_isReactNative() {
  return (typeof navigator === "undefined" ? "undefined" : index_esm2017_typeof(navigator)) === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */


function index_esm2017_isElectron() {
  return index_esm2017_getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */


function index_esm2017_isIE() {
  var ua = index_esm2017_getUA();
  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */


function index_esm2017_isUWP() {
  return index_esm2017_getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */


function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */


function index_esm2017_isSafari() {
  return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */


function index_esm2017_isIndexedDBAvailable() {
  return (typeof indexedDB === "undefined" ? "undefined" : index_esm2017_typeof(indexedDB)) === 'object';
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */


function validateIndexedDBOpenable() {
  return new Promise(function (resolve, reject) {
    try {
      var preExist = true;
      var DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
      var request = self.indexedDB.open(DB_CHECK_NAME);

      request.onsuccess = function () {
        request.result.close(); // delete database only when it doesn't pre-exist

        if (!preExist) {
          self.indexedDB.deleteDatabase(DB_CHECK_NAME);
        }

        resolve(true);
      };

      request.onupgradeneeded = function () {
        preExist = false;
      };

      request.onerror = function () {
        var _a;

        reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
      };
    } catch (error) {
      reject(error);
    }
  });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */


function areCookiesEnabled() {
  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {
    return false;
  }

  return true;
}
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 */


function getGlobal() {
  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof __webpack_require__.g !== 'undefined') {
    return __webpack_require__.g;
  }

  throw new Error('Unable to locate global object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Standardized Firebase Error.
 *
 * Usage:
 *
 *   // Typescript string literals for type-safe codes
 *   type Err =
 *     'unknown' |
 *     'object-not-found'
 *     ;
 *
 *   // Closure enum for type-safe error codes
 *   // at-enum {string}
 *   var Err = {
 *     UNKNOWN: 'unknown',
 *     OBJECT_NOT_FOUND: 'object-not-found',
 *   }
 *
 *   let errors: Map<Err, string> = {
 *     'generic-error': "Unknown error",
 *     'file-not-found': "Could not find file: {$file}",
 *   };
 *
 *   // Type-safe function - must pass a valid error code as param.
 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
 *
 *   ...
 *   throw error.create(Err.GENERIC);
 *   ...
 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
 *   ...
 *   // Service: Could not file file: foo.txt (service/file-not-found).
 *
 *   catch (e) {
 *     assert(e.message === "Could not find file: foo.txt.");
 *     if (e.code === 'service/file-not-found') {
 *       console.log("Could not read file: " + e['file']);
 *     }
 *   }
 */


var ERROR_NAME = 'FirebaseError'; // Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types

var FirebaseError = /*#__PURE__*/function (_Error) {
  index_esm2017_inherits(FirebaseError, _Error);

  var _super = index_esm2017_createSuper(FirebaseError);

  function FirebaseError(
  /** The error code for this error. */
  code, message,
  /** Custom data for this error. */
  customData) {
    var _this3;

    index_esm2017_classCallCheck(this, FirebaseError);

    _this3 = _super.call(this, message);
    _this3.code = code;
    _this3.customData = customData;
    /** The custom name for all FirebaseErrors. */

    _this3.name = ERROR_NAME; // Fix For ES5
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work

    Object.setPrototypeOf(index_esm2017_assertThisInitialized(_this3), FirebaseError.prototype); // Maintains proper stack trace for where our error was thrown.
    // Only available on V8.

    if (Error.captureStackTrace) {
      Error.captureStackTrace(index_esm2017_assertThisInitialized(_this3), ErrorFactory.prototype.create);
    }

    return _this3;
  }

  return index_esm2017_createClass(FirebaseError);
}( /*#__PURE__*/index_esm2017_wrapNativeSuper(Error));

var ErrorFactory = /*#__PURE__*/function () {
  function ErrorFactory(service, serviceName, errors) {
    index_esm2017_classCallCheck(this, ErrorFactory);

    this.service = service;
    this.serviceName = serviceName;
    this.errors = errors;
  }

  index_esm2017_createClass(ErrorFactory, [{
    key: "create",
    value: function create(code) {
      var customData = (arguments.length <= 1 ? undefined : arguments[1]) || {};
      var fullCode = "".concat(this.service, "/").concat(code);
      var template = this.errors[code];
      var message = template ? replaceTemplate(template, customData) : 'Error'; // Service Name: Error message (service/code).

      var fullMessage = "".concat(this.serviceName, ": ").concat(message, " (").concat(fullCode, ").");
      var error = new FirebaseError(fullCode, fullMessage, customData);
      return error;
    }
  }]);

  return ErrorFactory;
}();

function replaceTemplate(template, data) {
  return template.replace(PATTERN, function (_, key) {
    var value = data[key];
    return value != null ? String(value) : "<".concat(key, "?>");
  });
}

var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */

function jsonEval(str) {
  return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */


function stringify(data) {
  return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var decode = function decode(token) {
  var header = {},
      claims = {},
      data = {},
      signature = '';

  try {
    var parts = token.split('.');
    header = jsonEval(base64Decode(parts[0]) || '');
    claims = jsonEval(base64Decode(parts[1]) || '');
    signature = parts[2];
    data = claims['d'] || {};
    delete claims['d'];
  } catch (e) {}

  return {
    header: header,
    claims: claims,
    data: data,
    signature: signature
  };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isValidTimestamp = function isValidTimestamp(token) {
  var claims = decode(token).claims;
  var now = Math.floor(new Date().getTime() / 1000);
  var validSince = 0,
      validUntil = 0;

  if (index_esm2017_typeof(claims) === 'object') {
    if (claims.hasOwnProperty('nbf')) {
      validSince = claims['nbf'];
    } else if (claims.hasOwnProperty('iat')) {
      validSince = claims['iat'];
    }

    if (claims.hasOwnProperty('exp')) {
      validUntil = claims['exp'];
    } else {
      // token will expire after 24h by default
      validUntil = validSince + 86400;
    }
  }

  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var issuedAtTime = function issuedAtTime(token) {
  var claims = decode(token).claims;

  if (index_esm2017_typeof(claims) === 'object' && claims.hasOwnProperty('iat')) {
    return claims['iat'];
  }

  return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isValidFormat = function isValidFormat(token) {
  var decoded = decode(token),
      claims = decoded.claims;
  return !!claims && index_esm2017_typeof(claims) === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isAdmin = function isAdmin(token) {
  var claims = decode(token).claims;
  return index_esm2017_typeof(claims) === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

function safeGet(obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) {
    return obj[key];
  } else {
    return undefined;
  }
}

function isEmpty(obj) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }

  return true;
}

function map(obj, fn, contextObj) {
  var res = {};

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      res[key] = fn.call(contextObj, obj[key], key, obj);
    }
  }

  return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */


function index_esm2017_deepEqual(a, b) {
  if (a === b) {
    return true;
  }

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);

  for (var _i = 0, _aKeys = aKeys; _i < _aKeys.length; _i++) {
    var k = _aKeys[_i];

    if (!bKeys.includes(k)) {
      return false;
    }

    var aProp = a[k];
    var bProp = b[k];

    if (isObject(aProp) && isObject(bProp)) {
      if (!index_esm2017_deepEqual(aProp, bProp)) {
        return false;
      }
    } else if (aProp !== bProp) {
      return false;
    }
  }

  for (var _i2 = 0, _bKeys = bKeys; _i2 < _bKeys.length; _i2++) {
    var _k = _bKeys[_i2];

    if (!aKeys.includes(_k)) {
      return false;
    }
  }

  return true;
}

function isObject(thing) {
  return thing !== null && index_esm2017_typeof(thing) === 'object';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */


function querystring(querystringParams) {
  var params = [];

  var _loop = function _loop() {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    if (Array.isArray(value)) {
      value.forEach(function (arrayVal) {
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }
  };

  for (var _i3 = 0, _Object$entries = Object.entries(querystringParams); _i3 < _Object$entries.length; _i3++) {
    _loop();
  }

  return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */


function querystringDecode(querystring) {
  var obj = {};
  var tokens = querystring.replace(/^\?/, '').split('&');
  tokens.forEach(function (token) {
    if (token) {
      var _token$split = token.split('='),
          _token$split2 = _slicedToArray(_token$split, 2),
          key = _token$split2[0],
          value = _token$split2[1];

      obj[decodeURIComponent(key)] = decodeURIComponent(value);
    }
  });
  return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */


function extractQuerystring(url) {
  var queryStart = url.indexOf('?');

  if (!queryStart) {
    return '';
  }

  var fragmentStart = url.indexOf('#', queryStart);
  return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */

/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */


var Sha1 = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Sha1() {
    index_esm2017_classCallCheck(this, Sha1);

    /**
     * Holds the previous values of accumulated variables a-e in the compress_
     * function.
     * @private
     */
    this.chain_ = [];
    /**
     * A buffer holding the partially computed hash result.
     * @private
     */

    this.buf_ = [];
    /**
     * An array of 80 bytes, each a part of the message to be hashed.  Referred to
     * as the message schedule in the docs.
     * @private
     */

    this.W_ = [];
    /**
     * Contains data needed to pad messages less than 64 bytes.
     * @private
     */

    this.pad_ = [];
    /**
     * @private {number}
     */

    this.inbuf_ = 0;
    /**
     * @private {number}
     */

    this.total_ = 0;
    this.blockSize = 512 / 8;
    this.pad_[0] = 128;

    for (var i = 1; i < this.blockSize; ++i) {
      this.pad_[i] = 0;
    }

    this.reset();
  }

  index_esm2017_createClass(Sha1, [{
    key: "reset",
    value: function reset() {
      this.chain_[0] = 0x67452301;
      this.chain_[1] = 0xefcdab89;
      this.chain_[2] = 0x98badcfe;
      this.chain_[3] = 0x10325476;
      this.chain_[4] = 0xc3d2e1f0;
      this.inbuf_ = 0;
      this.total_ = 0;
    }
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */

  }, {
    key: "compress_",
    value: function compress_(buf, offset) {
      if (!offset) {
        offset = 0;
      }

      var W = this.W_; // get 16 big endian words

      if (typeof buf === 'string') {
        for (var i = 0; i < 16; i++) {
          // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
          // have a bug that turns the post-increment ++ operator into pre-increment
          // during JIT compilation.  We have code that depends heavily on SHA-1 for
          // correctness and which is affected by this bug, so I've removed all uses
          // of post-increment ++ in which the result value is used.  We can revert
          // this change once the Safari bug
          // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
          // most clients have been updated.
          W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
          offset += 4;
        }
      } else {
        for (var _i4 = 0; _i4 < 16; _i4++) {
          W[_i4] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
          offset += 4;
        }
      } // expand to 80 words


      for (var _i5 = 16; _i5 < 80; _i5++) {
        var t = W[_i5 - 3] ^ W[_i5 - 8] ^ W[_i5 - 14] ^ W[_i5 - 16];
        W[_i5] = (t << 1 | t >>> 31) & 0xffffffff;
      }

      var a = this.chain_[0];
      var b = this.chain_[1];
      var c = this.chain_[2];
      var d = this.chain_[3];
      var e = this.chain_[4];
      var f, k; // TODO(user): Try to unroll this loop to speed up the computation.

      for (var _i6 = 0; _i6 < 80; _i6++) {
        if (_i6 < 40) {
          if (_i6 < 20) {
            f = d ^ b & (c ^ d);
            k = 0x5a827999;
          } else {
            f = b ^ c ^ d;
            k = 0x6ed9eba1;
          }
        } else {
          if (_i6 < 60) {
            f = b & c | d & (b | c);
            k = 0x8f1bbcdc;
          } else {
            f = b ^ c ^ d;
            k = 0xca62c1d6;
          }
        }

        var _t = (a << 5 | a >>> 27) + f + e + k + W[_i6] & 0xffffffff;

        e = d;
        d = c;
        c = (b << 30 | b >>> 2) & 0xffffffff;
        b = a;
        a = _t;
      }

      this.chain_[0] = this.chain_[0] + a & 0xffffffff;
      this.chain_[1] = this.chain_[1] + b & 0xffffffff;
      this.chain_[2] = this.chain_[2] + c & 0xffffffff;
      this.chain_[3] = this.chain_[3] + d & 0xffffffff;
      this.chain_[4] = this.chain_[4] + e & 0xffffffff;
    }
  }, {
    key: "update",
    value: function update(bytes, length) {
      // TODO(johnlenz): tighten the function signature and remove this check
      if (bytes == null) {
        return;
      }

      if (length === undefined) {
        length = bytes.length;
      }

      var lengthMinusBlock = length - this.blockSize;
      var n = 0; // Using local instead of member variables gives ~5% speedup on Firefox 16.

      var buf = this.buf_;
      var inbuf = this.inbuf_; // The outer while loop should execute at most twice.

      while (n < length) {
        // When we have no data in the block to top up, we can directly process the
        // input buffer (assuming it contains sufficient data). This gives ~25%
        // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
        // the data is provided in large chunks (or in multiples of 64 bytes).
        if (inbuf === 0) {
          while (n <= lengthMinusBlock) {
            this.compress_(bytes, n);
            n += this.blockSize;
          }
        }

        if (typeof bytes === 'string') {
          while (n < length) {
            buf[inbuf] = bytes.charCodeAt(n);
            ++inbuf;
            ++n;

            if (inbuf === this.blockSize) {
              this.compress_(buf);
              inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

              break;
            }
          }
        } else {
          while (n < length) {
            buf[inbuf] = bytes[n];
            ++inbuf;
            ++n;

            if (inbuf === this.blockSize) {
              this.compress_(buf);
              inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

              break;
            }
          }
        }
      }

      this.inbuf_ = inbuf;
      this.total_ += length;
    }
    /** @override */

  }, {
    key: "digest",
    value: function digest() {
      var digest = [];
      var totalBits = this.total_ * 8; // Add pad 0x80 0x00*.

      if (this.inbuf_ < 56) {
        this.update(this.pad_, 56 - this.inbuf_);
      } else {
        this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
      } // Add # bits.


      for (var i = this.blockSize - 1; i >= 56; i--) {
        this.buf_[i] = totalBits & 255;
        totalBits /= 256; // Don't use bit-shifting here!
      }

      this.compress_(this.buf_);
      var n = 0;

      for (var _i7 = 0; _i7 < 5; _i7++) {
        for (var j = 24; j >= 0; j -= 8) {
          digest[n] = this.chain_[_i7] >> j & 255;
          ++n;
        }
      }

      return digest;
    }
  }]);

  return Sha1;
}()));
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */


function createSubscribe(executor, onNoObservers) {
  var proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */


var ObserverProxy = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  function ObserverProxy(executor, onNoObservers) {
    var _this4 = this;

    index_esm2017_classCallCheck(this, ObserverProxy);

    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0; // Micro-task scheduling by calling task.then().

    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers; // Call the executor asynchronously so subscribers that are called
    // synchronously after the creation of the subscribe function
    // can still receive the very first value generated in the executor.

    this.task.then(function () {
      executor(_this4);
    })["catch"](function (e) {
      _this4.error(e);
    });
  }

  index_esm2017_createClass(ObserverProxy, [{
    key: "next",
    value: function next(value) {
      this.forEachObserver(function (observer) {
        observer.next(value);
      });
    }
  }, {
    key: "error",
    value: function error(_error) {
      this.forEachObserver(function (observer) {
        observer.error(_error);
      });
      this.close(_error);
    }
  }, {
    key: "complete",
    value: function complete() {
      this.forEachObserver(function (observer) {
        observer.complete();
      });
      this.close();
    }
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */

  }, {
    key: "subscribe",
    value: function subscribe(nextOrObserver, error, complete) {
      var _this5 = this;

      var observer;

      if (nextOrObserver === undefined && error === undefined && complete === undefined) {
        throw new Error('Missing Observer.');
      } // Assemble an Observer object when passed as callback functions.


      if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
        observer = nextOrObserver;
      } else {
        observer = {
          next: nextOrObserver,
          error: error,
          complete: complete
        };
      }

      if (observer.next === undefined) {
        observer.next = noop;
      }

      if (observer.error === undefined) {
        observer.error = noop;
      }

      if (observer.complete === undefined) {
        observer.complete = noop;
      }

      var unsub = this.unsubscribeOne.bind(this, this.observers.length); // Attempt to subscribe to a terminated Observable - we
      // just respond to the Observer with the final error or complete
      // event.

      if (this.finalized) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(function () {
          try {
            if (_this5.finalError) {
              observer.error(_this5.finalError);
            } else {
              observer.complete();
            }
          } catch (e) {// nothing
          }

          return;
        });
      }

      this.observers.push(observer);
      return unsub;
    } // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.

  }, {
    key: "unsubscribeOne",
    value: function unsubscribeOne(i) {
      if (this.observers === undefined || this.observers[i] === undefined) {
        return;
      }

      delete this.observers[i];
      this.observerCount -= 1;

      if (this.observerCount === 0 && this.onNoObservers !== undefined) {
        this.onNoObservers(this);
      }
    }
  }, {
    key: "forEachObserver",
    value: function forEachObserver(fn) {
      if (this.finalized) {
        // Already closed by previous event....just eat the additional values.
        return;
      } // Since sendOne calls asynchronously - there is no chance that
      // this.observers will become undefined.


      for (var i = 0; i < this.observers.length; i++) {
        this.sendOne(i, fn);
      }
    } // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.

  }, {
    key: "sendOne",
    value: function sendOne(i, fn) {
      var _this6 = this;

      // Execute the callback asynchronously
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.task.then(function () {
        if (_this6.observers !== undefined && _this6.observers[i] !== undefined) {
          try {
            fn(_this6.observers[i]);
          } catch (e) {
            // Ignore exceptions raised in Observers or missing methods of an
            // Observer.
            // Log error to console. b/31404806
            if (typeof console !== 'undefined' && console.error) {
              console.error(e);
            }
          }
        }
      });
    }
  }, {
    key: "close",
    value: function close(err) {
      var _this7 = this;

      if (this.finalized) {
        return;
      }

      this.finalized = true;

      if (err !== undefined) {
        this.finalError = err;
      } // Proxy is no longer needed - garbage collect references
      // eslint-disable-next-line @typescript-eslint/no-floating-promises


      this.task.then(function () {
        _this7.observers = undefined;
        _this7.onNoObservers = undefined;
      });
    }
  }]);

  return ObserverProxy;
}()));
/** Turn synchronous function into one called asynchronously. */
// eslint-disable-next-line @typescript-eslint/ban-types


function index_esm2017_async(fn, onError) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    Promise.resolve(true).then(function () {
      fn.apply(void 0, args);
    })["catch"](function (error) {
      if (onError) {
        onError(error);
      }
    });
  };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */


function implementsAnyMethods(obj, methods) {
  if (index_esm2017_typeof(obj) !== 'object' || obj === null) {
    return false;
  }

  var _iterator = _createForOfIteratorHelper(methods),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var method = _step.value;

      if (method in obj && typeof obj[method] === 'function') {
        return true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return false;
}

function noop() {// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */


var validateArgCount = function validateArgCount(fnName, minCount, maxCount, argCount) {
  var argError;

  if (argCount < minCount) {
    argError = 'at least ' + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
  }

  if (argError) {
    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
    throw new Error(error);
  }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */


function errorPrefix(fnName, argName) {
  return "".concat(fnName, " failed: ").concat(argName, " argument ");
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */


function validateNamespace(fnName, namespace, optional) {
  if (optional && !namespace) {
    return;
  }

  if (typeof namespace !== 'string') {
    //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
  }
}

function validateCallback(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
  if (optional && !callback) {
    return;
  }

  if (typeof callback !== 'function') {
    throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
  }
}

function validateContextObject(fnName, argumentName, context, optional) {
  if (optional && !context) {
    return;
  }

  if (index_esm2017_typeof(context) !== 'object' || context === null) {
    throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
  }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3

/**
 * @param {string} str
 * @return {Array}
 */


var stringToByteArray = function stringToByteArray(str) {
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i); // Is this the lead surrogate in a surrogate pair?

    if (c >= 0xd800 && c <= 0xdbff) {
      var high = c - 0xd800; // the high 10 bits.

      i++;
      assert(i < str.length, 'Surrogate pair missing trail surrogate.');
      var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.

      c = 0x10000 + (high << 10) + low;
    }

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */


var stringLength = function stringLength(str) {
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 0xd800 && c <= 0xdbff) {
      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
      p += 4;
      i++; // skip trail surrogate.
    } else {
      p += 3;
    }
  }

  return p;
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The amount of milliseconds to exponentially increase.
 */


var DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */

var DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */

var MAX_VALUE_MILLIS = (/* unused pure expression or super */ null && (4 * 60 * 60 * 1000)); // Four hours, like iOS and Android.

/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */

var RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */

function calculateBackoffMillis(backoffCount) {
  var intervalMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_INTERVAL_MILLIS;
  var backoffFactor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BACKOFF_FACTOR;
  // Calculates an exponentially increasing value.
  // Deviation: calculates value from count and a constant interval, so we only need to save value
  // and count to restore state.
  var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount); // A random "fuzz" to avoid waves of retries.
  // Deviation: randomFactor is required.

  var randomWait = Math.round( // A fraction of the backoff value to add/subtract.
  // Deviation: changes multiplication order to improve readability.
  RANDOM_FACTOR * currBaseValue * ( // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
  // if we add or subtract.
  Math.random() - 0.5) * 2); // Limits backoff to max to avoid effectively permanent backoff.

  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provide English ordinal letters after a number
 */


function ordinal(i) {
  if (!Number.isFinite(i)) {
    return "".concat(i);
  }

  return i + indicator(i);
}

function indicator(i) {
  i = Math.abs(i);
  var cent = i % 100;

  if (cent >= 10 && cent <= 20) {
    return 'th';
  }

  var dec = i % 10;

  if (dec === 1) {
    return 'st';
  }

  if (dec === 2) {
    return 'nd';
  }

  if (dec === 3) {
    return 'rd';
  }

  return 'th';
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function index_esm2017_getModularInstance(service) {
  if (service && service._delegate) {
    return service._delegate;
  } else {
    return service;
  }
}


;// CONCATENATED MODULE: ./node_modules/@firebase/component/dist/esm/index.esm2017.js
function index_esm2017_toConsumableArray(arr) { return index_esm2017_arrayWithoutHoles(arr) || index_esm2017_iterableToArray(arr) || esm_index_esm2017_unsupportedIterableToArray(arr) || index_esm2017_nonIterableSpread(); }

function index_esm2017_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function index_esm2017_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function index_esm2017_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return esm_index_esm2017_arrayLikeToArray(arr); }

function index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function index_esm2017_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function index_esm2017_slicedToArray(arr, i) { return index_esm2017_arrayWithHoles(arr) || index_esm2017_iterableToArrayLimit(arr, i) || esm_index_esm2017_unsupportedIterableToArray(arr, i) || index_esm2017_nonIterableRest(); }

function index_esm2017_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function index_esm2017_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function index_esm2017_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function index_esm2017_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = esm_index_esm2017_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function esm_index_esm2017_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return esm_index_esm2017_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return esm_index_esm2017_arrayLikeToArray(o, minLen); }

function esm_index_esm2017_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function esm_index_esm2017_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function esm_index_esm2017_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function esm_index_esm2017_createClass(Constructor, protoProps, staticProps) { if (protoProps) esm_index_esm2017_defineProperties(Constructor.prototype, protoProps); if (staticProps) esm_index_esm2017_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */

var Component = /*#__PURE__*/function () {
  /**
   *
   * @param name The public service name, e.g. app, auth, firestore, database
   * @param instanceFactory Service factory responsible for creating the public interface
   * @param type whether the service provided by the component is public or private
   */
  function Component(name, instanceFactory, type) {
    esm_index_esm2017_classCallCheck(this, Component);

    this.name = name;
    this.instanceFactory = instanceFactory;
    this.type = type;
    this.multipleInstances = false;
    /**
     * Properties to be added to the service namespace
     */

    this.serviceProps = {};
    this.instantiationMode = "LAZY"
    /* LAZY */
    ;
    this.onInstanceCreated = null;
  }

  esm_index_esm2017_createClass(Component, [{
    key: "setInstantiationMode",
    value: function setInstantiationMode(mode) {
      this.instantiationMode = mode;
      return this;
    }
  }, {
    key: "setMultipleInstances",
    value: function setMultipleInstances(multipleInstances) {
      this.multipleInstances = multipleInstances;
      return this;
    }
  }, {
    key: "setServiceProps",
    value: function setServiceProps(props) {
      this.serviceProps = props;
      return this;
    }
  }, {
    key: "setInstanceCreatedCallback",
    value: function setInstanceCreatedCallback(callback) {
      this.onInstanceCreated = callback;
      return this;
    }
  }]);

  return Component;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */

var Provider = /*#__PURE__*/function () {
  function Provider(name, container) {
    esm_index_esm2017_classCallCheck(this, Provider);

    this.name = name;
    this.container = container;
    this.component = null;
    this.instances = new Map();
    this.instancesDeferred = new Map();
    this.instancesOptions = new Map();
    this.onInitCallbacks = new Map();
  }
  /**
   * @param identifier A provider can provide mulitple instances of a service
   * if this.component.multipleInstances is true.
   */


  esm_index_esm2017_createClass(Provider, [{
    key: "get",
    value: function get(identifier) {
      // if multipleInstances is not supported, use the default name
      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);

      if (!this.instancesDeferred.has(normalizedIdentifier)) {
        var deferred = new Deferred();
        this.instancesDeferred.set(normalizedIdentifier, deferred);

        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
          // initialize the service if it can be auto-initialized
          try {
            var instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });

            if (instance) {
              deferred.resolve(instance);
            }
          } catch (e) {// when the instance factory throws an exception during get(), it should not cause
            // a fatal error. We just return the unresolved promise in this case.
          }
        }
      }

      return this.instancesDeferred.get(normalizedIdentifier).promise;
    }
  }, {
    key: "getImmediate",
    value: function getImmediate(options) {
      var _a; // if multipleInstances is not supported, use the default name


      var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
      var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;

      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
        try {
          return this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier
          });
        } catch (e) {
          if (optional) {
            return null;
          } else {
            throw e;
          }
        }
      } else {
        // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
        if (optional) {
          return null;
        } else {
          throw Error("Service ".concat(this.name, " is not available"));
        }
      }
    }
  }, {
    key: "getComponent",
    value: function getComponent() {
      return this.component;
    }
  }, {
    key: "setComponent",
    value: function setComponent(component) {
      if (component.name !== this.name) {
        throw Error("Mismatching Component ".concat(component.name, " for Provider ").concat(this.name, "."));
      }

      if (this.component) {
        throw Error("Component for ".concat(this.name, " has already been provided"));
      }

      this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)

      if (!this.shouldAutoInitialize()) {
        return;
      } // if the service is eager, initialize the default instance


      if (isComponentEager(component)) {
        try {
          this.getOrInitializeService({
            instanceIdentifier: DEFAULT_ENTRY_NAME
          });
        } catch (e) {// when the instance factory for an eager Component throws an exception during the eager
          // initialization, it should not cause a fatal error.
          // TODO: Investigate if we need to make it configurable, because some component may want to cause
          // a fatal error in this case?
        }
      } // Create service instances for the pending promises and resolve them
      // NOTE: if this.multipleInstances is false, only the default instance will be created
      // and all promises with resolve with it regardless of the identifier.


      var _iterator = index_esm2017_createForOfIteratorHelper(this.instancesDeferred.entries()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = index_esm2017_slicedToArray(_step.value, 2),
              instanceIdentifier = _step$value[0],
              instanceDeferred = _step$value[1];

          var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);

          try {
            // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
            var instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
            instanceDeferred.resolve(instance);
          } catch (e) {// when the instance factory throws an exception, it should not cause
            // a fatal error. We just leave the promise unresolved.
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "clearInstance",
    value: function clearInstance() {
      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;
      this.instancesDeferred["delete"](identifier);
      this.instancesOptions["delete"](identifier);
      this.instances["delete"](identifier);
    } // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?

  }, {
    key: "delete",
    value: function () {
      var _delete2 = index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var services;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                services = Array.from(this.instances.values());
                _context.next = 3;
                return Promise.all([].concat(index_esm2017_toConsumableArray(services.filter(function (service) {
                  return 'INTERNAL' in service;
                }) // legacy services
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .map(function (service) {
                  return service.INTERNAL["delete"]();
                })), index_esm2017_toConsumableArray(services.filter(function (service) {
                  return '_delete' in service;
                }) // modularized services
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .map(function (service) {
                  return service._delete();
                }))));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "isComponentSet",
    value: function isComponentSet() {
      return this.component != null;
    }
  }, {
    key: "isInitialized",
    value: function isInitialized() {
      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;
      return this.instances.has(identifier);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;
      return this.instancesOptions.get(identifier) || {};
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _opts$options = opts.options,
          options = _opts$options === void 0 ? {} : _opts$options;
      var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);

      if (this.isInitialized(normalizedIdentifier)) {
        throw Error("".concat(this.name, "(").concat(normalizedIdentifier, ") has already been initialized"));
      }

      if (!this.isComponentSet()) {
        throw Error("Component ".concat(this.name, " has not been registered yet"));
      }

      var instance = this.getOrInitializeService({
        instanceIdentifier: normalizedIdentifier,
        options: options
      }); // resolve any pending promise waiting for the service instance

      var _iterator2 = index_esm2017_createForOfIteratorHelper(this.instancesDeferred.entries()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = index_esm2017_slicedToArray(_step2.value, 2),
              instanceIdentifier = _step2$value[0],
              instanceDeferred = _step2$value[1];

          var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);

          if (normalizedIdentifier === normalizedDeferredIdentifier) {
            instanceDeferred.resolve(instance);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return instance;
    }
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */

  }, {
    key: "onInit",
    value: function onInit(callback, identifier) {
      var _a;

      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
      var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
      existingCallbacks.add(callback);
      this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
      var existingInstance = this.instances.get(normalizedIdentifier);

      if (existingInstance) {
        callback(existingInstance, normalizedIdentifier);
      }

      return function () {
        existingCallbacks["delete"](callback);
      };
    }
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */

  }, {
    key: "invokeOnInitCallbacks",
    value: function invokeOnInitCallbacks(instance, identifier) {
      var callbacks = this.onInitCallbacks.get(identifier);

      if (!callbacks) {
        return;
      }

      var _iterator3 = index_esm2017_createForOfIteratorHelper(callbacks),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var callback = _step3.value;

          try {
            callback(instance, identifier);
          } catch (_a) {// ignore errors in the onInit callback
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "getOrInitializeService",
    value: function getOrInitializeService(_ref) {
      var instanceIdentifier = _ref.instanceIdentifier,
          _ref$options = _ref.options,
          options = _ref$options === void 0 ? {} : _ref$options;
      var instance = this.instances.get(instanceIdentifier);

      if (!instance && this.component) {
        instance = this.component.instanceFactory(this.container, {
          instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
          options: options
        });
        this.instances.set(instanceIdentifier, instance);
        this.instancesOptions.set(instanceIdentifier, options);
        /**
         * Invoke onInit listeners.
         * Note this.component.onInstanceCreated is different, which is used by the component creator,
         * while onInit listeners are registered by consumers of the provider.
         */

        this.invokeOnInitCallbacks(instance, instanceIdentifier);
        /**
         * Order is important
         * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
         * makes `isInitialized()` return true.
         */

        if (this.component.onInstanceCreated) {
          try {
            this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
          } catch (_a) {// ignore errors in the onInstanceCreatedCallback
          }
        }
      }

      return instance || null;
    }
  }, {
    key: "normalizeInstanceIdentifier",
    value: function normalizeInstanceIdentifier() {
      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;

      if (this.component) {
        return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
      } else {
        return identifier; // assume multiple instances are supported before the component is provided.
      }
    }
  }, {
    key: "shouldAutoInitialize",
    value: function shouldAutoInitialize() {
      return !!this.component && this.component.instantiationMode !== "EXPLICIT"
      /* EXPLICIT */
      ;
    }
  }]);

  return Provider;
}(); // undefined should be passed to the service factory for the default instance


function normalizeIdentifierForFactory(identifier) {
  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}

function isComponentEager(component) {
  return component.instantiationMode === "EAGER"
  /* EAGER */
  ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */


var ComponentContainer = /*#__PURE__*/function () {
  function ComponentContainer(name) {
    esm_index_esm2017_classCallCheck(this, ComponentContainer);

    this.name = name;
    this.providers = new Map();
  }
  /**
   *
   * @param component Component being added
   * @param overwrite When a component with the same name has already been registered,
   * if overwrite is true: overwrite the existing component with the new component and create a new
   * provider with the new component. It can be useful in tests where you want to use different mocks
   * for different tests.
   * if overwrite is false: throw an exception
   */


  esm_index_esm2017_createClass(ComponentContainer, [{
    key: "addComponent",
    value: function addComponent(component) {
      var provider = this.getProvider(component.name);

      if (provider.isComponentSet()) {
        throw new Error("Component ".concat(component.name, " has already been registered with ").concat(this.name));
      }

      provider.setComponent(component);
    }
  }, {
    key: "addOrOverwriteComponent",
    value: function addOrOverwriteComponent(component) {
      var provider = this.getProvider(component.name);

      if (provider.isComponentSet()) {
        // delete the existing provider from the container, so we can register the new component
        this.providers["delete"](component.name);
      }

      this.addComponent(component);
    }
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */

  }, {
    key: "getProvider",
    value: function getProvider(name) {
      if (this.providers.has(name)) {
        return this.providers.get(name);
      } // create a Provider for a service that hasn't registered with Firebase


      var provider = new Provider(name, this);
      this.providers.set(name, provider);
      return provider;
    }
  }, {
    key: "getProviders",
    value: function getProviders() {
      return Array.from(this.providers.values());
    }
  }]);

  return ComponentContainer;
}();


;// CONCATENATED MODULE: ./node_modules/@firebase/logger/dist/esm/index.esm2017.js
var _ConsoleMethod;

function esm_index_esm2017_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = dist_esm_index_esm2017_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function dist_esm_index_esm2017_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dist_esm_index_esm2017_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dist_esm_index_esm2017_arrayLikeToArray(o, minLen); }

function dist_esm_index_esm2017_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function dist_esm_index_esm2017_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function dist_esm_index_esm2017_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function dist_esm_index_esm2017_createClass(Constructor, protoProps, staticProps) { if (protoProps) dist_esm_index_esm2017_defineProperties(Constructor.prototype, protoProps); if (staticProps) dist_esm_index_esm2017_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function index_esm2017_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A container for all of the Logger instances
 */
var instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */

var index_esm2017_LogLevel;

(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
  LogLevel[LogLevel["INFO"] = 2] = "INFO";
  LogLevel[LogLevel["WARN"] = 3] = "WARN";
  LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
  LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(index_esm2017_LogLevel || (index_esm2017_LogLevel = {}));

var levelStringToEnum = {
  'debug': index_esm2017_LogLevel.DEBUG,
  'verbose': index_esm2017_LogLevel.VERBOSE,
  'info': index_esm2017_LogLevel.INFO,
  'warn': index_esm2017_LogLevel.WARN,
  'error': index_esm2017_LogLevel.ERROR,
  'silent': index_esm2017_LogLevel.SILENT
};
/**
 * The default log level
 */

var defaultLogLevel = index_esm2017_LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */

var ConsoleMethod = (_ConsoleMethod = {}, index_esm2017_defineProperty(_ConsoleMethod, index_esm2017_LogLevel.DEBUG, 'log'), index_esm2017_defineProperty(_ConsoleMethod, index_esm2017_LogLevel.VERBOSE, 'log'), index_esm2017_defineProperty(_ConsoleMethod, index_esm2017_LogLevel.INFO, 'info'), index_esm2017_defineProperty(_ConsoleMethod, index_esm2017_LogLevel.WARN, 'warn'), index_esm2017_defineProperty(_ConsoleMethod, index_esm2017_LogLevel.ERROR, 'error'), _ConsoleMethod);
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */

var defaultLogHandler = function defaultLogHandler(instance, logType) {
  if (logType < instance.logLevel) {
    return;
  }

  var now = new Date().toISOString();
  var method = ConsoleMethod[logType];

  if (method) {
    var _console;

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    (_console = console)[method].apply(_console, ["[".concat(now, "]  ").concat(instance.name, ":")].concat(args));
  } else {
    throw new Error("Attempted to log a message with an invalid logType (value: ".concat(logType, ")"));
  }
};

var Logger = /*#__PURE__*/function () {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  function Logger(name) {
    dist_esm_index_esm2017_classCallCheck(this, Logger);

    this.name = name;
    /**
     * The log level of the given Logger instance.
     */

    this._logLevel = defaultLogLevel;
    /**
     * The main (internal) log handler for the Logger instance.
     * Can be set to a new function in internal package code but not by user.
     */

    this._logHandler = defaultLogHandler;
    /**
     * The optional, additional, user-defined log handler for the Logger instance.
     */

    this._userLogHandler = null;
    /**
     * Capture the current instance for later use
     */

    instances.push(this);
  }

  dist_esm_index_esm2017_createClass(Logger, [{
    key: "logLevel",
    get: function get() {
      return this._logLevel;
    },
    set: function set(val) {
      if (!(val in index_esm2017_LogLevel)) {
        throw new TypeError("Invalid value \"".concat(val, "\" assigned to `logLevel`"));
      }

      this._logLevel = val;
    } // Workaround for setter/getter having to be the same type.

  }, {
    key: "setLogLevel",
    value: function setLogLevel(val) {
      this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    }
  }, {
    key: "logHandler",
    get: function get() {
      return this._logHandler;
    },
    set: function set(val) {
      if (typeof val !== 'function') {
        throw new TypeError('Value assigned to `logHandler` must be a function');
      }

      this._logHandler = val;
    }
  }, {
    key: "userLogHandler",
    get: function get() {
      return this._userLogHandler;
    },
    set: function set(val) {
      this._userLogHandler = val;
    }
    /**
     * The functions below are all based on the `console` interface
     */

  }, {
    key: "debug",
    value: function debug() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this._userLogHandler && this._userLogHandler.apply(this, [this, index_esm2017_LogLevel.DEBUG].concat(args));

      this._logHandler.apply(this, [this, index_esm2017_LogLevel.DEBUG].concat(args));
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this._userLogHandler && this._userLogHandler.apply(this, [this, index_esm2017_LogLevel.VERBOSE].concat(args));

      this._logHandler.apply(this, [this, index_esm2017_LogLevel.VERBOSE].concat(args));
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this._userLogHandler && this._userLogHandler.apply(this, [this, index_esm2017_LogLevel.INFO].concat(args));

      this._logHandler.apply(this, [this, index_esm2017_LogLevel.INFO].concat(args));
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      this._userLogHandler && this._userLogHandler.apply(this, [this, index_esm2017_LogLevel.WARN].concat(args));

      this._logHandler.apply(this, [this, index_esm2017_LogLevel.WARN].concat(args));
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      this._userLogHandler && this._userLogHandler.apply(this, [this, index_esm2017_LogLevel.ERROR].concat(args));

      this._logHandler.apply(this, [this, index_esm2017_LogLevel.ERROR].concat(args));
    }
  }]);

  return Logger;
}();

function setLogLevel(level) {
  instances.forEach(function (inst) {
    inst.setLogLevel(level);
  });
}

function index_esm2017_setUserLogHandler(logCallback, options) {
  var _iterator = esm_index_esm2017_createForOfIteratorHelper(instances),
      _step;

  try {
    var _loop = function _loop() {
      var instance = _step.value;
      var customLogLevel = null;

      if (options && options.level) {
        customLogLevel = levelStringToEnum[options.level];
      }

      if (logCallback === null) {
        instance.userLogHandler = null;
      } else {
        instance.userLogHandler = function (instance, level) {
          for (var _len7 = arguments.length, args = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
            args[_key7 - 2] = arguments[_key7];
          }

          var message = args.map(function (arg) {
            if (arg == null) {
              return null;
            } else if (typeof arg === 'string') {
              return arg;
            } else if (typeof arg === 'number' || typeof arg === 'boolean') {
              return arg.toString();
            } else if (arg instanceof Error) {
              return arg.message;
            } else {
              try {
                return JSON.stringify(arg);
              } catch (ignored) {
                return null;
              }
            }
          }).filter(function (arg) {
            return arg;
          }).join(' ');

          if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
            logCallback({
              level: index_esm2017_LogLevel[level].toLowerCase(),
              message: message,
              args: args,
              type: instance.name
            });
          }
        };
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}


;// CONCATENATED MODULE: ./node_modules/@firebase/app/dist/esm/index.esm2017.js
var _PLATFORM_LOG_STRING, _ERRORS;

function esm_index_esm2017_toConsumableArray(arr) { return esm_index_esm2017_arrayWithoutHoles(arr) || esm_index_esm2017_iterableToArray(arr) || app_dist_esm_index_esm2017_unsupportedIterableToArray(arr) || esm_index_esm2017_nonIterableSpread(); }

function esm_index_esm2017_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function esm_index_esm2017_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function esm_index_esm2017_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return app_dist_esm_index_esm2017_arrayLikeToArray(arr); }

function esm_index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function esm_index_esm2017_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { esm_index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { esm_index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function esm_index_esm2017_typeof(obj) { "@babel/helpers - typeof"; return esm_index_esm2017_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, esm_index_esm2017_typeof(obj); }

function dist_esm_index_esm2017_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = app_dist_esm_index_esm2017_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function app_dist_esm_index_esm2017_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return app_dist_esm_index_esm2017_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return app_dist_esm_index_esm2017_arrayLikeToArray(o, minLen); }

function app_dist_esm_index_esm2017_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function esm_index_esm2017_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function app_dist_esm_index_esm2017_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function app_dist_esm_index_esm2017_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function app_dist_esm_index_esm2017_createClass(Constructor, protoProps, staticProps) { if (protoProps) app_dist_esm_index_esm2017_defineProperties(Constructor.prototype, protoProps); if (staticProps) app_dist_esm_index_esm2017_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }






/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var PlatformLoggerServiceImpl = /*#__PURE__*/function () {
  function PlatformLoggerServiceImpl(container) {
    app_dist_esm_index_esm2017_classCallCheck(this, PlatformLoggerServiceImpl);

    this.container = container;
  } // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.


  app_dist_esm_index_esm2017_createClass(PlatformLoggerServiceImpl, [{
    key: "getPlatformInfoString",
    value: function getPlatformInfoString() {
      var providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are
      // version components.

      return providers.map(function (provider) {
        if (isVersionServiceProvider(provider)) {
          var service = provider.getImmediate();
          return "".concat(service.library, "/").concat(service.version);
        } else {
          return null;
        }
      }).filter(function (logString) {
        return logString;
      }).join(' ');
    }
  }]);

  return PlatformLoggerServiceImpl;
}();
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */


function isVersionServiceProvider(provider) {
  var component = provider.getComponent();
  return (component === null || component === void 0 ? void 0 : component.type) === "VERSION"
  /* VERSION */
  ;
}

var name$o = "@firebase/app";
var version$1 = "0.7.25";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = new Logger('@firebase/app');
var name$n = "@firebase/app-compat";
var name$m = "@firebase/analytics-compat";
var name$l = "@firebase/analytics";
var name$k = "@firebase/app-check-compat";
var name$j = "@firebase/app-check";
var name$i = "@firebase/auth";
var name$h = "@firebase/auth-compat";
var name$g = "@firebase/database";
var name$f = "@firebase/database-compat";
var name$e = "@firebase/functions";
var name$d = "@firebase/functions-compat";
var name$c = "@firebase/installations";
var name$b = "@firebase/installations-compat";
var name$a = "@firebase/messaging";
var name$9 = "@firebase/messaging-compat";
var name$8 = "@firebase/performance";
var name$7 = "@firebase/performance-compat";
var name$6 = "@firebase/remote-config";
var name$5 = "@firebase/remote-config-compat";
var name$4 = "@firebase/storage";
var name$3 = "@firebase/storage-compat";
var name$2 = "@firebase/firestore";
var name$1 = "@firebase/firestore-compat";
var index_esm2017_name = "firebase";
var version = "9.8.2";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The default app name
 *
 * @internal
 */

var index_esm2017_DEFAULT_ENTRY_NAME = '[DEFAULT]';
var PLATFORM_LOG_STRING = (_PLATFORM_LOG_STRING = {}, esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$o, 'fire-core'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$n, 'fire-core-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$l, 'fire-analytics'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$m, 'fire-analytics-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$j, 'fire-app-check'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$k, 'fire-app-check-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$i, 'fire-auth'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$h, 'fire-auth-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$g, 'fire-rtdb'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$f, 'fire-rtdb-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$e, 'fire-fn'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$d, 'fire-fn-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$c, 'fire-iid'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$b, 'fire-iid-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$a, 'fire-fcm'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$9, 'fire-fcm-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$8, 'fire-perf'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$7, 'fire-perf-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$6, 'fire-rc'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$5, 'fire-rc-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$4, 'fire-gcs'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$3, 'fire-gcs-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$2, 'fire-fst'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, name$1, 'fire-fst-compat'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, 'fire-js', 'fire-js'), esm_index_esm2017_defineProperty(_PLATFORM_LOG_STRING, index_esm2017_name, 'fire-js-all'), _PLATFORM_LOG_STRING);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @internal
 */

var _apps = new Map();
/**
 * Registered components.
 *
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


var _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */


function _addComponent(app, component) {
  try {
    app.container.addComponent(component);
  } catch (e) {
    logger.debug("Component ".concat(component.name, " failed to register with FirebaseApp ").concat(app.name), e);
  }
}
/**
 *
 * @internal
 */


function _addOrOverwriteComponent(app, component) {
  app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */


function _registerComponent(component) {
  var componentName = component.name;

  if (_components.has(componentName)) {
    logger.debug("There were multiple attempts to register component ".concat(componentName, "."));
    return false;
  }

  _components.set(componentName, component); // add the component to existing app instances


  var _iterator = dist_esm_index_esm2017_createForOfIteratorHelper(_apps.values()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var app = _step.value;

      _addComponent(app, component);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */


function index_esm2017_getProvider(app, name) {
  var heartbeatController = app.container.getProvider('heartbeat').getImmediate({
    optional: true
  });

  if (heartbeatController) {
    void heartbeatController.triggerHeartbeat();
  }

  return app.container.getProvider(name);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */


function index_esm2017_removeServiceInstance(app, name) {
  var instanceIdentifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : index_esm2017_DEFAULT_ENTRY_NAME;

  index_esm2017_getProvider(app, name).clearInstance(instanceIdentifier);
}
/**
 * Test only
 *
 * @internal
 */


function _clearComponents() {
  _components.clear();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ERRORS = (_ERRORS = {}, esm_index_esm2017_defineProperty(_ERRORS, "no-app"
/* NO_APP */
, "No Firebase App '{$appName}' has been created - " + 'call Firebase App.initializeApp()'), esm_index_esm2017_defineProperty(_ERRORS, "bad-app-name"
/* BAD_APP_NAME */
, "Illegal App name: '{$appName}"), esm_index_esm2017_defineProperty(_ERRORS, "duplicate-app"
/* DUPLICATE_APP */
, "Firebase App named '{$appName}' already exists with different options or config"), esm_index_esm2017_defineProperty(_ERRORS, "app-deleted"
/* APP_DELETED */
, "Firebase App named '{$appName}' already deleted"), esm_index_esm2017_defineProperty(_ERRORS, "invalid-app-argument"
/* INVALID_APP_ARGUMENT */
, 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.'), esm_index_esm2017_defineProperty(_ERRORS, "invalid-log-argument"
/* INVALID_LOG_ARGUMENT */
, 'First argument to `onLog` must be null or a function.'), esm_index_esm2017_defineProperty(_ERRORS, "storage-open"
/* STORAGE_OPEN */
, 'Error thrown when opening storage. Original error: {$originalErrorMessage}.'), esm_index_esm2017_defineProperty(_ERRORS, "storage-get"
/* STORAGE_GET */
, 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.'), esm_index_esm2017_defineProperty(_ERRORS, "storage-set"
/* STORAGE_WRITE */
, 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.'), esm_index_esm2017_defineProperty(_ERRORS, "storage-delete"
/* STORAGE_DELETE */
, 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'), _ERRORS);
var ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FirebaseAppImpl = /*#__PURE__*/function () {
  function FirebaseAppImpl(options, config, container) {
    var _this = this;

    app_dist_esm_index_esm2017_classCallCheck(this, FirebaseAppImpl);

    this._isDeleted = false;
    this._options = Object.assign({}, options);
    this._config = Object.assign({}, config);
    this._name = config.name;
    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
    this._container = container;
    this.container.addComponent(new Component('app', function () {
      return _this;
    }, "PUBLIC"
    /* PUBLIC */
    ));
  }

  app_dist_esm_index_esm2017_createClass(FirebaseAppImpl, [{
    key: "automaticDataCollectionEnabled",
    get: function get() {
      this.checkDestroyed();
      return this._automaticDataCollectionEnabled;
    },
    set: function set(val) {
      this.checkDestroyed();
      this._automaticDataCollectionEnabled = val;
    }
  }, {
    key: "name",
    get: function get() {
      this.checkDestroyed();
      return this._name;
    }
  }, {
    key: "options",
    get: function get() {
      this.checkDestroyed();
      return this._options;
    }
  }, {
    key: "config",
    get: function get() {
      this.checkDestroyed();
      return this._config;
    }
  }, {
    key: "container",
    get: function get() {
      return this._container;
    }
  }, {
    key: "isDeleted",
    get: function get() {
      return this._isDeleted;
    },
    set: function set(val) {
      this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */

  }, {
    key: "checkDestroyed",
    value: function checkDestroyed() {
      if (this.isDeleted) {
        throw ERROR_FACTORY.create("app-deleted"
        /* APP_DELETED */
        , {
          appName: this._name
        });
      }
    }
  }]);

  return FirebaseAppImpl;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The current SDK version.
 *
 * @public
 */


var SDK_VERSION = version;

function initializeApp(options) {
  var rawConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (esm_index_esm2017_typeof(rawConfig) !== 'object') {
    var _name = rawConfig;
    rawConfig = {
      name: _name
    };
  }

  var config = Object.assign({
    name: index_esm2017_DEFAULT_ENTRY_NAME,
    automaticDataCollectionEnabled: false
  }, rawConfig);
  var name = config.name;

  if (typeof name !== 'string' || !name) {
    throw ERROR_FACTORY.create("bad-app-name"
    /* BAD_APP_NAME */
    , {
      appName: String(name)
    });
  }

  var existingApp = _apps.get(name);

  if (existingApp) {
    // return the existing app if options and config deep equal the ones in the existing app.
    if (index_esm2017_deepEqual(options, existingApp.options) && index_esm2017_deepEqual(config, existingApp.config)) {
      return existingApp;
    } else {
      throw ERROR_FACTORY.create("duplicate-app"
      /* DUPLICATE_APP */
      , {
        appName: name
      });
    }
  }

  var container = new ComponentContainer(name);

  var _iterator2 = dist_esm_index_esm2017_createForOfIteratorHelper(_components.values()),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var component = _step2.value;
      container.addComponent(component);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var newApp = new FirebaseAppImpl(options, config, container);

  _apps.set(name, newApp);

  return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */


function index_esm2017_getApp() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : index_esm2017_DEFAULT_ENTRY_NAME;

  var app = _apps.get(name);

  if (!app) {
    throw ERROR_FACTORY.create("no-app"
    /* NO_APP */
    , {
      appName: name
    });
  }

  return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */


function getApps() {
  return Array.from(_apps.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */


function deleteApp(_x) {
  return _deleteApp.apply(this, arguments);
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */


function _deleteApp() {
  _deleteApp = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(app) {
    var name;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            name = app.name;

            if (!_apps.has(name)) {
              _context7.next = 6;
              break;
            }

            _apps["delete"](name);

            _context7.next = 5;
            return Promise.all(app.container.getProviders().map(function (provider) {
              return provider["delete"]();
            }));

          case 5:
            app.isDeleted = true;

          case 6:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _deleteApp.apply(this, arguments);
}

function registerVersion(libraryKeyOrName, version, variant) {
  var _a; // TODO: We can use this check to whitelist strings when/if we set up
  // a good whitelist system.


  var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;

  if (variant) {
    library += "-".concat(variant);
  }

  var libraryMismatch = library.match(/\s|\//);
  var versionMismatch = version.match(/\s|\//);

  if (libraryMismatch || versionMismatch) {
    var warning = ["Unable to register library \"".concat(library, "\" with version \"").concat(version, "\":")];

    if (libraryMismatch) {
      warning.push("library name \"".concat(library, "\" contains illegal characters (whitespace or \"/\")"));
    }

    if (libraryMismatch && versionMismatch) {
      warning.push('and');
    }

    if (versionMismatch) {
      warning.push("version name \"".concat(version, "\" contains illegal characters (whitespace or \"/\")"));
    }

    logger.warn(warning.join(' '));
    return;
  }

  _registerComponent(new Component("".concat(library, "-version"), function () {
    return {
      library: library,
      version: version
    };
  }, "VERSION"
  /* VERSION */
  ));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */


function onLog(logCallback, options) {
  if (logCallback !== null && typeof logCallback !== 'function') {
    throw ERROR_FACTORY.create("invalid-log-argument"
    /* INVALID_LOG_ARGUMENT */
    );
  }

  setUserLogHandler(logCallback, options);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */


function index_esm2017_setLogLevel(logLevel) {
  setLogLevel$1(logLevel);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DB_NAME = 'firebase-heartbeat-database';
var DB_VERSION = 1;
var STORE_NAME = 'firebase-heartbeat-store';
var index_esm2017_dbPromise = null;

function getDbPromise() {
  if (!index_esm2017_dbPromise) {
    index_esm2017_dbPromise = openDB(DB_NAME, DB_VERSION, {
      upgrade: function upgrade(db, oldVersion) {
        // We don't use 'break' in this switch statement, the fall-through
        // behavior is what we want, because if there are multiple versions between
        // the old version and the current version, we want ALL the migrations
        // that correspond to those versions to run, not only the last one.
        // eslint-disable-next-line default-case
        switch (oldVersion) {
          case 0:
            db.createObjectStore(STORE_NAME);
        }
      }
    })["catch"](function (e) {
      throw ERROR_FACTORY.create("storage-open"
      /* STORAGE_OPEN */
      , {
        originalErrorMessage: e.message
      });
    });
  }

  return index_esm2017_dbPromise;
}

function readHeartbeatsFromIndexedDB(_x2) {
  return _readHeartbeatsFromIndexedDB.apply(this, arguments);
}

function _readHeartbeatsFromIndexedDB() {
  _readHeartbeatsFromIndexedDB = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(app) {
    var db;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.prev = 0;
            _context8.next = 3;
            return getDbPromise();

          case 3:
            db = _context8.sent;
            return _context8.abrupt("return", db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app)));

          case 7:
            _context8.prev = 7;
            _context8.t0 = _context8["catch"](0);
            throw ERROR_FACTORY.create("storage-get"
            /* STORAGE_GET */
            , {
              originalErrorMessage: _context8.t0.message
            });

          case 10:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, null, [[0, 7]]);
  }));
  return _readHeartbeatsFromIndexedDB.apply(this, arguments);
}

function writeHeartbeatsToIndexedDB(_x3, _x4) {
  return _writeHeartbeatsToIndexedDB.apply(this, arguments);
}

function _writeHeartbeatsToIndexedDB() {
  _writeHeartbeatsToIndexedDB = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(app, heartbeatObject) {
    var db, tx, objectStore;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.prev = 0;
            _context9.next = 3;
            return getDbPromise();

          case 3:
            db = _context9.sent;
            tx = db.transaction(STORE_NAME, 'readwrite');
            objectStore = tx.objectStore(STORE_NAME);
            _context9.next = 8;
            return objectStore.put(heartbeatObject, computeKey(app));

          case 8:
            return _context9.abrupt("return", tx.done);

          case 11:
            _context9.prev = 11;
            _context9.t0 = _context9["catch"](0);
            throw ERROR_FACTORY.create("storage-set"
            /* STORAGE_WRITE */
            , {
              originalErrorMessage: _context9.t0.message
            });

          case 14:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, null, [[0, 11]]);
  }));
  return _writeHeartbeatsToIndexedDB.apply(this, arguments);
}

function computeKey(app) {
  return "".concat(app.name, "!").concat(app.options.appId);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var MAX_HEADER_BYTES = 1024; // 30 days

var STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;

var HeartbeatServiceImpl = /*#__PURE__*/function () {
  function HeartbeatServiceImpl(container) {
    var _this2 = this;

    app_dist_esm_index_esm2017_classCallCheck(this, HeartbeatServiceImpl);

    this.container = container;
    /**
     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
     * the header string.
     * Stores one record per date. This will be consolidated into the standard
     * format of one record per user agent string before being sent as a header.
     * Populated from indexedDB when the controller is instantiated and should
     * be kept in sync with indexedDB.
     * Leave public for easier testing.
     */

    this._heartbeatsCache = null;
    var app = this.container.getProvider('app').getImmediate();
    this._storage = new HeartbeatStorageImpl(app);
    this._heartbeatsCachePromise = this._storage.read().then(function (result) {
      _this2._heartbeatsCache = result;
      return result;
    });
  }
  /**
   * Called to report a heartbeat. The function will generate
   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
   * to IndexedDB.
   * Note that we only store one heartbeat per day. So if a heartbeat for today is
   * already logged, subsequent calls to this function in the same day will be ignored.
   */


  app_dist_esm_index_esm2017_createClass(HeartbeatServiceImpl, [{
    key: "triggerHeartbeat",
    value: function () {
      var _triggerHeartbeat = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var platformLogger, agent, date;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the "Firebase user agent" string from the platform logger
                // service, not the browser user agent.

                agent = platformLogger.getPlatformInfoString();
                date = getUTCDateString();

                if (!(this._heartbeatsCache === null)) {
                  _context.next = 7;
                  break;
                }

                _context.next = 6;
                return this._heartbeatsCachePromise;

              case 6:
                this._heartbeatsCache = _context.sent;

              case 7:
                if (!(this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(function (singleDateHeartbeat) {
                  return singleDateHeartbeat.date === date;
                }))) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return");

              case 11:
                // There is no entry for this date. Create one.
                this._heartbeatsCache.heartbeats.push({
                  date: date,
                  agent: agent
                });

              case 12:
                // Remove entries older than 30 days.
                this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(function (singleDateHeartbeat) {
                  var hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
                  var now = Date.now();
                  return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
                });
                return _context.abrupt("return", this._storage.overwrite(this._heartbeatsCache));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function triggerHeartbeat() {
        return _triggerHeartbeat.apply(this, arguments);
      }

      return triggerHeartbeat;
    }()
    /**
     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
     * It also clears all heartbeats from memory as well as in IndexedDB.
     *
     * NOTE: Consuming product SDKs should not send the header if this method
     * returns an empty string.
     */

  }, {
    key: "getHeartbeatsHeader",
    value: function () {
      var _getHeartbeatsHeader = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var date, _extractHeartbeatsFor, heartbeatsToSend, unsentEntries, headerString;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this._heartbeatsCache === null)) {
                  _context2.next = 3;
                  break;
                }

                _context2.next = 3;
                return this._heartbeatsCachePromise;

              case 3:
                if (!(this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0)) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", '');

              case 5:
                date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.

                _extractHeartbeatsFor = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats), heartbeatsToSend = _extractHeartbeatsFor.heartbeatsToSend, unsentEntries = _extractHeartbeatsFor.unsentEntries;
                headerString = base64urlEncodeWithoutPadding(JSON.stringify({
                  version: 2,
                  heartbeats: heartbeatsToSend
                })); // Store last sent date to prevent another being logged/sent for the same day.

                this._heartbeatsCache.lastSentHeartbeatDate = date;

                if (!(unsentEntries.length > 0)) {
                  _context2.next = 15;
                  break;
                }

                // Store any unsent entries if they exist.
                this._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state
                // since the cache isn't empty and this will be called again on the next request,
                // and is probably safest if we await it.

                _context2.next = 13;
                return this._storage.overwrite(this._heartbeatsCache);

              case 13:
                _context2.next = 17;
                break;

              case 15:
                this._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.

                void this._storage.overwrite(this._heartbeatsCache);

              case 17:
                return _context2.abrupt("return", headerString);

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getHeartbeatsHeader() {
        return _getHeartbeatsHeader.apply(this, arguments);
      }

      return getHeartbeatsHeader;
    }()
  }]);

  return HeartbeatServiceImpl;
}();

function getUTCDateString() {
  var today = new Date(); // Returns date format 'YYYY-MM-DD'

  return today.toISOString().substring(0, 10);
}

function extractHeartbeatsForHeader(heartbeatsCache) {
  var maxSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_HEADER_BYTES;
  // Heartbeats grouped by user agent in the standard format to be sent in
  // the header.
  var heartbeatsToSend = []; // Single date format heartbeats that are not sent.

  var unsentEntries = heartbeatsCache.slice();

  var _iterator3 = dist_esm_index_esm2017_createForOfIteratorHelper(heartbeatsCache),
      _step3;

  try {
    var _loop = function _loop() {
      var singleDateHeartbeat = _step3.value;
      // Look for an existing entry with the same user agent.
      var heartbeatEntry = heartbeatsToSend.find(function (hb) {
        return hb.agent === singleDateHeartbeat.agent;
      });

      if (!heartbeatEntry) {
        // If no entry for this user agent exists, create one.
        heartbeatsToSend.push({
          agent: singleDateHeartbeat.agent,
          dates: [singleDateHeartbeat.date]
        });

        if (countBytes(heartbeatsToSend) > maxSize) {
          // If the header would exceed max size, remove the added heartbeat
          // entry and stop adding to the header.
          heartbeatsToSend.pop();
          return "break";
        }
      } else {
        heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date
        // and stop adding to the header.

        if (countBytes(heartbeatsToSend) > maxSize) {
          heartbeatEntry.dates.pop();
          return "break";
        }
      } // Pop unsent entry from queue. (Skipped if adding the entry exceeded
      // quota and the loop breaks early.)


      unsentEntries = unsentEntries.slice(1);
    };

    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _ret = _loop();

      if (_ret === "break") break;
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return {
    heartbeatsToSend: heartbeatsToSend,
    unsentEntries: unsentEntries
  };
}

var HeartbeatStorageImpl = /*#__PURE__*/function () {
  function HeartbeatStorageImpl(app) {
    app_dist_esm_index_esm2017_classCallCheck(this, HeartbeatStorageImpl);

    this.app = app;
    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
  }

  app_dist_esm_index_esm2017_createClass(HeartbeatStorageImpl, [{
    key: "runIndexedDBEnvironmentCheck",
    value: function () {
      var _runIndexedDBEnvironmentCheck = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (index_esm2017_isIndexedDBAvailable()) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return", false);

              case 4:
                return _context3.abrupt("return", validateIndexedDBOpenable().then(function () {
                  return true;
                })["catch"](function () {
                  return false;
                }));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function runIndexedDBEnvironmentCheck() {
        return _runIndexedDBEnvironmentCheck.apply(this, arguments);
      }

      return runIndexedDBEnvironmentCheck;
    }()
    /**
     * Read all heartbeats.
     */

  }, {
    key: "read",
    value: function () {
      var _read = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var canUseIndexedDB, idbHeartbeatObject;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._canUseIndexedDBPromise;

              case 2:
                canUseIndexedDB = _context4.sent;

                if (canUseIndexedDB) {
                  _context4.next = 7;
                  break;
                }

                return _context4.abrupt("return", {
                  heartbeats: []
                });

              case 7:
                _context4.next = 9;
                return readHeartbeatsFromIndexedDB(this.app);

              case 9:
                idbHeartbeatObject = _context4.sent;
                return _context4.abrupt("return", idbHeartbeatObject || {
                  heartbeats: []
                });

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function read() {
        return _read.apply(this, arguments);
      }

      return read;
    }() // overwrite the storage with the provided heartbeats

  }, {
    key: "overwrite",
    value: function () {
      var _overwrite = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(heartbeatsObject) {
        var _a, canUseIndexedDB, existingHeartbeatsObject;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._canUseIndexedDBPromise;

              case 2:
                canUseIndexedDB = _context5.sent;

                if (canUseIndexedDB) {
                  _context5.next = 7;
                  break;
                }

                return _context5.abrupt("return");

              case 7:
                _context5.next = 9;
                return this.read();

              case 9:
                existingHeartbeatsObject = _context5.sent;
                return _context5.abrupt("return", writeHeartbeatsToIndexedDB(this.app, {
                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                  heartbeats: heartbeatsObject.heartbeats
                }));

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function overwrite(_x5) {
        return _overwrite.apply(this, arguments);
      }

      return overwrite;
    }() // add heartbeats

  }, {
    key: "add",
    value: function () {
      var _add = esm_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(heartbeatsObject) {
        var _a, canUseIndexedDB, existingHeartbeatsObject;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._canUseIndexedDBPromise;

              case 2:
                canUseIndexedDB = _context6.sent;

                if (canUseIndexedDB) {
                  _context6.next = 7;
                  break;
                }

                return _context6.abrupt("return");

              case 7:
                _context6.next = 9;
                return this.read();

              case 9:
                existingHeartbeatsObject = _context6.sent;
                return _context6.abrupt("return", writeHeartbeatsToIndexedDB(this.app, {
                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                  heartbeats: [].concat(esm_index_esm2017_toConsumableArray(existingHeartbeatsObject.heartbeats), esm_index_esm2017_toConsumableArray(heartbeatsObject.heartbeats))
                }));

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function add(_x6) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
  }]);

  return HeartbeatStorageImpl;
}();
/**
 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
 * in a platform logging header JSON object, stringified, and converted
 * to base 64.
 */


function countBytes(heartbeatsCache) {
  // base64 has a restricted set of characters, all of which should be 1 byte.
  return base64urlEncodeWithoutPadding( // heartbeatsCache wrapper properties
  JSON.stringify({
    version: 2,
    heartbeats: heartbeatsCache
  })).length;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function registerCoreComponents(variant) {
  _registerComponent(new Component('platform-logger', function (container) {
    return new PlatformLoggerServiceImpl(container);
  }, "PRIVATE"
  /* PRIVATE */
  ));

  _registerComponent(new Component('heartbeat', function (container) {
    return new HeartbeatServiceImpl(container);
  }, "PRIVATE"
  /* PRIVATE */
  )); // Register `app` package.


  registerVersion(name$o, version$1, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation

  registerVersion(name$o, version$1, 'esm2017'); // Register platform SDK identifier (no version).

  registerVersion('fire-js', '');
}
/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */


registerCoreComponents('');

;// CONCATENATED MODULE: ./node_modules/firebase/app/dist/index.esm.js


var index_esm_name = "firebase";
var index_esm_version = "9.8.2";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

registerVersion(index_esm_name, index_esm_version, 'app');
;// CONCATENATED MODULE: ./node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = index_browser_esm2017_getPrototypeOf(object); if (object === null) break; } return object; }

function index_browser_esm2017_construct(Parent, args, Class) { if (index_browser_esm2017_isNativeReflectConstruct()) { index_browser_esm2017_construct = Reflect.construct; } else { index_browser_esm2017_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) index_browser_esm2017_setPrototypeOf(instance, Class.prototype); return instance; }; } return index_browser_esm2017_construct.apply(null, arguments); }

function index_browser_esm2017_slicedToArray(arr, i) { return index_browser_esm2017_arrayWithHoles(arr) || index_browser_esm2017_iterableToArrayLimit(arr, i) || index_browser_esm2017_unsupportedIterableToArray(arr, i) || index_browser_esm2017_nonIterableRest(); }

function index_browser_esm2017_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function index_browser_esm2017_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function index_browser_esm2017_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function index_browser_esm2017_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = index_browser_esm2017_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e16) { throw _e16; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e17) { didErr = true; err = _e17; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function index_browser_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function index_browser_esm2017_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { index_browser_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { index_browser_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function index_browser_esm2017_typeof(obj) { "@babel/helpers - typeof"; return index_browser_esm2017_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, index_browser_esm2017_typeof(obj); }

function index_browser_esm2017_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) index_browser_esm2017_setPrototypeOf(subClass, superClass); }

function index_browser_esm2017_setPrototypeOf(o, p) { index_browser_esm2017_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return index_browser_esm2017_setPrototypeOf(o, p); }

function index_browser_esm2017_createSuper(Derived) { var hasNativeReflectConstruct = index_browser_esm2017_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = index_browser_esm2017_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = index_browser_esm2017_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return index_browser_esm2017_possibleConstructorReturn(this, result); }; }

function index_browser_esm2017_possibleConstructorReturn(self, call) { if (call && (index_browser_esm2017_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return index_browser_esm2017_assertThisInitialized(self); }

function index_browser_esm2017_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function index_browser_esm2017_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function index_browser_esm2017_getPrototypeOf(o) { index_browser_esm2017_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return index_browser_esm2017_getPrototypeOf(o); }

function index_browser_esm2017_toConsumableArray(arr) { return index_browser_esm2017_arrayWithoutHoles(arr) || index_browser_esm2017_iterableToArray(arr) || index_browser_esm2017_unsupportedIterableToArray(arr) || index_browser_esm2017_nonIterableSpread(); }

function index_browser_esm2017_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function index_browser_esm2017_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return index_browser_esm2017_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return index_browser_esm2017_arrayLikeToArray(o, minLen); }

function index_browser_esm2017_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function index_browser_esm2017_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return index_browser_esm2017_arrayLikeToArray(arr); }

function index_browser_esm2017_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function index_browser_esm2017_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function index_browser_esm2017_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function index_browser_esm2017_createClass(Constructor, protoProps, staticProps) { if (protoProps) index_browser_esm2017_defineProperties(Constructor.prototype, protoProps); if (staticProps) index_browser_esm2017_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }





/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */

var l = /*#__PURE__*/function () {
  function l(t) {
    index_browser_esm2017_classCallCheck(this, l);

    this.uid = t;
  }

  index_browser_esm2017_createClass(l, [{
    key: "isAuthenticated",
    value: function isAuthenticated() {
      return null != this.uid;
    }
    /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */

  }, {
    key: "toKey",
    value: function toKey() {
      return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t.uid === this.uid;
    }
  }]);

  return l;
}();
/** A user with a null UID. */


l.UNAUTHENTICATED = new l(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
l.GOOGLE_CREDENTIALS = new l("google-credentials-uid"), l.FIRST_PARTY = new l("first-party-uid"), l.MOCK_USER = new l("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var f = "9.8.0";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var d = new Logger("@firebase/firestore");
/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel - The verbosity you set for activity and error logging. Can
 *   be any of the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */

function w(t) {
  d.setLogLevel(t);
}

function _m(t) {
  if (d.logLevel <= index_esm2017_LogLevel.DEBUG) {
    for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      e[_key - 1] = arguments[_key];
    }

    var n = e.map(_);
    d.debug.apply(d, ["Firestore (".concat(f, "): ").concat(t)].concat(index_browser_esm2017_toConsumableArray(n)));
  }
}

function p(t) {
  if (d.logLevel <= index_esm2017_LogLevel.ERROR) {
    for (var _len2 = arguments.length, e = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      e[_key2 - 1] = arguments[_key2];
    }

    var n = e.map(_);
    d.error.apply(d, ["Firestore (".concat(f, "): ").concat(t)].concat(index_browser_esm2017_toConsumableArray(n)));
  }
}
/**
 * @internal
 */


function y(t) {
  if (d.logLevel <= index_esm2017_LogLevel.WARN) {
    for (var _len3 = arguments.length, e = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      e[_key3 - 1] = arguments[_key3];
    }

    var n = e.map(_);
    d.warn.apply(d, ["Firestore (".concat(f, "): ").concat(t)].concat(index_browser_esm2017_toConsumableArray(n)));
  }
}
/**
 * Converts an additional log parameter to a string representation.
 */


function _(t) {
  if ("string" == typeof t) return t;

  try {
    return e = t, JSON.stringify(e);
  } catch (e) {
    // Converting to JSON failed, just log the object directly
    return t;
  }
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /** Formats an object as a JSON string, suitable for logging. */


  var e;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */


function g() {
  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Unexpected state";
  // Log the failure in addition to throw an exception, just in case the
  // exception is swallowed.
  var e = "FIRESTORE (".concat(f, ") INTERNAL ASSERTION FAILED: ") + t; // NOTE: We don't use FirestoreError here because these are internal failures
  // that cannot be handled by the user. (Also it would create a circular
  // dependency between the error and assert modules which doesn't work.)

  throw p(e), new Error(e);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * Messages are stripped in production builds.
 */


function b(t, e) {
  t || g();
}
/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */


function v(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var E = "ok",
    T = "cancelled",
    A = "unknown",
    I = "invalid-argument",
    R = "deadline-exceeded",
    P = "not-found",
    V = "already-exists",
    D = "permission-denied",
    N = "unauthenticated",
    index_browser_esm2017_$ = "resource-exhausted",
    S = "failed-precondition",
    x = "aborted",
    F = "out-of-range",
    q = "unimplemented",
    O = "internal",
    C = "unavailable",
    L = "data-loss";
/** An error returned by a Firestore operation. */

var U = /*#__PURE__*/function (_FirebaseError) {
  index_browser_esm2017_inherits(U, _FirebaseError);

  var _super = index_browser_esm2017_createSuper(U);

  /** @hideconstructor */
  function U(
  /**
   * The backend error code associated with this error.
   */
  t,
  /**
   * A custom error description.
   */
  e) {
    var _this;

    index_browser_esm2017_classCallCheck(this, U);

    _this = _super.call(this, t, e), _this.code = t, _this.message = e, // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.
    _this.toString = function () {
      return "".concat(_this.name, ": [code=").concat(_this.code, "]: ").concat(_this.message);
    };
    return _this;
  }

  return index_browser_esm2017_createClass(U);
}(FirebaseError);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var k = /*#__PURE__*/(/* unused pure expression or super */ null && (index_browser_esm2017_createClass(function k() {
  var _this2 = this;

  index_browser_esm2017_classCallCheck(this, k);

  this.promise = new Promise(function (t, e) {
    _this2.resolve = t, _this2.reject = e;
  });
})));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var j = /*#__PURE__*/index_browser_esm2017_createClass(function j(t, e) {
  index_browser_esm2017_classCallCheck(this, j);

  this.user = e, this.type = "OAuth", this.headers = new Map(), this.headers.set("Authorization", "Bearer ".concat(t));
});
/**
 * A CredentialsProvider that always yields an empty token.
 * @internal
 */


var M = /*#__PURE__*/function () {
  function M() {
    index_browser_esm2017_classCallCheck(this, M);
  }

  index_browser_esm2017_createClass(M, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(null);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {
      // Fire with initial user.
      t.enqueueRetryable(function () {
        return e(l.UNAUTHENTICATED);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }]);

  return M;
}();
/**
 * A CredentialsProvider that always returns a constant token. Used for
 * emulator token mocking.
 */


var B = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function B(t) {
    index_browser_esm2017_classCallCheck(this, B);

    this.token = t,
    /**
     * Stores the listener registered with setChangeListener()
     * This isn't actually necessary since the UID never changes, but we use this
     * to verify the listen contract is adhered to in tests.
     */
    this.changeListener = null;
  }

  index_browser_esm2017_createClass(B, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(this.token);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {
      var _this3 = this;

      this.changeListener = e, // Fire with initial user.
      t.enqueueRetryable(function () {
        return e(_this3.token.user);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      this.changeListener = null;
    }
  }]);

  return B;
}()));
/** Credential provider for the Lite SDK. */


var z = /*#__PURE__*/function () {
  function z(t) {
    var _this4 = this;

    index_browser_esm2017_classCallCheck(this, z);

    this.auth = null, t.onInit(function (t) {
      _this4.auth = t;
    });
  }

  index_browser_esm2017_createClass(z, [{
    key: "getToken",
    value: function getToken() {
      var _this5 = this;

      return this.auth ? this.auth.getToken().then(function (t) {
        return t ? (b("string" == typeof t.accessToken), new j(t.accessToken, new l(_this5.auth.getUid()))) : null;
      }) : Promise.resolve(null);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {}
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }]);

  return z;
}();
/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */


var G = /*#__PURE__*/index_browser_esm2017_createClass(function G(t, e, n) {
  index_browser_esm2017_classCallCheck(this, G);

  this.type = "FirstParty", this.user = l.FIRST_PARTY, this.headers = new Map(), this.headers.set("X-Goog-AuthUser", e);
  var r = t.auth.getAuthHeaderValueForFirstParty([]);
  r && this.headers.set("Authorization", r), n && this.headers.set("X-Goog-Iam-Authorization-Token", n);
});
/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */


var Q = /*#__PURE__*/function () {
  function Q(t, e, n) {
    index_browser_esm2017_classCallCheck(this, Q);

    this.t = t, this.i = e, this.o = n;
  }

  index_browser_esm2017_createClass(Q, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(new G(this.t, this.i, this.o));
    }
  }, {
    key: "start",
    value: function start(t, e) {
      // Fire with initial uid.
      t.enqueueRetryable(function () {
        return e(l.FIRST_PARTY);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }]);

  return Q;
}();

var W = /*#__PURE__*/index_browser_esm2017_createClass(function W(t) {
  index_browser_esm2017_classCallCheck(this, W);

  this.value = t, this.type = "AppCheck", this.headers = new Map(), t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
});
/** AppCheck token provider for the Lite SDK. */


var Y = /*#__PURE__*/function () {
  function Y(t) {
    var _this6 = this;

    index_browser_esm2017_classCallCheck(this, Y);

    this.u = t, this.appCheck = null, t.onInit(function (t) {
      _this6.appCheck = t;
    });
  }

  index_browser_esm2017_createClass(Y, [{
    key: "getToken",
    value: function getToken() {
      return this.appCheck ? this.appCheck.getToken().then(function (t) {
        return t ? (b("string" == typeof t.token), new W(t.token)) : null;
      }) : Promise.resolve(null);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {}
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }]);

  return Y;
}();
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var H = /*#__PURE__*/index_browser_esm2017_createClass(
/**
 * Constructs a DatabaseInfo using the provided host, databaseId and
 * persistenceKey.
 *
 * @param databaseId - The database to use.
 * @param appId - The Firebase App Id.
 * @param persistenceKey - A unique identifier for this Firestore's local
 * storage (used in conjunction with the databaseId).
 * @param host - The Firestore backend host to connect to.
 * @param ssl - Whether to use SSL when connecting.
 * @param forceLongPolling - Whether to use the forceLongPolling option
 * when using WebChannel as the network transport.
 * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
 * option when using WebChannel as the network transport.
 * @param useFetchStreams Whether to use the Fetch API instead of
 * XMLHTTPRequest
 */
function H(t, e, n, r, s, i, o, u) {
  index_browser_esm2017_classCallCheck(this, H);

  this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;
});
/** The default database name for a project. */

/**
 * Represents the database ID a Firestore client is associated with.
 * @internal
 */


var K = /*#__PURE__*/function () {
  function K(t, e) {
    index_browser_esm2017_classCallCheck(this, K);

    this.projectId = t, this.database = e || "(default)";
  }

  index_browser_esm2017_createClass(K, [{
    key: "isDefaultDatabase",
    get: function get() {
      return "(default)" === this.database;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof K && t.projectId === this.projectId && t.database === this.database;
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new K("", "");
    }
  }]);

  return K;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Path represents an ordered sequence of string segments.
 */


var J = /*#__PURE__*/function () {
  function J(t, e, n) {
    index_browser_esm2017_classCallCheck(this, J);

    void 0 === e ? e = 0 : e > t.length && g(), void 0 === n ? n = t.length - e : n > t.length - e && g(), this.segments = t, this.offset = e, this.len = n;
  }

  index_browser_esm2017_createClass(J, [{
    key: "length",
    get: function get() {
      return this.len;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return 0 === J.comparator(this, t);
    }
  }, {
    key: "child",
    value: function child(t) {
      var e = this.segments.slice(this.offset, this.limit());
      return t instanceof J ? t.forEach(function (t) {
        e.push(t);
      }) : e.push(t), this.construct(e);
    }
    /** The index of one past the last segment of the path. */

  }, {
    key: "limit",
    value: function limit() {
      return this.offset + this.length;
    }
  }, {
    key: "popFirst",
    value: function popFirst(t) {
      return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
    }
  }, {
    key: "popLast",
    value: function popLast() {
      return this.construct(this.segments, this.offset, this.length - 1);
    }
  }, {
    key: "firstSegment",
    value: function firstSegment() {
      return this.segments[this.offset];
    }
  }, {
    key: "lastSegment",
    value: function lastSegment() {
      return this.get(this.length - 1);
    }
  }, {
    key: "get",
    value: function get(t) {
      return this.segments[this.offset + t];
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return 0 === this.length;
    }
  }, {
    key: "isPrefixOf",
    value: function isPrefixOf(t) {
      if (t.length < this.length) return !1;

      for (var e = 0; e < this.length; e++) {
        if (this.get(e) !== t.get(e)) return !1;
      }

      return !0;
    }
  }, {
    key: "isImmediateParentOf",
    value: function isImmediateParentOf(t) {
      if (this.length + 1 !== t.length) return !1;

      for (var e = 0; e < this.length; e++) {
        if (this.get(e) !== t.get(e)) return !1;
      }

      return !0;
    }
  }, {
    key: "forEach",
    value: function forEach(t) {
      for (var e = this.offset, n = this.limit(); e < n; e++) {
        t(this.segments[e]);
      }
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return this.segments.slice(this.offset, this.limit());
    }
  }], [{
    key: "comparator",
    value: function comparator(t, e) {
      var n = Math.min(t.length, e.length);

      for (var r = 0; r < n; r++) {
        var _n2 = t.get(r),
            s = e.get(r);

        if (_n2 < s) return -1;
        if (_n2 > s) return 1;
      }

      return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
    }
  }]);

  return J;
}();
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 *
 * @internal
 */


var X = /*#__PURE__*/function (_J) {
  index_browser_esm2017_inherits(X, _J);

  var _super2 = index_browser_esm2017_createSuper(X);

  function X() {
    index_browser_esm2017_classCallCheck(this, X);

    return _super2.apply(this, arguments);
  }

  index_browser_esm2017_createClass(X, [{
    key: "construct",
    value: function construct(t, e, n) {
      return new X(t, e, n);
    }
  }, {
    key: "canonicalString",
    value: function canonicalString() {
      // NOTE: The client is ignorant of any path segments containing escape
      // sequences (e.g. __id123__) and just passes them through raw (they exist
      // for legacy reasons and should not be used frequently).
      return this.toArray().join("/");
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.canonicalString();
    }
    /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */

  }], [{
    key: "fromString",
    value: function fromString() {
      // NOTE: The client is ignorant of any path segments containing escape
      // sequences (e.g. __id123__) and just passes them through raw (they exist
      // for legacy reasons and should not be used frequently).
      var e = [];

      for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        t[_key4] = arguments[_key4];
      }

      for (var _i = 0, _t2 = t; _i < _t2.length; _i++) {
        var n = _t2[_i];
        if (n.indexOf("//") >= 0) throw new U(I, "Invalid segment (".concat(n, "). Paths must not contain // in them.")); // Strip leading and traling slashed.

        e.push.apply(e, index_browser_esm2017_toConsumableArray(n.split("/").filter(function (t) {
          return t.length > 0;
        })));
      }

      return new X(e);
    }
  }, {
    key: "emptyPath",
    value: function emptyPath() {
      return new X([]);
    }
  }]);

  return X;
}(J);

var Z = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * A dot-separated path for navigating sub-objects within a document.
 * @internal
 */

var tt = /*#__PURE__*/function (_J2) {
  index_browser_esm2017_inherits(tt, _J2);

  var _super3 = index_browser_esm2017_createSuper(tt);

  function tt() {
    index_browser_esm2017_classCallCheck(this, tt);

    return _super3.apply(this, arguments);
  }

  index_browser_esm2017_createClass(tt, [{
    key: "construct",
    value: function construct(t, e, n) {
      return new tt(t, e, n);
    }
    /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */

  }, {
    key: "canonicalString",
    value: function canonicalString() {
      return this.toArray().map(function (t) {
        return t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), tt.isValidIdentifier(t) || (t = "`" + t + "`"), t;
      }).join(".");
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.canonicalString();
    }
    /**
     * Returns true if this field references the key of a document.
     */

  }, {
    key: "isKeyField",
    value: function isKeyField() {
      return 1 === this.length && "__name__" === this.get(0);
    }
    /**
     * The field designating the key of a document.
     */

  }], [{
    key: "isValidIdentifier",
    value: function isValidIdentifier(t) {
      return Z.test(t);
    }
  }, {
    key: "keyField",
    value: function keyField() {
      return new tt(["__name__"]);
    }
    /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */

  }, {
    key: "fromServerFormat",
    value: function fromServerFormat(t) {
      var e = [];
      var n = "",
          r = 0;

      var s = function s() {
        if (0 === n.length) throw new U(I, "Invalid field path (".concat(t, "). Paths must not be empty, begin with '.', end with '.', or contain '..'"));
        e.push(n), n = "";
      };

      var i = !1;

      for (; r < t.length;) {
        var _e2 = t[r];

        if ("\\" === _e2) {
          if (r + 1 === t.length) throw new U(I, "Path has trailing escape character: " + t);
          var _e3 = t[r + 1];
          if ("\\" !== _e3 && "." !== _e3 && "`" !== _e3) throw new U(I, "Path has invalid escape sequence: " + t);
          n += _e3, r += 2;
        } else "`" === _e2 ? (i = !i, r++) : "." !== _e2 || i ? (n += _e2, r++) : (s(), r++);
      }

      if (s(), i) throw new U(I, "Unterminated ` in path: " + t);
      return new tt(e);
    }
  }, {
    key: "emptyPath",
    value: function emptyPath() {
      return new tt([]);
    }
  }]);

  return tt;
}(J);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @internal
 */


var et = /*#__PURE__*/function () {
  function et(t) {
    index_browser_esm2017_classCallCheck(this, et);

    this.path = t;
  }

  index_browser_esm2017_createClass(et, [{
    key: "collectionGroup",
    get: function get() {
      return this.path.popLast().lastSegment();
    }
    /** Returns true if the document is in the specified collectionId. */

  }, {
    key: "hasCollectionId",
    value: function hasCollectionId(t) {
      return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
    }
    /** Returns the collection group (i.e. the name of the parent collection) for this key. */

  }, {
    key: "getCollectionGroup",
    value: function getCollectionGroup() {
      return this.path.get(this.path.length - 2);
    }
    /** Returns the fully qualified path to the parent collection. */

  }, {
    key: "getCollectionPath",
    value: function getCollectionPath() {
      return this.path.popLast();
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return null !== t && 0 === X.comparator(this.path, t.path);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.path.toString();
    }
  }], [{
    key: "fromPath",
    value: function fromPath(t) {
      return new et(X.fromString(t));
    }
  }, {
    key: "fromName",
    value: function fromName(t) {
      return new et(X.fromString(t).popFirst(5));
    }
  }, {
    key: "empty",
    value: function empty() {
      return new et(X.emptyPath());
    }
  }, {
    key: "comparator",
    value: function comparator(t, e) {
      return X.comparator(t.path, e.path);
    }
  }, {
    key: "isDocumentKey",
    value: function isDocumentKey(t) {
      return t.length % 2 == 0;
    }
    /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments - The segments of the path to the document
     * @returns A new instance of DocumentKey
     */

  }, {
    key: "fromSegments",
    value: function fromSegments(t) {
      return new et(new X(t.slice()));
    }
  }]);

  return et;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function nt(t, e, n) {
  if (!n) throw new U(I, "Function ".concat(t, "() cannot be called with an empty ").concat(e, "."));
}
/**
 * Validates that two boolean options are not set at the same time.
 * @internal
 */

/**
 * Validates that `path` refers to a document (indicated by the fact it contains
 * an even numbers of segments).
 */


function rt(t) {
  if (!et.isDocumentKey(t)) throw new U(I, "Invalid document reference. Document references must have an even number of segments, but ".concat(t, " has ").concat(t.length, "."));
}
/**
 * Validates that `path` refers to a collection (indicated by the fact it
 * contains an odd numbers of segments).
 */


function st(t) {
  if (et.isDocumentKey(t)) throw new U(I, "Invalid collection reference. Collection references must have an odd number of segments, but ".concat(t, " has ").concat(t.length, "."));
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */

/** Returns a string describing the type / value of the provided input. */


function it(t) {
  if (void 0 === t) return "undefined";
  if (null === t) return "null";
  if ("string" == typeof t) return t.length > 20 && (t = "".concat(t.substring(0, 20), "...")), JSON.stringify(t);
  if ("number" == typeof t || "boolean" == typeof t) return "" + t;

  if ("object" == index_browser_esm2017_typeof(t)) {
    if (t instanceof Array) return "an array";
    {
      var e =
      /** try to get the constructor name for an object. */
      function (t) {
        if (t.constructor) return t.constructor.name;
        return null;
      }
      /**
      * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
      * underlying instance. Throws if  `obj` is not an instance of `T`.
      *
      * This cast is used in the Lite and Full SDK to verify instance types for
      * arguments passed to the public API.
      * @internal
      */
      (t);

      return e ? "a custom ".concat(e, " object") : "an object";
    }
  }

  return "function" == typeof t ? "a function" : g();
}

function ot(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
  if ("_delegate" in t && ( // Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  t = t._delegate), !(t instanceof e)) {
    if (e.name === t.constructor.name) throw new U(I, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    {
      var n = it(t);
      throw new U(I, "Expected type '".concat(e.name, "', but it was: ").concat(n));
    }
  }

  return t;
}

function ut(t, e) {
  if (e <= 0) throw new U(I, "Function ".concat(t, "() requires a positive number, but it was: ").concat(e, "."));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns whether a variable is either undefined or null.
 */


function ct(t) {
  return null == t;
}
/** Returns whether the value represents -0. */


function at(t) {
  // Detect if the value is -0.0. Based on polyfill from
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  return 0 === t && 1 / t == -1 / 0;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value - The value to test for being an integer and in the safe range
 */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ht = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery"
};
/**
 * Maps RPC names to the corresponding REST endpoint name.
 *
 * We use array notation to avoid mangling.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers or change this into a const enum.
 */

var lt, ft;
/**
 * Converts an HTTP Status Code to the equivalent error code.
 *
 * @param status - An HTTP Status Code, like 200, 404, 503, etc.
 * @returns The equivalent Code. Unknown status codes are mapped to
 *     Code.UNKNOWN.
 */

function dt(t) {
  if (void 0 === t) return p("RPC_ERROR", "HTTP error has no status"), A; // The canonical error codes for Google APIs [1] specify mapping onto HTTP
  // status codes but the mapping is not bijective. In each case of ambiguity
  // this function chooses a primary error.
  // [1]
  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto

  switch (t) {
    case 200:
      // OK
      return E;

    case 400:
      // Bad Request
      return S;
    // Other possibilities based on the forward mapping
    // return Code.INVALID_ARGUMENT;
    // return Code.OUT_OF_RANGE;

    case 401:
      // Unauthorized
      return N;

    case 403:
      // Forbidden
      return D;

    case 404:
      // Not Found
      return P;

    case 409:
      // Conflict
      return x;
    // Other possibilities:
    // return Code.ALREADY_EXISTS;

    case 416:
      // Range Not Satisfiable
      return F;

    case 429:
      // Too Many Requests
      return index_browser_esm2017_$;

    case 499:
      // Client Closed Request
      return T;

    case 500:
      // Internal Server Error
      return A;
    // Other possibilities:
    // return Code.INTERNAL;
    // return Code.DATA_LOSS;

    case 501:
      // Unimplemented
      return q;

    case 503:
      // Service Unavailable
      return C;

    case 504:
      // Gateway Timeout
      return R;

    default:
      return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? S : t >= 500 && t < 600 ? O : A;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A Rest-based connection that relies on the native HTTP stack
 * (e.g. `fetch` or a polyfill).
 */


(ft = lt || (lt = {}))[ft.OK = 0] = "OK", ft[ft.CANCELLED = 1] = "CANCELLED", ft[ft.UNKNOWN = 2] = "UNKNOWN", ft[ft.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", ft[ft.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", ft[ft.NOT_FOUND = 5] = "NOT_FOUND", ft[ft.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", ft[ft.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", ft[ft.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", ft[ft.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", ft[ft.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", ft[ft.ABORTED = 10] = "ABORTED", ft[ft.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", ft[ft.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", ft[ft.INTERNAL = 13] = "INTERNAL", ft[ft.UNAVAILABLE = 14] = "UNAVAILABLE", ft[ft.DATA_LOSS = 15] = "DATA_LOSS";

var wt = /*#__PURE__*/function (_ref) {
  index_browser_esm2017_inherits(wt, _ref);

  var _super4 = index_browser_esm2017_createSuper(wt);

  /**
   * @param databaseInfo - The connection info.
   * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.
   */
  function wt(t, e) {
    var _this7;

    index_browser_esm2017_classCallCheck(this, wt);

    _this7 = _super4.call(this, t), _this7.A = e;
    return _this7;
  }

  index_browser_esm2017_createClass(wt, [{
    key: "I",
    value: function I(t, e) {
      throw new Error("Not supported by FetchConnection");
    }
  }, {
    key: "v",
    value: function () {
      var _v = index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(t, e, n, r) {
        var s, i;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                s = JSON.stringify(r);
                _context.prev = 1;
                _context.next = 4;
                return this.A(e, {
                  method: "POST",
                  headers: n,
                  body: s
                });

              case 4:
                i = _context.sent;
                _context.next = 10;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](1);
                throw new U(dt(_context.t0.status), "Request failed with error: " + _context.t0.statusText);

              case 10:
                if (i.ok) {
                  _context.next = 12;
                  break;
                }

                throw new U(dt(i.status), "Request failed with error: " + i.statusText);

              case 12:
                return _context.abrupt("return", i.json());

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 7]]);
      }));

      function v(_x, _x2, _x3, _x4) {
        return _v.apply(this, arguments);
      }

      return v;
    }()
  }]);

  return wt;
}(
/*#__PURE__*/

/**
 * Base class for all Rest-based connections to the backend (WebChannel and
 * HTTP).
 */
function () {
  function _class(t) {
    index_browser_esm2017_classCallCheck(this, _class);

    this.databaseInfo = t, this.databaseId = t.databaseId;
    var e = t.ssl ? "https" : "http";
    this.h = e + "://" + t.host, this.l = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
  }

  index_browser_esm2017_createClass(_class, [{
    key: "m",
    value: function m(t, e, n, r, s) {
      var i = this.p(t, e);

      _m("RestConnection", "Sending: ", i, n);

      var o = {};
      return this.g(o, r, s), this.v(t, i, o, n).then(function (t) {
        return _m("RestConnection", "Received: ", t), t;
      }, function (e) {
        throw y("RestConnection", "".concat(t, " failed with error: "), e, "url: ", i, "request:", n), e;
      });
    }
  }, {
    key: "T",
    value: function T(t, e, n, r, s) {
      // The REST API automatically aggregates all of the streamed results, so we
      // can just use the normal invoke() method.
      return this.m(t, e, n, r, s);
    }
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */

  }, {
    key: "g",
    value:
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */
    function g(t, e, n) {
      t["X-Goog-Api-Client"] = "gl-js/ fire/" + f, // Content-Type: text/plain will avoid preflight requests which might
      // mess with CORS and redirects by proxies. If we add custom headers
      // we will need to change this code to potentially use the $httpOverwrite
      // parameter supported by ESF to avoid triggering preflight requests.
      t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), e && e.headers.forEach(function (e, n) {
        return t[n] = e;
      }), n && n.headers.forEach(function (e, n) {
        return t[n] = e;
      });
    }
  }, {
    key: "p",
    value: function p(t, e) {
      var n = ht[t];
      return "".concat(this.h, "/v1/").concat(e, ":").concat(n);
    }
  }]);

  return _class;
}());
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Initializes the HTTP connection for the REST API. */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */


function mt(t) {
  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
  var e = // eslint-disable-next-line @typescript-eslint/no-explicit-any
  "undefined" != typeof self && (self.crypto || self.msCrypto),
      n = new Uint8Array(t);
  if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n);else // Falls back to Math.random
    for (var _e4 = 0; _e4 < t; _e4++) {
      n[_e4] = Math.floor(256 * Math.random());
    }
  return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var pt = /*#__PURE__*/function () {
  function pt() {
    index_browser_esm2017_classCallCheck(this, pt);
  }

  index_browser_esm2017_createClass(pt, null, [{
    key: "R",
    value: function R() {
      // Alphanumeric characters
      var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
          e = Math.floor(256 / t.length) * t.length; // The largest byte value that is a multiple of `char.length`.

      var n = "";

      for (; n.length < 20;) {
        var r = mt(40);

        for (var s = 0; s < r.length; ++s) {
          // Only accept values that are [0, maxMultiple), this ensures they can
          // be evenly mapped to indices of `chars` via a modulo operation.
          n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));
        }
      }

      return n;
    }
  }]);

  return pt;
}();

function yt(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
/** Helper to compare arrays using isEqual(). */


function _t(t, e, n) {
  return t.length === e.length && t.every(function (t, r) {
    return n(t, e[r]);
  });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).

/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * For examples and further specifications, refer to the
 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
 */


var gt = /*#__PURE__*/function () {
  /**
   * Creates a new timestamp.
   *
   * @param seconds - The number of seconds of UTC time since Unix epoch
   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   *     9999-12-31T23:59:59Z inclusive.
   * @param nanoseconds - The non-negative fractions of a second at nanosecond
   *     resolution. Negative second values with fractions must still have
   *     non-negative nanoseconds values that count forward in time. Must be
   *     from 0 to 999,999,999 inclusive.
   */
  function gt(
  /**
   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
   */
  t,
  /**
   * The fractions of a second at nanosecond resolution.*
   */
  e) {
    index_browser_esm2017_classCallCheck(this, gt);

    if (this.seconds = t, this.nanoseconds = e, e < 0) throw new U(I, "Timestamp nanoseconds out of range: " + e);
    if (e >= 1e9) throw new U(I, "Timestamp nanoseconds out of range: " + e);
    if (t < -62135596800) throw new U(I, "Timestamp seconds out of range: " + t); // This will break in the year 10,000.

    if (t >= 253402300800) throw new U(I, "Timestamp seconds out of range: " + t);
  }
  /**
   * Creates a new timestamp with the current date, with millisecond precision.
   *
   * @returns a new timestamp representing the current date.
   */


  index_browser_esm2017_createClass(gt, [{
    key: "toDate",
    value:
    /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
     * causes a loss of precision since `Date` objects only support millisecond
     * precision.
     *
     * @returns JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */
    function toDate() {
      return new Date(this.toMillis());
    }
    /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @returns The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */

  }, {
    key: "toMillis",
    value: function toMillis() {
      return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }
  }, {
    key: "_compareTo",
    value: function _compareTo(t) {
      return this.seconds === t.seconds ? yt(this.nanoseconds, t.nanoseconds) : yt(this.seconds, t.seconds);
    }
    /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other - The `Timestamp` to compare against.
     * @returns true if this `Timestamp` is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
    }
    /** Returns a textual representation of this `Timestamp`. */

  }, {
    key: "toString",
    value: function toString() {
      return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }
    /** Returns a JSON-serializable representation of this `Timestamp`. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        seconds: this.seconds,
        nanoseconds: this.nanoseconds
      };
    }
    /**
     * Converts this object to a primitive string, which allows `Timestamp` objects
     * to be compared using the `>`, `<=`, `>=` and `>` operators.
     */

  }, {
    key: "valueOf",
    value: function valueOf() {
      // This method returns a string of the form <seconds>.<nanoseconds> where
      // <seconds> is translated to have a non-negative value and both <seconds>
      // and <nanoseconds> are left-padded with zeroes to be a consistent length.
      // Strings with this format then have a lexiographical ordering that matches
      // the expected ordering. The <seconds> translation is done to avoid having
      // a leading negative sign (i.e. a leading '-' character) in its string
      // representation, which would affect its lexiographical ordering.
      var t = this.seconds - -62135596800; // Note: Up to 12 decimal digits are required to represent all valid
      // 'seconds' values.

      return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }
  }], [{
    key: "now",
    value: function now() {
      return gt.fromMillis(Date.now());
    }
    /**
     * Creates a new timestamp from the given date.
     *
     * @param date - The date to initialize the `Timestamp` from.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     date.
     */

  }, {
    key: "fromDate",
    value: function fromDate(t) {
      return gt.fromMillis(t.getTime());
    }
    /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds - Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */

  }, {
    key: "fromMillis",
    value: function fromMillis(t) {
      var e = Math.floor(t / 1e3),
          n = Math.floor(1e6 * (t - 1e3 * e));
      return new gt(e, n);
    }
  }]);

  return gt;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */


var bt = /*#__PURE__*/function () {
  function bt(t) {
    index_browser_esm2017_classCallCheck(this, bt);

    this.timestamp = t;
  }

  index_browser_esm2017_createClass(bt, [{
    key: "compareTo",
    value: function compareTo(t) {
      return this.timestamp._compareTo(t.timestamp);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.timestamp.isEqual(t.timestamp);
    }
    /** Returns a number representation of the version for use in spec tests. */

  }, {
    key: "toMicroseconds",
    value: function toMicroseconds() {
      // Convert to microseconds.
      return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }
  }, {
    key: "toTimestamp",
    value: function toTimestamp() {
      return this.timestamp;
    }
  }], [{
    key: "fromTimestamp",
    value: function fromTimestamp(t) {
      return new bt(t);
    }
  }, {
    key: "min",
    value: function min() {
      return new bt(new gt(0, 0));
    }
  }, {
    key: "max",
    value: function max() {
      return new bt(new gt(253402300799, 999999999));
    }
  }]);

  return bt;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function vt(t) {
  var e = 0;

  for (var n in t) {
    Object.prototype.hasOwnProperty.call(t, n) && e++;
  }

  return e;
}

function Et(t, e) {
  for (var n in t) {
    Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */


var Tt = /*#__PURE__*/function () {
  function Tt(t) {
    index_browser_esm2017_classCallCheck(this, Tt);

    this.fields = t, // TODO(dimond): validation of FieldMask
    // Sort the field mask to support `FieldMask.isEqual()` and assert below.
    t.sort(tt.comparator);
  }
  /**
   * Verifies that `fieldPath` is included by at least one field in this field
   * mask.
   *
   * This is an O(n) operation, where `n` is the size of the field mask.
   */


  index_browser_esm2017_createClass(Tt, [{
    key: "covers",
    value: function covers(t) {
      var _iterator = index_browser_esm2017_createForOfIteratorHelper(this.fields),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var e = _step.value;
          if (e.isPrefixOf(t)) return !0;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return !1;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return _t(this.fields, t.fields, function (t, e) {
        return t.isEqual(e);
      });
    }
  }]);

  return Tt;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Converts a Base64 encoded string to a binary string. */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 * @internal
 */


var At = /*#__PURE__*/function (_Symbol$iterator) {
  function At(t) {
    index_browser_esm2017_classCallCheck(this, At);

    this.binaryString = t;
  }

  index_browser_esm2017_createClass(At, [{
    key: _Symbol$iterator,
    value: function value() {
      var _this8 = this;

      var t = 0;
      return {
        next: function next() {
          return t < _this8.binaryString.length ? {
            value: _this8.binaryString.charCodeAt(t++),
            done: !1
          } : {
            value: void 0,
            done: !0
          };
        }
      };
    }
  }, {
    key: "toBase64",
    value: function toBase64() {
      return t = this.binaryString, btoa(t);
      /** Converts a binary string to a Base64 encoded string. */

      var t;
    }
  }, {
    key: "toUint8Array",
    value: function toUint8Array() {
      return function (t) {
        var e = new Uint8Array(t.length);

        for (var n = 0; n < t.length; n++) {
          e[n] = t.charCodeAt(n);
        }

        return e;
      }
      /**
      * @license
      * Copyright 2020 Google LLC
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */
      // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
      (this.binaryString);
    }
  }, {
    key: "approximateByteSize",
    value: function approximateByteSize() {
      return 2 * this.binaryString.length;
    }
  }, {
    key: "compareTo",
    value: function compareTo(t) {
      return yt(this.binaryString, t.binaryString);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.binaryString === t.binaryString;
    }
  }], [{
    key: "fromBase64String",
    value: function fromBase64String(t) {
      var e = atob(t);
      return new At(e);
    }
  }, {
    key: "fromUint8Array",
    value: function fromUint8Array(t) {
      // TODO(indexing); Remove the copy of the byte string here as this method
      // is frequently called during indexing.
      var e =
      /**
      * Helper function to convert an Uint8array to a binary string.
      */
      function (t) {
        var e = "";

        for (var n = 0; n < t.length; ++n) {
          e += String.fromCharCode(t[n]);
        }

        return e;
      }
      /**
      * Helper function to convert a binary string to an Uint8Array.
      */
      (t);

      return new At(e);
    }
  }]);

  return At;
}(Symbol.iterator);

At.EMPTY_BYTE_STRING = new At("");
var It = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
/**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */

function Rt(t) {
  // The json interface (for the browser) will return an iso timestamp string,
  // while the proto js library (for node) will return a
  // google.protobuf.Timestamp instance.
  if (b(!!t), "string" == typeof t) {
    // The date string can have higher precision (nanos) than the Date class
    // (millis), so we do some custom parsing here.
    // Parse the nanos right out of the string.
    var e = 0;
    var n = It.exec(t);

    if (b(!!n), n[1]) {
      // Pad the fraction out to 9 digits (nanos).
      var _t3 = n[1];
      _t3 = (_t3 + "000000000").substr(0, 9), e = Number(_t3);
    } // Parse the date to get the seconds.


    var r = new Date(t);
    return {
      seconds: Math.floor(r.getTime() / 1e3),
      nanos: e
    };
  }

  return {
    seconds: Pt(t.seconds),
    nanos: Pt(t.nanos)
  };
}
/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */


function Pt(t) {
  // TODO(bjornick): Handle int64 greater than 53 bits.
  return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString. */


function Vt(t) {
  return "string" == typeof t ? At.fromBase64String(t) : At.fromUint8Array(t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   transform. They can only exist in the local view of a document. Therefore
 *   they do not need to be parsed or serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */


function Dt(t) {
  var e, n;
  return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
}
/**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */


function Nt(t) {
  var e = t.mapValue.fields.__previous_value__;
  return Dt(e) ? Nt(e) : e;
}
/**
 * Returns the local time at which this timestamp was first set.
 */


function $t(t) {
  var e = Rt(t.mapValue.fields.__local_write_time__.timestampValue);
  return new gt(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var St = {
  fields: {
    __type__: {
      stringValue: "__max__"
    }
  }
};
/** Extracts the backend's type order for the provided value. */

function xt(t) {
  return "nullValue" in t ? 0
  /* NullValue */
  : "booleanValue" in t ? 1
  /* BooleanValue */
  : "integerValue" in t || "doubleValue" in t ? 2
  /* NumberValue */
  : "timestampValue" in t ? 3
  /* TimestampValue */
  : "stringValue" in t ? 5
  /* StringValue */
  : "bytesValue" in t ? 6
  /* BlobValue */
  : "referenceValue" in t ? 7
  /* RefValue */
  : "geoPointValue" in t ? 8
  /* GeoPointValue */
  : "arrayValue" in t ? 9
  /* ArrayValue */
  : "mapValue" in t ? Dt(t) ? 4
  /* ServerTimestampValue */
  :
  /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */
  function (t) {
    return "__max__" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;
  }
  /**
  * @license
  * Copyright 2017 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /**
  * An ObjectValue represents a MapValue in the Firestore Proto and offers the
  * ability to add and remove fields (via the ObjectValueBuilder).
  */
  (t) ? 9007199254740991
  /* MaxValue */
  : 10
  /* ObjectValue */
  : g();
}
/** Tests `left` and `right` for equality based on the backend semantics. */


function Ft(t, e) {
  if (t === e) return !0;
  var n = xt(t);
  if (n !== xt(e)) return !1;

  switch (n) {
    case 0
    /* NullValue */
    :
    case 9007199254740991
    /* MaxValue */
    :
      return !0;

    case 1
    /* BooleanValue */
    :
      return t.booleanValue === e.booleanValue;

    case 4
    /* ServerTimestampValue */
    :
      return $t(t).isEqual($t(e));

    case 3
    /* TimestampValue */
    :
      return function (t, e) {
        if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) // Use string equality for ISO 8601 timestamps
          return t.timestampValue === e.timestampValue;
        var n = Rt(t.timestampValue),
            r = Rt(e.timestampValue);
        return n.seconds === r.seconds && n.nanos === r.nanos;
      }(t, e);

    case 5
    /* StringValue */
    :
      return t.stringValue === e.stringValue;

    case 6
    /* BlobValue */
    :
      return function (t, e) {
        return Vt(t.bytesValue).isEqual(Vt(e.bytesValue));
      }(t, e);

    case 7
    /* RefValue */
    :
      return t.referenceValue === e.referenceValue;

    case 8
    /* GeoPointValue */
    :
      return function (t, e) {
        return Pt(t.geoPointValue.latitude) === Pt(e.geoPointValue.latitude) && Pt(t.geoPointValue.longitude) === Pt(e.geoPointValue.longitude);
      }(t, e);

    case 2
    /* NumberValue */
    :
      return function (t, e) {
        if ("integerValue" in t && "integerValue" in e) return Pt(t.integerValue) === Pt(e.integerValue);

        if ("doubleValue" in t && "doubleValue" in e) {
          var _n3 = Pt(t.doubleValue),
              r = Pt(e.doubleValue);

          return _n3 === r ? at(_n3) === at(r) : isNaN(_n3) && isNaN(r);
        }

        return !1;
      }(t, e);

    case 9
    /* ArrayValue */
    :
      return _t(t.arrayValue.values || [], e.arrayValue.values || [], Ft);

    case 10
    /* ObjectValue */
    :
      return function (t, e) {
        var n = t.mapValue.fields || {},
            r = e.mapValue.fields || {};
        if (vt(n) !== vt(r)) return !1;

        for (var _t4 in n) {
          if (n.hasOwnProperty(_t4) && (void 0 === r[_t4] || !Ft(n[_t4], r[_t4]))) return !1;
        }

        return !0;
      }
      /** Returns true if the ArrayValue contains the specified element. */
      (t, e);

    default:
      return g();
  }
}

function qt(t, e) {
  return void 0 !== (t.values || []).find(function (t) {
    return Ft(t, e);
  });
}

function Ot(t, e) {
  if (t === e) return 0;
  var n = xt(t),
      r = xt(e);
  if (n !== r) return yt(n, r);

  switch (n) {
    case 0
    /* NullValue */
    :
    case 9007199254740991
    /* MaxValue */
    :
      return 0;

    case 1
    /* BooleanValue */
    :
      return yt(t.booleanValue, e.booleanValue);

    case 2
    /* NumberValue */
    :
      return function (t, e) {
        var n = Pt(t.integerValue || t.doubleValue),
            r = Pt(e.integerValue || e.doubleValue);
        return n < r ? -1 : n > r ? 1 : n === r ? 0 : // one or both are NaN.
        isNaN(n) ? isNaN(r) ? 0 : -1 : 1;
      }(t, e);

    case 3
    /* TimestampValue */
    :
      return Ct(t.timestampValue, e.timestampValue);

    case 4
    /* ServerTimestampValue */
    :
      return Ct($t(t), $t(e));

    case 5
    /* StringValue */
    :
      return yt(t.stringValue, e.stringValue);

    case 6
    /* BlobValue */
    :
      return function (t, e) {
        var n = Vt(t),
            r = Vt(e);
        return n.compareTo(r);
      }(t.bytesValue, e.bytesValue);

    case 7
    /* RefValue */
    :
      return function (t, e) {
        var n = t.split("/"),
            r = e.split("/");

        for (var _t5 = 0; _t5 < n.length && _t5 < r.length; _t5++) {
          var _e5 = yt(n[_t5], r[_t5]);

          if (0 !== _e5) return _e5;
        }

        return yt(n.length, r.length);
      }(t.referenceValue, e.referenceValue);

    case 8
    /* GeoPointValue */
    :
      return function (t, e) {
        var n = yt(Pt(t.latitude), Pt(e.latitude));
        if (0 !== n) return n;
        return yt(Pt(t.longitude), Pt(e.longitude));
      }(t.geoPointValue, e.geoPointValue);

    case 9
    /* ArrayValue */
    :
      return function (t, e) {
        var n = t.values || [],
            r = e.values || [];

        for (var _t6 = 0; _t6 < n.length && _t6 < r.length; ++_t6) {
          var _e6 = Ot(n[_t6], r[_t6]);

          if (_e6) return _e6;
        }

        return yt(n.length, r.length);
      }(t.arrayValue, e.arrayValue);

    case 10
    /* ObjectValue */
    :
      return function (t, e) {
        if (t === St && e === St) return 0;
        if (t === St) return 1;
        if (e === St) return -1;
        var n = t.fields || {},
            r = Object.keys(n),
            s = e.fields || {},
            i = Object.keys(s); // Even though MapValues are likely sorted correctly based on their insertion
        // order (e.g. when received from the backend), local modifications can bring
        // elements out of order. We need to re-sort the elements to ensure that
        // canonical IDs are independent of insertion order.

        r.sort(), i.sort();

        for (var _t7 = 0; _t7 < r.length && _t7 < i.length; ++_t7) {
          var _e7 = yt(r[_t7], i[_t7]);

          if (0 !== _e7) return _e7;
          var o = Ot(n[r[_t7]], s[i[_t7]]);
          if (0 !== o) return o;
        }

        return yt(r.length, i.length);
      }
      /** Returns a reference value for the provided database and key. */
      (t.mapValue, e.mapValue);

    default:
      throw g();
  }
}

function Ct(t, e) {
  if ("string" == typeof t && "string" == typeof e && t.length === e.length) return yt(t, e);
  var n = Rt(t),
      r = Rt(e),
      s = yt(n.seconds, r.seconds);
  return 0 !== s ? s : yt(n.nanos, r.nanos);
}

function Lt(t, e) {
  return {
    referenceValue: "projects/".concat(t.projectId, "/databases/").concat(t.database, "/documents/").concat(e.path.canonicalString())
  };
}
/** Returns true if `value` is an ArrayValue. */


function Ut(t) {
  return !!t && "arrayValue" in t;
}
/** Returns true if `value` is a NullValue. */


function kt(t) {
  return !!t && "nullValue" in t;
}
/** Returns true if `value` is NaN. */


function jt(t) {
  return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
/** Returns true if `value` is a MapValue. */


function Mt(t) {
  return !!t && "mapValue" in t;
}
/** Creates a deep copy of `source`. */


function Bt(t) {
  if (t.geoPointValue) return {
    geoPointValue: Object.assign({}, t.geoPointValue)
  };
  if (t.timestampValue && "object" == index_browser_esm2017_typeof(t.timestampValue)) return {
    timestampValue: Object.assign({}, t.timestampValue)
  };

  if (t.mapValue) {
    var e = {
      mapValue: {
        fields: {}
      }
    };
    return Et(t.mapValue.fields, function (t, n) {
      return e.mapValue.fields[t] = Bt(n);
    }), e;
  }

  if (t.arrayValue) {
    var _e8 = {
      arrayValue: {
        values: []
      }
    };

    for (var n = 0; n < (t.arrayValue.values || []).length; ++n) {
      _e8.arrayValue.values[n] = Bt(t.arrayValue.values[n]);
    }

    return _e8;
  }

  return Object.assign({}, t);
}

var zt = /*#__PURE__*/function () {
  function zt(t) {
    index_browser_esm2017_classCallCheck(this, zt);

    this.value = t;
  }

  index_browser_esm2017_createClass(zt, [{
    key: "field",
    value:
    /**
     * Returns the value at the given path or null.
     *
     * @param path - the path to search
     * @returns The value at the path or null if the path is not set.
     */
    function field(t) {
      if (t.isEmpty()) return this.value;
      {
        var e = this.value;

        for (var n = 0; n < t.length - 1; ++n) {
          if (e = (e.mapValue.fields || {})[t.get(n)], !Mt(e)) return null;
        }

        return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
      }
    }
    /**
     * Sets the field to the provided value.
     *
     * @param path - The field path to set.
     * @param value - The value to set.
     */

  }, {
    key: "set",
    value: function set(t, e) {
      this.getFieldsMap(t.popLast())[t.lastSegment()] = Bt(e);
    }
    /**
     * Sets the provided fields to the provided values.
     *
     * @param data - A map of fields to values (or null for deletes).
     */

  }, {
    key: "setAll",
    value: function setAll(t) {
      var _this9 = this;

      var e = tt.emptyPath(),
          n = {},
          r = [];
      t.forEach(function (t, s) {
        if (!e.isImmediateParentOf(s)) {
          // Insert the accumulated changes at this parent location
          var _t8 = _this9.getFieldsMap(e);

          _this9.applyChanges(_t8, n, r), n = {}, r = [], e = s.popLast();
        }

        t ? n[s.lastSegment()] = Bt(t) : r.push(s.lastSegment());
      });
      var s = this.getFieldsMap(e);
      this.applyChanges(s, n, r);
    }
    /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path - The field path to remove.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      var e = this.field(t.popLast());
      Mt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return Ft(this.value, t.value);
    }
    /**
     * Returns the map that contains the leaf element of `path`. If the parent
     * entry does not yet exist, or if it is not a map, a new map will be created.
     */

  }, {
    key: "getFieldsMap",
    value: function getFieldsMap(t) {
      var e = this.value;
      e.mapValue.fields || (e.mapValue = {
        fields: {}
      });

      for (var n = 0; n < t.length; ++n) {
        var r = e.mapValue.fields[t.get(n)];
        Mt(r) && r.mapValue.fields || (r = {
          mapValue: {
            fields: {}
          }
        }, e.mapValue.fields[t.get(n)] = r), e = r;
      }

      return e.mapValue.fields;
    }
    /**
     * Modifies `fieldsMap` by adding, replacing or deleting the specified
     * entries.
     */

  }, {
    key: "applyChanges",
    value: function applyChanges(t, e, n) {
      Et(e, function (e, n) {
        return t[e] = n;
      });

      var _iterator2 = index_browser_esm2017_createForOfIteratorHelper(n),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _e9 = _step2.value;
          delete t[_e9];
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "clone",
    value: function clone() {
      return new zt(Bt(this.value));
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new zt({
        mapValue: {}
      });
    }
  }]);

  return zt;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a document in Firestore with a key, version, data and whether it
 * has local mutations applied to it.
 *
 * Documents can transition between states via `convertToFoundDocument()`,
 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
 * not transition to one of these states even after all mutations have been
 * applied, `isValidDocument()` returns false and the document should be removed
 * from all views.
 */


var Gt = /*#__PURE__*/function () {
  function Gt(t, e, n, r, s, i) {
    index_browser_esm2017_classCallCheck(this, Gt);

    this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.data = s, this.documentState = i;
  }
  /**
   * Creates a document with no known version or data, but which can serve as
   * base document for mutations.
   */


  index_browser_esm2017_createClass(Gt, [{
    key: "convertToFoundDocument",
    value:
    /**
     * Changes the document type to indicate that it exists and that its version
     * and data are known.
     */
    function convertToFoundDocument(t, e) {
      return this.version = t, this.documentType = 1
      /* FOUND_DOCUMENT */
      , this.data = e, this.documentState = 0
      /* SYNCED */
      , this;
    }
    /**
     * Changes the document type to indicate that it doesn't exist at the given
     * version.
     */

  }, {
    key: "convertToNoDocument",
    value: function convertToNoDocument(t) {
      return this.version = t, this.documentType = 2
      /* NO_DOCUMENT */
      , this.data = zt.empty(), this.documentState = 0
      /* SYNCED */
      , this;
    }
    /**
     * Changes the document type to indicate that it exists at a given version but
     * that its data is not known (e.g. a document that was updated without a known
     * base document).
     */

  }, {
    key: "convertToUnknownDocument",
    value: function convertToUnknownDocument(t) {
      return this.version = t, this.documentType = 3
      /* UNKNOWN_DOCUMENT */
      , this.data = zt.empty(), this.documentState = 2
      /* HAS_COMMITTED_MUTATIONS */
      , this;
    }
  }, {
    key: "setHasCommittedMutations",
    value: function setHasCommittedMutations() {
      return this.documentState = 2
      /* HAS_COMMITTED_MUTATIONS */
      , this;
    }
  }, {
    key: "setHasLocalMutations",
    value: function setHasLocalMutations() {
      return this.documentState = 1
      /* HAS_LOCAL_MUTATIONS */
      , this;
    }
  }, {
    key: "setReadTime",
    value: function setReadTime(t) {
      return this.readTime = t, this;
    }
  }, {
    key: "hasLocalMutations",
    get: function get() {
      return 1
      /* HAS_LOCAL_MUTATIONS */
      === this.documentState;
    }
  }, {
    key: "hasCommittedMutations",
    get: function get() {
      return 2
      /* HAS_COMMITTED_MUTATIONS */
      === this.documentState;
    }
  }, {
    key: "hasPendingWrites",
    get: function get() {
      return this.hasLocalMutations || this.hasCommittedMutations;
    }
  }, {
    key: "isValidDocument",
    value: function isValidDocument() {
      return 0
      /* INVALID */
      !== this.documentType;
    }
  }, {
    key: "isFoundDocument",
    value: function isFoundDocument() {
      return 1
      /* FOUND_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isNoDocument",
    value: function isNoDocument() {
      return 2
      /* NO_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isUnknownDocument",
    value: function isUnknownDocument() {
      return 3
      /* UNKNOWN_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof Gt && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
    }
  }, {
    key: "mutableCopy",
    value: function mutableCopy() {
      return new Gt(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Document(".concat(this.key, ", ").concat(this.version, ", ").concat(JSON.stringify(this.data.value), ", {documentType: ").concat(this.documentType, "}), {documentState: ").concat(this.documentState, "})");
    }
  }], [{
    key: "newInvalidDocument",
    value: function newInvalidDocument(t) {
      return new Gt(t, 0
      /* INVALID */
      , bt.min(), bt.min(), zt.empty(), 0
      /* SYNCED */
      );
    }
    /**
     * Creates a new document that is known to exist with the given data at the
     * given version.
     */

  }, {
    key: "newFoundDocument",
    value: function newFoundDocument(t, e, n) {
      return new Gt(t, 1
      /* FOUND_DOCUMENT */
      , e, bt.min(), n, 0
      /* SYNCED */
      );
    }
    /** Creates a new document that is known to not exist at the given version. */

  }, {
    key: "newNoDocument",
    value: function newNoDocument(t, e) {
      return new Gt(t, 2
      /* NO_DOCUMENT */
      , e, bt.min(), zt.empty(), 0
      /* SYNCED */
      );
    }
    /**
     * Creates a new document that is known to exist at the given version but
     * whose data is not known (e.g. a document that was updated without a known
     * base document).
     */

  }, {
    key: "newUnknownDocument",
    value: function newUnknownDocument(t, e) {
      return new Gt(t, 3
      /* UNKNOWN_DOCUMENT */
      , e, bt.min(), zt.empty(), 2
      /* HAS_COMMITTED_MUTATIONS */
      );
    }
  }]);

  return Gt;
}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Visible for testing


var Qt = /*#__PURE__*/index_browser_esm2017_createClass(function Qt(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

  index_browser_esm2017_classCallCheck(this, Qt);

  this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, this.startAt = i, this.endAt = o, this.P = null;
});
/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */


function Wt(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  return new Qt(t, e, n, r, s, i, o);
}

var Yt = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_ref2) {
  index_browser_esm2017_inherits(Yt, _ref2);

  var _super5 = index_browser_esm2017_createSuper(Yt);

  function Yt(t, e, n) {
    var _this10;

    index_browser_esm2017_classCallCheck(this, Yt);

    _this10 = _super5.call(this), _this10.field = t, _this10.op = e, _this10.value = n;
    return _this10;
  }
  /**
   * Creates a filter based on the provided arguments.
   */


  index_browser_esm2017_createClass(Yt, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field); // Types do not have to match in NOT_EQUAL filters.

      return "!="
      /* NOT_EQUAL */
      === this.op ? null !== e && this.D(Ot(e, this.value)) : null !== e && xt(this.value) === xt(e) && this.D(Ot(e, this.value)); // Only compare types with matching backend order (such as double and int).
    }
  }, {
    key: "D",
    value: function D(t) {
      switch (this.op) {
        case "<"
        /* LESS_THAN */
        :
          return t < 0;

        case "<="
        /* LESS_THAN_OR_EQUAL */
        :
          return t <= 0;

        case "=="
        /* EQUAL */
        :
          return 0 === t;

        case "!="
        /* NOT_EQUAL */
        :
          return 0 !== t;

        case ">"
        /* GREATER_THAN */
        :
          return t > 0;

        case ">="
        /* GREATER_THAN_OR_EQUAL */
        :
          return t >= 0;

        default:
          return g();
      }
    }
  }, {
    key: "N",
    value: function N() {
      return ["<"
      /* LESS_THAN */
      , "<="
      /* LESS_THAN_OR_EQUAL */
      , ">"
      /* GREATER_THAN */
      , ">="
      /* GREATER_THAN_OR_EQUAL */
      , "!="
      /* NOT_EQUAL */
      , "not-in"
      /* NOT_IN */
      ].indexOf(this.op) >= 0;
    }
  }], [{
    key: "create",
    value: function create(t, e, n) {
      return t.isKeyField() ? "in"
      /* IN */
      === e || "not-in"
      /* NOT_IN */
      === e ? this.V(t, e, n) : new Ht(t, e, n) : "array-contains"
      /* ARRAY_CONTAINS */
      === e ? new Zt(t, n) : "in"
      /* IN */
      === e ? new te(t, n) : "not-in"
      /* NOT_IN */
      === e ? new ee(t, n) : "array-contains-any"
      /* ARRAY_CONTAINS_ANY */
      === e ? new ne(t, n) : new Yt(t, e, n);
    }
  }, {
    key: "V",
    value: function V(t, e, n) {
      return "in"
      /* IN */
      === e ? new Kt(t, n) : new Jt(t, n);
    }
  }]);

  return Yt;
}( /*#__PURE__*/function () {
  function _class2() {
    index_browser_esm2017_classCallCheck(this, _class2);
  }

  return index_browser_esm2017_createClass(_class2);
}())));
/** Filter that matches on key fields (i.e. '__name__'). */


var Ht = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Yt) {
  index_browser_esm2017_inherits(Ht, _Yt);

  var _super6 = index_browser_esm2017_createSuper(Ht);

  function Ht(t, e, n) {
    var _this11;

    index_browser_esm2017_classCallCheck(this, Ht);

    _this11 = _super6.call(this, t, e, n), _this11.key = et.fromName(n.referenceValue);
    return _this11;
  }

  index_browser_esm2017_createClass(Ht, [{
    key: "matches",
    value: function matches(t) {
      var e = et.comparator(t.key, this.key);
      return this.D(e);
    }
  }]);

  return Ht;
}(Yt)));
/** Filter that matches on key fields within an array. */


var Kt = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Yt2) {
  index_browser_esm2017_inherits(Kt, _Yt2);

  var _super7 = index_browser_esm2017_createSuper(Kt);

  function Kt(t, e) {
    var _this12;

    index_browser_esm2017_classCallCheck(this, Kt);

    _this12 = _super7.call(this, t, "in"
    /* IN */
    , e), _this12.keys = Xt("in"
    /* IN */
    , e);
    return _this12;
  }

  index_browser_esm2017_createClass(Kt, [{
    key: "matches",
    value: function matches(t) {
      return this.keys.some(function (e) {
        return e.isEqual(t.key);
      });
    }
  }]);

  return Kt;
}(Yt)));
/** Filter that matches on key fields not present within an array. */


var Jt = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Yt3) {
  index_browser_esm2017_inherits(Jt, _Yt3);

  var _super8 = index_browser_esm2017_createSuper(Jt);

  function Jt(t, e) {
    var _this13;

    index_browser_esm2017_classCallCheck(this, Jt);

    _this13 = _super8.call(this, t, "not-in"
    /* NOT_IN */
    , e), _this13.keys = Xt("not-in"
    /* NOT_IN */
    , e);
    return _this13;
  }

  index_browser_esm2017_createClass(Jt, [{
    key: "matches",
    value: function matches(t) {
      return !this.keys.some(function (e) {
        return e.isEqual(t.key);
      });
    }
  }]);

  return Jt;
}(Yt)));

function Xt(t, e) {
  var n;
  return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map(function (t) {
    return et.fromName(t.referenceValue);
  });
}
/** A Filter that implements the array-contains operator. */


var Zt = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Yt4) {
  index_browser_esm2017_inherits(Zt, _Yt4);

  var _super9 = index_browser_esm2017_createSuper(Zt);

  function Zt(t, e) {
    index_browser_esm2017_classCallCheck(this, Zt);

    return _super9.call(this, t, "array-contains"
    /* ARRAY_CONTAINS */
    , e);
  }

  index_browser_esm2017_createClass(Zt, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field);
      return Ut(e) && qt(e.arrayValue, this.value);
    }
  }]);

  return Zt;
}(Yt)));
/** A Filter that implements the IN operator. */


var te = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Yt5) {
  index_browser_esm2017_inherits(te, _Yt5);

  var _super10 = index_browser_esm2017_createSuper(te);

  function te(t, e) {
    index_browser_esm2017_classCallCheck(this, te);

    return _super10.call(this, t, "in"
    /* IN */
    , e);
  }

  index_browser_esm2017_createClass(te, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field);
      return null !== e && qt(this.value.arrayValue, e);
    }
  }]);

  return te;
}(Yt)));
/** A Filter that implements the not-in operator. */


var ee = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Yt6) {
  index_browser_esm2017_inherits(ee, _Yt6);

  var _super11 = index_browser_esm2017_createSuper(ee);

  function ee(t, e) {
    index_browser_esm2017_classCallCheck(this, ee);

    return _super11.call(this, t, "not-in"
    /* NOT_IN */
    , e);
  }

  index_browser_esm2017_createClass(ee, [{
    key: "matches",
    value: function matches(t) {
      if (qt(this.value.arrayValue, {
        nullValue: "NULL_VALUE"
      })) return !1;
      var e = t.data.field(this.field);
      return null !== e && !qt(this.value.arrayValue, e);
    }
  }]);

  return ee;
}(Yt)));
/** A Filter that implements the array-contains-any operator. */


var ne = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Yt7) {
  index_browser_esm2017_inherits(ne, _Yt7);

  var _super12 = index_browser_esm2017_createSuper(ne);

  function ne(t, e) {
    index_browser_esm2017_classCallCheck(this, ne);

    return _super12.call(this, t, "array-contains-any"
    /* ARRAY_CONTAINS_ANY */
    , e);
  }

  index_browser_esm2017_createClass(ne, [{
    key: "matches",
    value: function matches(t) {
      var _this14 = this;

      var e = t.data.field(this.field);
      return !(!Ut(e) || !e.arrayValue.values) && e.arrayValue.values.some(function (t) {
        return qt(_this14.value.arrayValue, t);
      });
    }
  }]);

  return ne;
}(Yt)));
/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */


var re = /*#__PURE__*/index_browser_esm2017_createClass(function re(t, e) {
  index_browser_esm2017_classCallCheck(this, re);

  this.position = t, this.inclusive = e;
});
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */


var se = /*#__PURE__*/index_browser_esm2017_createClass(function se(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "asc";

  index_browser_esm2017_classCallCheck(this, se);

  this.field = t, this.dir = e;
});

function ie(t, e) {
  return t.dir === e.dir && t.field.isEqual(e.field);
}

function oe(t, e) {
  if (null === t) return null === e;
  if (null === e) return !1;
  if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;

  for (var n = 0; n < t.position.length; n++) {
    if (!Ft(t.position[n], e.position[n])) return !1;
  }

  return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Query encapsulates all the query attributes we support in the SDK. It can
 * be run against the LocalStore, as well as be converted to a `Target` to
 * query the RemoteStore results.
 *
 * Visible for testing.
 */


var ue = /*#__PURE__*/index_browser_esm2017_createClass(
/**
 * Initializes a Query with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 */
function ue(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "F";
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  var u = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;

  index_browser_esm2017_classCallCheck(this, ue);

  this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.$ = null, // The corresponding `Target` of this `Query` instance.
  this.S = null, this.startAt, this.endAt;
});
/** Creates a new Query for a query that matches all documents at `path` */


function ce(t) {
  return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
}

function ae(t) {
  var _iterator3 = index_browser_esm2017_createForOfIteratorHelper(t.filters),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var e = _step3.value;
      if (e.N()) return e.field;
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return null;
}
/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */

/**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */


function he(t) {
  return null !== t.collectionGroup;
}
/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */


function le(t) {
  var e = v(t);

  if (null === e.$) {
    e.$ = [];

    var _t9 = ae(e),
        n = ce(e);

    if (null !== _t9 && null === n) // In order to implicitly add key ordering, we must also add the
      // inequality filter field for it to be a valid query.
      // Note that the default inequality field and key ordering is ascending.
      _t9.isKeyField() || e.$.push(new se(_t9)), e.$.push(new se(tt.keyField(), "asc"
      /* ASCENDING */
      ));else {
      var _t10 = !1;

      var _iterator4 = index_browser_esm2017_createForOfIteratorHelper(e.explicitOrderBy),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _n4 = _step4.value;
          e.$.push(_n4), _n4.field.isKeyField() && (_t10 = !0);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (!_t10) {
        // The order of the implicit key ordering always matches the last
        // explicit order by
        var _t11 = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc"
        /* ASCENDING */
        ;

        e.$.push(new se(tt.keyField(), _t11));
      }
    }
  }

  return e.$;
}
/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */


function fe(t) {
  var e = v(t);
  if (!e.S) if ("F"
  /* First */
  === e.limitType) e.S = Wt(e.path, e.collectionGroup, le(e), e.filters, e.limit, e.startAt, e.endAt);else {
    // Flip the orderBy directions since we want the last results
    var _t12 = [];

    var _iterator5 = index_browser_esm2017_createForOfIteratorHelper(le(e)),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var _n5 = _step5.value;

        var _e10 = "desc"
        /* DESCENDING */
        === _n5.dir ? "asc"
        /* ASCENDING */
        : "desc"
        /* DESCENDING */
        ;

        _t12.push(new se(_n5.field, _e10));
      } // We need to swap the cursors to match the now-flipped query ordering.

    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    var n = e.endAt ? new re(e.endAt.position, e.endAt.inclusive) : null,
        r = e.startAt ? new re(e.startAt.position, e.startAt.inclusive) : null; // Now return as a LimitType.First query.

    e.S = Wt(e.path, e.collectionGroup, _t12, e.filters, e.limit, n, r);
  }
  return e.S;
}

function de(t, e) {
  return function (t, e) {
    if (t.limit !== e.limit) return !1;
    if (t.orderBy.length !== e.orderBy.length) return !1;

    for (var _n6 = 0; _n6 < t.orderBy.length; _n6++) {
      if (!ie(t.orderBy[_n6], e.orderBy[_n6])) return !1;
    }

    if (t.filters.length !== e.filters.length) return !1;

    for (var s = 0; s < t.filters.length; s++) {
      if (n = t.filters[s], r = e.filters[s], n.op !== r.op || !n.field.isEqual(r.field) || !Ft(n.value, r.value)) return !1;
    }

    var n, r;
    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!oe(t.startAt, e.startAt) && oe(t.endAt, e.endAt);
  }(fe(t), fe(e)) && t.limitType === e.limitType;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */

/**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */


function we(t, e) {
  return function (t) {
    return "number" == typeof t && Number.isInteger(t) && !at(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
  }(e) ?
  /**
  * Returns an IntegerValue for `value`.
  */
  function (t) {
    return {
      integerValue: "" + t
    };
  }(e) : function (t, e) {
    if (t.F) {
      if (isNaN(e)) return {
        doubleValue: "NaN"
      };
      if (e === 1 / 0) return {
        doubleValue: "Infinity"
      };
      if (e === -1 / 0) return {
        doubleValue: "-Infinity"
      };
    }

    return {
      doubleValue: at(e) ? "-0" : e
    };
  }(t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Used to represent a field transform on a mutation. */


var me = /*#__PURE__*/index_browser_esm2017_createClass(function me() {
  index_browser_esm2017_classCallCheck(this, me);

  // Make sure that the structural type of `TransformOperation` is unique.
  // See https://github.com/microsoft/TypeScript/issues/5451
  this._ = void 0;
});
/** Transforms a value into a server-generated timestamp. */


var pe = /*#__PURE__*/function (_me) {
  index_browser_esm2017_inherits(pe, _me);

  var _super13 = index_browser_esm2017_createSuper(pe);

  function pe() {
    index_browser_esm2017_classCallCheck(this, pe);

    return _super13.apply(this, arguments);
  }

  return index_browser_esm2017_createClass(pe);
}(me);
/** Transforms an array value via a union operation. */


var ye = /*#__PURE__*/function (_me2) {
  index_browser_esm2017_inherits(ye, _me2);

  var _super14 = index_browser_esm2017_createSuper(ye);

  function ye(t) {
    var _this15;

    index_browser_esm2017_classCallCheck(this, ye);

    _this15 = _super14.call(this), _this15.elements = t;
    return _this15;
  }

  return index_browser_esm2017_createClass(ye);
}(me);
/** Transforms an array value via a remove operation. */


var _e = /*#__PURE__*/function (_me3) {
  index_browser_esm2017_inherits(_e, _me3);

  var _super15 = index_browser_esm2017_createSuper(_e);

  function _e(t) {
    var _this16;

    index_browser_esm2017_classCallCheck(this, _e);

    _this16 = _super15.call(this), _this16.elements = t;
    return _this16;
  }

  return index_browser_esm2017_createClass(_e);
}(me);
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */


var ge = /*#__PURE__*/function (_me4) {
  index_browser_esm2017_inherits(ge, _me4);

  var _super16 = index_browser_esm2017_createSuper(ge);

  function ge(t, e) {
    var _this17;

    index_browser_esm2017_classCallCheck(this, ge);

    _this17 = _super16.call(this), _this17.q = t, _this17.O = e;
    return _this17;
  }

  return index_browser_esm2017_createClass(ge);
}(me);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** A field path and the TransformOperation to perform upon it. */


var be = /*#__PURE__*/(/* unused pure expression or super */ null && (index_browser_esm2017_createClass(function be(t, e) {
  index_browser_esm2017_classCallCheck(this, be);

  this.field = t, this.transform = e;
})));
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */


var ve = /*#__PURE__*/function () {
  function ve(t, e) {
    index_browser_esm2017_classCallCheck(this, ve);

    this.updateTime = t, this.exists = e;
  }
  /** Creates a new empty Precondition. */


  index_browser_esm2017_createClass(ve, [{
    key: "isNone",
    get:
    /** Returns whether this Precondition is empty. */
    function get() {
      return void 0 === this.updateTime && void 0 === this.exists;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
    }
  }], [{
    key: "none",
    value: function none() {
      return new ve();
    }
    /** Creates a new Precondition with an exists flag. */

  }, {
    key: "exists",
    value: function exists(t) {
      return new ve(void 0, t);
    }
    /** Creates a new Precondition based on a version a document exists at. */

  }, {
    key: "updateTime",
    value: function updateTime(t) {
      return new ve(t);
    }
  }]);

  return ve;
}();
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set and Patch mutations. For Delete mutations, we
 * reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        InvalidDocument(v0)   Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set and Patch mutations. As deletes have no
 * explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
 * the updated version.
 *
 * Field transforms are used only with Patch and Set Mutations. We use the
 * `updateTransforms` message to store transforms, rather than the `transforms`s
 * messages.
 *
 * ## Subclassing Notes
 *
 * Every type of mutation needs to implement its own applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document (see `setMutationApplyToRemoteDocument()` for an
 * example).
 */


var Ee = /*#__PURE__*/index_browser_esm2017_createClass(function Ee() {
  index_browser_esm2017_classCallCheck(this, Ee);
});
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */


var Te = /*#__PURE__*/function (_Ee) {
  index_browser_esm2017_inherits(Te, _Ee);

  var _super17 = index_browser_esm2017_createSuper(Te);

  function Te(t, e, n) {
    var _this18;

    var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    index_browser_esm2017_classCallCheck(this, Te);

    _this18 = _super17.call(this), _this18.key = t, _this18.value = e, _this18.precondition = n, _this18.fieldTransforms = r, _this18.type = 0
    /* Set */
    ;
    return _this18;
  }

  return index_browser_esm2017_createClass(Te);
}(Ee);
/**
 * A mutation that modifies fields of the document at the given key with the
 * given values. The values are applied through a field mask:
 *
 *  * When a field is in both the mask and the values, the corresponding field
 *    is updated.
 *  * When a field is in neither the mask nor the values, the corresponding
 *    field is unmodified.
 *  * When a field is in the mask but not in the values, the corresponding field
 *    is deleted.
 *  * When a field is not in the mask but is in the values, the values map is
 *    ignored.
 */


var Ae = /*#__PURE__*/function (_Ee2) {
  index_browser_esm2017_inherits(Ae, _Ee2);

  var _super18 = index_browser_esm2017_createSuper(Ae);

  function Ae(t, e, n, r) {
    var _this19;

    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

    index_browser_esm2017_classCallCheck(this, Ae);

    _this19 = _super18.call(this), _this19.key = t, _this19.data = e, _this19.fieldMask = n, _this19.precondition = r, _this19.fieldTransforms = s, _this19.type = 1
    /* Patch */
    ;
    return _this19;
  }

  return index_browser_esm2017_createClass(Ae);
}(Ee);
/** A mutation that deletes the document at the given key. */


var Ie = /*#__PURE__*/function (_Ee3) {
  index_browser_esm2017_inherits(Ie, _Ee3);

  var _super19 = index_browser_esm2017_createSuper(Ie);

  function Ie(t, e) {
    var _this20;

    index_browser_esm2017_classCallCheck(this, Ie);

    _this20 = _super19.call(this), _this20.key = t, _this20.precondition = e, _this20.type = 2
    /* Delete */
    , _this20.fieldTransforms = [];
    return _this20;
  }

  return index_browser_esm2017_createClass(Ie);
}(Ee);
/**
 * A mutation that verifies the existence of the document at the given key with
 * the provided precondition.
 *
 * The `verify` operation is only used in Transactions, and this class serves
 * primarily to facilitate serialization into protos.
 */


var Re = /*#__PURE__*/function (_Ee4) {
  index_browser_esm2017_inherits(Re, _Ee4);

  var _super20 = index_browser_esm2017_createSuper(Re);

  function Re(t, e) {
    var _this21;

    index_browser_esm2017_classCallCheck(this, Re);

    _this21 = _super20.call(this), _this21.key = t, _this21.precondition = e, _this21.type = 3
    /* Verify */
    , _this21.fieldTransforms = [];
    return _this21;
  }

  return index_browser_esm2017_createClass(Re);
}(Ee);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Pe = function () {
  var t = {
    asc: "ASCENDING",
    desc: "DESCENDING"
  };
  return t;
}(),
    Ve = function () {
  var t = {
    "<": "LESS_THAN",
    "<=": "LESS_THAN_OR_EQUAL",
    ">": "GREATER_THAN",
    ">=": "GREATER_THAN_OR_EQUAL",
    "==": "EQUAL",
    "!=": "NOT_EQUAL",
    "array-contains": "ARRAY_CONTAINS",
    "in": "IN",
    "not-in": "NOT_IN",
    "array-contains-any": "ARRAY_CONTAINS_ANY"
  };
  return t;
}();
/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */


var De = /*#__PURE__*/index_browser_esm2017_createClass(function De(t, e) {
  index_browser_esm2017_classCallCheck(this, De);

  this.databaseId = t, this.F = e;
});
/**
 * Returns a value for a number (or null) that's appropriate to put into
 * a google.protobuf.Int32Value proto.
 * DO NOT USE THIS FOR ANYTHING ELSE.
 * This method cheats. It's typed as returning "number" because that's what
 * our generated proto interfaces say Int32Value must be. But GRPC actually
 * expects a { value: <number> } struct.
 */

/**
 * Returns a value for a Date that's appropriate to put into a proto.
 */


function Ne(t, e) {
  if (t.F) {
    return "".concat(new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", ""), ".").concat(("000000000" + e.nanoseconds).slice(-9), "Z");
  }

  return {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */


function $e(t, e) {
  return t.F ? e.toBase64() : e.toUint8Array();
}

function Se(t, e) {
  return Ne(t, e.toTimestamp());
}

function xe(t) {
  return b(!!t), bt.fromTimestamp(function (t) {
    var e = Rt(t);
    return new gt(e.seconds, e.nanos);
  }(t));
}

function Fe(t, e) {
  return function (t) {
    return new X(["projects", t.projectId, "databases", t.database]);
  }(t).child("documents").child(e).canonicalString();
}

function qe(t, e) {
  return Fe(t.databaseId, e.path);
}

function Oe(t, e) {
  var n = function (t) {
    var e = X.fromString(t);
    return b(We(e)), e;
  }(e);

  if (n.get(1) !== t.databaseId.projectId) throw new U(I, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
  if (n.get(3) !== t.databaseId.database) throw new U(I, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
  return new et((b((r = n).length > 4 && "documents" === r.get(4)), r.popFirst(5)));
  var r;
  /** Creates a Document proto from key and fields (but no create/update time) */
}

function Ce(t, e) {
  return Fe(t.databaseId, e);
}

function Le(t) {
  return new X(["projects", t.databaseId.projectId, "databases", t.databaseId.database]).canonicalString();
}

function Ue(t, e, n) {
  return {
    name: qe(t, e),
    fields: n.value.mapValue.fields
  };
}

function ke(t, e) {
  return "found" in e ? function (t, e) {
    b(!!e.found), e.found.name, e.found.updateTime;
    var n = Oe(t, e.found.name),
        r = xe(e.found.updateTime),
        s = new zt({
      mapValue: {
        fields: e.found.fields
      }
    });
    return Gt.newFoundDocument(n, r, s);
  }(t, e) : "missing" in e ? function (t, e) {
    b(!!e.missing), b(!!e.readTime);
    var n = Oe(t, e.missing),
        r = xe(e.readTime);
    return Gt.newNoDocument(n, r);
  }(t, e) : g();
}

function je(t, e) {
  var n;
  if (e instanceof Te) n = {
    update: Ue(t, e.key, e.value)
  };else if (e instanceof Ie) n = {
    "delete": qe(t, e.key)
  };else if (e instanceof Ae) n = {
    update: Ue(t, e.key, e.data),
    updateMask: Qe(e.fieldMask)
  };else {
    if (!(e instanceof Re)) return g();
    n = {
      verify: qe(t, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map(function (t) {
    return function (t, e) {
      var n = e.transform;
      if (n instanceof pe) return {
        fieldPath: e.field.canonicalString(),
        setToServerValue: "REQUEST_TIME"
      };
      if (n instanceof ye) return {
        fieldPath: e.field.canonicalString(),
        appendMissingElements: {
          values: n.elements
        }
      };
      if (n instanceof _e) return {
        fieldPath: e.field.canonicalString(),
        removeAllFromArray: {
          values: n.elements
        }
      };
      if (n instanceof ge) return {
        fieldPath: e.field.canonicalString(),
        increment: n.O
      };
      throw g();
    }(0, t);
  })), e.precondition.isNone || (n.currentDocument = function (t, e) {
    return void 0 !== e.updateTime ? {
      updateTime: Se(t, e.updateTime)
    } : void 0 !== e.exists ? {
      exists: e.exists
    } : g();
  }(t, e.precondition)), n;
}

function Me(t, e) {
  // Dissect the path into parent, collectionId, and optional key filter.
  var n = {
    structuredQuery: {}
  },
      r = e.path;
  null !== e.collectionGroup ? (n.parent = Ce(t, r), n.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: !0
  }]) : (n.parent = Ce(t, r.popLast()), n.structuredQuery.from = [{
    collectionId: r.lastSegment()
  }]);

  var s = function (t) {
    if (0 === t.length) return;
    var e = t.map(function (t) {
      return (// visible for testing
        function (t) {
          if ("=="
          /* EQUAL */
          === t.op) {
            if (jt(t.value)) return {
              unaryFilter: {
                field: Ge(t.field),
                op: "IS_NAN"
              }
            };
            if (kt(t.value)) return {
              unaryFilter: {
                field: Ge(t.field),
                op: "IS_NULL"
              }
            };
          } else if ("!="
          /* NOT_EQUAL */
          === t.op) {
            if (jt(t.value)) return {
              unaryFilter: {
                field: Ge(t.field),
                op: "IS_NOT_NAN"
              }
            };
            if (kt(t.value)) return {
              unaryFilter: {
                field: Ge(t.field),
                op: "IS_NOT_NULL"
              }
            };
          }

          return {
            fieldFilter: {
              field: Ge(t.field),
              op: ze(t.op),
              value: t.value
            }
          };
        }(t)
      );
    });
    if (1 === e.length) return e[0];
    return {
      compositeFilter: {
        op: "AND",
        filters: e
      }
    };
  }(e.filters);

  s && (n.structuredQuery.where = s);

  var i = function (t) {
    if (0 === t.length) return;
    return t.map(function (t) {
      return (// visible for testing
        function (t) {
          return {
            field: Ge(t.field),
            direction: Be(t.dir)
          };
        }(t)
      );
    });
  }(e.orderBy);

  i && (n.structuredQuery.orderBy = i);

  var o = function (t, e) {
    return t.F || ct(e) ? e : {
      value: e
    };
  }(t, e.limit);

  var u;
  return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {
    before: (u = e.startAt).inclusive,
    values: u.position
  }), e.endAt && (n.structuredQuery.endAt = function (t) {
    return {
      before: !t.inclusive,
      values: t.position
    };
  } // visible for testing
  (e.endAt)), n;
}

function Be(t) {
  return Pe[t];
} // visible for testing


function ze(t) {
  return Ve[t];
}

function Ge(t) {
  return {
    fieldPath: t.canonicalString()
  };
}

function Qe(t) {
  var e = [];
  return t.fields.forEach(function (t) {
    return e.push(t.canonicalString());
  }), {
    fieldPaths: e
  };
}

function We(t) {
  // Resource names have at least 4 components (project ID, database ID)
  return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function Ye(t) {
  return new De(t,
  /* useProto3Json= */
  !0);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */


var He = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function He(
  /**
   * The AsyncQueue to run backoff operations on.
   */
  t,
  /**
   * The ID to use when scheduling backoff operations on the AsyncQueue.
   */
  e) {
    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;
    var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.5;
    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 6e4;

    index_browser_esm2017_classCallCheck(this, He);

    this.C = t, this.timerId = e, this.L = n, this.U = r, this.k = s, this.j = 0, this.M = null,
    /** The last backoff attempt, as epoch milliseconds. */
    this.B = Date.now(), this.reset();
  }
  /**
   * Resets the backoff delay.
   *
   * The very next backoffAndWait() will have no delay. If it is called again
   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
   * subsequent ones will increase according to the backoffFactor.
   */


  index_browser_esm2017_createClass(He, [{
    key: "reset",
    value: function reset() {
      this.j = 0;
    }
    /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */

  }, {
    key: "G",
    value: function G() {
      this.j = this.k;
    }
    /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */

  }, {
    key: "W",
    value: function W(t) {
      var _this22 = this;

      // Cancel any pending backoff operation.
      this.cancel(); // First schedule using the current base (which may be 0 and should be
      // honored as such).

      var e = Math.floor(this.j + this.Y()),
          n = Math.max(0, Date.now() - this.B),
          r = Math.max(0, e - n); // Guard against lastAttemptTime being in the future due to a clock change.

      r > 0 && _m("ExponentialBackoff", "Backing off for ".concat(r, " ms (base delay: ").concat(this.j, " ms, delay with jitter: ").concat(e, " ms, last attempt: ").concat(n, " ms ago)")), this.M = this.C.enqueueAfterDelay(this.timerId, r, function () {
        return _this22.B = Date.now(), t();
      }), // Apply backoff factor to determine next delay and ensure it is within
      // bounds.
      this.j *= this.U, this.j < this.L && (this.j = this.L), this.j > this.k && (this.j = this.k);
    }
  }, {
    key: "H",
    value: function H() {
      null !== this.M && (this.M.skipDelay(), this.M = null);
    }
  }, {
    key: "cancel",
    value: function cancel() {
      null !== this.M && (this.M.cancel(), this.M = null);
    }
    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */

  }, {
    key: "Y",
    value: function Y() {
      return (Math.random() - .5) * this.j;
    }
  }]);

  return He;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Datastore and its related methods are a wrapper around the external Google
 * Cloud Datastore grpc API, which provides an interface that is more convenient
 * for the rest of the client SDK architecture to consume.
 */

/**
 * An implementation of Datastore that exposes additional state for internal
 * consumption.
 */


var Ke = /*#__PURE__*/function (_ref3) {
  index_browser_esm2017_inherits(Ke, _ref3);

  var _super21 = index_browser_esm2017_createSuper(Ke);

  function Ke(t, e, n, r) {
    var _this23;

    index_browser_esm2017_classCallCheck(this, Ke);

    _this23 = _super21.call(this), _this23.authCredentials = t, _this23.appCheckCredentials = e, _this23.K = n, _this23.q = r, _this23.J = !1;
    return _this23;
  }

  index_browser_esm2017_createClass(Ke, [{
    key: "X",
    value: function X() {
      if (this.J) throw new U(S, "The client has already been terminated.");
    }
    /** Invokes the provided RPC with auth and AppCheck tokens. */

  }, {
    key: "m",
    value: function m(t, e, n) {
      var _this24 = this;

      return this.X(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(function (_ref4) {
        var _ref5 = index_browser_esm2017_slicedToArray(_ref4, 2),
            r = _ref5[0],
            s = _ref5[1];

        return _this24.K.m(t, e, n, r, s);
      })["catch"](function (t) {
        throw "FirebaseError" === t.name ? (t.code === N && (_this24.authCredentials.invalidateToken(), _this24.appCheckCredentials.invalidateToken()), t) : new U(A, t.toString());
      });
    }
    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */

  }, {
    key: "T",
    value: function T(t, e, n) {
      var _this25 = this;

      return this.X(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(function (_ref6) {
        var _ref7 = index_browser_esm2017_slicedToArray(_ref6, 2),
            r = _ref7[0],
            s = _ref7[1];

        return _this25.K.T(t, e, n, r, s);
      })["catch"](function (t) {
        throw "FirebaseError" === t.name ? (t.code === N && (_this25.authCredentials.invalidateToken(), _this25.appCheckCredentials.invalidateToken()), t) : new U(A, t.toString());
      });
    }
  }, {
    key: "terminate",
    value: function terminate() {
      this.J = !0;
    }
  }]);

  return Ke;
}( /*#__PURE__*/function () {
  function _class3() {
    index_browser_esm2017_classCallCheck(this, _class3);
  }

  return index_browser_esm2017_createClass(_class3);
}()); // TODO(firestorexp): Make sure there is only one Datastore instance per
// firestore-exp client.


function Je(_x5, _x6) {
  return _Je.apply(this, arguments);
}

function _Je() {
  _Je = index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(t, e) {
    var n, r, s;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            n = v(t), r = Le(n.q) + "/documents", s = {
              writes: e.map(function (t) {
                return je(n.q, t);
              })
            };
            _context7.next = 3;
            return n.m("Commit", r, s);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _Je.apply(this, arguments);
}

function Xe(_x7, _x8) {
  return _Xe.apply(this, arguments);
}

function _Xe() {
  _Xe = index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(t, e) {
    var n, r, s, i, o, u;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            n = v(t);
            r = Le(n.q) + "/documents";
            s = {
              documents: e.map(function (t) {
                return qe(n.q, t);
              })
            };
            _context8.next = 5;
            return n.T("BatchGetDocuments", r, s);

          case 5:
            i = _context8.sent;
            o = new Map();
            i.forEach(function (t) {
              var e = ke(n.q, t);
              o.set(e.key.toString(), e);
            });
            u = [];
            return _context8.abrupt("return", (e.forEach(function (t) {
              var e = o.get(t.toString());
              b(!!e), u.push(e);
            }), u));

          case 10:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _Xe.apply(this, arguments);
}

function Ze(_x9, _x10) {
  return _Ze.apply(this, arguments);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _Ze() {
  _Ze = index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(t, e) {
    var n, r;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            n = v(t), r = Me(n.q, fe(e));
            _context9.next = 3;
            return n.T("RunQuery", r.parent, {
              structuredQuery: r.structuredQuery
            });

          case 3:
            return _context9.abrupt("return", _context9.sent.filter(function (t) {
              return !!t.document;
            }).map(function (t) {
              return function (t, e, n) {
                var r = Oe(t, e.name),
                    s = xe(e.updateTime),
                    i = new zt({
                  mapValue: {
                    fields: e.fields
                  }
                }),
                    o = Gt.newFoundDocument(r, s, i);
                return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;
              }(n.q, t.document, void 0);
            }));

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _Ze.apply(this, arguments);
}

var tn = new Map();
/**
 * An instance map that ensures only one Datastore exists per Firestore
 * instance.
 */

/**
 * Returns an initialized and started Datastore for the given Firestore
 * instance. Callers must invoke removeComponents() when the Firestore
 * instance is terminated.
 */

function en(t) {
  if (t._terminated) throw new U(S, "The client has already been terminated.");

  if (!tn.has(t)) {
    _m("ComponentProvider", "Initializing Datastore");

    var i = function (t) {
      return new wt(t, fetch.bind(null));
    }((e = t._databaseId, n = t.app.options.appId || "", r = t._persistenceKey, s = t._freezeSettings(), new H(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams))),
        o = Ye(t._databaseId),
        u = function (t, e, n, r) {
      return new Ke(t, e, n, r);
    }(t._authCredentials, t._appCheckCredentials, i, o);

    tn.set(t, u);
  }

  var e, n, r, s;
  /**
  * @license
  * Copyright 2018 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  return tn.get(t);
}
/**
 * Removes all components associated with the provided instance. Must be called
 * when the `Firestore` instance is terminated.
 */

/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied `FirestoreSettings` object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */


var nn = /*#__PURE__*/function () {
  function nn(t) {
    index_browser_esm2017_classCallCheck(this, nn);

    var e;

    if (void 0 === t.host) {
      if (void 0 !== t.ssl) throw new U(I, "Can't provide ssl option if host option is not set");
      this.host = "firestore.googleapis.com", this.ssl = true;
    } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;

    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {
      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new U(I, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = t.cacheSizeBytes;
    }
    this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t.useFetchStreams, function (t, e, n, r) {
      if (!0 === e && !0 === r) throw new U(I, "".concat(t, " and ").concat(n, " cannot be used together."));
    }("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
  }

  index_browser_esm2017_createClass(nn, [{
    key: "isEqual",
    value: function isEqual(t) {
      return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
    }
  }]);

  return nn;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */


var rn = /*#__PURE__*/function () {
  /** @hideconstructor */
  function rn(t, e, n) {
    index_browser_esm2017_classCallCheck(this, rn);

    this._authCredentials = e, this._appCheckCredentials = n,
    /**
     * Whether it's a Firestore or Firestore Lite instance.
     */
    this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new nn({}), this._settingsFrozen = !1, t instanceof K ? this._databaseId = t : (this._app = t, this._databaseId = function (t) {
      if (!Object.prototype.hasOwnProperty.apply(t.options, ["projectId"])) throw new U(I, '"projectId" not provided in firebase.initializeApp.');
      return new K(t.options.projectId);
    }
    /**
    * Initializes a new instance of Cloud Firestore with the provided settings.
    * Can only be called before any other functions, including
    * {@link getFirestore}. If the custom settings are empty, this function is
    * equivalent to calling {@link getFirestore}.
    *
    * @param app - The {@link @firebase/app#FirebaseApp} with which the `Firestore` instance will
    * be associated.
    * @param settings - A settings object to configure the `Firestore` instance.
    * @returns A newly initialized `Firestore` instance.
    */
    (t));
  }
  /**
   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
   * instance.
   */


  index_browser_esm2017_createClass(rn, [{
    key: "app",
    get: function get() {
      if (!this._app) throw new U(S, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
      return this._app;
    }
  }, {
    key: "_initialized",
    get: function get() {
      return this._settingsFrozen;
    }
  }, {
    key: "_terminated",
    get: function get() {
      return void 0 !== this._terminateTask;
    }
  }, {
    key: "_setSettings",
    value: function _setSettings(t) {
      if (this._settingsFrozen) throw new U(S, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
      this._settings = new nn(t), void 0 !== t.credentials && (this._authCredentials = function (t) {
        if (!t) return new M();

        switch (t.type) {
          case "gapi":
            var e = t.client; // Make sure this really is a Gapi client.

            return b(!("object" != index_browser_esm2017_typeof(e) || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new Q(e, t.sessionIndex || "0", t.iamToken || null);

          case "provider":
            return t.client;

          default:
            throw new U(I, "makeAuthCredentialsProvider failed due to invalid credential type");
        }
      }(t.credentials));
    }
  }, {
    key: "_getSettings",
    value: function _getSettings() {
      return this._settings;
    }
  }, {
    key: "_freezeSettings",
    value: function _freezeSettings() {
      return this._settingsFrozen = !0, this._settings;
    }
  }, {
    key: "_delete",
    value: function _delete() {
      return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
    }
    /** Returns a JSON-serializable representation of this `Firestore` instance. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        app: this._app,
        databaseId: this._databaseId,
        settings: this._settings
      };
    }
    /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */

  }, {
    key: "_terminate",
    value: function _terminate() {
      return function (t) {
        var e = tn.get(t);
        e && (_m("ComponentProvider", "Removing Datastore"), tn["delete"](t), e.terminate());
      }(this), Promise.resolve();
    }
  }]);

  return rn;
}();

function sn(t, e) {
  var n = _getProvider(t, "firestore/lite");

  if (n.isInitialized()) throw new U(S, "Firestore can only be initialized once per app.");
  return n.initialize({
    options: e
  });
}
/**
 * Returns the existing `Firestore` instance that is associated with the
 * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new
 * instance with default settings.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned `Firestore`
 * instance is associated with.
 * @returns The `Firestore` instance of the provided app.
 */


function on() {
  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : index_esm2017_getApp();
  return index_esm2017_getProvider(e, "firestore/lite").getImmediate();
}
/**
 * Modify this instance to communicate with the Cloud Firestore emulator.
 *
 * Note: This must be called before this instance has been used to do any
 * operations.
 *
 * @param firestore - The `Firestore` instance to configure to connect to the
 * emulator.
 * @param host - the emulator host (ex: localhost).
 * @param port - the emulator port (ex: 9000).
 * @param options.mockUserToken - the mock auth token to use for unit testing
 * Security Rules.
 */


function un(t, e, n) {
  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var s;

  var i = (t = ot(t, rn))._getSettings();

  if ("firestore.googleapis.com" !== i.host && i.host !== e && y("Host has been set in both settings() and useEmulator(), emulator host will be used"), t._setSettings(Object.assign(Object.assign({}, i), {
    host: "".concat(e, ":").concat(n),
    ssl: !1
  })), r.mockUserToken) {
    var _e11, _n7;

    if ("string" == typeof r.mockUserToken) _e11 = r.mockUserToken, _n7 = l.MOCK_USER;else {
      // Let createMockUserToken validate first (catches common mistakes like
      // invalid field "uid" and missing field "sub" / "user_id".)
      _e11 = createMockUserToken(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);

      var _i2 = r.mockUserToken.sub || r.mockUserToken.user_id;

      if (!_i2) throw new U(I, "mockUserToken must contain 'sub' or 'user_id' field!");
      _n7 = new l(_i2);
    }
    t._authCredentials = new B(new j(_e11, _n7));
  }
}
/**
 * Terminates the provided `Firestore` instance.
 *
 * After calling `terminate()` only the `clearIndexedDbPersistence()` functions
 * may be used. Any other function will throw a `FirestoreError`. Termination
 * does not cancel any pending writes, and any promises that are awaiting a
 * response from the server will not be resolved.
 *
 * To restart after termination, create a new instance of `Firestore` with
 * {@link getFirestore}.
 *
 * Note: Under normal circumstances, calling `terminate()` is not required. This
 * function is useful only when you want to force this instance to release all of
 * its resources or in combination with {@link clearIndexedDbPersistence} to
 * ensure that all local state is destroyed between test runs.
 *
 * @param firestore - The `Firestore` instance to terminate.
 * @returns A `Promise` that is resolved when the instance has been successfully
 * terminated.
 */


function cn(t) {
  return t = ot(t, rn), _removeServiceInstance(t.app, "firestore/lite"), t._delete();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `DocumentReference` refers to a document location in a Firestore database
 * and can be used to write, read, or listen to the location. The document at
 * the referenced location may or may not exist.
 */


var an = /*#__PURE__*/function () {
  /** @hideconstructor */
  function an(t,
  /**
   * If provided, the `FirestoreDataConverter` associated with this instance.
   */
  e, n) {
    index_browser_esm2017_classCallCheck(this, an);

    this.converter = e, this._key = n,
    /** The type of this Firestore reference. */
    this.type = "document", this.firestore = t;
  }

  index_browser_esm2017_createClass(an, [{
    key: "_path",
    get: function get() {
      return this._key.path;
    }
    /**
     * The document's identifier within its collection.
     */

  }, {
    key: "id",
    get: function get() {
      return this._key.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced document (relative
     * to the root of the database).
     */

  }, {
    key: "path",
    get: function get() {
      return this._key.path.canonicalString();
    }
    /**
     * The collection this `DocumentReference` belongs to.
     */

  }, {
    key: "parent",
    get: function get() {
      return new ln(this.firestore, this.converter, this._key.path.popLast());
    }
  }, {
    key: "withConverter",
    value: function withConverter(t) {
      return new an(this.firestore, t, this._key);
    }
  }]);

  return an;
}();
/**
 * A `Query` refers to a query which you can read or listen to. You can also
 * construct refined `Query` objects by adding filters and ordering.
 */


var hn = /*#__PURE__*/function () {
  // This is the lite version of the Query class in the main SDK.

  /** @hideconstructor protected */
  function hn(t,
  /**
   * If provided, the `FirestoreDataConverter` associated with this instance.
   */
  e, n) {
    index_browser_esm2017_classCallCheck(this, hn);

    this.converter = e, this._query = n,
    /** The type of this Firestore reference. */
    this.type = "query", this.firestore = t;
  }

  index_browser_esm2017_createClass(hn, [{
    key: "withConverter",
    value: function withConverter(t) {
      return new hn(this.firestore, t, this._query);
    }
  }]);

  return hn;
}();
/**
 * A `CollectionReference` object can be used for adding documents, getting
 * document references, and querying for documents (using {@link query}).
 */


var ln = /*#__PURE__*/function (_hn) {
  index_browser_esm2017_inherits(ln, _hn);

  var _super22 = index_browser_esm2017_createSuper(ln);

  /** @hideconstructor */
  function ln(t, e, n) {
    var _this26;

    index_browser_esm2017_classCallCheck(this, ln);

    _this26 = _super22.call(this, t, e, new ue(n)), _this26._path = n,
    /** The type of this Firestore reference. */
    _this26.type = "collection";
    return _this26;
  }
  /** The collection's identifier. */


  index_browser_esm2017_createClass(ln, [{
    key: "id",
    get: function get() {
      return this._query.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced collection (relative
     * to the root of the database).
     */

  }, {
    key: "path",
    get: function get() {
      return this._query.path.canonicalString();
    }
    /**
     * A reference to the containing `DocumentReference` if this is a
     * subcollection. If this isn't a subcollection, the reference is null.
     */

  }, {
    key: "parent",
    get: function get() {
      var t = this._path.popLast();

      return t.isEmpty() ? null : new an(this.firestore,
      /* converter= */
      null, new et(t));
    }
  }, {
    key: "withConverter",
    value: function withConverter(t) {
      return new ln(this.firestore, t, this._path);
    }
  }]);

  return ln;
}(hn);

function fn(t, e) {
  for (var _len5 = arguments.length, n = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
    n[_key5 - 2] = arguments[_key5];
  }

  if (t = index_esm2017_getModularInstance(t), nt("collection", "path", e), t instanceof rn) {
    var r = X.fromString.apply(X, [e].concat(n));
    return st(r), new ln(t,
    /* converter= */
    null, r);
  }

  {
    if (!(t instanceof an || t instanceof ln)) throw new U(I, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");

    var _r2 = t._path.child(X.fromString.apply(X, [e].concat(n)));

    return st(_r2), new ln(t.firestore,
    /* converter= */
    null, _r2);
  }
} // TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106

/**
 * Creates and returns a new `Query` instance that includes all documents in the
 * database that are contained in a collection or subcollection with the
 * given `collectionId`.
 *
 * @param firestore - A reference to the root `Firestore` instance.
 * @param collectionId - Identifies the collections to query over. Every
 * collection or subcollection with this ID as the last segment of its path
 * will be included. Cannot contain a slash.
 * @returns The created `Query`.
 */


function dn(t, e) {
  if (t = ot(t, rn), nt("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new U(I, "Invalid collection ID '".concat(e, "' passed to function collectionGroup(). Collection IDs must not contain '/'."));
  return new hn(t,
  /* converter= */
  null,
  /**
  * Creates a new Query for a collection group query that matches all documents
  * within the provided collection group.
  */
  function (t) {
    return new ue(X.emptyPath(), t);
  }(e));
}

function wn(t, e) {
  for (var _len6 = arguments.length, n = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
    n[_key6 - 2] = arguments[_key6];
  }

  if (t = index_esm2017_getModularInstance(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
  // 'undefined' and 'null'.
  1 === arguments.length && (e = pt.R()), nt("doc", "path", e), t instanceof rn) {
    var r = X.fromString.apply(X, [e].concat(n));
    return rt(r), new an(t,
    /* converter= */
    null, new et(r));
  }

  {
    if (!(t instanceof an || t instanceof ln)) throw new U(I, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");

    var _r3 = t._path.child(X.fromString.apply(X, [e].concat(n)));

    return rt(_r3), new an(t.firestore, t instanceof ln ? t.converter : null, new et(_r3));
  }
}
/**
 * Returns true if the provided references are equal.
 *
 * @param left - A reference to compare.
 * @param right - A reference to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */


function mn(t, e) {
  return t = getModularInstance(t), e = getModularInstance(e), (t instanceof an || t instanceof ln) && (e instanceof an || e instanceof ln) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;
}
/**
 * Returns true if the provided queries point to the same collection and apply
 * the same constraints.
 *
 * @param left - A `Query` to compare.
 * @param right - A `Query` to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */


function pn(t, e) {
  return t = getModularInstance(t), e = getModularInstance(e), t instanceof hn && e instanceof hn && t.firestore === e.firestore && de(t._query, e._query) && t.converter === e.converter;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a
 * list of field names (referring to a nested field in the document).
 *
 * Create a `FieldPath` by providing field names. If more than one field
 * name is provided, the path will point to a nested field in a document.
 */


var yn = /*#__PURE__*/function () {
  /**
   * Creates a `FieldPath` from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames - A list of field names.
   */
  function yn() {
    index_browser_esm2017_classCallCheck(this, yn);

    for (var _len7 = arguments.length, t = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      t[_key7] = arguments[_key7];
    }

    for (var e = 0; e < t.length; ++e) {
      if (0 === t[e].length) throw new U(I, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    }

    this._internalPath = new tt(t);
  }
  /**
   * Returns true if this `FieldPath` is equal to the provided one.
   *
   * @param other - The `FieldPath` to compare against.
   * @returns true if this `FieldPath` is equal to the provided one.
   */


  index_browser_esm2017_createClass(yn, [{
    key: "isEqual",
    value: function isEqual(t) {
      return this._internalPath.isEqual(t._internalPath);
    }
  }]);

  return yn;
}();
/**
 * Returns a special sentinel `FieldPath` to refer to the ID of a document.
 * It can be used in queries to sort or filter by the document ID.
 */


function _n() {
  return new yn("__name__");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable object representing an array of bytes.
 */


var gn = /*#__PURE__*/function () {
  /** @hideconstructor */
  function gn(t) {
    index_browser_esm2017_classCallCheck(this, gn);

    this._byteString = t;
  }
  /**
   * Creates a new `Bytes` object from the given Base64 string, converting it to
   * bytes.
   *
   * @param base64 - The Base64 string used to create the `Bytes` object.
   */


  index_browser_esm2017_createClass(gn, [{
    key: "toBase64",
    value:
    /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @returns The Base64-encoded string created from the `Bytes` object.
     */
    function toBase64() {
      return this._byteString.toBase64();
    }
    /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @returns The Uint8Array created from the `Bytes` object.
     */

  }, {
    key: "toUint8Array",
    value: function toUint8Array() {
      return this._byteString.toUint8Array();
    }
    /**
     * Returns a string representation of the `Bytes` object.
     *
     * @returns A string representation of the `Bytes` object.
     */

  }, {
    key: "toString",
    value: function toString() {
      return "Bytes(base64: " + this.toBase64() + ")";
    }
    /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other - The `Bytes` object to compare against.
     * @returns true if this `Bytes` object is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this._byteString.isEqual(t._byteString);
    }
  }], [{
    key: "fromBase64String",
    value: function fromBase64String(t) {
      try {
        return new gn(At.fromBase64String(t));
      } catch (t) {
        throw new U(I, "Failed to construct data from Base64 string: " + t);
      }
    }
    /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array - The Uint8Array used to create the `Bytes` object.
     */

  }, {
    key: "fromUint8Array",
    value: function fromUint8Array(t) {
      return new gn(At.fromUint8Array(t));
    }
  }]);

  return gn;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sentinel values that can be used when writing document fields with `set()`
 * or `update()`.
 */


var bn = /*#__PURE__*/index_browser_esm2017_createClass(
/**
 * @param _methodName - The public API endpoint that returns this class.
 * @hideconstructor
 */
function bn(t) {
  index_browser_esm2017_classCallCheck(this, bn);

  this._methodName = t;
});
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable object representing a geographic location in Firestore. The
 * location is represented as latitude/longitude pair.
 *
 * Latitude values are in the range of [-90, 90].
 * Longitude values are in the range of [-180, 180].
 */


var vn = /*#__PURE__*/function () {
  /**
   * Creates a new immutable `GeoPoint` object with the provided latitude and
   * longitude values.
   * @param latitude - The latitude as number between -90 and 90.
   * @param longitude - The longitude as number between -180 and 180.
   */
  function vn(t, e) {
    index_browser_esm2017_classCallCheck(this, vn);

    if (!isFinite(t) || t < -90 || t > 90) throw new U(I, "Latitude must be a number between -90 and 90, but was: " + t);
    if (!isFinite(e) || e < -180 || e > 180) throw new U(I, "Longitude must be a number between -180 and 180, but was: " + e);
    this._lat = t, this._long = e;
  }
  /**
   * The latitude of this `GeoPoint` instance.
   */


  index_browser_esm2017_createClass(vn, [{
    key: "latitude",
    get: function get() {
      return this._lat;
    }
    /**
     * The longitude of this `GeoPoint` instance.
     */

  }, {
    key: "longitude",
    get: function get() {
      return this._long;
    }
    /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other - The `GeoPoint` to compare against.
     * @returns true if this `GeoPoint` is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this._lat === t._lat && this._long === t._long;
    }
    /** Returns a JSON-serializable representation of this GeoPoint. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        latitude: this._lat,
        longitude: this._long
      };
    }
    /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */

  }, {
    key: "_compareTo",
    value: function _compareTo(t) {
      return yt(this._lat, t._lat) || yt(this._long, t._long);
    }
  }]);

  return vn;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var En = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */

var Tn = /*#__PURE__*/function () {
  function Tn(t, e, n) {
    index_browser_esm2017_classCallCheck(this, Tn);

    this.data = t, this.fieldMask = e, this.fieldTransforms = n;
  }

  index_browser_esm2017_createClass(Tn, [{
    key: "toMutation",
    value: function toMutation(t, e) {
      return null !== this.fieldMask ? new Ae(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Te(t, this.data, e, this.fieldTransforms);
    }
  }]);

  return Tn;
}();
/** The result of parsing "update" data (i.e. for an updateData call). */


var An = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function An(t, // The fieldMask does not include document transforms.
  e, n) {
    index_browser_esm2017_classCallCheck(this, An);

    this.data = t, this.fieldMask = e, this.fieldTransforms = n;
  }

  index_browser_esm2017_createClass(An, [{
    key: "toMutation",
    value: function toMutation(t, e) {
      return new Ae(t, this.data, this.fieldMask, e, this.fieldTransforms);
    }
  }]);

  return An;
}()));

function In(t) {
  switch (t) {
    case 0
    /* Set */
    : // fall through

    case 2
    /* MergeSet */
    : // fall through

    case 1
    /* Update */
    :
      return !0;

    case 3
    /* Argument */
    :
    case 4
    /* ArrayArgument */
    :
      return !1;

    default:
      throw g();
  }
}
/** A "context" object passed around while parsing user data. */


var Rn = /*#__PURE__*/function () {
  /**
   * Initializes a ParseContext with the given source and path.
   *
   * @param settings - The settings for the parser.
   * @param databaseId - The database ID of the Firestore instance.
   * @param serializer - The serializer to use to generate the Value proto.
   * @param ignoreUndefinedProperties - Whether to ignore undefined properties
   * rather than throw.
   * @param fieldTransforms - A mutable list of field transforms encountered
   * while parsing the data.
   * @param fieldMask - A mutable list of field paths encountered while parsing
   * the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */
  function Rn(t, e, n, r, s, i) {
    index_browser_esm2017_classCallCheck(this, Rn);

    this.settings = t, this.databaseId = e, this.q = n, this.ignoreUndefinedProperties = r, // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.
    void 0 === s && this.Z(), this.fieldTransforms = s || [], this.fieldMask = i || [];
  }

  index_browser_esm2017_createClass(Rn, [{
    key: "path",
    get: function get() {
      return this.settings.path;
    }
  }, {
    key: "tt",
    get: function get() {
      return this.settings.tt;
    }
    /** Returns a new context with the specified settings overwritten. */

  }, {
    key: "et",
    value: function et(t) {
      return new Rn(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.q, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
    }
  }, {
    key: "nt",
    value: function nt(t) {
      var e;
      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),
          r = this.et({
        path: n,
        rt: !1
      });
      return r.st(t), r;
    }
  }, {
    key: "it",
    value: function it(t) {
      var e;
      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),
          r = this.et({
        path: n,
        rt: !1
      });
      return r.Z(), r;
    }
  }, {
    key: "ot",
    value: function ot(t) {
      // TODO(b/34871131): We don't support array paths right now; so make path
      // undefined.
      return this.et({
        path: void 0,
        rt: !0
      });
    }
  }, {
    key: "ut",
    value: function ut(t) {
      return Qn(t, this.settings.methodName, this.settings.ct || !1, this.path, this.settings.at);
    }
    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */

  }, {
    key: "contains",
    value: function contains(t) {
      return void 0 !== this.fieldMask.find(function (e) {
        return t.isPrefixOf(e);
      }) || void 0 !== this.fieldTransforms.find(function (e) {
        return t.isPrefixOf(e.field);
      });
    }
  }, {
    key: "Z",
    value: function Z() {
      // TODO(b/34871131): Remove null check once we have proper paths for fields
      // within arrays.
      if (this.path) for (var t = 0; t < this.path.length; t++) {
        this.st(this.path.get(t));
      }
    }
  }, {
    key: "st",
    value: function st(t) {
      if (0 === t.length) throw this.ut("Document fields must not be empty");
      if (In(this.tt) && En.test(t)) throw this.ut('Document fields cannot begin and end with "__"');
    }
  }]);

  return Rn;
}();
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */


var Pn = /*#__PURE__*/function () {
  function Pn(t, e, n) {
    index_browser_esm2017_classCallCheck(this, Pn);

    this.databaseId = t, this.ignoreUndefinedProperties = e, this.q = n || Ye(t);
  }
  /** Creates a new top-level parse context. */


  index_browser_esm2017_createClass(Pn, [{
    key: "ht",
    value: function ht(t, e, n) {
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
      return new Rn({
        tt: t,
        methodName: e,
        at: n,
        path: tt.emptyPath(),
        rt: !1,
        ct: r
      }, this.databaseId, this.q, this.ignoreUndefinedProperties);
    }
  }]);

  return Pn;
}();

function Vn(t) {
  var e = t._freezeSettings(),
      n = Ye(t._databaseId);

  return new Pn(t._databaseId, !!e.ignoreUndefinedProperties, n);
}
/** Parse document data from a set() call. */


function Dn(t, e, n, r, s) {
  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
  var o = t.ht(i.merge || i.mergeFields ? 2
  /* MergeSet */
  : 0
  /* Set */
  , e, n, s);
  Mn("Data must be an object, but it was:", o, r);
  var u = kn(r, o);
  var c, a;
  if (i.merge) c = new Tt(o.fieldMask), a = o.fieldTransforms;else if (i.mergeFields) {
    var _t13 = [];

    var _iterator6 = index_browser_esm2017_createForOfIteratorHelper(i.mergeFields),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var _r4 = _step6.value;

        var _s2 = Bn(e, _r4, n);

        if (!o.contains(_s2)) throw new U(I, "Field '".concat(_s2, "' is specified in your field mask but missing from your input data."));
        Wn(_t13, _s2) || _t13.push(_s2);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    c = new Tt(_t13), a = o.fieldTransforms.filter(function (t) {
      return c.covers(t.field);
    });
  } else c = null, a = o.fieldTransforms;
  return new Tn(new zt(u), c, a);
}

var Nn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn) {
  index_browser_esm2017_inherits(Nn, _bn);

  var _super23 = index_browser_esm2017_createSuper(Nn);

  function Nn() {
    index_browser_esm2017_classCallCheck(this, Nn);

    return _super23.apply(this, arguments);
  }

  index_browser_esm2017_createClass(Nn, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      if (2
      /* MergeSet */
      !== t.tt) throw 1
      /* Update */
      === t.tt ? t.ut("".concat(this._methodName, "() can only appear at the top level of your update data")) : t.ut("".concat(this._methodName, "() cannot be used with set() unless you pass {merge:true}")); // No transform to add for a delete, but we need to add it to our
      // fieldMask so it gets deleted.

      return t.fieldMask.push(t.path), null;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof Nn;
    }
  }]);

  return Nn;
}(bn)));
/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue - The sentinel FieldValue for which to create a child
 *     context.
 * @param context - The parent context.
 * @param arrayElement - Whether or not the FieldValue has an array.
 */


function $n(t, e, n) {
  return new Rn({
    tt: 3
    /* Argument */
    ,
    at: e.settings.at,
    methodName: t._methodName,
    rt: n
  }, e.databaseId, e.q, e.ignoreUndefinedProperties);
}

var Sn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn2) {
  index_browser_esm2017_inherits(Sn, _bn2);

  var _super24 = index_browser_esm2017_createSuper(Sn);

  function Sn() {
    index_browser_esm2017_classCallCheck(this, Sn);

    return _super24.apply(this, arguments);
  }

  index_browser_esm2017_createClass(Sn, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      return new be(t.path, new pe());
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof Sn;
    }
  }]);

  return Sn;
}(bn)));

var xn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn3) {
  index_browser_esm2017_inherits(xn, _bn3);

  var _super25 = index_browser_esm2017_createSuper(xn);

  function xn(t, e) {
    var _this27;

    index_browser_esm2017_classCallCheck(this, xn);

    _this27 = _super25.call(this, t), _this27.lt = e;
    return _this27;
  }

  index_browser_esm2017_createClass(xn, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = $n(this, t,
      /*array=*/
      !0),
          n = this.lt.map(function (t) {
        return Un(t, e);
      }),
          r = new ye(n);
      return new be(t.path, r);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return xn;
}(bn)));

var Fn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn4) {
  index_browser_esm2017_inherits(Fn, _bn4);

  var _super26 = index_browser_esm2017_createSuper(Fn);

  function Fn(t, e) {
    var _this28;

    index_browser_esm2017_classCallCheck(this, Fn);

    _this28 = _super26.call(this, t), _this28.lt = e;
    return _this28;
  }

  index_browser_esm2017_createClass(Fn, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = $n(this, t,
      /*array=*/
      !0),
          n = this.lt.map(function (t) {
        return Un(t, e);
      }),
          r = new _e(n);
      return new be(t.path, r);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return Fn;
}(bn)));

var qn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn5) {
  index_browser_esm2017_inherits(qn, _bn5);

  var _super27 = index_browser_esm2017_createSuper(qn);

  function qn(t, e) {
    var _this29;

    index_browser_esm2017_classCallCheck(this, qn);

    _this29 = _super27.call(this, t), _this29.ft = e;
    return _this29;
  }

  index_browser_esm2017_createClass(qn, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = new ge(t.q, we(t.q, this.ft));
      return new be(t.path, e);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return qn;
}(bn)));
/** Parse update data from an update() call. */


function On(t, e, n, r) {
  var s = t.ht(1
  /* Update */
  , e, n);
  Mn("Data must be an object, but it was:", s, r);
  var i = [],
      o = zt.empty();
  Et(r, function (t, r) {
    var u = Gn(e, t, n); // For Compat types, we have to "extract" the underlying types before
    // performing validation.

    r = getModularInstance(r);
    var c = s.it(u);
    if (r instanceof Nn) // Add it to the field mask, but don't add anything to updateData.
      i.push(u);else {
      var _t14 = Un(r, c);

      null != _t14 && (i.push(u), o.set(u, _t14));
    }
  });
  var u = new Tt(i);
  return new An(o, u, s.fieldTransforms);
}
/** Parse update data from a list of field/value arguments. */


function Cn(t, e, n, r, s, i) {
  var o = t.ht(1
  /* Update */
  , e, n),
      u = [Bn(e, r, n)],
      c = [s];
  if (i.length % 2 != 0) throw new U(I, "Function ".concat(e, "() needs to be called with an even number of arguments that alternate between field names and values."));

  for (var _t15 = 0; _t15 < i.length; _t15 += 2) {
    u.push(Bn(e, i[_t15])), c.push(i[_t15 + 1]);
  }

  var a = [],
      l = zt.empty(); // We iterate in reverse order to pick the last value for a field if the
  // user specified the field multiple times.

  for (var _t16 = u.length - 1; _t16 >= 0; --_t16) {
    if (!Wn(a, u[_t16])) {
      var _e12 = u[_t16];
      var _n8 = c[_t16]; // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      _n8 = getModularInstance(_n8);

      var _r5 = o.it(_e12);

      if (_n8 instanceof Nn) // Add it to the field mask, but don't add anything to updateData.
        a.push(_e12);else {
        var _t17 = Un(_n8, _r5);

        null != _t17 && (a.push(_e12), l.set(_e12, _t17));
      }
    }
  }

  var f = new Tt(a);
  return new An(l, f, o.fieldTransforms);
}
/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays - Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */


function Ln(t, e, n) {
  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
  return Un(n, t.ht(r ? 4
  /* ArrayArgument */
  : 3
  /* Argument */
  , e));
}
/**
 * Parses user data to Protobuf Values.
 *
 * @param input - Data to be parsed.
 * @param context - A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @returns The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */


function Un(t, e) {
  if (jn( // Unwrap the API type from the Compat SDK. This will return the API type
  // from firestore-exp.
  t = index_esm2017_getModularInstance(t))) return Mn("Unsupported field value:", e, t), kn(t, e);
  if (t instanceof bn) // FieldValues usually parse into transforms (except deleteField())
    // in which case we do not want to include this field in our parsed data
    // (as doing so will overwrite the field directly prior to the transform
    // trying to transform it). So we don't add this location to
    // context.fieldMask and we return null as our parsing result.

    /**
    * "Parses" the provided FieldValueImpl, adding any necessary transforms to
    * context.fieldTransforms.
    */
    return function (t, e) {
      // Sentinels are only supported with writes, and not within arrays.
      if (!In(e.tt)) throw e.ut("".concat(t._methodName, "() can only be used with update() and set()"));
      if (!e.path) throw e.ut("".concat(t._methodName, "() is not currently supported inside arrays"));

      var n = t._toFieldTransform(e);

      n && e.fieldTransforms.push(n);
    }
    /**
    * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
    *
    * @returns The parsed value
    */
    (t, e), null;
  if (void 0 === t && e.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so
    // don't handle this below. If `ignoreUndefinedProperties` is false,
    // `parseScalarValue` will reject an undefined value.
    return null;

  if ( // If context.path is null we are inside an array and we don't support
  // field mask paths more granular than the top-level array.
  e.path && e.fieldMask.push(e.path), t instanceof Array) {
    // TODO(b/34871131): Include the path containing the array in the error
    // message.
    // In the case of IN queries, the parsed data is an array (representing
    // the set of values to be included for the IN query) that may directly
    // contain additional arrays (each representing an individual field
    // value), so we disable this validation.
    if (e.settings.rt && 4
    /* ArrayArgument */
    !== e.tt) throw e.ut("Nested arrays are not supported");
    return function (t, e) {
      var n = [];
      var r = 0;

      var _iterator7 = index_browser_esm2017_createForOfIteratorHelper(t),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var s = _step7.value;

          var _t18 = Un(s, e.ot(r));

          null == _t18 && ( // Just include nulls in the array for fields being replaced with a
          // sentinel.
          _t18 = {
            nullValue: "NULL_VALUE"
          }), n.push(_t18), r++;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return {
        arrayValue: {
          values: n
        }
      };
    }(t, e);
  }

  return function (t, e) {
    if (null === (t = index_esm2017_getModularInstance(t))) return {
      nullValue: "NULL_VALUE"
    };
    if ("number" == typeof t) return we(e.q, t);
    if ("boolean" == typeof t) return {
      booleanValue: t
    };
    if ("string" == typeof t) return {
      stringValue: t
    };

    if (t instanceof Date) {
      var n = gt.fromDate(t);
      return {
        timestampValue: Ne(e.q, n)
      };
    }

    if (t instanceof gt) {
      // Firestore backend truncates precision down to microseconds. To ensure
      // offline mode works the same with regards to truncation, perform the
      // truncation immediately without waiting for the backend to do that.
      var _n9 = new gt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));

      return {
        timestampValue: Ne(e.q, _n9)
      };
    }

    if (t instanceof vn) return {
      geoPointValue: {
        latitude: t.latitude,
        longitude: t.longitude
      }
    };
    if (t instanceof gn) return {
      bytesValue: $e(e.q, t._byteString)
    };

    if (t instanceof an) {
      var _n10 = e.databaseId,
          r = t.firestore._databaseId;
      if (!r.isEqual(_n10)) throw e.ut("Document reference is for database ".concat(r.projectId, "/").concat(r.database, " but should be for database ").concat(_n10.projectId, "/").concat(_n10.database));
      return {
        referenceValue: Fe(t.firestore._databaseId || e.databaseId, t._key.path)
      };
    }

    throw e.ut("Unsupported field value: ".concat(it(t)));
  }
  /**
  * Checks whether an object looks like a JSON object that should be converted
  * into a struct. Normal class/prototype instances are considered to look like
  * JSON objects since they should be converted to a struct value. Arrays, Dates,
  * GeoPoints, etc. are not considered to look like JSON objects since they map
  * to specific FieldValue types other than ObjectValue.
  */
  (t, e);
}

function kn(t, e) {
  var n = {};
  return !function (t) {
    for (var _e13 in t) {
      if (Object.prototype.hasOwnProperty.call(t, _e13)) return !1;
    }

    return !0;
  }(t) ? Et(t, function (t, r) {
    var s = Un(r, e.nt(t));
    null != s && (n[t] = s);
  }) : // If we encounter an empty object, we explicitly add it to the update
  // mask to ensure that the server creates a map entry.
  e.path && e.path.length > 0 && e.fieldMask.push(e.path), {
    mapValue: {
      fields: n
    }
  };
}

function jn(t) {
  return !("object" != index_browser_esm2017_typeof(t) || null === t || t instanceof Array || t instanceof Date || t instanceof gt || t instanceof vn || t instanceof gn || t instanceof an || t instanceof bn);
}

function Mn(t, e, n) {
  if (!jn(n) || !function (t) {
    return "object" == index_browser_esm2017_typeof(t) && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
  }(n)) {
    var r = it(n);
    throw "an object" === r ? e.ut(t + " a custom object") : e.ut(t + " " + r);
  }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */


function Bn(t, e, n) {
  if (( // If required, replace the FieldPath Compat class with with the firestore-exp
  // FieldPath.
  e = index_esm2017_getModularInstance(e)) instanceof yn) return e._internalPath;
  if ("string" == typeof e) return Gn(t, e);
  throw Qn("Field path arguments must be of type string or ", t,
  /* hasConverter= */
  !1,
  /* path= */
  void 0, n);
}
/**
 * Matches any characters in a field path string that are reserved.
 */


var zn = new RegExp("[~\\*/\\[\\]]");
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName - The publicly visible method name
 * @param path - The dot-separated string form of a field path which will be
 * split on dots.
 * @param targetDoc - The document against which the field path will be
 * evaluated.
 */

function Gn(t, e, n) {
  if (e.search(zn) >= 0) throw Qn("Invalid field path (".concat(e, "). Paths must not contain '~', '*', '/', '[', or ']'"), t,
  /* hasConverter= */
  !1,
  /* path= */
  void 0, n);

  try {
    return index_browser_esm2017_construct(yn, index_browser_esm2017_toConsumableArray(e.split(".")))._internalPath;
  } catch (r) {
    throw Qn("Invalid field path (".concat(e, "). Paths must not be empty, begin with '.', end with '.', or contain '..'"), t,
    /* hasConverter= */
    !1,
    /* path= */
    void 0, n);
  }
}

function Qn(t, e, n, r, s) {
  var i = r && !r.isEmpty(),
      o = void 0 !== s;
  var u = "Function ".concat(e, "() called with invalid data");
  n && (u += " (via `toFirestore()`)"), u += ". ";
  var c = "";
  return (i || o) && (c += " (found", i && (c += " in field ".concat(r)), o && (c += " in document ".concat(s)), c += ")"), new U(I, u + t + c);
}
/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */


function Wn(t, e) {
  return t.some(function (t) {
    return t.isEqual(e);
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */


var Yn = /*#__PURE__*/function () {
  // Note: This class is stripped down version of the DocumentSnapshot in
  // the legacy SDK. The changes are:
  // - No support for SnapshotMetadata.
  // - No support for SnapshotOptions.

  /** @hideconstructor protected */
  function Yn(t, e, n, r, s) {
    index_browser_esm2017_classCallCheck(this, Yn);

    this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, this._converter = s;
  }
  /** Property of the `DocumentSnapshot` that provides the document's ID. */


  index_browser_esm2017_createClass(Yn, [{
    key: "id",
    get: function get() {
      return this._key.path.lastSegment();
    }
    /**
     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
     */

  }, {
    key: "ref",
    get: function get() {
      return new an(this._firestore, this._converter, this._key);
    }
    /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @returns true if the document exists.
     */

  }, {
    key: "exists",
    value: function exists() {
      return null !== this._document;
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @returns An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */

  }, {
    key: "data",
    value: function data() {
      if (this._document) {
        if (this._converter) {
          // We only want to use the converter and create a new DocumentSnapshot
          // if a converter has been provided.
          var t = new Hn(this._firestore, this._userDataWriter, this._key, this._document,
          /* converter= */
          null);
          return this._converter.fromFirestore(t);
        }

        return this._userDataWriter.convertValue(this._document.data.value);
      }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }, {
    key: "get",
    value: function get(t) {
      if (this._document) {
        var e = this._document.data.field(Xn("DocumentSnapshot.get", t));

        if (null !== e) return this._userDataWriter.convertValue(e);
      }
    }
  }]);

  return Yn;
}();
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */


var Hn = /*#__PURE__*/function (_Yn) {
  index_browser_esm2017_inherits(Hn, _Yn);

  var _super28 = index_browser_esm2017_createSuper(Hn);

  function Hn() {
    index_browser_esm2017_classCallCheck(this, Hn);

    return _super28.apply(this, arguments);
  }

  index_browser_esm2017_createClass(Hn, [{
    key: "data",
    value:
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * @override
     * @returns An `Object` containing all fields in the document.
     */
    function data() {
      return _get(index_browser_esm2017_getPrototypeOf(Hn.prototype), "data", this).call(this);
    }
  }]);

  return Hn;
}(Yn);
/**
 * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
 * representing the results of a query. The documents can be accessed as an
 * array via the `docs` property or enumerated using the `forEach` method. The
 * number of documents can be determined via the `empty` and `size`
 * properties.
 */


var Kn = /*#__PURE__*/function () {
  /** @hideconstructor */
  function Kn(t, e) {
    index_browser_esm2017_classCallCheck(this, Kn);

    this._docs = e, this.query = t;
  }
  /** An array of all the documents in the `QuerySnapshot`. */


  index_browser_esm2017_createClass(Kn, [{
    key: "docs",
    get: function get() {
      return index_browser_esm2017_toConsumableArray(this._docs);
    }
    /** The number of documents in the `QuerySnapshot`. */

  }, {
    key: "size",
    get: function get() {
      return this.docs.length;
    }
    /** True if there are no documents in the `QuerySnapshot`. */

  }, {
    key: "empty",
    get: function get() {
      return 0 === this.docs.length;
    }
    /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg - The `this` binding for the callback.
     */

  }, {
    key: "forEach",
    value: function forEach(t, e) {
      this._docs.forEach(t, e);
    }
  }]);

  return Kn;
}();
/**
 * Returns true if the provided snapshots are equal.
 *
 * @param left - A snapshot to compare.
 * @param right - A snapshot to compare.
 * @returns true if the snapshots are equal.
 */


function Jn(t, e) {
  return t = getModularInstance(t), e = getModularInstance(e), t instanceof Yn && e instanceof Yn ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Kn && e instanceof Kn && pn(t.query, e.query) && _t(t.docs, e.docs, Jn);
}
/**
 * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
 */


function Xn(t, e) {
  return "string" == typeof e ? Gn(t, e) : e instanceof yn ? e._internalPath : e._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Firestore query. `QueryConstraint`s are created by invoking {@link where},
 * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
 * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */


var Zn = /*#__PURE__*/(/* unused pure expression or super */ null && (index_browser_esm2017_createClass(function Zn() {
  index_browser_esm2017_classCallCheck(this, Zn);
})));
/**
 * Creates a new immutable instance of {@link Query} that is extended to also include
 * additional query constraints.
 *
 * @param query - The {@link Query} instance to use as a base for the new constraints.
 * @param queryConstraints - The list of {@link QueryConstraint}s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */


function tr(t) {
  for (var _len8 = arguments.length, e = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
    e[_key8 - 1] = arguments[_key8];
  }

  for (var _i3 = 0, _e14 = e; _i3 < _e14.length; _i3++) {
    var n = _e14[_i3];
    t = n._apply(t);
  }

  return t;
}

var er = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Zn) {
  index_browser_esm2017_inherits(er, _Zn);

  var _super29 = index_browser_esm2017_createSuper(er);

  function er(t, e, n) {
    var _this30;

    index_browser_esm2017_classCallCheck(this, er);

    _this30 = _super29.call(this), _this30.dt = t, _this30.wt = e, _this30.yt = n, _this30.type = "where";
    return _this30;
  }

  index_browser_esm2017_createClass(er, [{
    key: "_apply",
    value: function _apply(t) {
      var e = Vn(t.firestore),
          n = function (t, e, n, r, s, i, o) {
        var u;

        if (s.isKeyField()) {
          if ("array-contains"
          /* ARRAY_CONTAINS */
          === i || "array-contains-any"
          /* ARRAY_CONTAINS_ANY */
          === i) throw new U(I, "Invalid Query. You can't perform '".concat(i, "' queries on documentId()."));

          if ("in"
          /* IN */
          === i || "not-in"
          /* NOT_IN */
          === i) {
            pr(o, i);
            var _e15 = [];

            var _iterator8 = index_browser_esm2017_createForOfIteratorHelper(o),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var _n11 = _step8.value;

                _e15.push(mr(r, t, _n11));
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }

            u = {
              arrayValue: {
                values: _e15
              }
            };
          } else u = mr(r, t, o);
        } else "in"
        /* IN */
        !== i && "not-in"
        /* NOT_IN */
        !== i && "array-contains-any"
        /* ARRAY_CONTAINS_ANY */
        !== i || pr(o, i), u = Ln(n, e, o,
        /* allowArrays= */
        "in"
        /* IN */
        === i || "not-in"
        /* NOT_IN */
        === i);

        var c = Yt.create(s, i, u);
        return function (t, e) {
          if (e.N()) {
            var _n12 = ae(t);

            if (null !== _n12 && !_n12.isEqual(e.field)) throw new U(I, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '".concat(_n12.toString(), "' and '").concat(e.field.toString(), "'"));

            var _r6 = ce(t);

            null !== _r6 && yr(t, e.field, _r6);
          }

          var n = function (t, e) {
            var _iterator9 = index_browser_esm2017_createForOfIteratorHelper(t.filters),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var _n13 = _step9.value;
                if (e.indexOf(_n13.op) >= 0) return _n13.op;
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            return null;
          }(t,
          /**
          * Given an operator, returns the set of operators that cannot be used with it.
          *
          * Operators in a query must adhere to the following set of rules:
          * 1. Only one array operator is allowed.
          * 2. Only one disjunctive operator is allowed.
          * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.
          * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
          *
          * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`
          * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`
          */
          function (t) {
            switch (t) {
              case "!="
              /* NOT_EQUAL */
              :
                return ["!="
                /* NOT_EQUAL */
                , "not-in"
                /* NOT_IN */
                ];

              case "array-contains"
              /* ARRAY_CONTAINS */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "not-in"
                /* NOT_IN */
                ];

              case "in"
              /* IN */
              :
                return ["array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                ];

              case "array-contains-any"
              /* ARRAY_CONTAINS_ANY */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                ];

              case "not-in"
              /* NOT_IN */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                , "!="
                /* NOT_EQUAL */
                ];

              default:
                return [];
            }
          }(e.op));

          if (null !== n) // Special case when it's a duplicate op to give a slightly clearer error message.
            throw n === e.op ? new U(I, "Invalid query. You cannot use more than one '".concat(e.op.toString(), "' filter.")) : new U(I, "Invalid query. You cannot use '".concat(e.op.toString(), "' filters with '").concat(n.toString(), "' filters."));
        }(t, c), c;
      }(t._query, "where", e, t.firestore._databaseId, this.dt, this.wt, this.yt);

      return new hn(t.firestore, t.converter, function (t, e) {
        var n = t.filters.concat([e]);
        return new ue(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
      }(t._query, n));
    }
  }]);

  return er;
}(Zn)));
/**
 * Creates a {@link QueryConstraint} that enforces that documents must contain the
 * specified field and that the value should satisfy the relation constraint
 * provided.
 *
 * @param fieldPath - The path to compare
 * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
 *   "&lt;=", "!=").
 * @param value - The value for comparison
 * @returns The created {@link Query}.
 */


function nr(t, e, n) {
  var r = e,
      s = Xn("where", t);
  return new er(s, r, n);
}

var rr = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Zn2) {
  index_browser_esm2017_inherits(rr, _Zn2);

  var _super30 = index_browser_esm2017_createSuper(rr);

  function rr(t, e) {
    var _this31;

    index_browser_esm2017_classCallCheck(this, rr);

    _this31 = _super30.call(this), _this31.dt = t, _this31._t = e, _this31.type = "orderBy";
    return _this31;
  }

  index_browser_esm2017_createClass(rr, [{
    key: "_apply",
    value: function _apply(t) {
      var e = function (t, e, n) {
        if (null !== t.startAt) throw new U(I, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
        if (null !== t.endAt) throw new U(I, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
        var r = new se(e, n);
        return function (t, e) {
          if (null === ce(t)) {
            // This is the first order by. It must match any inequality.
            var _n14 = ae(t);

            null !== _n14 && yr(t, _n14, e.field);
          }
        }(t, r), r;
      }
      /**
      * Create a `Bound` from a query and a document.
      *
      * Note that the `Bound` will always include the key of the document
      * and so only the provided document will compare equal to the returned
      * position.
      *
      * Will throw if the document does not contain all fields of the order by
      * of the query or if any of the fields in the order by are an uncommitted
      * server timestamp.
      */
      (t._query, this.dt, this._t);

      return new hn(t.firestore, t.converter, function (t, e) {
        // TODO(dimond): validate that orderBy does not list the same key twice.
        var n = t.explicitOrderBy.concat([e]);
        return new ue(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
      }(t._query, e));
    }
  }]);

  return rr;
}(Zn)));
/**
 * Creates a {@link QueryConstraint} that sorts the query result by the
 * specified field, optionally in descending order instead of ascending.
 *
 * @param fieldPath - The field to sort by.
 * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
 * not specified, order will be ascending.
 * @returns The created {@link Query}.
 */


function sr(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "asc";
  var n = e,
      r = Xn("orderBy", t);
  return new rr(r, n);
}

var ir = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Zn3) {
  index_browser_esm2017_inherits(ir, _Zn3);

  var _super31 = index_browser_esm2017_createSuper(ir);

  function ir(t, e, n) {
    var _this32;

    index_browser_esm2017_classCallCheck(this, ir);

    _this32 = _super31.call(this), _this32.type = t, _this32.gt = e, _this32.bt = n;
    return _this32;
  }

  index_browser_esm2017_createClass(ir, [{
    key: "_apply",
    value: function _apply(t) {
      return new hn(t.firestore, t.converter, function (t, e, n) {
        return new ue(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
      }(t._query, this.gt, this.bt));
    }
  }]);

  return ir;
}(Zn)));
/**
 * Creates a {@link QueryConstraint} that only returns the first matching documents.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */


function or(t) {
  return ut("limit", t), new ir("limit", t, "F"
  /* First */
  );
}
/**
 * Creates a {@link QueryConstraint} that only returns the last matching documents.
 *
 * You must specify at least one `orderBy` clause for `limitToLast` queries,
 * otherwise an exception will be thrown during execution.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */


function ur(t) {
  return ut("limitToLast", t), new ir("limitToLast", t, "L"
  /* Last */
  );
}

var cr = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Zn4) {
  index_browser_esm2017_inherits(cr, _Zn4);

  var _super32 = index_browser_esm2017_createSuper(cr);

  function cr(t, e, n) {
    var _this33;

    index_browser_esm2017_classCallCheck(this, cr);

    _this33 = _super32.call(this), _this33.type = t, _this33.vt = e, _this33.Et = n;
    return _this33;
  }

  index_browser_esm2017_createClass(cr, [{
    key: "_apply",
    value: function _apply(t) {
      var e = wr(t, this.type, this.vt, this.Et);
      return new hn(t.firestore, t.converter, function (t, e) {
        return new ue(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
      }(t._query, e));
    }
  }]);

  return cr;
}(Zn)));

function ar() {
  for (var _len9 = arguments.length, t = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    t[_key9] = arguments[_key9];
  }

  return new cr("startAt", t,
  /*inclusive=*/
  !0);
}

function hr() {
  for (var _len10 = arguments.length, t = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    t[_key10] = arguments[_key10];
  }

  return new cr("startAfter", t,
  /*inclusive=*/
  !1);
}

var lr = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Zn5) {
  index_browser_esm2017_inherits(lr, _Zn5);

  var _super33 = index_browser_esm2017_createSuper(lr);

  function lr(t, e, n) {
    var _this34;

    index_browser_esm2017_classCallCheck(this, lr);

    _this34 = _super33.call(this), _this34.type = t, _this34.vt = e, _this34.Et = n;
    return _this34;
  }

  index_browser_esm2017_createClass(lr, [{
    key: "_apply",
    value: function _apply(t) {
      var e = wr(t, this.type, this.vt, this.Et);
      return new hn(t.firestore, t.converter, function (t, e) {
        return new ue(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
      }(t._query, e));
    }
  }]);

  return lr;
}(Zn)));

function fr() {
  for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
    t[_key11] = arguments[_key11];
  }

  return new lr("endBefore", t,
  /*inclusive=*/
  !1);
}

function dr() {
  for (var _len12 = arguments.length, t = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
    t[_key12] = arguments[_key12];
  }

  return new lr("endAt", t,
  /*inclusive=*/
  !0);
}
/** Helper function to create a bound from a document or fields */


function wr(t, e, n, r) {
  if (n[0] = getModularInstance(n[0]), n[0] instanceof Yn) return function (t, e, n, r, s) {
    if (!r) throw new U(P, "Can't use a DocumentSnapshot that doesn't exist for ".concat(n, "()."));
    var i = []; // Because people expect to continue/end a query at the exact document
    // provided, we need to use the implicit sort order rather than the explicit
    // sort order, because it's guaranteed to contain the document key. That way
    // the position becomes unambiguous and the query continues/ends exactly at
    // the provided document. Without the key (by using the explicit sort
    // orders), multiple documents could match the position, yielding duplicate
    // results.

    var _iterator10 = index_browser_esm2017_createForOfIteratorHelper(le(t)),
        _step10;

    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var _n15 = _step10.value;
        if (_n15.field.isKeyField()) i.push(Lt(e, r.key));else {
          var _t19 = r.data.field(_n15.field);

          if (Dt(_t19)) throw new U(I, 'Invalid query. You are trying to start or end a query using a document for which the field "' + _n15.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');

          if (null === _t19) {
            var _t20 = _n15.field.canonicalString();

            throw new U(I, "Invalid query. You are trying to start or end a query using a document for which the field '".concat(_t20, "' (used as the orderBy) does not exist."));
          }

          i.push(_t19);
        }
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }

    return new re(i, s);
  }
  /**
  * Converts a list of field values to a `Bound` for the given query.
  */
  (t._query, t.firestore._databaseId, e, n[0]._document, r);
  {
    var s = Vn(t.firestore);
    return function (t, e, n, r, s, i) {
      // Use explicit order by's because it has to match the query the user made
      var o = t.explicitOrderBy;
      if (s.length > o.length) throw new U(I, "Too many arguments provided to ".concat(r, "(). The number of arguments must be less than or equal to the number of orderBy() clauses"));
      var u = [];

      for (var _i4 = 0; _i4 < s.length; _i4++) {
        var c = s[_i4];

        if (o[_i4].field.isKeyField()) {
          if ("string" != typeof c) throw new U(I, "Invalid query. Expected a string for document ID in ".concat(r, "(), but got a ").concat(index_browser_esm2017_typeof(c)));
          if (!he(t) && -1 !== c.indexOf("/")) throw new U(I, "Invalid query. When querying a collection and ordering by documentId(), the value passed to ".concat(r, "() must be a plain document ID, but '").concat(c, "' contains a slash."));

          var _n16 = t.path.child(X.fromString(c));

          if (!et.isDocumentKey(_n16)) throw new U(I, "Invalid query. When querying a collection group and ordering by documentId(), the value passed to ".concat(r, "() must result in a valid document path, but '").concat(_n16, "' is not because it contains an odd number of segments."));

          var _s3 = new et(_n16);

          u.push(Lt(e, _s3));
        } else {
          var _t21 = Ln(n, r, c);

          u.push(_t21);
        }
      }

      return new re(u, i);
    }
    /**
    * Parses the given `documentIdValue` into a `ReferenceValue`, throwing
    * appropriate errors if the value is anything other than a `DocumentReference`
    * or `string`, or if the string is malformed.
    */
    (t._query, t.firestore._databaseId, s, e, n, r);
  }
}

function mr(t, e, n) {
  if ("string" == typeof (n = getModularInstance(n))) {
    if ("" === n) throw new U(I, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!he(e) && -1 !== n.indexOf("/")) throw new U(I, "Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '".concat(n, "' contains a '/' character."));
    var r = e.path.child(X.fromString(n));
    if (!et.isDocumentKey(r)) throw new U(I, "Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '".concat(r, "' is not because it has an odd number of segments (").concat(r.length, ")."));
    return Lt(t, new et(r));
  }

  if (n instanceof an) return Lt(t, n._key);
  throw new U(I, "Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ".concat(it(n), "."));
}
/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */


function pr(t, e) {
  if (!Array.isArray(t) || 0 === t.length) throw new U(I, "Invalid Query. A non-empty array is required for '".concat(e.toString(), "' filters."));
  if (t.length > 10) throw new U(I, "Invalid Query. '".concat(e.toString(), "' filters support a maximum of 10 elements in the value array."));
}

function yr(t, e, n) {
  if (!n.isEqual(e)) throw new U(I, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '".concat(e.toString(), "' and so you must also use '").concat(e.toString(), "' as your first argument to orderBy(), but your first orderBy() is on field '").concat(n.toString(), "' instead."));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 *
 * @internal
 */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Converts custom model object of type T into `DocumentData` by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to `DocumentData`
 * because we want to provide the user with a more specific error message if
 * their `set()` or fails due to invalid data originating from a `toFirestore()`
 * call.
 */


function _r(t, e, n) {
  var r; // Cast to `any` in order to satisfy the union type constraint on
  // toFirestore().
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, r;
}

var gr = /*#__PURE__*/function (_ref8) {
  index_browser_esm2017_inherits(gr, _ref8);

  var _super34 = index_browser_esm2017_createSuper(gr);

  function gr(t) {
    var _this35;

    index_browser_esm2017_classCallCheck(this, gr);

    _this35 = _super34.call(this), _this35.firestore = t;
    return _this35;
  }

  index_browser_esm2017_createClass(gr, [{
    key: "convertBytes",
    value: function convertBytes(t) {
      return new gn(t);
    }
  }, {
    key: "convertReference",
    value: function convertReference(t) {
      var e = this.convertDocumentKey(t, this.firestore._databaseId);
      return new an(this.firestore,
      /* converter= */
      null, e);
    }
  }]);

  return gr;
}( /*#__PURE__*/function () {
  function _class4() {
    index_browser_esm2017_classCallCheck(this, _class4);
  }

  index_browser_esm2017_createClass(_class4, [{
    key: "convertValue",
    value: function convertValue(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "none";

      switch (xt(t)) {
        case 0
        /* NullValue */
        :
          return null;

        case 1
        /* BooleanValue */
        :
          return t.booleanValue;

        case 2
        /* NumberValue */
        :
          return Pt(t.integerValue || t.doubleValue);

        case 3
        /* TimestampValue */
        :
          return this.convertTimestamp(t.timestampValue);

        case 4
        /* ServerTimestampValue */
        :
          return this.convertServerTimestamp(t, e);

        case 5
        /* StringValue */
        :
          return t.stringValue;

        case 6
        /* BlobValue */
        :
          return this.convertBytes(Vt(t.bytesValue));

        case 7
        /* RefValue */
        :
          return this.convertReference(t.referenceValue);

        case 8
        /* GeoPointValue */
        :
          return this.convertGeoPoint(t.geoPointValue);

        case 9
        /* ArrayValue */
        :
          return this.convertArray(t.arrayValue, e);

        case 10
        /* ObjectValue */
        :
          return this.convertObject(t.mapValue, e);

        default:
          throw g();
      }
    }
  }, {
    key: "convertObject",
    value: function convertObject(t, e) {
      var _this36 = this;

      var n = {};
      return Et(t.fields, function (t, r) {
        n[t] = _this36.convertValue(r, e);
      }), n;
    }
  }, {
    key: "convertGeoPoint",
    value: function convertGeoPoint(t) {
      return new vn(Pt(t.latitude), Pt(t.longitude));
    }
  }, {
    key: "convertArray",
    value: function convertArray(t, e) {
      var _this37 = this;

      return (t.values || []).map(function (t) {
        return _this37.convertValue(t, e);
      });
    }
  }, {
    key: "convertServerTimestamp",
    value: function convertServerTimestamp(t, e) {
      switch (e) {
        case "previous":
          var n = Nt(t);
          return null == n ? null : this.convertValue(n, e);

        case "estimate":
          return this.convertTimestamp($t(t));

        default:
          return null;
      }
    }
  }, {
    key: "convertTimestamp",
    value: function convertTimestamp(t) {
      var e = Rt(t);
      return new gt(e.seconds, e.nanos);
    }
  }, {
    key: "convertDocumentKey",
    value: function convertDocumentKey(t, e) {
      var n = X.fromString(t);
      b(We(n));
      var r = new K(n.get(1), n.get(3)),
          s = new et(n.popFirst(5));
      return r.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.
      p("Document ".concat(s, " contains a document reference within a different database (").concat(r.projectId, "/").concat(r.database, ") which is not supported. It will be treated as a reference in the current database (").concat(e.projectId, "/").concat(e.database, ") instead.")), s;
    }
  }]);

  return _class4;
}());
/**
 * Reads the document referred to by the specified document reference.
 *
 * All documents are directly fetched from the server, even if the document was
 * previously read or modified. Recent modifications are only reflected in the
 * retrieved `DocumentSnapshot` if they have already been applied by the
 * backend. If the client is offline, the read fails. If you like to use
 * caching or see local modifications, please use the full Firestore SDK.
 *
 * @param reference - The reference of the document to fetch.
 * @returns A Promise resolved with a `DocumentSnapshot` containing the current
 * document contents.
 */


function br(t) {
  var e = en((t = ot(t, an)).firestore),
      n = new gr(t.firestore);
  return Xe(e, [t._key]).then(function (e) {
    b(1 === e.length);
    var r = e[0];
    return new Yn(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);
  });
}
/**
 * Executes the query and returns the results as a {@link QuerySnapshot}.
 *
 * All queries are executed directly by the server, even if the the query was
 * previously executed. Recent modifications are only reflected in the retrieved
 * results if they have already been applied by the backend. If the client is
 * offline, the operation fails. To see previously cached result and local
 * modifications, use the full Firestore SDK.
 *
 * @param query - The `Query` to execute.
 * @returns A Promise that will be resolved with the results of the query.
 */


function vr(t) {
  !function (t) {
    if ("L"
    /* Last */
    === t.limitType && 0 === t.explicitOrderBy.length) throw new U(q, "limitToLast() queries require specifying at least one orderBy() clause");
  }((t = ot(t, hn))._query);
  var e = en(t.firestore),
      n = new gr(t.firestore);
  return Ze(e, t._query).then(function (e) {
    var r = e.map(function (e) {
      return new Hn(t.firestore, n, e.key, e, t.converter);
    });
    return "L"
    /* Last */
    === t._query.limitType && // Limit to last queries reverse the orderBy constraint that was
    // specified by the user. As such, we need to reverse the order of the
    // results to return the documents in the expected order.
    r.reverse(), new Kn(t, r);
  });
}

function Er(t, e, n) {
  var r = _r((t = ot(t, an)).converter, e, n),
      s = Dn(Vn(t.firestore), "setDoc", t._key, r, null !== t.converter, n);

  return Je(en(t.firestore), [s.toMutation(t._key, ve.none())]);
}

function Tr(t, e, n) {
  var s = Vn((t = ot(t, an)).firestore); // For Compat types, we have to "extract" the underlying types before
  // performing validation.

  var i;

  for (var _len13 = arguments.length, r = new Array(_len13 > 3 ? _len13 - 3 : 0), _key13 = 3; _key13 < _len13; _key13++) {
    r[_key13 - 3] = arguments[_key13];
  }

  i = "string" == typeof (e = getModularInstance(e)) || e instanceof yn ? Cn(s, "updateDoc", t._key, e, n, r) : On(s, "updateDoc", t._key, e);
  return Je(en(t.firestore), [i.toMutation(t._key, ve.exists(!0))]);
}
/**
 * Deletes the document referred to by the specified `DocumentReference`.
 *
 * The deletion will only be reflected in document reads that occur after the
 * returned promise resolves. If the client is offline, the
 * delete fails. If you would like to see local modifications or buffer writes
 * until the client is online, use the full Firestore SDK.
 *
 * @param reference - A reference to the document to delete.
 * @returns A `Promise` resolved once the document has been successfully
 * deleted from the backend.
 */


function Ar(t) {
  return Je(en((t = ot(t, an)).firestore), [new Ie(t._key, ve.none())]);
}
/**
 * Add a new document to specified `CollectionReference` with the given data,
 * assigning it a document ID automatically.
 *
 * The result of this write will only be reflected in document reads that occur
 * after the returned promise resolves. If the client is offline, the
 * write fails. If you would like to see local modifications or buffer writes
 * until the client is online, use the full Firestore SDK.
 *
 * @param reference - A reference to the collection to add this document to.
 * @param data - An Object containing the data for the new document.
 * @throws Error - If the provided input is not a valid Firestore document.
 * @returns A `Promise` resolved with a `DocumentReference` pointing to the
 * newly created document after it has been written to the backend.
 */


function Ir(t, e) {
  var n = wn(t = ot(t, ln)),
      r = _r(t.converter, e),
      s = Dn(Vn(t.firestore), "addDoc", n._key, r, null !== n.converter, {});

  return Je(en(t.firestore), [s.toMutation(n._key, ve.exists(!1))]).then(function () {
    return n;
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or
 * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.
 */


function Rr() {
  return new Nn("deleteField");
}
/**
 * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to
 * include a server-generated timestamp in the written data.
 */


function Pr() {
  return new Sn("serverTimestamp");
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements - The elements to union into the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */


function Vr() {
  for (var _len14 = arguments.length, t = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
    t[_key14] = arguments[_key14];
  }

  // NOTE: We don't actually parse the data until it's used in set() or
  // update() since we'd need the Firestore instance to do this.
  return new xn("arrayUnion", t);
}
/**
 * Returns a special value that can be used with {@link (setDoc:1)} or {@link
 * updateDoc:1} that tells the server to remove the given elements from any
 * array value that already exists on the server. All instances of each element
 * specified will be removed from the array. If the field being modified is not
 * already an array it will be overwritten with an empty array.
 *
 * @param elements - The elements to remove from the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */


function Dr() {
  for (var _len15 = arguments.length, t = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
    t[_key15] = arguments[_key15];
  }

  // NOTE: We don't actually parse the data until it's used in set() or
  // update() since we'd need the Firestore instance to do this.
  return new Fn("arrayRemove", t);
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by
 * the given value.
 *
 * If either the operand or the current field value uses floating point
 * precision, all arithmetic follows IEEE 754 semantics. If both values are
 * integers, values outside of JavaScript's safe number range
 * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
 * precision loss. Furthermore, once processed by the Firestore backend, all
 * integer operations are capped between -2^63 and 2^63-1.
 *
 * If the current field value is not of type `number`, or if the field does not
 * yet exist, the transformation sets the field to the given value.
 *
 * @param n - The value to increment by.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */


function Nr(t) {
  return new qn("increment", t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A write batch, used to perform multiple writes as a single atomic unit.
 *
 * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
 * provides methods for adding writes to the write batch. None of the writes
 * will be committed (or visible locally) until {@link WriteBatch.commit} is
 * called.
 */


var $r = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /** @hideconstructor */
  function $r(t, e) {
    index_browser_esm2017_classCallCheck(this, $r);

    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = Vn(t);
  }

  index_browser_esm2017_createClass($r, [{
    key: "set",
    value: function set(t, e, n) {
      this._verifyNotCommitted();

      var r = Sr(t, this._firestore),
          s = _r(r.converter, e, n),
          i = Dn(this._dataReader, "WriteBatch.set", r._key, s, null !== r.converter, n);

      return this._mutations.push(i.toMutation(r._key, ve.none())), this;
    }
  }, {
    key: "update",
    value: function update(t, e, n) {
      this._verifyNotCommitted();

      var s = Sr(t, this._firestore); // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      var i;

      for (var _len16 = arguments.length, r = new Array(_len16 > 3 ? _len16 - 3 : 0), _key16 = 3; _key16 < _len16; _key16++) {
        r[_key16 - 3] = arguments[_key16];
      }

      return i = "string" == typeof (e = getModularInstance(e)) || e instanceof yn ? Cn(this._dataReader, "WriteBatch.update", s._key, e, n, r) : On(this._dataReader, "WriteBatch.update", s._key, e), this._mutations.push(i.toMutation(s._key, ve.exists(!0))), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `WriteBatch` instance. Used for chaining method calls.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      this._verifyNotCommitted();

      var e = Sr(t, this._firestore);
      return this._mutations = this._mutations.concat(new Ie(e._key, ve.none())), this;
    }
    /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A `Promise` resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */

  }, {
    key: "commit",
    value: function commit() {
      return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
    }
  }, {
    key: "_verifyNotCommitted",
    value: function _verifyNotCommitted() {
      if (this._committed) throw new U(S, "A write batch can no longer be used after commit() has been called.");
    }
  }]);

  return $r;
}()));

function Sr(t, e) {
  if ((t = getModularInstance(t)).firestore !== e) throw new U(I, "Provided document reference is from a different Firestore instance.");
  return t;
}
/**
 * Creates a write batch, used for performing multiple writes as a single
 * atomic operation. The maximum number of writes allowed in a single WriteBatch
 * is 500.
 *
 * The result of these writes will only be reflected in document reads that
 * occur after the returned promise resolves. If the client is offline, the
 * write fails. If you would like to see local modifications or buffer writes
 * until the client is online, use the full Firestore SDK.
 *
 * @returns A `WriteBatch` that can be used to atomically execute multiple
 * writes.
 */


function xr(t) {
  var e = en(t = ot(t, rn));
  return new $r(t, function (t) {
    return Je(e, t);
  });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */


var Fr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Fr(t) {
    index_browser_esm2017_classCallCheck(this, Fr);

    this.datastore = t, // The version of each document that was read during this transaction.
    this.readVersions = new Map(), this.mutations = [], this.committed = !1,
    /**
     * A deferred usage error that occurred previously in this transaction that
     * will cause the transaction to fail once it actually commits.
     */
    this.lastWriteError = null,
    /**
     * Set of documents that have been written in the transaction.
     *
     * When there's more than one write to the same key in a transaction, any
     * writes after the first are handled differently.
     */
    this.writtenDocs = new Set();
  }

  index_browser_esm2017_createClass(Fr, [{
    key: "lookup",
    value: function () {
      var _lookup = index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(t) {
        var _this38 = this;

        var e;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this.ensureCommitNotCalled(), this.mutations.length > 0)) {
                  _context2.next = 2;
                  break;
                }

                throw new U(I, "Firestore transactions require all reads to be executed before all writes.");

              case 2:
                _context2.next = 4;
                return Xe(this.datastore, t);

              case 4:
                e = _context2.sent;
                return _context2.abrupt("return", (e.forEach(function (t) {
                  return _this38.recordVersion(t);
                }), e));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function lookup(_x11) {
        return _lookup.apply(this, arguments);
      }

      return lookup;
    }()
  }, {
    key: "set",
    value: function set(t, e) {
      this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
  }, {
    key: "update",
    value: function update(t, e) {
      try {
        this.write(e.toMutation(t, this.preconditionForUpdate(t)));
      } catch (t) {
        this.lastWriteError = t;
      }

      this.writtenDocs.add(t.toString());
    }
  }, {
    key: "delete",
    value: function _delete(t) {
      this.write(new Ie(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
  }, {
    key: "commit",
    value: function () {
      var _commit = index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _this39 = this;

        var t;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.ensureCommitNotCalled(), this.lastWriteError)) {
                  _context3.next = 2;
                  break;
                }

                throw this.lastWriteError;

              case 2:
                t = this.readVersions; // For each mutation, note that the doc was written.

                this.mutations.forEach(function (e) {
                  t["delete"](e.key.toString());
                });
                // For each document that was read but not written to, we want to perform
                // a `verify` operation.
                t.forEach(function (t, e) {
                  var n = et.fromPath(e);

                  _this39.mutations.push(new Re(n, _this39.precondition(n)));
                });
                _context3.next = 7;
                return Je(this.datastore, this.mutations);

              case 7:
                this.committed = !0;

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function commit() {
        return _commit.apply(this, arguments);
      }

      return commit;
    }()
  }, {
    key: "recordVersion",
    value: function recordVersion(t) {
      var e;
      if (t.isFoundDocument()) e = t.version;else {
        if (!t.isNoDocument()) throw g(); // For deleted docs, we must use baseVersion 0 when we overwrite them.

        e = bt.min();
      }
      var n = this.readVersions.get(t.key.toString());

      if (n) {
        if (!e.isEqual(n)) // This transaction will fail no matter what.
          throw new U(x, "Document version changed between two reads.");
      } else this.readVersions.set(t.key.toString(), e);
    }
    /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */

  }, {
    key: "precondition",
    value: function precondition(t) {
      var e = this.readVersions.get(t.toString());
      return !this.writtenDocs.has(t.toString()) && e ? ve.updateTime(e) : ve.none();
    }
    /**
     * Returns the precondition for a document if the operation is an update.
     */

  }, {
    key: "preconditionForUpdate",
    value: function preconditionForUpdate(t) {
      var e = this.readVersions.get(t.toString()); // The first time a document is written, we want to take into account the
      // read time and existence

      if (!this.writtenDocs.has(t.toString()) && e) {
        if (e.isEqual(bt.min())) // The document doesn't exist, so fail the transaction.
          // This has to be validated locally because you can't send a
          // precondition that a document does not exist without changing the
          // semantics of the backend write to be an insert. This is the reverse
          // of what we want, since we want to assert that the document doesn't
          // exist but then send the update and have it fail. Since we can't
          // express that to the backend, we have to validate locally.
          // Note: this can change once we can send separate verify writes in the
          // transaction.
          throw new U(I, "Can't update a document that doesn't exist."); // Document exists, base precondition on document update time.

        return ve.updateTime(e);
      } // Document was not read, so we just use the preconditions for a blind
      // update.


      return ve.exists(!0);
    }
  }, {
    key: "write",
    value: function write(t) {
      this.ensureCommitNotCalled(), this.mutations.push(t);
    }
  }, {
    key: "ensureCommitNotCalled",
    value: function ensureCommitNotCalled() {}
  }]);

  return Fr;
}()));
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var qr = {
  maxAttempts: 5
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */

var Or = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Or(t, e, n, r, s) {
    index_browser_esm2017_classCallCheck(this, Or);

    this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, this.deferred = s, this.Tt = n.maxAttempts, this.At = new He(this.asyncQueue, "transaction_retry"
    /* TransactionRetry */
    );
  }
  /** Runs the transaction and sets the result on deferred. */


  index_browser_esm2017_createClass(Or, [{
    key: "run",
    value: function run() {
      this.Tt -= 1, this.It();
    }
  }, {
    key: "It",
    value: function It() {
      var _this40 = this;

      this.At.W( /*#__PURE__*/index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var t, e;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                t = new Fr(_this40.datastore), e = _this40.Rt(t);
                e && e.then(function (e) {
                  _this40.asyncQueue.enqueueAndForget(function () {
                    return t.commit().then(function () {
                      _this40.deferred.resolve(e);
                    })["catch"](function (t) {
                      _this40.Pt(t);
                    });
                  });
                })["catch"](function (t) {
                  _this40.Pt(t);
                });

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      })));
    }
  }, {
    key: "Rt",
    value: function Rt(t) {
      try {
        var e = this.updateFunction(t);
        return !ct(e) && e["catch"] && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
      } catch (t) {
        // Do not retry errors thrown by user provided updateFunction.
        return this.deferred.reject(t), null;
      }
    }
  }, {
    key: "Pt",
    value: function Pt(t) {
      var _this41 = this;

      this.Tt > 0 && this.Vt(t) ? (this.Tt -= 1, this.asyncQueue.enqueueAndForget(function () {
        return _this41.It(), Promise.resolve();
      })) : this.deferred.reject(t);
    }
  }, {
    key: "Vt",
    value: function Vt(t) {
      if ("FirebaseError" === t.name) {
        // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
        // non-matching document versions with ABORTED. These errors should be retried.
        var e = t.code;
        return "aborted" === e || "failed-precondition" === e || !
        /**
        * Determines whether an error code represents a permanent error when received
        * in response to a non-write operation.
        *
        * See isPermanentWriteError for classifying write errors.
        */
        function (t) {
          switch (t) {
            default:
              return g();

            case T:
            case A:
            case R:
            case index_browser_esm2017_$:
            case O:
            case C: // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.

            case N:
              return !1;

            case I:
            case P:
            case V:
            case D:
            case S: // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.

            case x:
            case F:
            case q:
            case L:
              return !0;
          }
        }(e);
      }

      return !1;
    }
  }]);

  return Or;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The Platform's 'document' implementation or null if not available. */


function Cr() {
  // `document` is not always available, e.g. in ReactNative and WebWorkers.
  // eslint-disable-next-line no-restricted-globals
  return "undefined" != typeof document ? document : null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 *
 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
 * in newer versions of TypeScript defines `finally`, which is not available in
 * IE.
 */


var Lr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Lr(t, e, n, r, s) {
    index_browser_esm2017_classCallCheck(this, Lr);

    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, this.deferred = new k(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.
    this.deferred.promise["catch"](function (t) {});
  }
  /**
   * Creates and returns a DelayedOperation that has been scheduled to be
   * executed on the provided asyncQueue after the provided delayMs.
   *
   * @param asyncQueue - The queue to schedule the operation on.
   * @param id - A Timer ID identifying the type of operation this is.
   * @param delayMs - The delay (ms) before the operation should be scheduled.
   * @param op - The operation to run.
   * @param removalCallback - A callback to be called synchronously once the
   *   operation is executed or canceled, notifying the AsyncQueue to remove it
   *   from its delayedOperations list.
   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
   *   the DelayedOperation class public.
   */


  index_browser_esm2017_createClass(Lr, [{
    key: "start",
    value:
    /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */
    function start(t) {
      var _this42 = this;

      this.timerHandle = setTimeout(function () {
        return _this42.handleDelayElapsed();
      }, t);
    }
    /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */

  }, {
    key: "skipDelay",
    value: function skipDelay() {
      return this.handleDelayElapsed();
    }
    /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */

  }, {
    key: "cancel",
    value: function cancel(t) {
      null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new U(T, "Operation cancelled" + (t ? ": " + t : ""))));
    }
  }, {
    key: "handleDelayElapsed",
    value: function handleDelayElapsed() {
      var _this43 = this;

      this.asyncQueue.enqueueAndForget(function () {
        return null !== _this43.timerHandle ? (_this43.clearTimeout(), _this43.op().then(function (t) {
          return _this43.deferred.resolve(t);
        })) : Promise.resolve();
      });
    }
  }, {
    key: "clearTimeout",
    value: function (_clearTimeout) {
      function clearTimeout() {
        return _clearTimeout.apply(this, arguments);
      }

      clearTimeout.toString = function () {
        return _clearTimeout.toString();
      };

      return clearTimeout;
    }(function () {
      null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
    })
  }], [{
    key: "createAndSchedule",
    value: function createAndSchedule(t, e, n, r, s) {
      var i = Date.now() + n,
          o = new Lr(t, e, i, r, s);
      return o.start(n), o;
    }
  }]);

  return Lr;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Ur = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ur() {
    var _this44 = this;

    index_browser_esm2017_classCallCheck(this, Ur);

    // The last promise in the queue.
    this.Dt = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
    // retried with backoff.
    this.Nt = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
    // be changed again.
    this.$t = !1, // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.
    this.St = [], // visible for testing
    this.xt = null, // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.
    this.Ft = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
    this.qt = !1, // List of TimerIds to fast-forward delays for.
    this.Ot = [], // Backoff timer used to schedule retries for retryable operations
    this.At = new He(this, "async_queue_retry"
    /* AsyncQueueRetry */
    ), // Visibility handler that triggers an immediate retry of all retryable
    // operations. Meant to speed up recovery when we regain file system access
    // after page comes into foreground.
    this.Ct = function () {
      var t = Cr();
      t && _m("AsyncQueue", "Visibility state changed to " + t.visibilityState), _this44.At.H();
    };
    var t = Cr();
    t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Ct);
  }

  index_browser_esm2017_createClass(Ur, [{
    key: "isShuttingDown",
    get: function get() {
      return this.$t;
    }
    /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */

  }, {
    key: "enqueueAndForget",
    value: function enqueueAndForget(t) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.enqueue(t);
    }
  }, {
    key: "enqueueAndForgetEvenWhileRestricted",
    value: function enqueueAndForgetEvenWhileRestricted(t) {
      this.Lt(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.Ut(t);
    }
  }, {
    key: "enterRestrictedMode",
    value: function enterRestrictedMode(t) {
      if (!this.$t) {
        this.$t = !0, this.qt = t || !1;
        var e = Cr();
        e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.Ct);
      }
    }
  }, {
    key: "enqueue",
    value: function enqueue(t) {
      var _this45 = this;

      if (this.Lt(), this.$t) // Return a Promise which never resolves.
        return new Promise(function () {}); // Create a deferred Promise that we can return to the callee. This
      // allows us to return a "hanging Promise" only to the callee and still
      // advance the queue even when the operation is not run.

      var e = new k();
      return this.Ut(function () {
        return _this45.$t && _this45.qt ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise);
      }).then(function () {
        return e.promise;
      });
    }
  }, {
    key: "enqueueRetryable",
    value: function enqueueRetryable(t) {
      var _this46 = this;

      this.enqueueAndForget(function () {
        return _this46.Nt.push(t), _this46.kt();
      });
    }
    /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */

  }, {
    key: "kt",
    value: function () {
      var _kt = index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var _this47 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(0 !== this.Nt.length)) {
                  _context5.next = 14;
                  break;
                }

                _context5.prev = 1;
                _context5.next = 4;
                return this.Nt[0]();

              case 4:
                this.Nt.shift();
                this.At.reset();
                _context5.next = 13;
                break;

              case 8:
                _context5.prev = 8;
                _context5.t0 = _context5["catch"](1);

                if (
                /**
                * @license
                * Copyright 2017 Google LLC
                *
                * Licensed under the Apache License, Version 2.0 (the "License");
                * you may not use this file except in compliance with the License.
                * You may obtain a copy of the License at
                *
                *   http://www.apache.org/licenses/LICENSE-2.0
                *
                * Unless required by applicable law or agreed to in writing, software
                * distributed under the License is distributed on an "AS IS" BASIS,
                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                * See the License for the specific language governing permissions and
                * limitations under the License.
                */

                /** Verifies whether `e` is an IndexedDbTransactionError. */
                function (t) {
                  // Use name equality, as instanceof checks on errors don't work with errors
                  // that wrap other errors.
                  return "IndexedDbTransactionError" === t.name;
                }
                /**
                * @license
                * Copyright 2020 Google LLC
                *
                * Licensed under the Apache License, Version 2.0 (the "License");
                * you may not use this file except in compliance with the License.
                * You may obtain a copy of the License at
                *
                *   http://www.apache.org/licenses/LICENSE-2.0
                *
                * Unless required by applicable law or agreed to in writing, software
                * distributed under the License is distributed on an "AS IS" BASIS,
                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                * See the License for the specific language governing permissions and
                * limitations under the License.
                */
                (_context5.t0)) {
                  _context5.next = 12;
                  break;
                }

                throw _context5.t0;

              case 12:
                // Failure will be handled by AsyncQueue
                _m("AsyncQueue", "Operation failed with retryable error: " + _context5.t0);

              case 13:
                this.Nt.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.At.W(function () {
                  return _this47.kt();
                });

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[1, 8]]);
      }));

      function kt() {
        return _kt.apply(this, arguments);
      }

      return kt;
    }()
  }, {
    key: "Ut",
    value: function Ut(t) {
      var _this48 = this;

      var e = this.Dt.then(function () {
        return _this48.Ft = !0, t()["catch"](function (t) {
          _this48.xt = t, _this48.Ft = !1;

          var e =
          /**
          * Chrome includes Error.message in Error.stack. Other browsers do not.
          * This returns expected output of message + stack when available.
          * @param error - Error or FirestoreError
          */
          function (t) {
            var e = t.message || "";
            t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
            return e;
          }
          /**
          * @license
          * Copyright 2020 Google LLC
          *
          * Licensed under the Apache License, Version 2.0 (the "License");
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *   http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an "AS IS" BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */
          // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
          // legacy SDK.

          /**
          * A reference to a transaction.
          *
          * The `Transaction` object passed to a transaction's `updateFunction` provides
          * the methods to read and write data within the transaction context. See
          * {@link runTransaction}.
          */
          (t); // Re-throw the error so that this.tail becomes a rejected Promise and
          // all further attempts to chain (via .then) will just short-circuit
          // and return the rejected Promise.


          throw p("INTERNAL UNHANDLED ERROR: ", e), t;
        }).then(function (t) {
          return _this48.Ft = !1, t;
        });
      });
      return this.Dt = e, e;
    }
  }, {
    key: "enqueueAfterDelay",
    value: function enqueueAfterDelay(t, e, n) {
      var _this49 = this;

      this.Lt(), // Fast-forward delays for timerIds that have been overriden.
      this.Ot.indexOf(t) > -1 && (e = 0);
      var r = Lr.createAndSchedule(this, t, e, n, function (t) {
        return _this49.jt(t);
      });
      return this.St.push(r), r;
    }
  }, {
    key: "Lt",
    value: function Lt() {
      this.xt && g();
    }
  }, {
    key: "verifyOperationInProgress",
    value: function verifyOperationInProgress() {}
    /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */

  }, {
    key: "Mt",
    value: function () {
      var _Mt = index_browser_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var t;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                t = this.Dt;
                _context6.next = 3;
                return t;

              case 3:
                if (t !== this.Dt) {
                  _context6.next = 0;
                  break;
                }

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function Mt() {
        return _Mt.apply(this, arguments);
      }

      return Mt;
    }()
    /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */

  }, {
    key: "Bt",
    value: function Bt(t) {
      var _iterator11 = index_browser_esm2017_createForOfIteratorHelper(this.St),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var e = _step11.value;
          if (e.timerId === t) return !0;
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      return !1;
    }
    /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId - Delayed operations up to and including this TimerId
     * will be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */

  }, {
    key: "zt",
    value: function zt(t) {
      var _this50 = this;

      // Note that draining may generate more delayed ops, so we do that first.
      return this.Mt().then(function () {
        // Run ops in the same order they'd run if they ran naturally.
        _this50.St.sort(function (t, e) {
          return t.targetTimeMs - e.targetTimeMs;
        });

        var _iterator12 = index_browser_esm2017_createForOfIteratorHelper(_this50.St),
            _step12;

        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var e = _step12.value;
            if (e.skipDelay(), "all"
            /* All */
            !== t && e.timerId === t) break;
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }

        return _this50.Mt();
      });
    }
    /**
     * For Tests: Skip all subsequent delays for a timer id.
     */

  }, {
    key: "Gt",
    value: function Gt(t) {
      this.Ot.push(t);
    }
    /** Called once a DelayedOperation is run or canceled. */

  }, {
    key: "jt",
    value: function jt(t) {
      // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
      var e = this.St.indexOf(t);
      this.St.splice(e, 1);
    }
  }]);

  return Ur;
}()));

var kr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /** @hideconstructor */
  function kr(t, e) {
    index_browser_esm2017_classCallCheck(this, kr);

    this._firestore = t, this._transaction = e, this._dataReader = Vn(t);
  }
  /**
   * Reads the document referenced by the provided {@link DocumentReference}.
   *
   * @param documentRef - A reference to the document to be read.
   * @returns A `DocumentSnapshot` with the read data.
   */


  index_browser_esm2017_createClass(kr, [{
    key: "get",
    value: function get(t) {
      var _this51 = this;

      var e = Sr(t, this._firestore),
          n = new gr(this._firestore);
      return this._transaction.lookup([e._key]).then(function (t) {
        if (!t || 1 !== t.length) return g();
        var r = t[0];
        if (r.isFoundDocument()) return new Yn(_this51._firestore, n, r.key, r, e.converter);
        if (r.isNoDocument()) return new Yn(_this51._firestore, n, e._key, null, e.converter);
        throw g();
      });
    }
  }, {
    key: "set",
    value: function set(t, e, n) {
      var r = Sr(t, this._firestore),
          s = _r(r.converter, e, n),
          i = Dn(this._dataReader, "Transaction.set", r._key, s, null !== r.converter, n);

      return this._transaction.set(r._key, i), this;
    }
  }, {
    key: "update",
    value: function update(t, e, n) {
      var s = Sr(t, this._firestore); // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      var i;

      for (var _len17 = arguments.length, r = new Array(_len17 > 3 ? _len17 - 3 : 0), _key17 = 3; _key17 < _len17; _key17++) {
        r[_key17 - 3] = arguments[_key17];
      }

      return i = "string" == typeof (e = getModularInstance(e)) || e instanceof yn ? Cn(this._dataReader, "Transaction.update", s._key, e, n, r) : On(this._dataReader, "Transaction.update", s._key, e), this._transaction.update(s._key, i), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      var e = Sr(t, this._firestore);
      return this._transaction["delete"](e._key), this;
    }
  }]);

  return kr;
}()));
/**
 * Executes the given `updateFunction` and then attempts to commit the changes
 * applied within the transaction. If any document read within the transaction
 * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
 * commit after 5 attempts, the transaction fails.
 *
 * The maximum number of writes allowed in a single transaction is 500.
 *
 * @param firestore - A reference to the Firestore database to run this
 * transaction against.
 * @param updateFunction - The function to execute within the transaction
 * context.
 * @returns If the transaction completed successfully or was explicitly aborted
 * (the `updateFunction` returned a failed promise), the promise returned by the
 * `updateFunction `is returned here. Otherwise, if the transaction failed, a
 * rejected promise with the corresponding failure error is returned.
 */


function jr(t, e, n) {
  var r = en(t = ot(t, rn)),
      s = Object.assign(Object.assign({}, qr), n);
  !function (t) {
    if (t.maxAttempts < 1) throw new U(I, "Max attempts must be at least 1");
  }(s);
  var i = new k();
  return new Or(new Ur(), r, s, function (n) {
    return e(new kr(t, n));
  }, i).run(), i.promise;
}
/**
 * Firestore Lite
 *
 * @remarks Firestore Lite is a small online-only SDK that allows read
 * and write access to your Firestore database. All operations connect
 * directly to the backend, and `onSnapshot()` APIs are not supported.
 * @packageDocumentation
 */


!function (t) {
  f = t;
}("".concat(SDK_VERSION, "_lite")), _registerComponent(new Component("firestore/lite", function (t, _ref10) {
  var e = _ref10.options;
  var n = t.getProvider("app").getImmediate(),
      r = new rn(n, new z(t.getProvider("auth-internal")), new Y(t.getProvider("app-check-internal")));
  return e && r._setSettings(e), r;
}, "PUBLIC")), // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation
registerVersion("firestore-lite", "3.4.9", ""), registerVersion("firestore-lite", "3.4.9", "esm2017");

;// CONCATENATED MODULE: ./node_modules/firebase/firestore/lite/dist/index.esm.js

;// CONCATENATED MODULE: ./src/scripts/data/commentHelperFirebase.js
// Import the functions you need from the SDKs you need

 // TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries
// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional

var firebaseConfig = {
  apiKey: "AIzaSyD6qdGSGDxOWAUwDpB_BiZ337lFNakuPvY",
  authDomain: "pws-webapp.firebaseapp.com",
  databaseURL: "https://pws-webapp-default-rtdb.firebaseio.com",
  projectId: "pws-webapp",
  storageBucket: "pws-webapp.appspot.com",
  messagingSenderId: "623078842606",
  appId: "1:623078842606:web:e8f8a0e022b51127c393ff",
  measurementId: "G-SMF9V2RWGN"
}; // Initialize Firebase

var app = initializeApp(firebaseConfig);
var db = on(app);
/* harmony default export */ const commentHelperFirebase = (db);
;// CONCATENATED MODULE: ./node_modules/@firebase/webchannel-wrapper/dist/index.esm2017.js
function dist_index_esm2017_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = dist_index_esm2017_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function dist_index_esm2017_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dist_index_esm2017_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dist_index_esm2017_arrayLikeToArray(o, minLen); }

function dist_index_esm2017_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function index_esm2017_get() { if (typeof Reflect !== "undefined" && Reflect.get) { index_esm2017_get = Reflect.get; } else { index_esm2017_get = function _get(target, property, receiver) { var base = index_esm2017_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return index_esm2017_get.apply(this, arguments); }

function index_esm2017_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = dist_index_esm2017_getPrototypeOf(object); if (object === null) break; } return object; }

function dist_index_esm2017_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) dist_index_esm2017_setPrototypeOf(subClass, superClass); }

function dist_index_esm2017_setPrototypeOf(o, p) { dist_index_esm2017_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dist_index_esm2017_setPrototypeOf(o, p); }

function dist_index_esm2017_createSuper(Derived) { var hasNativeReflectConstruct = dist_index_esm2017_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dist_index_esm2017_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dist_index_esm2017_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dist_index_esm2017_possibleConstructorReturn(this, result); }; }

function dist_index_esm2017_possibleConstructorReturn(self, call) { if (call && (dist_index_esm2017_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dist_index_esm2017_assertThisInitialized(self); }

function dist_index_esm2017_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function dist_index_esm2017_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function dist_index_esm2017_getPrototypeOf(o) { dist_index_esm2017_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dist_index_esm2017_getPrototypeOf(o); }

function dist_index_esm2017_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function dist_index_esm2017_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function dist_index_esm2017_createClass(Constructor, protoProps, staticProps) { if (protoProps) dist_index_esm2017_defineProperties(Constructor.prototype, protoProps); if (staticProps) dist_index_esm2017_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function dist_index_esm2017_typeof(obj) { "@babel/helpers - typeof"; return dist_index_esm2017_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, dist_index_esm2017_typeof(obj); }

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};
var esm = {};
/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/

var index_esm2017_k,
    goog = goog || {},
    index_esm2017_l = commonjsGlobal || self;

function aa() {}

function ba(a) {
  var b = dist_index_esm2017_typeof(a);

  b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
  return "array" == b || "object" == b && "number" == typeof a.length;
}

function index_esm2017_p(a) {
  var b = dist_index_esm2017_typeof(a);

  return "object" == b && null != a || "function" == b;
}

function da(a) {
  return Object.prototype.hasOwnProperty.call(a, ea) && a[ea] || (a[ea] = ++fa);
}

var ea = "closure_uid_" + (1E9 * Math.random() >>> 0),
    fa = 0;

function ha(a, b, c) {
  return a.call.apply(a.bind, arguments);
}

function ia(a, b, c) {
  if (!a) throw Error();

  if (2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function () {
      var e = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(e, d);
      return a.apply(b, e);
    };
  }

  return function () {
    return a.apply(b, arguments);
  };
}

function index_esm2017_q(a, b, c) {
  Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? index_esm2017_q = ha : index_esm2017_q = ia;
  return index_esm2017_q.apply(null, arguments);
}

function ja(a, b) {
  var c = Array.prototype.slice.call(arguments, 1);
  return function () {
    var d = c.slice();
    d.push.apply(d, arguments);
    return a.apply(this, d);
  };
}

function t(a, b) {
  function c() {}

  c.prototype = b.prototype;
  a.Z = b.prototype;
  a.prototype = new c();
  a.prototype.constructor = a;

  a.Vb = function (d, e, f) {
    for (var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++) {
      h[n - 2] = arguments[n];
    }

    return b.prototype[e].apply(d, h);
  };
}

function index_esm2017_v() {
  this.s = this.s;
  this.o = this.o;
}

var ka = 0,
    la = {};
index_esm2017_v.prototype.s = !1;

index_esm2017_v.prototype.na = function () {
  if (!this.s && (this.s = !0, this.M(), 0 != ka)) {
    var a = da(this);
    delete la[a];
  }
};

index_esm2017_v.prototype.M = function () {
  if (this.o) for (; this.o.length;) {
    this.o.shift()();
  }
};

var ma = Array.prototype.indexOf ? function (a, b) {
  return Array.prototype.indexOf.call(a, b, void 0);
} : function (a, b) {
  if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);

  for (var c = 0; c < a.length; c++) {
    if (c in a && a[c] === b) return c;
  }

  return -1;
},
    na = Array.prototype.forEach ? function (a, b, c) {
  Array.prototype.forEach.call(a, b, c);
} : function (a, b, c) {
  var d = a.length,
      e = "string" === typeof a ? a.split("") : a;

  for (var f = 0; f < d; f++) {
    f in e && b.call(c, e[f], f, a);
  }
};

function oa(a) {
  a: {
    var b = pa;
    var c = a.length,
        d = "string" === typeof a ? a.split("") : a;

    for (var e = 0; e < c; e++) {
      if (e in d && b.call(void 0, d[e], e, a)) {
        b = e;
        break a;
      }
    }

    b = -1;
  }

  return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
}

function qa(a) {
  return Array.prototype.concat.apply([], arguments);
}

function ra(a) {
  var b = a.length;

  if (0 < b) {
    var c = Array(b);

    for (var d = 0; d < b; d++) {
      c[d] = a[d];
    }

    return c;
  }

  return [];
}

function sa(a) {
  return /^[\s\xa0]*$/.test(a);
}

var ta = String.prototype.trim ? function (a) {
  return a.trim();
} : function (a) {
  return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};

function index_esm2017_w(a, b) {
  return -1 != a.indexOf(b);
}

function ua(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}

var index_esm2017_x;

a: {
  var va = index_esm2017_l.navigator;

  if (va) {
    var wa = va.userAgent;

    if (wa) {
      index_esm2017_x = wa;
      break a;
    }
  }

  index_esm2017_x = "";
}

function xa(a, b, c) {
  for (var d in a) {
    b.call(c, a[d], d, a);
  }
}

function ya(a) {
  var b = {};

  for (var c in a) {
    b[c] = a[c];
  }

  return b;
}

var za = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

function Aa(a, b) {
  var c, d;

  for (var e = 1; e < arguments.length; e++) {
    d = arguments[e];

    for (c in d) {
      a[c] = d[c];
    }

    for (var f = 0; f < za.length; f++) {
      c = za[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
  }
}

function Ca(a) {
  Ca[" "](a);
  return a;
}

Ca[" "] = aa;

function Fa(a) {
  var b = Ga;
  return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9);
}

var Ha = index_esm2017_w(index_esm2017_x, "Opera"),
    index_esm2017_y = index_esm2017_w(index_esm2017_x, "Trident") || index_esm2017_w(index_esm2017_x, "MSIE"),
    Ia = index_esm2017_w(index_esm2017_x, "Edge"),
    Ja = Ia || index_esm2017_y,
    Ka = index_esm2017_w(index_esm2017_x, "Gecko") && !(index_esm2017_w(index_esm2017_x.toLowerCase(), "webkit") && !index_esm2017_w(index_esm2017_x, "Edge")) && !(index_esm2017_w(index_esm2017_x, "Trident") || index_esm2017_w(index_esm2017_x, "MSIE")) && !index_esm2017_w(index_esm2017_x, "Edge"),
    La = index_esm2017_w(index_esm2017_x.toLowerCase(), "webkit") && !index_esm2017_w(index_esm2017_x, "Edge");

function Ma() {
  var a = index_esm2017_l.document;
  return a ? a.documentMode : void 0;
}

var Na;

a: {
  var Oa = "",
      Pa = function () {
    var a = index_esm2017_x;
    if (Ka) return /rv:([^\);]+)(\)|;)/.exec(a);
    if (Ia) return /Edge\/([\d\.]+)/.exec(a);
    if (index_esm2017_y) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
    if (La) return /WebKit\/(\S+)/.exec(a);
    if (Ha) return /(?:Version)[ \/]?(\S+)/.exec(a);
  }();

  Pa && (Oa = Pa ? Pa[1] : "");

  if (index_esm2017_y) {
    var Qa = Ma();

    if (null != Qa && Qa > parseFloat(Oa)) {
      Na = String(Qa);
      break a;
    }
  }

  Na = Oa;
}

var Ga = {};

function Ra() {
  return Fa(function () {
    var a = 0;
    var b = ta(String(Na)).split("."),
        c = ta("9").split("."),
        d = Math.max(b.length, c.length);

    for (var h = 0; 0 == a && h < d; h++) {
      var e = b[h] || "",
          f = c[h] || "";

      do {
        e = /(\d*)(\D*)(.*)/.exec(e) || ["", "", "", ""];
        f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
        if (0 == e[0].length && 0 == f[0].length) break;
        a = ua(0 == e[1].length ? 0 : parseInt(e[1], 10), 0 == f[1].length ? 0 : parseInt(f[1], 10)) || ua(0 == e[2].length, 0 == f[2].length) || ua(e[2], f[2]);
        e = e[3];
        f = f[3];
      } while (0 == a);
    }

    return 0 <= a;
  });
}

var Sa;

if (index_esm2017_l.document && index_esm2017_y) {
  var Ta = Ma();
  Sa = Ta ? Ta : parseInt(Na, 10) || void 0;
} else Sa = void 0;

var Ua = Sa;

var Va = function () {
  if (!index_esm2017_l.addEventListener || !Object.defineProperty) return !1;
  var a = !1,
      b = Object.defineProperty({}, "passive", {
    get: function get() {
      a = !0;
    }
  });

  try {
    index_esm2017_l.addEventListener("test", aa, b), index_esm2017_l.removeEventListener("test", aa, b);
  } catch (c) {}

  return a;
}();

function index_esm2017_z(a, b) {
  this.type = a;
  this.g = this.target = b;
  this.defaultPrevented = !1;
}

index_esm2017_z.prototype.h = function () {
  this.defaultPrevented = !0;
};

function index_esm2017_A(a, b) {
  index_esm2017_z.call(this, a ? a.type : "");
  this.relatedTarget = this.g = this.target = null;
  this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
  this.key = "";
  this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
  this.state = null;
  this.pointerId = 0;
  this.pointerType = "";
  this.i = null;

  if (a) {
    var c = this.type = a.type,
        d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
    this.target = a.target || a.srcElement;
    this.g = b;

    if (b = a.relatedTarget) {
      if (Ka) {
        a: {
          try {
            Ca(b.nodeName);
            var e = !0;
            break a;
          } catch (f) {}

          e = !1;
        }

        e || (b = null);
      }
    } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);

    this.relatedTarget = b;
    d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
    this.button = a.button;
    this.key = a.key || "";
    this.ctrlKey = a.ctrlKey;
    this.altKey = a.altKey;
    this.shiftKey = a.shiftKey;
    this.metaKey = a.metaKey;
    this.pointerId = a.pointerId || 0;
    this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Wa[a.pointerType] || "";
    this.state = a.state;
    this.i = a;
    a.defaultPrevented && index_esm2017_A.Z.h.call(this);
  }
}

t(index_esm2017_A, index_esm2017_z);
var Wa = {
  2: "touch",
  3: "pen",
  4: "mouse"
};

index_esm2017_A.prototype.h = function () {
  index_esm2017_A.Z.h.call(this);
  var a = this.i;
  a.preventDefault ? a.preventDefault() : a.returnValue = !1;
};

var index_esm2017_B = "closure_listenable_" + (1E6 * Math.random() | 0);
var Xa = 0;

function Ya(a, b, c, d, e) {
  this.listener = a;
  this.proxy = null;
  this.src = b;
  this.type = c;
  this.capture = !!d;
  this.ia = e;
  this.key = ++Xa;
  this.ca = this.fa = !1;
}

function Za(a) {
  a.ca = !0;
  a.listener = null;
  a.proxy = null;
  a.src = null;
  a.ia = null;
}

function $a(a) {
  this.src = a;
  this.g = {};
  this.h = 0;
}

$a.prototype.add = function (a, b, c, d, e) {
  var f = a.toString();
  a = this.g[f];
  a || (a = this.g[f] = [], this.h++);
  var h = ab(a, b, d, e);
  -1 < h ? (b = a[h], c || (b.fa = !1)) : (b = new Ya(b, this.src, f, !!d, e), b.fa = c, a.push(b));
  return b;
};

function bb(a, b) {
  var c = b.type;

  if (c in a.g) {
    var d = a.g[c],
        e = ma(d, b),
        f;
    (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
    f && (Za(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
  }
}

function ab(a, b, c, d) {
  for (var e = 0; e < a.length; ++e) {
    var f = a[e];
    if (!f.ca && f.listener == b && f.capture == !!c && f.ia == d) return e;
  }

  return -1;
}

var cb = "closure_lm_" + (1E6 * Math.random() | 0),
    index_esm2017_db = {};

function fb(a, b, c, d, e) {
  if (d && d.once) return gb(a, b, c, d, e);

  if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++) {
      fb(a, b[f], c, d, e);
    }

    return null;
  }

  c = hb(c);
  return a && a[index_esm2017_B] ? a.N(b, c, index_esm2017_p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !1, d, e);
}

function ib(a, b, c, d, e, f) {
  if (!b) throw Error("Invalid event type");
  var h = index_esm2017_p(e) ? !!e.capture : !!e,
      n = jb(a);
  n || (a[cb] = n = new $a(a));
  c = n.add(b, c, d, h, f);
  if (c.proxy) return c;
  d = kb();
  c.proxy = d;
  d.src = a;
  d.listener = c;
  if (a.addEventListener) Va || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(lb(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
  return c;
}

function kb() {
  function a(c) {
    return b.call(a.src, a.listener, c);
  }

  var b = mb;
  return a;
}

function gb(a, b, c, d, e) {
  if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++) {
      gb(a, b[f], c, d, e);
    }

    return null;
  }

  c = hb(c);
  return a && a[index_esm2017_B] ? a.O(b, c, index_esm2017_p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !0, d, e);
}

function nb(a, b, c, d, e) {
  if (Array.isArray(b)) for (var f = 0; f < b.length; f++) {
    nb(a, b[f], c, d, e);
  } else (d = index_esm2017_p(d) ? !!d.capture : !!d, c = hb(c), a && a[index_esm2017_B]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = ab(f, c, d, e), -1 < c && (Za(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = jb(a)) && (b = a.g[b.toString()], a = -1, b && (a = ab(b, c, d, e)), (c = -1 < a ? b[a] : null) && ob(c));
}

function ob(a) {
  if ("number" !== typeof a && a && !a.ca) {
    var b = a.src;
    if (b && b[index_esm2017_B]) bb(b.i, a);else {
      var c = a.type,
          d = a.proxy;
      b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(lb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
      (c = jb(b)) ? (bb(c, a), 0 == c.h && (c.src = null, b[cb] = null)) : Za(a);
    }
  }
}

function lb(a) {
  return a in index_esm2017_db ? index_esm2017_db[a] : index_esm2017_db[a] = "on" + a;
}

function mb(a, b) {
  if (a.ca) a = !0;else {
    b = new index_esm2017_A(b, this);
    var c = a.listener,
        d = a.ia || a.src;
    a.fa && ob(a);
    a = c.call(d, b);
  }
  return a;
}

function jb(a) {
  a = a[cb];
  return a instanceof $a ? a : null;
}

var pb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);

function hb(a) {
  if ("function" === typeof a) return a;
  a[pb] || (a[pb] = function (b) {
    return a.handleEvent(b);
  });
  return a[pb];
}

function index_esm2017_C() {
  index_esm2017_v.call(this);
  this.i = new $a(this);
  this.P = this;
  this.I = null;
}

t(index_esm2017_C, index_esm2017_v);
index_esm2017_C.prototype[index_esm2017_B] = !0;

index_esm2017_C.prototype.removeEventListener = function (a, b, c, d) {
  nb(this, a, b, c, d);
};

function index_esm2017_D(a, b) {
  var c,
      d = a.I;
  if (d) for (c = []; d; d = d.I) {
    c.push(d);
  }
  a = a.P;
  d = b.type || b;
  if ("string" === typeof b) b = new index_esm2017_z(b, a);else if (b instanceof index_esm2017_z) b.target = b.target || a;else {
    var e = b;
    b = new index_esm2017_z(d, a);
    Aa(b, e);
  }
  e = !0;
  if (c) for (var f = c.length - 1; 0 <= f; f--) {
    var h = b.g = c[f];
    e = qb(h, d, !0, b) && e;
  }
  h = b.g = a;
  e = qb(h, d, !0, b) && e;
  e = qb(h, d, !1, b) && e;
  if (c) for (f = 0; f < c.length; f++) {
    h = b.g = c[f], e = qb(h, d, !1, b) && e;
  }
}

index_esm2017_C.prototype.M = function () {
  index_esm2017_C.Z.M.call(this);

  if (this.i) {
    var a = this.i,
        c;

    for (c in a.g) {
      for (var d = a.g[c], e = 0; e < d.length; e++) {
        Za(d[e]);
      }

      delete a.g[c];
      a.h--;
    }
  }

  this.I = null;
};

index_esm2017_C.prototype.N = function (a, b, c, d) {
  return this.i.add(String(a), b, !1, c, d);
};

index_esm2017_C.prototype.O = function (a, b, c, d) {
  return this.i.add(String(a), b, !0, c, d);
};

function qb(a, b, c, d) {
  b = a.i.g[String(b)];
  if (!b) return !0;
  b = b.concat();

  for (var e = !0, f = 0; f < b.length; ++f) {
    var h = b[f];

    if (h && !h.ca && h.capture == c) {
      var n = h.listener,
          u = h.ia || h.src;
      h.fa && bb(a.i, h);
      e = !1 !== n.call(u, d) && e;
    }
  }

  return e && !d.defaultPrevented;
}

var rb = index_esm2017_l.JSON.stringify;

function sb() {
  var a = tb;
  var b = null;
  a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
  return b;
}

var ub = /*#__PURE__*/function () {
  function ub() {
    dist_index_esm2017_classCallCheck(this, ub);

    this.h = this.g = null;
  }

  dist_index_esm2017_createClass(ub, [{
    key: "add",
    value: function add(a, b) {
      var c = vb.get();
      c.set(a, b);
      this.h ? this.h.next = c : this.g = c;
      this.h = c;
    }
  }]);

  return ub;
}();

var vb = new ( /*#__PURE__*/function () {
  function _class(a, b) {
    dist_index_esm2017_classCallCheck(this, _class);

    this.i = a;
    this.j = b;
    this.h = 0;
    this.g = null;
  }

  dist_index_esm2017_createClass(_class, [{
    key: "get",
    value: function get() {
      var a;
      0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i();
      return a;
    }
  }]);

  return _class;
}())(function () {
  return new wb();
}, function (a) {
  return a.reset();
});

var wb = /*#__PURE__*/function () {
  function wb() {
    dist_index_esm2017_classCallCheck(this, wb);

    this.next = this.g = this.h = null;
  }

  dist_index_esm2017_createClass(wb, [{
    key: "set",
    value: function set(a, b) {
      this.h = a;
      this.g = b;
      this.next = null;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.next = this.g = this.h = null;
    }
  }]);

  return wb;
}();

function yb(a) {
  index_esm2017_l.setTimeout(function () {
    throw a;
  }, 0);
}

function zb(a, b) {
  Ab || Bb();
  Cb || (Ab(), Cb = !0);
  tb.add(a, b);
}

var Ab;

function Bb() {
  var a = index_esm2017_l.Promise.resolve(void 0);

  Ab = function Ab() {
    a.then(Db);
  };
}

var Cb = !1,
    tb = new ub();

function Db() {
  for (var a; a = sb();) {
    try {
      a.h.call(a.g);
    } catch (c) {
      yb(c);
    }

    var b = vb;
    b.j(a);
    100 > b.h && (b.h++, a.next = b.g, b.g = a);
  }

  Cb = !1;
}

function Eb(a, b) {
  index_esm2017_C.call(this);
  this.h = a || 1;
  this.g = b || index_esm2017_l;
  this.j = index_esm2017_q(this.kb, this);
  this.l = Date.now();
}

t(Eb, index_esm2017_C);
index_esm2017_k = Eb.prototype;
index_esm2017_k.da = !1;
index_esm2017_k.S = null;

index_esm2017_k.kb = function () {
  if (this.da) {
    var a = Date.now() - this.l;
    0 < a && a < .8 * this.h ? this.S = this.g.setTimeout(this.j, this.h - a) : (this.S && (this.g.clearTimeout(this.S), this.S = null), index_esm2017_D(this, "tick"), this.da && (Fb(this), this.start()));
  }
};

index_esm2017_k.start = function () {
  this.da = !0;
  this.S || (this.S = this.g.setTimeout(this.j, this.h), this.l = Date.now());
};

function Fb(a) {
  a.da = !1;
  a.S && (a.g.clearTimeout(a.S), a.S = null);
}

index_esm2017_k.M = function () {
  Eb.Z.M.call(this);
  Fb(this);
  delete this.g;
};

function Gb(a, b, c) {
  if ("function" === typeof a) c && (a = index_esm2017_q(a, c));else if (a && "function" == typeof a.handleEvent) a = index_esm2017_q(a.handleEvent, a);else throw Error("Invalid listener argument");
  return 2147483647 < Number(b) ? -1 : index_esm2017_l.setTimeout(a, b || 0);
}

function Hb(a) {
  a.g = Gb(function () {
    a.g = null;
    a.i && (a.i = !1, Hb(a));
  }, a.j);
  var b = a.h;
  a.h = null;
  a.m.apply(null, b);
}

var Ib = /*#__PURE__*/function (_v) {
  dist_index_esm2017_inherits(Ib, _v);

  var _super = dist_index_esm2017_createSuper(Ib);

  function Ib(a, b) {
    var _this;

    dist_index_esm2017_classCallCheck(this, Ib);

    _this = _super.call(this);
    _this.m = a;
    _this.j = b;
    _this.h = null;
    _this.i = !1;
    _this.g = null;
    return _this;
  }

  dist_index_esm2017_createClass(Ib, [{
    key: "l",
    value: function l(a) {
      this.h = arguments;
      this.g ? this.i = !0 : Hb(this);
    }
  }, {
    key: "M",
    value: function M() {
      index_esm2017_get(dist_index_esm2017_getPrototypeOf(Ib.prototype), "M", this).call(this);

      this.g && (index_esm2017_l.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
    }
  }]);

  return Ib;
}(index_esm2017_v);

function index_esm2017_E(a) {
  index_esm2017_v.call(this);
  this.h = a;
  this.g = {};
}

t(index_esm2017_E, index_esm2017_v);
var Jb = [];

function Kb(a, b, c, d) {
  Array.isArray(c) || (c && (Jb[0] = c.toString()), c = Jb);

  for (var e = 0; e < c.length; e++) {
    var f = fb(b, c[e], d || a.handleEvent, !1, a.h || a);
    if (!f) break;
    a.g[f.key] = f;
  }
}

function Lb(a) {
  xa(a.g, function (b, c) {
    this.g.hasOwnProperty(c) && ob(b);
  }, a);
  a.g = {};
}

index_esm2017_E.prototype.M = function () {
  index_esm2017_E.Z.M.call(this);
  Lb(this);
};

index_esm2017_E.prototype.handleEvent = function () {
  throw Error("EventHandler.handleEvent not implemented");
};

function Mb() {
  this.g = !0;
}

Mb.prototype.Aa = function () {
  this.g = !1;
};

function Nb(a, b, c, d, e, f) {
  a.info(function () {
    if (a.g) {
      if (f) {
        var h = "";

        for (var n = f.split("&"), u = 0; u < n.length; u++) {
          var m = n[u].split("=");

          if (1 < m.length) {
            var r = m[0];
            m = m[1];
            var G = r.split("_");
            h = 2 <= G.length && "type" == G[1] ? h + (r + "=" + m + "&") : h + (r + "=redacted&");
          }
        }
      } else h = null;
    } else h = f;
    return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h;
  });
}

function Ob(a, b, c, d, e, f, h) {
  a.info(function () {
    return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h;
  });
}

function index_esm2017_F(a, b, c, d) {
  a.info(function () {
    return "XMLHTTP TEXT (" + b + "): " + Pb(a, c) + (d ? " " + d : "");
  });
}

function Qb(a, b) {
  a.info(function () {
    return "TIMEOUT: " + b;
  });
}

Mb.prototype.info = function () {};

function Pb(a, b) {
  if (!a.g) return b;
  if (!b) return null;

  try {
    var c = JSON.parse(b);
    if (c) for (a = 0; a < c.length; a++) {
      if (Array.isArray(c[a])) {
        var d = c[a];

        if (!(2 > d.length)) {
          var e = d[1];

          if (Array.isArray(e) && !(1 > e.length)) {
            var f = e[0];
            if ("noop" != f && "stop" != f && "close" != f) for (var h = 1; h < e.length; h++) {
              e[h] = "";
            }
          }
        }
      }
    }
    return rb(c);
  } catch (n) {
    return b;
  }
}

var index_esm2017_H = {},
    Rb = null;

function Sb() {
  return Rb = Rb || new index_esm2017_C();
}

index_esm2017_H.Ma = "serverreachability";

function Tb(a) {
  index_esm2017_z.call(this, index_esm2017_H.Ma, a);
}

t(Tb, index_esm2017_z);

function index_esm2017_I(a) {
  var b = Sb();
  index_esm2017_D(b, new Tb(b, a));
}

index_esm2017_H.STAT_EVENT = "statevent";

function Ub(a, b) {
  index_esm2017_z.call(this, index_esm2017_H.STAT_EVENT, a);
  this.stat = b;
}

t(Ub, index_esm2017_z);

function index_esm2017_J(a) {
  var b = Sb();
  index_esm2017_D(b, new Ub(b, a));
}

index_esm2017_H.Na = "timingevent";

function Vb(a, b) {
  index_esm2017_z.call(this, index_esm2017_H.Na, a);
  this.size = b;
}

t(Vb, index_esm2017_z);

function index_esm2017_K(a, b) {
  if ("function" !== typeof a) throw Error("Fn must not be null and must be a function");
  return index_esm2017_l.setTimeout(function () {
    a();
  }, b);
}

var Wb = {
  NO_ERROR: 0,
  lb: 1,
  yb: 2,
  xb: 3,
  sb: 4,
  wb: 5,
  zb: 6,
  Ja: 7,
  TIMEOUT: 8,
  Cb: 9
};
var Xb = {
  qb: "complete",
  Mb: "success",
  Ka: "error",
  Ja: "abort",
  Eb: "ready",
  Fb: "readystatechange",
  TIMEOUT: "timeout",
  Ab: "incrementaldata",
  Db: "progress",
  tb: "downloadprogress",
  Ub: "uploadprogress"
};

function Yb() {}

Yb.prototype.h = null;

function Zb(a) {
  return a.h || (a.h = a.i());
}

function $b() {}

var index_esm2017_L = {
  OPEN: "a",
  pb: "b",
  Ka: "c",
  Bb: "d"
};

function ac() {
  index_esm2017_z.call(this, "d");
}

t(ac, index_esm2017_z);

function bc() {
  index_esm2017_z.call(this, "c");
}

t(bc, index_esm2017_z);
var cc;

function dc() {}

t(dc, Yb);

dc.prototype.g = function () {
  return new XMLHttpRequest();
};

dc.prototype.i = function () {
  return {};
};

cc = new dc();

function index_esm2017_M(a, b, c, d) {
  this.l = a;
  this.j = b;
  this.m = c;
  this.X = d || 1;
  this.V = new index_esm2017_E(this);
  this.P = ec;
  a = Ja ? 125 : void 0;
  this.W = new Eb(a);
  this.H = null;
  this.i = !1;
  this.s = this.A = this.v = this.K = this.F = this.Y = this.B = null;
  this.D = [];
  this.g = null;
  this.C = 0;
  this.o = this.u = null;
  this.N = -1;
  this.I = !1;
  this.O = 0;
  this.L = null;
  this.aa = this.J = this.$ = this.U = !1;
  this.h = new fc();
}

function fc() {
  this.i = null;
  this.g = "";
  this.h = !1;
}

var ec = 45E3,
    gc = {},
    hc = {};
index_esm2017_k = index_esm2017_M.prototype;

index_esm2017_k.setTimeout = function (a) {
  this.P = a;
};

function ic(a, b, c) {
  a.K = 1;
  a.v = jc(index_esm2017_N(b));
  a.s = c;
  a.U = !0;
  kc(a, null);
}

function kc(a, b) {
  a.F = Date.now();
  lc(a);
  a.A = index_esm2017_N(a.v);
  var c = a.A,
      d = a.X;
  Array.isArray(d) || (d = [String(d)]);
  mc(c.h, "t", d);
  a.C = 0;
  c = a.l.H;
  a.h = new fc();
  a.g = nc(a.l, c ? b : null, !a.s);
  0 < a.O && (a.L = new Ib(index_esm2017_q(a.Ia, a, a.g), a.O));
  Kb(a.V, a.g, "readystatechange", a.gb);
  b = a.H ? ya(a.H) : {};
  a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ea(a.A, a.u, null, b));
  index_esm2017_I(1);
  Nb(a.j, a.u, a.A, a.m, a.X, a.s);
}

index_esm2017_k.gb = function (a) {
  a = a.target;
  var b = this.L;
  b && 3 == index_esm2017_O(a) ? b.l() : this.Ia(a);
};

index_esm2017_k.Ia = function (a) {
  try {
    if (a == this.g) a: {
      var r = index_esm2017_O(this.g);
      var b = this.g.Da();
      var G = this.g.ba();

      if (!(3 > r) && (3 != r || Ja || this.g && (this.h.h || this.g.ga() || oc(this.g)))) {
        this.I || 4 != r || 7 == b || (8 == b || 0 >= G ? index_esm2017_I(3) : index_esm2017_I(2));
        pc(this);
        var c = this.g.ba();
        this.N = c;

        b: if (qc(this)) {
          var d = oc(this.g);
          a = "";
          var e = d.length,
              f = 4 == index_esm2017_O(this.g);

          if (!this.h.i) {
            if ("undefined" === typeof TextDecoder) {
              index_esm2017_P(this);
              rc(this);
              var h = "";
              break b;
            }

            this.h.i = new index_esm2017_l.TextDecoder();
          }

          for (b = 0; b < e; b++) {
            this.h.h = !0, a += this.h.i.decode(d[b], {
              stream: f && b == e - 1
            });
          }

          d.splice(0, e);
          this.h.g += a;
          this.C = 0;
          h = this.h.g;
        } else h = this.g.ga();

        this.i = 200 == c;
        Ob(this.j, this.u, this.A, this.m, this.X, r, c);

        if (this.i) {
          if (this.$ && !this.J) {
            b: {
              if (this.g) {
                var n,
                    u = this.g;

                if ((n = u.g ? u.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(n)) {
                  var m = n;
                  break b;
                }
              }

              m = null;
            }

            if (c = m) index_esm2017_F(this.j, this.m, c, "Initial handshake response via X-HTTP-Initial-Response"), this.J = !0, sc(this, c);else {
              this.i = !1;
              this.o = 3;
              index_esm2017_J(12);
              index_esm2017_P(this);
              rc(this);
              break a;
            }
          }

          this.U ? (tc(this, r, h), Ja && this.i && 3 == r && (Kb(this.V, this.W, "tick", this.fb), this.W.start())) : (index_esm2017_F(this.j, this.m, h, null), sc(this, h));
          4 == r && index_esm2017_P(this);
          this.i && !this.I && (4 == r ? uc(this.l, this) : (this.i = !1, lc(this)));
        } else 400 == c && 0 < h.indexOf("Unknown SID") ? (this.o = 3, index_esm2017_J(12)) : (this.o = 0, index_esm2017_J(13)), index_esm2017_P(this), rc(this);
      }
    }
  } catch (r) {} finally {}
};

function qc(a) {
  return a.g ? "GET" == a.u && 2 != a.K && a.l.Ba : !1;
}

function tc(a, b, c) {
  var d = !0,
      e;

  for (; !a.I && a.C < c.length;) {
    if (e = vc(a, c), e == hc) {
      4 == b && (a.o = 4, index_esm2017_J(14), d = !1);
      index_esm2017_F(a.j, a.m, null, "[Incomplete Response]");
      break;
    } else if (e == gc) {
      a.o = 4;
      index_esm2017_J(15);
      index_esm2017_F(a.j, a.m, c, "[Invalid Chunk]");
      d = !1;
      break;
    } else index_esm2017_F(a.j, a.m, e, null), sc(a, e);
  }

  qc(a) && e != hc && e != gc && (a.h.g = "", a.C = 0);
  4 != b || 0 != c.length || a.h.h || (a.o = 1, index_esm2017_J(16), d = !1);
  a.i = a.i && d;
  d ? 0 < c.length && !a.aa && (a.aa = !0, b = a.l, b.g == a && b.$ && !b.L && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.L = !0, index_esm2017_J(11))) : (index_esm2017_F(a.j, a.m, c, "[Invalid Chunked Response]"), index_esm2017_P(a), rc(a));
}

index_esm2017_k.fb = function () {
  if (this.g) {
    var a = index_esm2017_O(this.g),
        b = this.g.ga();
    this.C < b.length && (pc(this), tc(this, a, b), this.i && 4 != a && lc(this));
  }
};

function vc(a, b) {
  var c = a.C,
      d = b.indexOf("\n", c);
  if (-1 == d) return hc;
  c = Number(b.substring(c, d));
  if (isNaN(c)) return gc;
  d += 1;
  if (d + c > b.length) return hc;
  b = b.substr(d, c);
  a.C = d + c;
  return b;
}

index_esm2017_k.cancel = function () {
  this.I = !0;
  index_esm2017_P(this);
};

function lc(a) {
  a.Y = Date.now() + a.P;
  xc(a, a.P);
}

function xc(a, b) {
  if (null != a.B) throw Error("WatchDog timer not null");
  a.B = index_esm2017_K(index_esm2017_q(a.eb, a), b);
}

function pc(a) {
  a.B && (index_esm2017_l.clearTimeout(a.B), a.B = null);
}

index_esm2017_k.eb = function () {
  this.B = null;
  var a = Date.now();
  0 <= a - this.Y ? (Qb(this.j, this.A), 2 != this.K && (index_esm2017_I(3), index_esm2017_J(17)), index_esm2017_P(this), this.o = 2, rc(this)) : xc(this, this.Y - a);
};

function rc(a) {
  0 == a.l.G || a.I || uc(a.l, a);
}

function index_esm2017_P(a) {
  pc(a);
  var b = a.L;
  b && "function" == typeof b.na && b.na();
  a.L = null;
  Fb(a.W);
  Lb(a.V);
  a.g && (b = a.g, a.g = null, b.abort(), b.na());
}

function sc(a, b) {
  try {
    var c = a.l;
    if (0 != c.G && (c.g == a || yc(c.i, a))) if (c.I = a.N, !a.J && yc(c.i, a) && 3 == c.G) {
      try {
        var d = c.Ca.g.parse(b);
      } catch (m) {
        d = null;
      }

      if (Array.isArray(d) && 3 == d.length) {
        var e = d;
        if (0 == e[0]) a: {
          if (!c.u) {
            if (c.g) if (c.g.F + 3E3 < a.F) zc(c), Ac(c);else break a;
            Bc(c);
            index_esm2017_J(18);
          }
        } else c.ta = e[1], 0 < c.ta - c.U && 37500 > e[2] && c.N && 0 == c.A && !c.v && (c.v = index_esm2017_K(index_esm2017_q(c.ab, c), 6E3));

        if (1 >= Cc(c.i) && c.ka) {
          try {
            c.ka();
          } catch (m) {}

          c.ka = void 0;
        }
      } else index_esm2017_Q(c, 11);
    } else if ((a.J || c.g == a) && zc(c), !sa(b)) for (e = c.Ca.g.parse(b), b = 0; b < e.length; b++) {
      var m = e[b];
      c.U = m[0];
      m = m[1];
      if (2 == c.G) {
        if ("c" == m[0]) {
          c.J = m[1];
          c.la = m[2];
          var r = m[3];
          null != r && (c.ma = r, c.h.info("VER=" + c.ma));
          var G = m[4];
          null != G && (c.za = G, c.h.info("SVER=" + c.za));
          var Da = m[5];
          null != Da && "number" === typeof Da && 0 < Da && (d = 1.5 * Da, c.K = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
          d = c;
          var ca = a.g;

          if (ca) {
            var Ea = ca.g ? ca.g.getResponseHeader("X-Client-Wire-Protocol") : null;

            if (Ea) {
              var f = d.i;
              !f.g && (index_esm2017_w(Ea, "spdy") || index_esm2017_w(Ea, "quic") || index_esm2017_w(Ea, "h2")) && (f.j = f.l, f.g = new Set(), f.h && (Dc(f, f.h), f.h = null));
            }

            if (d.D) {
              var xb = ca.g ? ca.g.getResponseHeader("X-HTTP-Session-Id") : null;
              xb && (d.sa = xb, index_esm2017_R(d.F, d.D, xb));
            }
          }

          c.G = 3;
          c.j && c.j.xa();
          c.$ && (c.O = Date.now() - a.F, c.h.info("Handshake RTT: " + c.O + "ms"));
          d = c;
          var h = a;
          d.oa = Ec(d, d.H ? d.la : null, d.W);

          if (h.J) {
            Fc(d.i, h);
            var n = h,
                u = d.K;
            u && n.setTimeout(u);
            n.B && (pc(n), lc(n));
            d.g = h;
          } else Gc(d);

          0 < c.l.length && Hc(c);
        } else "stop" != m[0] && "close" != m[0] || index_esm2017_Q(c, 7);
      } else 3 == c.G && ("stop" == m[0] || "close" == m[0] ? "stop" == m[0] ? index_esm2017_Q(c, 7) : Ic(c) : "noop" != m[0] && c.j && c.j.wa(m), c.A = 0);
    }
    index_esm2017_I(4);
  } catch (m) {}
}

function Jc(a) {
  if (a.R && "function" == typeof a.R) return a.R();
  if ("string" === typeof a) return a.split("");

  if (ba(a)) {
    for (var b = [], c = a.length, d = 0; d < c; d++) {
      b.push(a[d]);
    }

    return b;
  }

  b = [];
  c = 0;

  for (d in a) {
    b[c++] = a[d];
  }

  return b;
}

function Kc(a, b) {
  if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (ba(a) || "string" === typeof a) na(a, b, void 0);else {
    if (a.T && "function" == typeof a.T) var c = a.T();else if (a.R && "function" == typeof a.R) c = void 0;else if (ba(a) || "string" === typeof a) {
      c = [];

      for (var d = a.length, e = 0; e < d; e++) {
        c.push(e);
      }
    } else for (e in c = [], d = 0, a) {
      c[d++] = e;
    }
    d = Jc(a);
    e = d.length;

    for (var f = 0; f < e; f++) {
      b.call(void 0, d[f], c && c[f], a);
    }
  }
}

function index_esm2017_S(a, b) {
  this.h = {};
  this.g = [];
  this.i = 0;
  var c = arguments.length;

  if (1 < c) {
    if (c % 2) throw Error("Uneven number of arguments");

    for (var d = 0; d < c; d += 2) {
      this.set(arguments[d], arguments[d + 1]);
    }
  } else if (a) if (a instanceof index_esm2017_S) for (c = a.T(), d = 0; d < c.length; d++) {
    this.set(c[d], a.get(c[d]));
  } else for (d in a) {
    this.set(d, a[d]);
  }
}

index_esm2017_k = index_esm2017_S.prototype;

index_esm2017_k.R = function () {
  Lc(this);

  for (var a = [], b = 0; b < this.g.length; b++) {
    a.push(this.h[this.g[b]]);
  }

  return a;
};

index_esm2017_k.T = function () {
  Lc(this);
  return this.g.concat();
};

function Lc(a) {
  if (a.i != a.g.length) {
    for (var b = 0, c = 0; b < a.g.length;) {
      var d = a.g[b];
      index_esm2017_T(a.h, d) && (a.g[c++] = d);
      b++;
    }

    a.g.length = c;
  }

  if (a.i != a.g.length) {
    var e = {};

    for (c = b = 0; b < a.g.length;) {
      d = a.g[b], index_esm2017_T(e, d) || (a.g[c++] = d, e[d] = 1), b++;
    }

    a.g.length = c;
  }
}

index_esm2017_k.get = function (a, b) {
  return index_esm2017_T(this.h, a) ? this.h[a] : b;
};

index_esm2017_k.set = function (a, b) {
  index_esm2017_T(this.h, a) || (this.i++, this.g.push(a));
  this.h[a] = b;
};

index_esm2017_k.forEach = function (a, b) {
  for (var c = this.T(), d = 0; d < c.length; d++) {
    var e = c[d],
        f = this.get(e);
    a.call(b, f, e, this);
  }
};

function index_esm2017_T(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}

var Mc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;

function Nc(a, b) {
  if (a) {
    a = a.split("&");

    for (var c = 0; c < a.length; c++) {
      var d = a[c].indexOf("="),
          e = null;

      if (0 <= d) {
        var f = a[c].substring(0, d);
        e = a[c].substring(d + 1);
      } else f = a[c];

      b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
    }
  }
}

function index_esm2017_U(a, b) {
  this.i = this.s = this.j = "";
  this.m = null;
  this.o = this.l = "";
  this.g = !1;

  if (a instanceof index_esm2017_U) {
    this.g = void 0 !== b ? b : a.g;
    Oc(this, a.j);
    this.s = a.s;
    Pc(this, a.i);
    Qc(this, a.m);
    this.l = a.l;
    b = a.h;
    var c = new Rc();
    c.i = b.i;
    b.g && (c.g = new index_esm2017_S(b.g), c.h = b.h);
    Sc(this, c);
    this.o = a.o;
  } else a && (c = String(a).match(Mc)) ? (this.g = !!b, Oc(this, c[1] || "", !0), this.s = Tc(c[2] || ""), Pc(this, c[3] || "", !0), Qc(this, c[4]), this.l = Tc(c[5] || "", !0), Sc(this, c[6] || "", !0), this.o = Tc(c[7] || "")) : (this.g = !!b, this.h = new Rc(null, this.g));
}

index_esm2017_U.prototype.toString = function () {
  var a = [],
      b = this.j;
  b && a.push(Uc(b, Vc, !0), ":");
  var c = this.i;
  if (c || "file" == b) a.push("//"), (b = this.s) && a.push(Uc(b, Vc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c));
  if (c = this.l) this.i && "/" != c.charAt(0) && a.push("/"), a.push(Uc(c, "/" == c.charAt(0) ? Wc : Xc, !0));
  (c = this.h.toString()) && a.push("?", c);
  (c = this.o) && a.push("#", Uc(c, Yc));
  return a.join("");
};

function index_esm2017_N(a) {
  return new index_esm2017_U(a);
}

function Oc(a, b, c) {
  a.j = c ? Tc(b, !0) : b;
  a.j && (a.j = a.j.replace(/:$/, ""));
}

function Pc(a, b, c) {
  a.i = c ? Tc(b, !0) : b;
}

function Qc(a, b) {
  if (b) {
    b = Number(b);
    if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
    a.m = b;
  } else a.m = null;
}

function Sc(a, b, c) {
  b instanceof Rc ? (a.h = b, Zc(a.h, a.g)) : (c || (b = Uc(b, $c)), a.h = new Rc(b, a.g));
}

function index_esm2017_R(a, b, c) {
  a.h.set(b, c);
}

function jc(a) {
  index_esm2017_R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
  return a;
}

function ad(a) {
  return a instanceof index_esm2017_U ? index_esm2017_N(a) : new index_esm2017_U(a, void 0);
}

function bd(a, b, c, d) {
  var e = new index_esm2017_U(null, void 0);
  a && Oc(e, a);
  b && Pc(e, b);
  c && Qc(e, c);
  d && (e.l = d);
  return e;
}

function Tc(a, b) {
  return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}

function Uc(a, b, c) {
  return "string" === typeof a ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}

function cd(a) {
  a = a.charCodeAt(0);
  return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}

var Vc = /[#\/\?@]/g,
    Xc = /[#\?:]/g,
    Wc = /[#\?]/g,
    $c = /[#\?@]/g,
    Yc = /#/g;

function Rc(a, b) {
  this.h = this.g = null;
  this.i = a || null;
  this.j = !!b;
}

function index_esm2017_V(a) {
  a.g || (a.g = new index_esm2017_S(), a.h = 0, a.i && Nc(a.i, function (b, c) {
    a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
  }));
}

index_esm2017_k = Rc.prototype;

index_esm2017_k.add = function (a, b) {
  index_esm2017_V(this);
  this.i = null;
  a = index_esm2017_W(this, a);
  var c = this.g.get(a);
  c || this.g.set(a, c = []);
  c.push(b);
  this.h += 1;
  return this;
};

function dd(a, b) {
  index_esm2017_V(a);
  b = index_esm2017_W(a, b);
  index_esm2017_T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, index_esm2017_T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && Lc(a)));
}

function ed(a, b) {
  index_esm2017_V(a);
  b = index_esm2017_W(a, b);
  return index_esm2017_T(a.g.h, b);
}

index_esm2017_k.forEach = function (a, b) {
  index_esm2017_V(this);
  this.g.forEach(function (c, d) {
    na(c, function (e) {
      a.call(b, e, d, this);
    }, this);
  }, this);
};

index_esm2017_k.T = function () {
  index_esm2017_V(this);

  for (var a = this.g.R(), b = this.g.T(), c = [], d = 0; d < b.length; d++) {
    for (var e = a[d], f = 0; f < e.length; f++) {
      c.push(b[d]);
    }
  }

  return c;
};

index_esm2017_k.R = function (a) {
  index_esm2017_V(this);
  var b = [];
  if ("string" === typeof a) ed(this, a) && (b = qa(b, this.g.get(index_esm2017_W(this, a))));else {
    a = this.g.R();

    for (var c = 0; c < a.length; c++) {
      b = qa(b, a[c]);
    }
  }
  return b;
};

index_esm2017_k.set = function (a, b) {
  index_esm2017_V(this);
  this.i = null;
  a = index_esm2017_W(this, a);
  ed(this, a) && (this.h -= this.g.get(a).length);
  this.g.set(a, [b]);
  this.h += 1;
  return this;
};

index_esm2017_k.get = function (a, b) {
  if (!a) return b;
  a = this.R(a);
  return 0 < a.length ? String(a[0]) : b;
};

function mc(a, b, c) {
  dd(a, b);
  0 < c.length && (a.i = null, a.g.set(index_esm2017_W(a, b), ra(c)), a.h += c.length);
}

index_esm2017_k.toString = function () {
  if (this.i) return this.i;
  if (!this.g) return "";

  for (var a = [], b = this.g.T(), c = 0; c < b.length; c++) {
    var d = b[c],
        e = encodeURIComponent(String(d));
    d = this.R(d);

    for (var f = 0; f < d.length; f++) {
      var h = e;
      "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
      a.push(h);
    }
  }

  return this.i = a.join("&");
};

function index_esm2017_W(a, b) {
  b = String(b);
  a.j && (b = b.toLowerCase());
  return b;
}

function Zc(a, b) {
  b && !a.j && (index_esm2017_V(a), a.i = null, a.g.forEach(function (c, d) {
    var e = d.toLowerCase();
    d != e && (dd(this, d), mc(this, e, c));
  }, a));
  a.j = b;
}

var fd = /*#__PURE__*/dist_index_esm2017_createClass(function fd(a, b) {
  dist_index_esm2017_classCallCheck(this, fd);

  this.h = a;
  this.g = b;
});

function gd(a) {
  this.l = a || hd;
  index_esm2017_l.PerformanceNavigationTiming ? (a = index_esm2017_l.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(index_esm2017_l.g && index_esm2017_l.g.Ea && index_esm2017_l.g.Ea() && index_esm2017_l.g.Ea().Zb);
  this.j = a ? this.l : 1;
  this.g = null;
  1 < this.j && (this.g = new Set());
  this.h = null;
  this.i = [];
}

var hd = 10;

function id(a) {
  return a.h ? !0 : a.g ? a.g.size >= a.j : !1;
}

function Cc(a) {
  return a.h ? 1 : a.g ? a.g.size : 0;
}

function yc(a, b) {
  return a.h ? a.h == b : a.g ? a.g.has(b) : !1;
}

function Dc(a, b) {
  a.g ? a.g.add(b) : a.h = b;
}

function Fc(a, b) {
  a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g["delete"](b);
}

gd.prototype.cancel = function () {
  this.i = jd(this);
  if (this.h) this.h.cancel(), this.h = null;else if (this.g && 0 !== this.g.size) {
    var _iterator = dist_index_esm2017_createForOfIteratorHelper(this.g.values()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var a = _step.value;
        a.cancel();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    this.g.clear();
  }
};

function jd(a) {
  if (null != a.h) return a.i.concat(a.h.D);

  if (null != a.g && 0 !== a.g.size) {
    var b = a.i;

    var _iterator2 = dist_index_esm2017_createForOfIteratorHelper(a.g.values()),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var c = _step2.value;
        b = b.concat(c.D);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return b;
  }

  return ra(a.i);
}

function kd() {}

kd.prototype.stringify = function (a) {
  return index_esm2017_l.JSON.stringify(a, void 0);
};

kd.prototype.parse = function (a) {
  return index_esm2017_l.JSON.parse(a, void 0);
};

function ld() {
  this.g = new kd();
}

function md(a, b, c) {
  var d = c || "";

  try {
    Kc(a, function (e, f) {
      var h = e;
      index_esm2017_p(e) && (h = rb(e));
      b.push(d + f + "=" + encodeURIComponent(h));
    });
  } catch (e) {
    throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
  }
}

function nd(a, b) {
  var c = new Mb();

  if (index_esm2017_l.Image) {
    var d = new Image();
    d.onload = ja(od, c, d, "TestLoadImage: loaded", !0, b);
    d.onerror = ja(od, c, d, "TestLoadImage: error", !1, b);
    d.onabort = ja(od, c, d, "TestLoadImage: abort", !1, b);
    d.ontimeout = ja(od, c, d, "TestLoadImage: timeout", !1, b);
    index_esm2017_l.setTimeout(function () {
      if (d.ontimeout) d.ontimeout();
    }, 1E4);
    d.src = a;
  } else b(!1);
}

function od(a, b, c, d, e) {
  try {
    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
  } catch (f) {}
}

function pd(a) {
  this.l = a.$b || null;
  this.j = a.ib || !1;
}

t(pd, Yb);

pd.prototype.g = function () {
  return new qd(this.l, this.j);
};

pd.prototype.i = function (a) {
  return function () {
    return a;
  };
}({});

function qd(a, b) {
  index_esm2017_C.call(this);
  this.D = a;
  this.u = b;
  this.m = void 0;
  this.readyState = rd;
  this.status = 0;
  this.responseType = this.responseText = this.response = this.statusText = "";
  this.onreadystatechange = null;
  this.v = new Headers();
  this.h = null;
  this.C = "GET";
  this.B = "";
  this.g = !1;
  this.A = this.j = this.l = null;
}

t(qd, index_esm2017_C);
var rd = 0;
index_esm2017_k = qd.prototype;

index_esm2017_k.open = function (a, b) {
  if (this.readyState != rd) throw this.abort(), Error("Error reopening a connection");
  this.C = a;
  this.B = b;
  this.readyState = 1;
  sd(this);
};

index_esm2017_k.send = function (a) {
  if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
  this.g = !0;
  var b = {
    headers: this.v,
    method: this.C,
    credentials: this.m,
    cache: void 0
  };
  a && (b.body = a);
  (this.D || index_esm2017_l).fetch(new Request(this.B, b)).then(this.Va.bind(this), this.ha.bind(this));
};

index_esm2017_k.abort = function () {
  this.response = this.responseText = "";
  this.v = new Headers();
  this.status = 0;
  this.j && this.j.cancel("Request was aborted.");
  1 <= this.readyState && this.g && 4 != this.readyState && (this.g = !1, td(this));
  this.readyState = rd;
};

index_esm2017_k.Va = function (a) {
  if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, sd(this)), this.g && (this.readyState = 3, sd(this), this.g))) if ("arraybuffer" === this.responseType) a.arrayBuffer().then(this.Ta.bind(this), this.ha.bind(this));else if ("undefined" !== typeof index_esm2017_l.ReadableStream && "body" in a) {
    this.j = a.body.getReader();

    if (this.u) {
      if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
      this.response = [];
    } else this.response = this.responseText = "", this.A = new TextDecoder();

    ud(this);
  } else a.text().then(this.Ua.bind(this), this.ha.bind(this));
};

function ud(a) {
  a.j.read().then(a.Sa.bind(a))["catch"](a.ha.bind(a));
}

index_esm2017_k.Sa = function (a) {
  if (this.g) {
    if (this.u && a.value) this.response.push(a.value);else if (!this.u) {
      var b = a.value ? a.value : new Uint8Array(0);
      if (b = this.A.decode(b, {
        stream: !a.done
      })) this.response = this.responseText += b;
    }
    a.done ? td(this) : sd(this);
    3 == this.readyState && ud(this);
  }
};

index_esm2017_k.Ua = function (a) {
  this.g && (this.response = this.responseText = a, td(this));
};

index_esm2017_k.Ta = function (a) {
  this.g && (this.response = a, td(this));
};

index_esm2017_k.ha = function () {
  this.g && td(this);
};

function td(a) {
  a.readyState = 4;
  a.l = null;
  a.j = null;
  a.A = null;
  sd(a);
}

index_esm2017_k.setRequestHeader = function (a, b) {
  this.v.append(a, b);
};

index_esm2017_k.getResponseHeader = function (a) {
  return this.h ? this.h.get(a.toLowerCase()) || "" : "";
};

index_esm2017_k.getAllResponseHeaders = function () {
  if (!this.h) return "";
  var a = [],
      b = this.h.entries();

  for (var c = b.next(); !c.done;) {
    c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
  }

  return a.join("\r\n");
};

function sd(a) {
  a.onreadystatechange && a.onreadystatechange.call(a);
}

Object.defineProperty(qd.prototype, "withCredentials", {
  get: function get() {
    return "include" === this.m;
  },
  set: function set(a) {
    this.m = a ? "include" : "same-origin";
  }
});
var vd = index_esm2017_l.JSON.parse;

function index_esm2017_X(a) {
  index_esm2017_C.call(this);
  this.headers = new index_esm2017_S();
  this.u = a || null;
  this.h = !1;
  this.C = this.g = null;
  this.H = "";
  this.m = 0;
  this.j = "";
  this.l = this.F = this.v = this.D = !1;
  this.B = 0;
  this.A = null;
  this.J = wd;
  this.K = this.L = !1;
}

t(index_esm2017_X, index_esm2017_C);
var wd = "",
    xd = /^https?$/i,
    yd = ["POST", "PUT"];
index_esm2017_k = index_esm2017_X.prototype;

index_esm2017_k.ea = function (a, b, c, d) {
  if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
  b = b ? b.toUpperCase() : "GET";
  this.H = a;
  this.j = "";
  this.m = 0;
  this.D = !1;
  this.h = !0;
  this.g = this.u ? this.u.g() : cc.g();
  this.C = this.u ? Zb(this.u) : Zb(cc);
  this.g.onreadystatechange = index_esm2017_q(this.Fa, this);

  try {
    this.F = !0, this.g.open(b, String(a), !0), this.F = !1;
  } catch (f) {
    zd(this, f);
    return;
  }

  a = c || "";
  var e = new index_esm2017_S(this.headers);
  d && Kc(d, function (f, h) {
    e.set(h, f);
  });
  d = oa(e.T());
  c = index_esm2017_l.FormData && a instanceof index_esm2017_l.FormData;
  !(0 <= ma(yd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
  e.forEach(function (f, h) {
    this.g.setRequestHeader(h, f);
  }, this);
  this.J && (this.g.responseType = this.J);
  "withCredentials" in this.g && this.g.withCredentials !== this.L && (this.g.withCredentials = this.L);

  try {
    Ad(this), 0 < this.B && ((this.K = Bd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = index_esm2017_q(this.pa, this)) : this.A = Gb(this.pa, this.B, this)), this.v = !0, this.g.send(a), this.v = !1;
  } catch (f) {
    zd(this, f);
  }
};

function Bd(a) {
  return index_esm2017_y && Ra() && "number" === typeof a.timeout && void 0 !== a.ontimeout;
}

function pa(a) {
  return "content-type" == a.toLowerCase();
}

index_esm2017_k.pa = function () {
  "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, index_esm2017_D(this, "timeout"), this.abort(8));
};

function zd(a, b) {
  a.h = !1;
  a.g && (a.l = !0, a.g.abort(), a.l = !1);
  a.j = b;
  a.m = 5;
  Cd(a);
  Dd(a);
}

function Cd(a) {
  a.D || (a.D = !0, index_esm2017_D(a, "complete"), index_esm2017_D(a, "error"));
}

index_esm2017_k.abort = function (a) {
  this.g && this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1, this.m = a || 7, index_esm2017_D(this, "complete"), index_esm2017_D(this, "abort"), Dd(this));
};

index_esm2017_k.M = function () {
  this.g && (this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1), Dd(this, !0));
  index_esm2017_X.Z.M.call(this);
};

index_esm2017_k.Fa = function () {
  this.s || (this.F || this.v || this.l ? Ed(this) : this.cb());
};

index_esm2017_k.cb = function () {
  Ed(this);
};

function Ed(a) {
  if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != index_esm2017_O(a) || 2 != a.ba())) if (a.v && 4 == index_esm2017_O(a)) Gb(a.Fa, 0, a);else if (index_esm2017_D(a, "readystatechange"), 4 == index_esm2017_O(a)) {
    a.h = !1;

    try {
      var n = a.ba();

      a: switch (n) {
        case 200:
        case 201:
        case 202:
        case 204:
        case 206:
        case 304:
        case 1223:
          var b = !0;
          break a;

        default:
          b = !1;
      }

      var c;

      if (!(c = b)) {
        var d;

        if (d = 0 === n) {
          var e = String(a.H).match(Mc)[1] || null;

          if (!e && index_esm2017_l.self && index_esm2017_l.self.location) {
            var f = index_esm2017_l.self.location.protocol;
            e = f.substr(0, f.length - 1);
          }

          d = !xd.test(e ? e.toLowerCase() : "");
        }

        c = d;
      }

      if (c) index_esm2017_D(a, "complete"), index_esm2017_D(a, "success");else {
        a.m = 6;

        try {
          var h = 2 < index_esm2017_O(a) ? a.g.statusText : "";
        } catch (u) {
          h = "";
        }

        a.j = h + " [" + a.ba() + "]";
        Cd(a);
      }
    } finally {
      Dd(a);
    }
  }
}

function Dd(a, b) {
  if (a.g) {
    Ad(a);
    var c = a.g,
        d = a.C[0] ? aa : null;
    a.g = null;
    a.C = null;
    b || index_esm2017_D(a, "ready");

    try {
      c.onreadystatechange = d;
    } catch (e) {}
  }
}

function Ad(a) {
  a.g && a.K && (a.g.ontimeout = null);
  a.A && (index_esm2017_l.clearTimeout(a.A), a.A = null);
}

function index_esm2017_O(a) {
  return a.g ? a.g.readyState : 0;
}

index_esm2017_k.ba = function () {
  try {
    return 2 < index_esm2017_O(this) ? this.g.status : -1;
  } catch (a) {
    return -1;
  }
};

index_esm2017_k.ga = function () {
  try {
    return this.g ? this.g.responseText : "";
  } catch (a) {
    return "";
  }
};

index_esm2017_k.Qa = function (a) {
  if (this.g) {
    var b = this.g.responseText;
    a && 0 == b.indexOf(a) && (b = b.substring(a.length));
    return vd(b);
  }
};

function oc(a) {
  try {
    if (!a.g) return null;
    if ("response" in a.g) return a.g.response;

    switch (a.J) {
      case wd:
      case "text":
        return a.g.responseText;

      case "arraybuffer":
        if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
    }

    return null;
  } catch (b) {
    return null;
  }
}

index_esm2017_k.Da = function () {
  return this.m;
};

index_esm2017_k.La = function () {
  return "string" === typeof this.j ? this.j : String(this.j);
};

function Fd(a) {
  var b = "";
  xa(a, function (c, d) {
    b += d;
    b += ":";
    b += c;
    b += "\r\n";
  });
  return b;
}

function Gd(a, b, c) {
  a: {
    for (d in c) {
      var d = !1;
      break a;
    }

    d = !0;
  }

  d || (c = Fd(c), "string" === typeof a ? null != c && encodeURIComponent(String(c)) : index_esm2017_R(a, b, c));
}

function Hd(a, b, c) {
  return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
}

function Id(a) {
  this.za = 0;
  this.l = [];
  this.h = new Mb();
  this.la = this.oa = this.F = this.W = this.g = this.sa = this.D = this.aa = this.o = this.P = this.s = null;
  this.Za = this.V = 0;
  this.Xa = Hd("failFast", !1, a);
  this.N = this.v = this.u = this.m = this.j = null;
  this.X = !0;
  this.I = this.ta = this.U = -1;
  this.Y = this.A = this.C = 0;
  this.Pa = Hd("baseRetryDelayMs", 5E3, a);
  this.$a = Hd("retryDelaySeedMs", 1E4, a);
  this.Ya = Hd("forwardChannelMaxRetries", 2, a);
  this.ra = Hd("forwardChannelRequestTimeoutMs", 2E4, a);
  this.qa = a && a.xmlHttpFactory || void 0;
  this.Ba = a && a.Yb || !1;
  this.K = void 0;
  this.H = a && a.supportsCrossDomainXhr || !1;
  this.J = "";
  this.i = new gd(a && a.concurrentRequestLimit);
  this.Ca = new ld();
  this.ja = a && a.fastHandshake || !1;
  this.Ra = a && a.Wb || !1;
  a && a.Aa && this.h.Aa();
  a && a.forceLongPolling && (this.X = !1);
  this.$ = !this.ja && this.X && a && a.detectBufferingProxy || !1;
  this.ka = void 0;
  this.O = 0;
  this.L = !1;
  this.B = null;
  this.Wa = !a || !1 !== a.Xb;
}

index_esm2017_k = Id.prototype;
index_esm2017_k.ma = 8;
index_esm2017_k.G = 1;

function Ic(a) {
  Jd(a);

  if (3 == a.G) {
    var b = a.V++,
        c = index_esm2017_N(a.F);
    index_esm2017_R(c, "SID", a.J);
    index_esm2017_R(c, "RID", b);
    index_esm2017_R(c, "TYPE", "terminate");
    Kd(a, c);
    b = new index_esm2017_M(a, a.h, b, void 0);
    b.K = 2;
    b.v = jc(index_esm2017_N(c));
    c = !1;
    index_esm2017_l.navigator && index_esm2017_l.navigator.sendBeacon && (c = index_esm2017_l.navigator.sendBeacon(b.v.toString(), ""));
    !c && index_esm2017_l.Image && (new Image().src = b.v, c = !0);
    c || (b.g = nc(b.l, null), b.g.ea(b.v));
    b.F = Date.now();
    lc(b);
  }

  Ld(a);
}

index_esm2017_k.hb = function (a) {
  try {
    this.h.info("Origin Trials invoked: " + a);
  } catch (b) {}
};

function Ac(a) {
  a.g && (wc(a), a.g.cancel(), a.g = null);
}

function Jd(a) {
  Ac(a);
  a.u && (index_esm2017_l.clearTimeout(a.u), a.u = null);
  zc(a);
  a.i.cancel();
  a.m && ("number" === typeof a.m && index_esm2017_l.clearTimeout(a.m), a.m = null);
}

function Md(a, b) {
  a.l.push(new fd(a.Za++, b));
  3 == a.G && Hc(a);
}

function Hc(a) {
  id(a.i) || a.m || (a.m = !0, zb(a.Ha, a), a.C = 0);
}

function Nd(a, b) {
  if (Cc(a.i) >= a.i.j - (a.m ? 1 : 0)) return !1;
  if (a.m) return a.l = b.D.concat(a.l), !0;
  if (1 == a.G || 2 == a.G || a.C >= (a.Xa ? 0 : a.Ya)) return !1;
  a.m = index_esm2017_K(index_esm2017_q(a.Ha, a, b), Od(a, a.C));
  a.C++;
  return !0;
}

index_esm2017_k.Ha = function (a) {
  if (this.m) if (this.m = null, 1 == this.G) {
    if (!a) {
      this.V = Math.floor(1E5 * Math.random());
      a = this.V++;
      var e = new index_esm2017_M(this, this.h, a, void 0);
      var f = this.s;
      this.P && (f ? (f = ya(f), Aa(f, this.P)) : f = this.P);
      null === this.o && (e.H = f);
      if (this.ja) a: {
        var b = 0;

        for (var c = 0; c < this.l.length; c++) {
          b: {
            var d = this.l[c];

            if ("__data__" in d.g && (d = d.g.__data__, "string" === typeof d)) {
              d = d.length;
              break b;
            }

            d = void 0;
          }

          if (void 0 === d) break;
          b += d;

          if (4096 < b) {
            b = c;
            break a;
          }

          if (4096 === b || c === this.l.length - 1) {
            b = c + 1;
            break a;
          }
        }

        b = 1E3;
      } else b = 1E3;
      b = Pd(this, e, b);
      c = index_esm2017_N(this.F);
      index_esm2017_R(c, "RID", a);
      index_esm2017_R(c, "CVER", 22);
      this.D && index_esm2017_R(c, "X-HTTP-Session-Id", this.D);
      Kd(this, c);
      this.o && f && Gd(c, this.o, f);
      Dc(this.i, e);
      this.Ra && index_esm2017_R(c, "TYPE", "init");
      this.ja ? (index_esm2017_R(c, "$req", b), index_esm2017_R(c, "SID", "null"), e.$ = !0, ic(e, c, null)) : ic(e, c, b);
      this.G = 2;
    }
  } else 3 == this.G && (a ? Qd(this, a) : 0 == this.l.length || id(this.i) || Qd(this));
};

function Qd(a, b) {
  var c;
  b ? c = b.m : c = a.V++;
  var d = index_esm2017_N(a.F);
  index_esm2017_R(d, "SID", a.J);
  index_esm2017_R(d, "RID", c);
  index_esm2017_R(d, "AID", a.U);
  Kd(a, d);
  a.o && a.s && Gd(d, a.o, a.s);
  c = new index_esm2017_M(a, a.h, c, a.C + 1);
  null === a.o && (c.H = a.s);
  b && (a.l = b.D.concat(a.l));
  b = Pd(a, c, 1E3);
  c.setTimeout(Math.round(.5 * a.ra) + Math.round(.5 * a.ra * Math.random()));
  Dc(a.i, c);
  ic(c, d, b);
}

function Kd(a, b) {
  a.j && Kc({}, function (c, d) {
    index_esm2017_R(b, d, c);
  });
}

function Pd(a, b, c) {
  c = Math.min(a.l.length, c);
  var d = a.j ? index_esm2017_q(a.j.Oa, a.j, a) : null;

  a: {
    var e = a.l;
    var f = -1;

    for (;;) {
      var h = ["count=" + c];
      -1 == f ? 0 < c ? (f = e[0].h, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
      var n = !0;

      for (var u = 0; u < c; u++) {
        var m = e[u].h;
        var r = e[u].g;
        m -= f;
        if (0 > m) f = Math.max(0, e[u].h - 100), n = !1;else try {
          md(r, h, "req" + m + "_");
        } catch (G) {
          d && d(r);
        }
      }

      if (n) {
        d = h.join("&");
        break a;
      }
    }
  }

  a = a.l.splice(0, c);
  b.D = a;
  return d;
}

function Gc(a) {
  a.g || a.u || (a.Y = 1, zb(a.Ga, a), a.A = 0);
}

function Bc(a) {
  if (a.g || a.u || 3 <= a.A) return !1;
  a.Y++;
  a.u = index_esm2017_K(index_esm2017_q(a.Ga, a), Od(a, a.A));
  a.A++;
  return !0;
}

index_esm2017_k.Ga = function () {
  this.u = null;
  Rd(this);

  if (this.$ && !(this.L || null == this.g || 0 >= this.O)) {
    var a = 2 * this.O;
    this.h.info("BP detection timer enabled: " + a);
    this.B = index_esm2017_K(index_esm2017_q(this.bb, this), a);
  }
};

index_esm2017_k.bb = function () {
  this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.N = !1, this.L = !0, index_esm2017_J(10), Ac(this), Rd(this));
};

function wc(a) {
  null != a.B && (index_esm2017_l.clearTimeout(a.B), a.B = null);
}

function Rd(a) {
  a.g = new index_esm2017_M(a, a.h, "rpc", a.Y);
  null === a.o && (a.g.H = a.s);
  a.g.O = 0;
  var b = index_esm2017_N(a.oa);
  index_esm2017_R(b, "RID", "rpc");
  index_esm2017_R(b, "SID", a.J);
  index_esm2017_R(b, "CI", a.N ? "0" : "1");
  index_esm2017_R(b, "AID", a.U);
  Kd(a, b);
  index_esm2017_R(b, "TYPE", "xmlhttp");
  a.o && a.s && Gd(b, a.o, a.s);
  a.K && a.g.setTimeout(a.K);
  var c = a.g;
  a = a.la;
  c.K = 1;
  c.v = jc(index_esm2017_N(b));
  c.s = null;
  c.U = !0;
  kc(c, a);
}

index_esm2017_k.ab = function () {
  null != this.v && (this.v = null, Ac(this), Bc(this), index_esm2017_J(19));
};

function zc(a) {
  null != a.v && (index_esm2017_l.clearTimeout(a.v), a.v = null);
}

function uc(a, b) {
  var c = null;

  if (a.g == b) {
    zc(a);
    wc(a);
    a.g = null;
    var d = 2;
  } else if (yc(a.i, b)) c = b.D, Fc(a.i, b), d = 1;else return;

  a.I = b.N;
  if (0 != a.G) if (b.i) {
    if (1 == d) {
      c = b.s ? b.s.length : 0;
      b = Date.now() - b.F;
      var e = a.C;
      d = Sb();
      index_esm2017_D(d, new Vb(d, c, b, e));
      Hc(a);
    } else Gc(a);
  } else if (e = b.o, 3 == e || 0 == e && 0 < a.I || !(1 == d && Nd(a, b) || 2 == d && Bc(a))) switch (c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e) {
    case 1:
      index_esm2017_Q(a, 5);
      break;

    case 4:
      index_esm2017_Q(a, 10);
      break;

    case 3:
      index_esm2017_Q(a, 6);
      break;

    default:
      index_esm2017_Q(a, 2);
  }
}

function Od(a, b) {
  var c = a.Pa + Math.floor(Math.random() * a.$a);
  a.j || (c *= 2);
  return c * b;
}

function index_esm2017_Q(a, b) {
  a.h.info("Error code " + b);

  if (2 == b) {
    var c = null;
    a.j && (c = null);
    var d = index_esm2017_q(a.jb, a);
    c || (c = new index_esm2017_U("//www.google.com/images/cleardot.gif"), index_esm2017_l.location && "http" == index_esm2017_l.location.protocol || Oc(c, "https"), jc(c));
    nd(c.toString(), d);
  } else index_esm2017_J(2);

  a.G = 0;
  a.j && a.j.va(b);
  Ld(a);
  Jd(a);
}

index_esm2017_k.jb = function (a) {
  a ? (this.h.info("Successfully pinged google.com"), index_esm2017_J(2)) : (this.h.info("Failed to ping google.com"), index_esm2017_J(1));
};

function Ld(a) {
  a.G = 0;
  a.I = -1;

  if (a.j) {
    if (0 != jd(a.i).length || 0 != a.l.length) a.i.i.length = 0, ra(a.l), a.l.length = 0;
    a.j.ua();
  }
}

function Ec(a, b, c) {
  var d = ad(c);
  if ("" != d.i) b && Pc(d, b + "." + d.i), Qc(d, d.m);else {
    var e = index_esm2017_l.location;
    d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
  }
  a.aa && xa(a.aa, function (e, f) {
    index_esm2017_R(d, f, e);
  });
  b = a.D;
  c = a.sa;
  b && c && index_esm2017_R(d, b, c);
  index_esm2017_R(d, "VER", a.ma);
  Kd(a, d);
  return d;
}

function nc(a, b, c) {
  if (b && !a.H) throw Error("Can't create secondary domain capable XhrIo object.");
  b = c && a.Ba && !a.qa ? new index_esm2017_X(new pd({
    ib: !0
  })) : new index_esm2017_X(a.qa);
  b.L = a.H;
  return b;
}

function Sd() {}

index_esm2017_k = Sd.prototype;

index_esm2017_k.xa = function () {};

index_esm2017_k.wa = function () {};

index_esm2017_k.va = function () {};

index_esm2017_k.ua = function () {};

index_esm2017_k.Oa = function () {};

function Td() {
  if (index_esm2017_y && !(10 <= Number(Ua))) throw Error("Environmental error: no available transport.");
}

Td.prototype.g = function (a, b) {
  return new index_esm2017_Y(a, b);
};

function index_esm2017_Y(a, b) {
  index_esm2017_C.call(this);
  this.g = new Id(b);
  this.l = a;
  this.h = b && b.messageUrlParams || null;
  a = b && b.messageHeaders || null;
  b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
    "X-Client-Protocol": "webchannel"
  });
  this.g.s = a;
  a = b && b.initMessageHeaders || null;
  b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
    "X-WebChannel-Content-Type": b.messageContentType
  });
  b && b.ya && (a ? a["X-WebChannel-Client-Profile"] = b.ya : a = {
    "X-WebChannel-Client-Profile": b.ya
  });
  this.g.P = a;
  (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.g.o = a);
  this.A = b && b.supportsCrossDomainXhr || !1;
  this.v = b && b.sendRawJson || !1;
  (b = b && b.httpSessionIdParam) && !sa(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
  this.j = new index_esm2017_Z(this);
}

t(index_esm2017_Y, index_esm2017_C);

index_esm2017_Y.prototype.m = function () {
  this.g.j = this.j;
  this.A && (this.g.H = !0);
  var a = this.g,
      b = this.l,
      c = this.h || void 0;
  a.Wa && (a.h.info("Origin Trials enabled."), zb(index_esm2017_q(a.hb, a, b)));
  index_esm2017_J(0);
  a.W = b;
  a.aa = c || {};
  a.N = a.X;
  a.F = Ec(a, null, a.W);
  Hc(a);
};

index_esm2017_Y.prototype.close = function () {
  Ic(this.g);
};

index_esm2017_Y.prototype.u = function (a) {
  if ("string" === typeof a) {
    var b = {};
    b.__data__ = a;
    Md(this.g, b);
  } else this.v ? (b = {}, b.__data__ = rb(a), Md(this.g, b)) : Md(this.g, a);
};

index_esm2017_Y.prototype.M = function () {
  this.g.j = null;
  delete this.j;
  Ic(this.g);
  delete this.g;
  index_esm2017_Y.Z.M.call(this);
};

function Ud(a) {
  ac.call(this);
  var b = a.__sm__;

  if (b) {
    a: {
      for (var c in b) {
        a = c;
        break a;
      }

      a = void 0;
    }

    if (this.i = a) a = this.i, b = null !== b && a in b ? b[a] : void 0;
    this.data = b;
  } else this.data = a;
}

t(Ud, ac);

function Vd() {
  bc.call(this);
  this.status = 1;
}

t(Vd, bc);

function index_esm2017_Z(a) {
  this.g = a;
}

t(index_esm2017_Z, Sd);

index_esm2017_Z.prototype.xa = function () {
  index_esm2017_D(this.g, "a");
};

index_esm2017_Z.prototype.wa = function (a) {
  index_esm2017_D(this.g, new Ud(a));
};

index_esm2017_Z.prototype.va = function (a) {
  index_esm2017_D(this.g, new Vd(a));
};

index_esm2017_Z.prototype.ua = function () {
  index_esm2017_D(this.g, "b");
};
/*
Copyright 2017 Google LLC
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


Td.prototype.createWebChannel = Td.prototype.g;
index_esm2017_Y.prototype.send = index_esm2017_Y.prototype.u;
index_esm2017_Y.prototype.open = index_esm2017_Y.prototype.m;
index_esm2017_Y.prototype.close = index_esm2017_Y.prototype.close;
Wb.NO_ERROR = 0;
Wb.TIMEOUT = 8;
Wb.HTTP_ERROR = 6;
Xb.COMPLETE = "complete";
$b.EventType = index_esm2017_L;
index_esm2017_L.OPEN = "a";
index_esm2017_L.CLOSE = "b";
index_esm2017_L.ERROR = "c";
index_esm2017_L.MESSAGE = "d";
index_esm2017_C.prototype.listen = index_esm2017_C.prototype.N;
index_esm2017_X.prototype.listenOnce = index_esm2017_X.prototype.O;
index_esm2017_X.prototype.getLastError = index_esm2017_X.prototype.La;
index_esm2017_X.prototype.getLastErrorCode = index_esm2017_X.prototype.Da;
index_esm2017_X.prototype.getStatus = index_esm2017_X.prototype.ba;
index_esm2017_X.prototype.getResponseJson = index_esm2017_X.prototype.Qa;
index_esm2017_X.prototype.getResponseText = index_esm2017_X.prototype.ga;
index_esm2017_X.prototype.send = index_esm2017_X.prototype.ea;

var index_esm2017_createWebChannelTransport = esm.createWebChannelTransport = function () {
  return new Td();
};

var index_esm2017_getStatEventTarget = esm.getStatEventTarget = function () {
  return Sb();
};

var index_esm2017_ErrorCode = esm.ErrorCode = Wb;
var index_esm2017_EventType = esm.EventType = Xb;
var index_esm2017_Event = esm.Event = index_esm2017_H;
var index_esm2017_Stat = esm.Stat = {
  rb: 0,
  ub: 1,
  vb: 2,
  Ob: 3,
  Tb: 4,
  Qb: 5,
  Rb: 6,
  Pb: 7,
  Nb: 8,
  Sb: 9,
  PROXY: 10,
  NOPROXY: 11,
  Lb: 12,
  Hb: 13,
  Ib: 14,
  Gb: 15,
  Jb: 16,
  Kb: 17,
  nb: 18,
  mb: 19,
  ob: 20
};
var index_esm2017_FetchXmlHttpFactory = esm.FetchXmlHttpFactory = pd;
var index_esm2017_WebChannel = esm.WebChannel = $b;
var index_esm2017_XhrIo = esm.XhrIo = index_esm2017_X;

;// CONCATENATED MODULE: ./node_modules/@firebase/firestore/dist/index.esm2017.js
function dist_index_esm2017_construct(Parent, args, Class) { if (firestore_dist_index_esm2017_isNativeReflectConstruct()) { dist_index_esm2017_construct = Reflect.construct; } else { dist_index_esm2017_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) firestore_dist_index_esm2017_setPrototypeOf(instance, Class.prototype); return instance; }; } return dist_index_esm2017_construct.apply(null, arguments); }

function dist_index_esm2017_get() { if (typeof Reflect !== "undefined" && Reflect.get) { dist_index_esm2017_get = Reflect.get; } else { dist_index_esm2017_get = function _get(target, property, receiver) { var base = dist_index_esm2017_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return dist_index_esm2017_get.apply(this, arguments); }

function dist_index_esm2017_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = firestore_dist_index_esm2017_getPrototypeOf(object); if (object === null) break; } return object; }

function dist_index_esm2017_slicedToArray(arr, i) { return dist_index_esm2017_arrayWithHoles(arr) || dist_index_esm2017_iterableToArrayLimit(arr, i) || firestore_dist_index_esm2017_unsupportedIterableToArray(arr, i) || dist_index_esm2017_nonIterableRest(); }

function dist_index_esm2017_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function dist_index_esm2017_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function dist_index_esm2017_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function firestore_dist_index_esm2017_typeof(obj) { "@babel/helpers - typeof"; return firestore_dist_index_esm2017_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, firestore_dist_index_esm2017_typeof(obj); }

function firestore_dist_index_esm2017_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = firestore_dist_index_esm2017_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e68) { throw _e68; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e69) { didErr = true; err = _e69; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function dist_index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function dist_index_esm2017_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { dist_index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { dist_index_esm2017_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function firestore_dist_index_esm2017_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) firestore_dist_index_esm2017_setPrototypeOf(subClass, superClass); }

function firestore_dist_index_esm2017_setPrototypeOf(o, p) { firestore_dist_index_esm2017_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return firestore_dist_index_esm2017_setPrototypeOf(o, p); }

function firestore_dist_index_esm2017_createSuper(Derived) { var hasNativeReflectConstruct = firestore_dist_index_esm2017_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = firestore_dist_index_esm2017_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = firestore_dist_index_esm2017_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return firestore_dist_index_esm2017_possibleConstructorReturn(this, result); }; }

function firestore_dist_index_esm2017_possibleConstructorReturn(self, call) { if (call && (firestore_dist_index_esm2017_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return firestore_dist_index_esm2017_assertThisInitialized(self); }

function firestore_dist_index_esm2017_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function firestore_dist_index_esm2017_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function firestore_dist_index_esm2017_getPrototypeOf(o) { firestore_dist_index_esm2017_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return firestore_dist_index_esm2017_getPrototypeOf(o); }

function dist_index_esm2017_toConsumableArray(arr) { return dist_index_esm2017_arrayWithoutHoles(arr) || dist_index_esm2017_iterableToArray(arr) || firestore_dist_index_esm2017_unsupportedIterableToArray(arr) || dist_index_esm2017_nonIterableSpread(); }

function dist_index_esm2017_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function firestore_dist_index_esm2017_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return firestore_dist_index_esm2017_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return firestore_dist_index_esm2017_arrayLikeToArray(o, minLen); }

function dist_index_esm2017_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function dist_index_esm2017_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return firestore_dist_index_esm2017_arrayLikeToArray(arr); }

function firestore_dist_index_esm2017_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function firestore_dist_index_esm2017_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function firestore_dist_index_esm2017_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function firestore_dist_index_esm2017_createClass(Constructor, protoProps, staticProps) { if (protoProps) firestore_dist_index_esm2017_defineProperties(Constructor.prototype, protoProps); if (staticProps) firestore_dist_index_esm2017_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }






var dist_index_esm2017_D = "@firebase/firestore";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */

var dist_index_esm2017_C = /*#__PURE__*/function () {
  function C(t) {
    firestore_dist_index_esm2017_classCallCheck(this, C);

    this.uid = t;
  }

  firestore_dist_index_esm2017_createClass(C, [{
    key: "isAuthenticated",
    value: function isAuthenticated() {
      return null != this.uid;
    }
    /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */

  }, {
    key: "toKey",
    value: function toKey() {
      return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t.uid === this.uid;
    }
  }]);

  return C;
}();
/** A user with a null UID. */


dist_index_esm2017_C.UNAUTHENTICATED = new dist_index_esm2017_C(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
dist_index_esm2017_C.GOOGLE_CREDENTIALS = new dist_index_esm2017_C("google-credentials-uid"), dist_index_esm2017_C.FIRST_PARTY = new dist_index_esm2017_C("first-party-uid"), dist_index_esm2017_C.MOCK_USER = new dist_index_esm2017_C("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var dist_index_esm2017_x = "9.8.0";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var dist_index_esm2017_N = new Logger("@firebase/firestore"); // Helper methods are needed because variables can't be exported as read/write

function dist_index_esm2017_k() {
  return dist_index_esm2017_N.logLevel;
}
/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel - The verbosity you set for activity and error logging. Can
 *   be any of the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */


function dist_index_esm2017_M(t) {
  dist_index_esm2017_N.setLogLevel(t);
}

function dist_index_esm2017_O(t) {
  if (dist_index_esm2017_N.logLevel <= index_esm2017_LogLevel.DEBUG) {
    for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      e[_key - 1] = arguments[_key];
    }

    var n = e.map(dist_index_esm2017_B);
    dist_index_esm2017_N.debug.apply(dist_index_esm2017_N, ["Firestore (".concat(dist_index_esm2017_x, "): ").concat(t)].concat(dist_index_esm2017_toConsumableArray(n)));
  }
}

function dist_index_esm2017_F(t) {
  if (dist_index_esm2017_N.logLevel <= index_esm2017_LogLevel.ERROR) {
    for (var _len2 = arguments.length, e = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      e[_key2 - 1] = arguments[_key2];
    }

    var n = e.map(dist_index_esm2017_B);
    dist_index_esm2017_N.error.apply(dist_index_esm2017_N, ["Firestore (".concat(dist_index_esm2017_x, "): ").concat(t)].concat(dist_index_esm2017_toConsumableArray(n)));
  }
}
/**
 * @internal
 */


function index_esm2017_$(t) {
  if (dist_index_esm2017_N.logLevel <= LogLevel.WARN) {
    for (var _len3 = arguments.length, e = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      e[_key3 - 1] = arguments[_key3];
    }

    var n = e.map(dist_index_esm2017_B);
    dist_index_esm2017_N.warn.apply(dist_index_esm2017_N, ["Firestore (".concat(dist_index_esm2017_x, "): ").concat(t)].concat(dist_index_esm2017_toConsumableArray(n)));
  }
}
/**
 * Converts an additional log parameter to a string representation.
 */


function dist_index_esm2017_B(t) {
  if ("string" == typeof t) return t;

  try {
    return e = t, JSON.stringify(e);
  } catch (e) {
    // Converting to JSON failed, just log the object directly
    return t;
  }
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /** Formats an object as a JSON string, suitable for logging. */


  var e;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */


function dist_index_esm2017_L() {
  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Unexpected state";
  // Log the failure in addition to throw an exception, just in case the
  // exception is swallowed.
  var e = "FIRESTORE (".concat(dist_index_esm2017_x, ") INTERNAL ASSERTION FAILED: ") + t; // NOTE: We don't use FirestoreError here because these are internal failures
  // that cannot be handled by the user. (Also it would create a circular
  // dependency between the error and assert modules which doesn't work.)

  throw dist_index_esm2017_F(e), new Error(e);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * Messages are stripped in production builds.
 */


function dist_index_esm2017_U(t, e) {
  t || dist_index_esm2017_L();
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * The code of callsites invoking this function are stripped out in production
 * builds. Any side-effects of code within the debugAssert() invocation will not
 * happen in this case.
 *
 * @internal
 */


function dist_index_esm2017_q(t, e) {
  t || dist_index_esm2017_L();
}
/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */


function dist_index_esm2017_K(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_G = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h

  /** Not an error; returned on success. */
  OK: "ok",

  /** The operation was cancelled (typically by the caller). */
  CANCELLED: "cancelled",

  /** Unknown error or an error from a different error domain. */
  UNKNOWN: "unknown",

  /**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */
  INVALID_ARGUMENT: "invalid-argument",

  /**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */
  DEADLINE_EXCEEDED: "deadline-exceeded",

  /** Some requested entity (e.g., file or directory) was not found. */
  NOT_FOUND: "not-found",

  /**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */
  ALREADY_EXISTS: "already-exists",

  /**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller can not be identified
   * (use UNAUTHENTICATED instead for those errors).
   */
  PERMISSION_DENIED: "permission-denied",

  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */
  UNAUTHENTICATED: "unauthenticated",

  /**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */
  RESOURCE_EXHAUSTED: "resource-exhausted",

  /**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */
  FAILED_PRECONDITION: "failed-precondition",

  /**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  ABORTED: "aborted",

  /**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */
  OUT_OF_RANGE: "out-of-range",

  /** Operation is not implemented or not supported/enabled in this service. */
  UNIMPLEMENTED: "unimplemented",

  /**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */
  INTERNAL: "internal",

  /**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  UNAVAILABLE: "unavailable",

  /** Unrecoverable data loss or corruption. */
  DATA_LOSS: "data-loss"
};
/** An error returned by a Firestore operation. */

var dist_index_esm2017_Q = /*#__PURE__*/function (_FirebaseError) {
  firestore_dist_index_esm2017_inherits(Q, _FirebaseError);

  var _super = firestore_dist_index_esm2017_createSuper(Q);

  /** @hideconstructor */
  function Q(
  /**
   * The backend error code associated with this error.
   */
  t,
  /**
   * A custom error description.
   */
  e) {
    var _this;

    firestore_dist_index_esm2017_classCallCheck(this, Q);

    _this = _super.call(this, t, e), _this.code = t, _this.message = e, // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.
    _this.toString = function () {
      return "".concat(_this.name, ": [code=").concat(_this.code, "]: ").concat(_this.message);
    };
    return _this;
  }

  return firestore_dist_index_esm2017_createClass(Q);
}(FirebaseError);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_j = /*#__PURE__*/firestore_dist_index_esm2017_createClass(function j() {
  var _this2 = this;

  firestore_dist_index_esm2017_classCallCheck(this, j);

  this.promise = new Promise(function (t, e) {
    _this2.resolve = t, _this2.reject = e;
  });
});
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var dist_index_esm2017_W = /*#__PURE__*/firestore_dist_index_esm2017_createClass(function W(t, e) {
  firestore_dist_index_esm2017_classCallCheck(this, W);

  this.user = e, this.type = "OAuth", this.headers = new Map(), this.headers.set("Authorization", "Bearer ".concat(t));
});
/**
 * A CredentialsProvider that always yields an empty token.
 * @internal
 */


var dist_index_esm2017_z = /*#__PURE__*/function () {
  function z() {
    firestore_dist_index_esm2017_classCallCheck(this, z);
  }

  firestore_dist_index_esm2017_createClass(z, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(null);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {
      // Fire with initial user.
      t.enqueueRetryable(function () {
        return e(dist_index_esm2017_C.UNAUTHENTICATED);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }]);

  return z;
}();
/**
 * A CredentialsProvider that always returns a constant token. Used for
 * emulator token mocking.
 */


var dist_index_esm2017_H = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function H(t) {
    firestore_dist_index_esm2017_classCallCheck(this, H);

    this.token = t,
    /**
     * Stores the listener registered with setChangeListener()
     * This isn't actually necessary since the UID never changes, but we use this
     * to verify the listen contract is adhered to in tests.
     */
    this.changeListener = null;
  }

  firestore_dist_index_esm2017_createClass(H, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(this.token);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {
      var _this3 = this;

      this.changeListener = e, // Fire with initial user.
      t.enqueueRetryable(function () {
        return e(_this3.token.user);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      this.changeListener = null;
    }
  }]);

  return H;
}()));

var dist_index_esm2017_J = /*#__PURE__*/function () {
  function J(t) {
    firestore_dist_index_esm2017_classCallCheck(this, J);

    this.t = t,
    /** Tracks the current User. */
    this.currentUser = dist_index_esm2017_C.UNAUTHENTICATED,
    /**
     * Counter used to detect if the token changed while a getToken request was
     * outstanding.
     */
    this.i = 0, this.forceRefresh = !1, this.auth = null;
  }

  firestore_dist_index_esm2017_createClass(J, [{
    key: "start",
    value: function start(t, e) {
      var _this4 = this;

      var n = this.i; // A change listener that prevents double-firing for the same token change.

      var s = function s(t) {
        return _this4.i !== n ? (n = _this4.i, e(t)) : Promise.resolve();
      }; // A promise that can be waited on to block on the next token change.
      // This promise is re-created after each change.


      var i = new index_esm2017_j();

      this.o = function () {
        _this4.i++, _this4.currentUser = _this4.u(), i.resolve(), i = new index_esm2017_j(), t.enqueueRetryable(function () {
          return s(_this4.currentUser);
        });
      };

      var r = function r() {
        var e = i;
        t.enqueueRetryable( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return e.promise;

                case 2:
                  _context.next = 4;
                  return s(_this4.currentUser);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      },
          o = function o(t) {
        dist_index_esm2017_O("FirebaseAuthCredentialsProvider", "Auth detected"), _this4.auth = t, _this4.auth.addAuthTokenListener(_this4.o), r();
      };

      this.t.onInit(function (t) {
        return o(t);
      }), // Our users can initialize Auth right after Firestore, so we give it
      // a chance to register itself with the component framework before we
      // determine whether to start up in unauthenticated mode.
      setTimeout(function () {
        if (!_this4.auth) {
          var _t2 = _this4.t.getImmediate({
            optional: !0
          });

          _t2 ? o(_t2) : ( // If auth is still not available, proceed with `null` user
          dist_index_esm2017_O("FirebaseAuthCredentialsProvider", "Auth not yet detected"), i.resolve(), i = new index_esm2017_j());
        }
      }, 0), r();
    }
  }, {
    key: "getToken",
    value: function getToken() {
      var _this5 = this;

      // Take note of the current value of the tokenCounter so that this method
      // can fail (with an ABORTED error) if there is a token change while the
      // request is outstanding.
      var t = this.i,
          e = this.forceRefresh;
      return this.forceRefresh = !1, this.auth ? this.auth.getToken(e).then(function (e) {
        return (// Cancel the request since the token changed while the request was
          // outstanding so the response is potentially for a previous user (which
          // user, we can't be sure).
          _this5.i !== t ? (dist_index_esm2017_O("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), _this5.getToken()) : e ? (dist_index_esm2017_U("string" == typeof e.accessToken), new dist_index_esm2017_W(e.accessToken, _this5.currentUser)) : null
        );
      }) : Promise.resolve(null);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {
      this.forceRefresh = !0;
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      this.auth && this.auth.removeAuthTokenListener(this.o);
    } // Auth.getUid() can return null even with a user logged in. It is because
    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
    // This method should only be called in the AuthTokenListener callback
    // to guarantee to get the actual user.

  }, {
    key: "u",
    value: function u() {
      var t = this.auth && this.auth.getUid();
      return dist_index_esm2017_U(null === t || "string" == typeof t), new dist_index_esm2017_C(t);
    }
  }]);

  return J;
}();
/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */


var dist_index_esm2017_Y = /*#__PURE__*/firestore_dist_index_esm2017_createClass(function Y(t, e, n) {
  firestore_dist_index_esm2017_classCallCheck(this, Y);

  this.type = "FirstParty", this.user = dist_index_esm2017_C.FIRST_PARTY, this.headers = new Map(), this.headers.set("X-Goog-AuthUser", e);
  var s = t.auth.getAuthHeaderValueForFirstParty([]);
  s && this.headers.set("Authorization", s), n && this.headers.set("X-Goog-Iam-Authorization-Token", n);
});
/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */


var dist_index_esm2017_X = /*#__PURE__*/function () {
  function X(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, X);

    this.h = t, this.l = e, this.m = n;
  }

  firestore_dist_index_esm2017_createClass(X, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(new dist_index_esm2017_Y(this.h, this.l, this.m));
    }
  }, {
    key: "start",
    value: function start(t, e) {
      // Fire with initial uid.
      t.enqueueRetryable(function () {
        return e(dist_index_esm2017_C.FIRST_PARTY);
      });
    }
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }]);

  return X;
}();

var dist_index_esm2017_Z = /*#__PURE__*/firestore_dist_index_esm2017_createClass(function Z(t) {
  firestore_dist_index_esm2017_classCallCheck(this, Z);

  this.value = t, this.type = "AppCheck", this.headers = new Map(), t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
});

var index_esm2017_tt = /*#__PURE__*/function () {
  function tt(t) {
    firestore_dist_index_esm2017_classCallCheck(this, tt);

    this.g = t, this.forceRefresh = !1, this.appCheck = null, this.p = null;
  }

  firestore_dist_index_esm2017_createClass(tt, [{
    key: "start",
    value: function start(t, e) {
      var _this6 = this;

      var n = function n(t) {
        null != t.error && dist_index_esm2017_O("FirebaseAppCheckTokenProvider", "Error getting App Check token; using placeholder token instead. Error: ".concat(t.error.message));
        var n = t.token !== _this6.p;
        return _this6.p = t.token, dist_index_esm2017_O("FirebaseAppCheckTokenProvider", "Received ".concat(n ? "new" : "existing", " token.")), n ? e(t.token) : Promise.resolve();
      };

      this.o = function (e) {
        t.enqueueRetryable(function () {
          return n(e);
        });
      };

      var s = function s(t) {
        dist_index_esm2017_O("FirebaseAppCheckTokenProvider", "AppCheck detected"), _this6.appCheck = t, _this6.appCheck.addTokenListener(_this6.o);
      };

      this.g.onInit(function (t) {
        return s(t);
      }), // Our users can initialize AppCheck after Firestore, so we give it
      // a chance to register itself with the component framework.
      setTimeout(function () {
        if (!_this6.appCheck) {
          var _t3 = _this6.g.getImmediate({
            optional: !0
          });

          _t3 ? s(_t3) : // If AppCheck is still not available, proceed without it.
          dist_index_esm2017_O("FirebaseAppCheckTokenProvider", "AppCheck not yet detected");
        }
      }, 0);
    }
  }, {
    key: "getToken",
    value: function getToken() {
      var _this7 = this;

      var t = this.forceRefresh;
      return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(t).then(function (t) {
        return t ? (dist_index_esm2017_U("string" == typeof t.token), _this7.p = t.token, new dist_index_esm2017_Z(t.token)) : null;
      }) : Promise.resolve(null);
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {
      this.forceRefresh = !0;
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      this.appCheck && this.appCheck.removeTokenListener(this.o);
    }
  }]);

  return tt;
}();
/**
 * An AppCheck token provider that always yields an empty token.
 * @internal
 */


var index_esm2017_et = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function et() {
    firestore_dist_index_esm2017_classCallCheck(this, et);
  }

  firestore_dist_index_esm2017_createClass(et, [{
    key: "getToken",
    value: function getToken() {
      return Promise.resolve(new dist_index_esm2017_Z(""));
    }
  }, {
    key: "invalidateToken",
    value: function invalidateToken() {}
  }, {
    key: "start",
    value: function start(t, e) {}
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }]);

  return et;
}()));
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
 * exceed. All subsequent calls to next will return increasing values. If provided with a
 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
 * well as write out sequence numbers that it produces via `next()`.
 */


var index_esm2017_nt = /*#__PURE__*/function () {
  function nt(t, e) {
    var _this8 = this;

    firestore_dist_index_esm2017_classCallCheck(this, nt);

    this.previousValue = t, e && (e.sequenceNumberHandler = function (t) {
      return _this8.I(t);
    }, this.T = function (t) {
      return e.writeSequenceNumber(t);
    });
  }

  firestore_dist_index_esm2017_createClass(nt, [{
    key: "I",
    value: function I(t) {
      return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
    }
  }, {
    key: "next",
    value: function next() {
      var t = ++this.previousValue;
      return this.T && this.T(t), t;
    }
  }]);

  return nt;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */


function index_esm2017_st(t) {
  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
  var e = // eslint-disable-next-line @typescript-eslint/no-explicit-any
  "undefined" != typeof self && (self.crypto || self.msCrypto),
      n = new Uint8Array(t);
  if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n);else // Falls back to Math.random
    for (var _e2 = 0; _e2 < t; _e2++) {
      n[_e2] = Math.floor(256 * Math.random());
    }
  return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


index_esm2017_nt.A = -1;

var index_esm2017_it = /*#__PURE__*/function () {
  function it() {
    firestore_dist_index_esm2017_classCallCheck(this, it);
  }

  firestore_dist_index_esm2017_createClass(it, null, [{
    key: "R",
    value: function R() {
      // Alphanumeric characters
      var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
          e = Math.floor(256 / t.length) * t.length; // The largest byte value that is a multiple of `char.length`.

      var n = "";

      for (; n.length < 20;) {
        var s = index_esm2017_st(40);

        for (var i = 0; i < s.length; ++i) {
          // Only accept values that are [0, maxMultiple), this ensures they can
          // be evenly mapped to indices of `chars` via a modulo operation.
          n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
        }
      }

      return n;
    }
  }]);

  return it;
}();

function index_esm2017_rt(t, e) {
  return t < e ? -1 : t > e ? 1 : 0;
}
/** Helper to compare arrays using isEqual(). */


function index_esm2017_ot(t, e, n) {
  return t.length === e.length && t.every(function (t, s) {
    return n(t, e[s]);
  });
}
/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */


function index_esm2017_ut(t) {
  // Return the input string, with an additional NUL byte appended.
  return t + "\0";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).

/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * For examples and further specifications, refer to the
 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
 */


var index_esm2017_at = /*#__PURE__*/function () {
  /**
   * Creates a new timestamp.
   *
   * @param seconds - The number of seconds of UTC time since Unix epoch
   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   *     9999-12-31T23:59:59Z inclusive.
   * @param nanoseconds - The non-negative fractions of a second at nanosecond
   *     resolution. Negative second values with fractions must still have
   *     non-negative nanoseconds values that count forward in time. Must be
   *     from 0 to 999,999,999 inclusive.
   */
  function at(
  /**
   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
   */
  t,
  /**
   * The fractions of a second at nanosecond resolution.*
   */
  e) {
    firestore_dist_index_esm2017_classCallCheck(this, at);

    if (this.seconds = t, this.nanoseconds = e, e < 0) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
    if (e >= 1e9) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
    if (t < -62135596800) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t); // This will break in the year 10,000.

    if (t >= 253402300800) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
  }
  /**
   * Creates a new timestamp with the current date, with millisecond precision.
   *
   * @returns a new timestamp representing the current date.
   */


  firestore_dist_index_esm2017_createClass(at, [{
    key: "toDate",
    value:
    /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
     * causes a loss of precision since `Date` objects only support millisecond
     * precision.
     *
     * @returns JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */
    function toDate() {
      return new Date(this.toMillis());
    }
    /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @returns The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */

  }, {
    key: "toMillis",
    value: function toMillis() {
      return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }
  }, {
    key: "_compareTo",
    value: function _compareTo(t) {
      return this.seconds === t.seconds ? index_esm2017_rt(this.nanoseconds, t.nanoseconds) : index_esm2017_rt(this.seconds, t.seconds);
    }
    /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other - The `Timestamp` to compare against.
     * @returns true if this `Timestamp` is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
    }
    /** Returns a textual representation of this `Timestamp`. */

  }, {
    key: "toString",
    value: function toString() {
      return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }
    /** Returns a JSON-serializable representation of this `Timestamp`. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        seconds: this.seconds,
        nanoseconds: this.nanoseconds
      };
    }
    /**
     * Converts this object to a primitive string, which allows `Timestamp` objects
     * to be compared using the `>`, `<=`, `>=` and `>` operators.
     */

  }, {
    key: "valueOf",
    value: function valueOf() {
      // This method returns a string of the form <seconds>.<nanoseconds> where
      // <seconds> is translated to have a non-negative value and both <seconds>
      // and <nanoseconds> are left-padded with zeroes to be a consistent length.
      // Strings with this format then have a lexiographical ordering that matches
      // the expected ordering. The <seconds> translation is done to avoid having
      // a leading negative sign (i.e. a leading '-' character) in its string
      // representation, which would affect its lexiographical ordering.
      var t = this.seconds - -62135596800; // Note: Up to 12 decimal digits are required to represent all valid
      // 'seconds' values.

      return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }
  }], [{
    key: "now",
    value: function now() {
      return at.fromMillis(Date.now());
    }
    /**
     * Creates a new timestamp from the given date.
     *
     * @param date - The date to initialize the `Timestamp` from.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     date.
     */

  }, {
    key: "fromDate",
    value: function fromDate(t) {
      return at.fromMillis(t.getTime());
    }
    /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds - Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */

  }, {
    key: "fromMillis",
    value: function fromMillis(t) {
      var e = Math.floor(t / 1e3),
          n = Math.floor(1e6 * (t - 1e3 * e));
      return new at(e, n);
    }
  }]);

  return at;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */


var index_esm2017_ct = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ct(t) {
    firestore_dist_index_esm2017_classCallCheck(this, ct);

    this.timestamp = t;
  }

  firestore_dist_index_esm2017_createClass(ct, [{
    key: "compareTo",
    value: function compareTo(t) {
      return this.timestamp._compareTo(t.timestamp);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.timestamp.isEqual(t.timestamp);
    }
    /** Returns a number representation of the version for use in spec tests. */

  }, {
    key: "toMicroseconds",
    value: function toMicroseconds() {
      // Convert to microseconds.
      return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }
  }, {
    key: "toTimestamp",
    value: function toTimestamp() {
      return this.timestamp;
    }
  }], [{
    key: "fromTimestamp",
    value: function fromTimestamp(t) {
      return new ct(t);
    }
  }, {
    key: "min",
    value: function min() {
      return new ct(new index_esm2017_at(0, 0));
    }
  }, {
    key: "max",
    value: function max() {
      return new ct(new index_esm2017_at(253402300799, 999999999));
    }
  }]);

  return ct;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function index_esm2017_ht(t) {
  var e = 0;

  for (var n in t) {
    Object.prototype.hasOwnProperty.call(t, n) && e++;
  }

  return e;
}

function index_esm2017_lt(t, e) {
  for (var n in t) {
    Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
  }
}

function index_esm2017_ft(t) {
  for (var e in t) {
    if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
  }

  return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Path represents an ordered sequence of string segments.
 */


var index_esm2017_dt = /*#__PURE__*/function () {
  function dt(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, dt);

    void 0 === e ? e = 0 : e > t.length && dist_index_esm2017_L(), void 0 === n ? n = t.length - e : n > t.length - e && dist_index_esm2017_L(), this.segments = t, this.offset = e, this.len = n;
  }

  firestore_dist_index_esm2017_createClass(dt, [{
    key: "length",
    get: function get() {
      return this.len;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return 0 === dt.comparator(this, t);
    }
  }, {
    key: "child",
    value: function child(t) {
      var e = this.segments.slice(this.offset, this.limit());
      return t instanceof dt ? t.forEach(function (t) {
        e.push(t);
      }) : e.push(t), this.construct(e);
    }
    /** The index of one past the last segment of the path. */

  }, {
    key: "limit",
    value: function limit() {
      return this.offset + this.length;
    }
  }, {
    key: "popFirst",
    value: function popFirst(t) {
      return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
    }
  }, {
    key: "popLast",
    value: function popLast() {
      return this.construct(this.segments, this.offset, this.length - 1);
    }
  }, {
    key: "firstSegment",
    value: function firstSegment() {
      return this.segments[this.offset];
    }
  }, {
    key: "lastSegment",
    value: function lastSegment() {
      return this.get(this.length - 1);
    }
  }, {
    key: "get",
    value: function get(t) {
      return this.segments[this.offset + t];
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return 0 === this.length;
    }
  }, {
    key: "isPrefixOf",
    value: function isPrefixOf(t) {
      if (t.length < this.length) return !1;

      for (var e = 0; e < this.length; e++) {
        if (this.get(e) !== t.get(e)) return !1;
      }

      return !0;
    }
  }, {
    key: "isImmediateParentOf",
    value: function isImmediateParentOf(t) {
      if (this.length + 1 !== t.length) return !1;

      for (var e = 0; e < this.length; e++) {
        if (this.get(e) !== t.get(e)) return !1;
      }

      return !0;
    }
  }, {
    key: "forEach",
    value: function forEach(t) {
      for (var e = this.offset, n = this.limit(); e < n; e++) {
        t(this.segments[e]);
      }
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return this.segments.slice(this.offset, this.limit());
    }
  }], [{
    key: "comparator",
    value: function comparator(t, e) {
      var n = Math.min(t.length, e.length);

      for (var s = 0; s < n; s++) {
        var _n2 = t.get(s),
            i = e.get(s);

        if (_n2 < i) return -1;
        if (_n2 > i) return 1;
      }

      return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
    }
  }]);

  return dt;
}();
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 *
 * @internal
 */


var index_esm2017_t = /*#__PURE__*/function (_dt) {
  firestore_dist_index_esm2017_inherits(_t, _dt);

  var _super2 = firestore_dist_index_esm2017_createSuper(_t);

  function _t() {
    firestore_dist_index_esm2017_classCallCheck(this, _t);

    return _super2.apply(this, arguments);
  }

  firestore_dist_index_esm2017_createClass(_t, [{
    key: "construct",
    value: function construct(t, e, n) {
      return new _t(t, e, n);
    }
  }, {
    key: "canonicalString",
    value: function canonicalString() {
      // NOTE: The client is ignorant of any path segments containing escape
      // sequences (e.g. __id123__) and just passes them through raw (they exist
      // for legacy reasons and should not be used frequently).
      return this.toArray().join("/");
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.canonicalString();
    }
    /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */

  }], [{
    key: "fromString",
    value: function fromString() {
      // NOTE: The client is ignorant of any path segments containing escape
      // sequences (e.g. __id123__) and just passes them through raw (they exist
      // for legacy reasons and should not be used frequently).
      var e = [];

      for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        t[_key4] = arguments[_key4];
      }

      for (var _i2 = 0, _t4 = t; _i2 < _t4.length; _i2++) {
        var n = _t4[_i2];
        if (n.indexOf("//") >= 0) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid segment (".concat(n, "). Paths must not contain // in them.")); // Strip leading and traling slashed.

        e.push.apply(e, dist_index_esm2017_toConsumableArray(n.split("/").filter(function (t) {
          return t.length > 0;
        })));
      }

      return new _t(e);
    }
  }, {
    key: "emptyPath",
    value: function emptyPath() {
      return new _t([]);
    }
  }]);

  return _t;
}(index_esm2017_dt);

var index_esm2017_wt = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * A dot-separated path for navigating sub-objects within a document.
 * @internal
 */

var index_esm2017_mt = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_dt2) {
  firestore_dist_index_esm2017_inherits(mt, _dt2);

  var _super3 = firestore_dist_index_esm2017_createSuper(mt);

  function mt() {
    firestore_dist_index_esm2017_classCallCheck(this, mt);

    return _super3.apply(this, arguments);
  }

  firestore_dist_index_esm2017_createClass(mt, [{
    key: "construct",
    value: function construct(t, e, n) {
      return new mt(t, e, n);
    }
    /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */

  }, {
    key: "canonicalString",
    value: function canonicalString() {
      return this.toArray().map(function (t) {
        return t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), mt.isValidIdentifier(t) || (t = "`" + t + "`"), t;
      }).join(".");
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.canonicalString();
    }
    /**
     * Returns true if this field references the key of a document.
     */

  }, {
    key: "isKeyField",
    value: function isKeyField() {
      return 1 === this.length && "__name__" === this.get(0);
    }
    /**
     * The field designating the key of a document.
     */

  }], [{
    key: "isValidIdentifier",
    value: function isValidIdentifier(t) {
      return index_esm2017_wt.test(t);
    }
  }, {
    key: "keyField",
    value: function keyField() {
      return new mt(["__name__"]);
    }
    /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */

  }, {
    key: "fromServerFormat",
    value: function fromServerFormat(t) {
      var e = [];
      var n = "",
          s = 0;

      var i = function i() {
        if (0 === n.length) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid field path (".concat(t, "). Paths must not be empty, begin with '.', end with '.', or contain '..'"));
        e.push(n), n = "";
      };

      var r = !1;

      for (; s < t.length;) {
        var _e3 = t[s];

        if ("\\" === _e3) {
          if (s + 1 === t.length) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
          var _e4 = t[s + 1];
          if ("\\" !== _e4 && "." !== _e4 && "`" !== _e4) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
          n += _e4, s += 2;
        } else "`" === _e3 ? (r = !r, s++) : "." !== _e3 || r ? (n += _e3, s++) : (i(), s++);
      }

      if (i(), r) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
      return new mt(e);
    }
  }, {
    key: "emptyPath",
    value: function emptyPath() {
      return new mt([]);
    }
  }]);

  return mt;
}(index_esm2017_dt)));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */


var index_esm2017_gt = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function gt(t) {
    firestore_dist_index_esm2017_classCallCheck(this, gt);

    this.fields = t, // TODO(dimond): validation of FieldMask
    // Sort the field mask to support `FieldMask.isEqual()` and assert below.
    t.sort(index_esm2017_mt.comparator);
  }
  /**
   * Verifies that `fieldPath` is included by at least one field in this field
   * mask.
   *
   * This is an O(n) operation, where `n` is the size of the field mask.
   */


  firestore_dist_index_esm2017_createClass(gt, [{
    key: "covers",
    value: function covers(t) {
      var _iterator = firestore_dist_index_esm2017_createForOfIteratorHelper(this.fields),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var e = _step.value;
          if (e.isPrefixOf(t)) return !0;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return !1;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return index_esm2017_ot(this.fields, t.fields, function (t, e) {
        return t.isEqual(e);
      });
    }
  }]);

  return gt;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Converts a Base64 encoded string to a binary string. */

/** True if and only if the Base64 conversion functions are available. */


function index_esm2017_yt() {
  return "undefined" != typeof atob;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 * @internal
 */


var index_esm2017_pt = /*#__PURE__*/function (_Symbol$iterator) {
  function pt(t) {
    firestore_dist_index_esm2017_classCallCheck(this, pt);

    this.binaryString = t;
  }

  firestore_dist_index_esm2017_createClass(pt, [{
    key: _Symbol$iterator,
    value: function value() {
      var _this9 = this;

      var t = 0;
      return {
        next: function next() {
          return t < _this9.binaryString.length ? {
            value: _this9.binaryString.charCodeAt(t++),
            done: !1
          } : {
            value: void 0,
            done: !0
          };
        }
      };
    }
  }, {
    key: "toBase64",
    value: function toBase64() {
      return t = this.binaryString, btoa(t);
      /** Converts a binary string to a Base64 encoded string. */

      var t;
    }
  }, {
    key: "toUint8Array",
    value: function toUint8Array() {
      return function (t) {
        var e = new Uint8Array(t.length);

        for (var n = 0; n < t.length; n++) {
          e[n] = t.charCodeAt(n);
        }

        return e;
      }
      /**
      * @license
      * Copyright 2020 Google LLC
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */
      // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
      (this.binaryString);
    }
  }, {
    key: "approximateByteSize",
    value: function approximateByteSize() {
      return 2 * this.binaryString.length;
    }
  }, {
    key: "compareTo",
    value: function compareTo(t) {
      return index_esm2017_rt(this.binaryString, t.binaryString);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.binaryString === t.binaryString;
    }
  }], [{
    key: "fromBase64String",
    value: function fromBase64String(t) {
      var e = atob(t);
      return new pt(e);
    }
  }, {
    key: "fromUint8Array",
    value: function fromUint8Array(t) {
      // TODO(indexing); Remove the copy of the byte string here as this method
      // is frequently called during indexing.
      var e =
      /**
      * Helper function to convert an Uint8array to a binary string.
      */
      function (t) {
        var e = "";

        for (var n = 0; n < t.length; ++n) {
          e += String.fromCharCode(t[n]);
        }

        return e;
      }
      /**
      * Helper function to convert a binary string to an Uint8Array.
      */
      (t);

      return new pt(e);
    }
  }]);

  return pt;
}(Symbol.iterator);

index_esm2017_pt.EMPTY_BYTE_STRING = new index_esm2017_pt("");
var index_esm2017_It = (/* unused pure expression or super */ null && (new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/)));
/**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */

function index_esm2017_Tt(t) {
  // The json interface (for the browser) will return an iso timestamp string,
  // while the proto js library (for node) will return a
  // google.protobuf.Timestamp instance.
  if (dist_index_esm2017_U(!!t), "string" == typeof t) {
    // The date string can have higher precision (nanos) than the Date class
    // (millis), so we do some custom parsing here.
    // Parse the nanos right out of the string.
    var e = 0;
    var n = index_esm2017_It.exec(t);

    if (dist_index_esm2017_U(!!n), n[1]) {
      // Pad the fraction out to 9 digits (nanos).
      var _t5 = n[1];
      _t5 = (_t5 + "000000000").substr(0, 9), e = Number(_t5);
    } // Parse the date to get the seconds.


    var s = new Date(t);
    return {
      seconds: Math.floor(s.getTime() / 1e3),
      nanos: e
    };
  }

  return {
    seconds: index_esm2017_Et(t.seconds),
    nanos: index_esm2017_Et(t.nanos)
  };
}
/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */


function index_esm2017_Et(t) {
  // TODO(bjornick): Handle int64 greater than 53 bits.
  return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString. */


function index_esm2017_At(t) {
  return "string" == typeof t ? index_esm2017_pt.fromBase64String(t) : index_esm2017_pt.fromUint8Array(t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   transform. They can only exist in the local view of a document. Therefore
 *   they do not need to be parsed or serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */


function index_esm2017_Rt(t) {
  var e, n;
  return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
}
/**
 * Creates a new ServerTimestamp proto value (using the internal format).
 */

/**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */


function index_esm2017_bt(t) {
  var e = t.mapValue.fields.__previous_value__;
  return index_esm2017_Rt(e) ? index_esm2017_bt(e) : e;
}
/**
 * Returns the local time at which this timestamp was first set.
 */


function index_esm2017_Pt(t) {
  var e = index_esm2017_Tt(t.mapValue.fields.__local_write_time__.timestampValue);
  return new index_esm2017_at(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_Vt = /*#__PURE__*/firestore_dist_index_esm2017_createClass(
/**
 * Constructs a DatabaseInfo using the provided host, databaseId and
 * persistenceKey.
 *
 * @param databaseId - The database to use.
 * @param appId - The Firebase App Id.
 * @param persistenceKey - A unique identifier for this Firestore's local
 * storage (used in conjunction with the databaseId).
 * @param host - The Firestore backend host to connect to.
 * @param ssl - Whether to use SSL when connecting.
 * @param forceLongPolling - Whether to use the forceLongPolling option
 * when using WebChannel as the network transport.
 * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
 * option when using WebChannel as the network transport.
 * @param useFetchStreams Whether to use the Fetch API instead of
 * XMLHTTPRequest
 */
function Vt(t, e, n, s, i, r, o, u) {
  firestore_dist_index_esm2017_classCallCheck(this, Vt);

  this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = s, this.ssl = i, this.forceLongPolling = r, this.autoDetectLongPolling = o, this.useFetchStreams = u;
});
/** The default database name for a project. */

/**
 * Represents the database ID a Firestore client is associated with.
 * @internal
 */


var index_esm2017_vt = /*#__PURE__*/function () {
  function vt(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, vt);

    this.projectId = t, this.database = e || "(default)";
  }

  firestore_dist_index_esm2017_createClass(vt, [{
    key: "isDefaultDatabase",
    get: function get() {
      return "(default)" === this.database;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof vt && t.projectId === this.projectId && t.database === this.database;
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new vt("", "");
    }
  }]);

  return vt;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Sentinel value that sorts before any Mutation Batch ID. */

/**
 * Returns whether a variable is either undefined or null.
 */


function index_esm2017_St(t) {
  return null == t;
}
/** Returns whether the value represents -0. */


function index_esm2017_Dt(t) {
  // Detect if the value is -0.0. Based on polyfill from
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  return 0 === t && 1 / t == -1 / 0;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value - The value to test for being an integer and in the safe range
 */


function index_esm2017_Ct(t) {
  return "number" == typeof t && Number.isInteger(t) && !index_esm2017_Dt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @internal
 */


var index_esm2017_xt = /*#__PURE__*/function () {
  function xt(t) {
    firestore_dist_index_esm2017_classCallCheck(this, xt);

    this.path = t;
  }

  firestore_dist_index_esm2017_createClass(xt, [{
    key: "collectionGroup",
    get: function get() {
      return this.path.popLast().lastSegment();
    }
    /** Returns true if the document is in the specified collectionId. */

  }, {
    key: "hasCollectionId",
    value: function hasCollectionId(t) {
      return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
    }
    /** Returns the collection group (i.e. the name of the parent collection) for this key. */

  }, {
    key: "getCollectionGroup",
    value: function getCollectionGroup() {
      return this.path.get(this.path.length - 2);
    }
    /** Returns the fully qualified path to the parent collection. */

  }, {
    key: "getCollectionPath",
    value: function getCollectionPath() {
      return this.path.popLast();
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return null !== t && 0 === index_esm2017_t.comparator(this.path, t.path);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.path.toString();
    }
  }], [{
    key: "fromPath",
    value: function fromPath(t) {
      return new xt(index_esm2017_t.fromString(t));
    }
  }, {
    key: "fromName",
    value: function fromName(t) {
      return new xt(index_esm2017_t.fromString(t).popFirst(5));
    }
  }, {
    key: "empty",
    value: function empty() {
      return new xt(index_esm2017_t.emptyPath());
    }
  }, {
    key: "comparator",
    value: function comparator(t, e) {
      return index_esm2017_t.comparator(t.path, e.path);
    }
  }, {
    key: "isDocumentKey",
    value: function isDocumentKey(t) {
      return t.length % 2 == 0;
    }
    /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments - The segments of the path to the document
     * @returns A new instance of DocumentKey
     */

  }, {
    key: "fromSegments",
    value: function fromSegments(t) {
      return new xt(new index_esm2017_t(t.slice()));
    }
  }]);

  return xt;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_Nt = {
  mapValue: {
    fields: {
      __type__: {
        stringValue: "__max__"
      }
    }
  }
},
    index_esm2017_kt = {
  nullValue: "NULL_VALUE"
};
/** Extracts the backend's type order for the provided value. */

function index_esm2017_Mt(t) {
  return "nullValue" in t ? 0
  /* NullValue */
  : "booleanValue" in t ? 1
  /* BooleanValue */
  : "integerValue" in t || "doubleValue" in t ? 2
  /* NumberValue */
  : "timestampValue" in t ? 3
  /* TimestampValue */
  : "stringValue" in t ? 5
  /* StringValue */
  : "bytesValue" in t ? 6
  /* BlobValue */
  : "referenceValue" in t ? 7
  /* RefValue */
  : "geoPointValue" in t ? 8
  /* GeoPointValue */
  : "arrayValue" in t ? 9
  /* ArrayValue */
  : "mapValue" in t ? index_esm2017_Rt(t) ? 4
  /* ServerTimestampValue */
  : index_esm2017_Ht(t) ? 9007199254740991
  /* MaxValue */
  : 10
  /* ObjectValue */
  : dist_index_esm2017_L();
}
/** Tests `left` and `right` for equality based on the backend semantics. */


function index_esm2017_Ot(t, e) {
  if (t === e) return !0;
  var n = index_esm2017_Mt(t);
  if (n !== index_esm2017_Mt(e)) return !1;

  switch (n) {
    case 0
    /* NullValue */
    :
    case 9007199254740991
    /* MaxValue */
    :
      return !0;

    case 1
    /* BooleanValue */
    :
      return t.booleanValue === e.booleanValue;

    case 4
    /* ServerTimestampValue */
    :
      return index_esm2017_Pt(t).isEqual(index_esm2017_Pt(e));

    case 3
    /* TimestampValue */
    :
      return function (t, e) {
        if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) // Use string equality for ISO 8601 timestamps
          return t.timestampValue === e.timestampValue;
        var n = index_esm2017_Tt(t.timestampValue),
            s = index_esm2017_Tt(e.timestampValue);
        return n.seconds === s.seconds && n.nanos === s.nanos;
      }(t, e);

    case 5
    /* StringValue */
    :
      return t.stringValue === e.stringValue;

    case 6
    /* BlobValue */
    :
      return function (t, e) {
        return index_esm2017_At(t.bytesValue).isEqual(index_esm2017_At(e.bytesValue));
      }(t, e);

    case 7
    /* RefValue */
    :
      return t.referenceValue === e.referenceValue;

    case 8
    /* GeoPointValue */
    :
      return function (t, e) {
        return index_esm2017_Et(t.geoPointValue.latitude) === index_esm2017_Et(e.geoPointValue.latitude) && index_esm2017_Et(t.geoPointValue.longitude) === index_esm2017_Et(e.geoPointValue.longitude);
      }(t, e);

    case 2
    /* NumberValue */
    :
      return function (t, e) {
        if ("integerValue" in t && "integerValue" in e) return index_esm2017_Et(t.integerValue) === index_esm2017_Et(e.integerValue);

        if ("doubleValue" in t && "doubleValue" in e) {
          var _n3 = index_esm2017_Et(t.doubleValue),
              s = index_esm2017_Et(e.doubleValue);

          return _n3 === s ? index_esm2017_Dt(_n3) === index_esm2017_Dt(s) : isNaN(_n3) && isNaN(s);
        }

        return !1;
      }(t, e);

    case 9
    /* ArrayValue */
    :
      return index_esm2017_ot(t.arrayValue.values || [], e.arrayValue.values || [], index_esm2017_Ot);

    case 10
    /* ObjectValue */
    :
      return function (t, e) {
        var n = t.mapValue.fields || {},
            s = e.mapValue.fields || {};
        if (index_esm2017_ht(n) !== index_esm2017_ht(s)) return !1;

        for (var _t6 in n) {
          if (n.hasOwnProperty(_t6) && (void 0 === s[_t6] || !index_esm2017_Ot(n[_t6], s[_t6]))) return !1;
        }

        return !0;
      }
      /** Returns true if the ArrayValue contains the specified element. */
      (t, e);

    default:
      return dist_index_esm2017_L();
  }
}

function index_esm2017_Ft(t, e) {
  return void 0 !== (t.values || []).find(function (t) {
    return index_esm2017_Ot(t, e);
  });
}

function index_esm2017_$t(t, e) {
  if (t === e) return 0;
  var n = index_esm2017_Mt(t),
      s = index_esm2017_Mt(e);
  if (n !== s) return index_esm2017_rt(n, s);

  switch (n) {
    case 0
    /* NullValue */
    :
    case 9007199254740991
    /* MaxValue */
    :
      return 0;

    case 1
    /* BooleanValue */
    :
      return index_esm2017_rt(t.booleanValue, e.booleanValue);

    case 2
    /* NumberValue */
    :
      return function (t, e) {
        var n = index_esm2017_Et(t.integerValue || t.doubleValue),
            s = index_esm2017_Et(e.integerValue || e.doubleValue);
        return n < s ? -1 : n > s ? 1 : n === s ? 0 : // one or both are NaN.
        isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
      }(t, e);

    case 3
    /* TimestampValue */
    :
      return index_esm2017_Bt(t.timestampValue, e.timestampValue);

    case 4
    /* ServerTimestampValue */
    :
      return index_esm2017_Bt(index_esm2017_Pt(t), index_esm2017_Pt(e));

    case 5
    /* StringValue */
    :
      return index_esm2017_rt(t.stringValue, e.stringValue);

    case 6
    /* BlobValue */
    :
      return function (t, e) {
        var n = index_esm2017_At(t),
            s = index_esm2017_At(e);
        return n.compareTo(s);
      }(t.bytesValue, e.bytesValue);

    case 7
    /* RefValue */
    :
      return function (t, e) {
        var n = t.split("/"),
            s = e.split("/");

        for (var _t7 = 0; _t7 < n.length && _t7 < s.length; _t7++) {
          var _e5 = index_esm2017_rt(n[_t7], s[_t7]);

          if (0 !== _e5) return _e5;
        }

        return index_esm2017_rt(n.length, s.length);
      }(t.referenceValue, e.referenceValue);

    case 8
    /* GeoPointValue */
    :
      return function (t, e) {
        var n = index_esm2017_rt(index_esm2017_Et(t.latitude), index_esm2017_Et(e.latitude));
        if (0 !== n) return n;
        return index_esm2017_rt(index_esm2017_Et(t.longitude), index_esm2017_Et(e.longitude));
      }(t.geoPointValue, e.geoPointValue);

    case 9
    /* ArrayValue */
    :
      return function (t, e) {
        var n = t.values || [],
            s = e.values || [];

        for (var _t8 = 0; _t8 < n.length && _t8 < s.length; ++_t8) {
          var _e6 = index_esm2017_$t(n[_t8], s[_t8]);

          if (_e6) return _e6;
        }

        return index_esm2017_rt(n.length, s.length);
      }(t.arrayValue, e.arrayValue);

    case 10
    /* ObjectValue */
    :
      return function (t, e) {
        if (t === index_esm2017_Nt.mapValue && e === index_esm2017_Nt.mapValue) return 0;
        if (t === index_esm2017_Nt.mapValue) return 1;
        if (e === index_esm2017_Nt.mapValue) return -1;
        var n = t.fields || {},
            s = Object.keys(n),
            i = e.fields || {},
            r = Object.keys(i); // Even though MapValues are likely sorted correctly based on their insertion
        // order (e.g. when received from the backend), local modifications can bring
        // elements out of order. We need to re-sort the elements to ensure that
        // canonical IDs are independent of insertion order.

        s.sort(), r.sort();

        for (var _t9 = 0; _t9 < s.length && _t9 < r.length; ++_t9) {
          var _e7 = index_esm2017_rt(s[_t9], r[_t9]);

          if (0 !== _e7) return _e7;
          var o = index_esm2017_$t(n[s[_t9]], i[r[_t9]]);
          if (0 !== o) return o;
        }

        return index_esm2017_rt(s.length, r.length);
      }
      /**
      * Generates the canonical ID for the provided field value (as used in Target
      * serialization).
      */
      (t.mapValue, e.mapValue);

    default:
      throw dist_index_esm2017_L();
  }
}

function index_esm2017_Bt(t, e) {
  if ("string" == typeof t && "string" == typeof e && t.length === e.length) return index_esm2017_rt(t, e);
  var n = index_esm2017_Tt(t),
      s = index_esm2017_Tt(e),
      i = index_esm2017_rt(n.seconds, s.seconds);
  return 0 !== i ? i : index_esm2017_rt(n.nanos, s.nanos);
}

function index_esm2017_Lt(t) {
  return index_esm2017_Ut(t);
}

function index_esm2017_Ut(t) {
  return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function (t) {
    var e = index_esm2017_Tt(t);
    return "time(".concat(e.seconds, ",").concat(e.nanos, ")");
  }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? index_esm2017_At(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, index_esm2017_xt.fromName(n).toString()) : "geoPointValue" in t ? "geo(".concat((e = t.geoPointValue).latitude, ",").concat(e.longitude, ")") : "arrayValue" in t ? function (t) {
    var e = "[",
        n = !0;

    var _iterator2 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.values || []),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var s = _step2.value;
        n ? n = !1 : e += ",", e += index_esm2017_Ut(s);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return e + "]";
  }
  /** Returns a reference value for the provided database and key. */
  (t.arrayValue) : "mapValue" in t ? function (t) {
    // Iteration order in JavaScript is not guaranteed. To ensure that we generate
    // matching canonical IDs for identical maps, we need to sort the keys.
    var e = Object.keys(t.fields || {}).sort();
    var n = "{",
        s = !0;

    var _iterator3 = firestore_dist_index_esm2017_createForOfIteratorHelper(e),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var i = _step3.value;
        s ? s = !1 : n += ",", n += "".concat(i, ":").concat(index_esm2017_Ut(t.fields[i]));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return n + "}";
  }(t.mapValue) : dist_index_esm2017_L();
  var e, n;
}

function index_esm2017_qt(t, e) {
  return {
    referenceValue: "projects/".concat(t.projectId, "/databases/").concat(t.database, "/documents/").concat(e.path.canonicalString())
  };
}
/** Returns true if `value` is an IntegerValue . */


function index_esm2017_Kt(t) {
  return !!t && "integerValue" in t;
}
/** Returns true if `value` is a DoubleValue. */

/** Returns true if `value` is an ArrayValue. */


function index_esm2017_Gt(t) {
  return !!t && "arrayValue" in t;
}
/** Returns true if `value` is a NullValue. */


function index_esm2017_Qt(t) {
  return !!t && "nullValue" in t;
}
/** Returns true if `value` is NaN. */


function index_esm2017_jt(t) {
  return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
/** Returns true if `value` is a MapValue. */


function index_esm2017_Wt(t) {
  return !!t && "mapValue" in t;
}
/** Creates a deep copy of `source`. */


function index_esm2017_zt(t) {
  if (t.geoPointValue) return {
    geoPointValue: Object.assign({}, t.geoPointValue)
  };
  if (t.timestampValue && "object" == firestore_dist_index_esm2017_typeof(t.timestampValue)) return {
    timestampValue: Object.assign({}, t.timestampValue)
  };

  if (t.mapValue) {
    var e = {
      mapValue: {
        fields: {}
      }
    };
    return index_esm2017_lt(t.mapValue.fields, function (t, n) {
      return e.mapValue.fields[t] = index_esm2017_zt(n);
    }), e;
  }

  if (t.arrayValue) {
    var _e8 = {
      arrayValue: {
        values: []
      }
    };

    for (var n = 0; n < (t.arrayValue.values || []).length; ++n) {
      _e8.arrayValue.values[n] = index_esm2017_zt(t.arrayValue.values[n]);
    }

    return _e8;
  }

  return Object.assign({}, t);
}
/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */


function index_esm2017_Ht(t) {
  return "__max__" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;
}
/** Returns the lowest value for the given value type (inclusive). */


function index_esm2017_Jt(t) {
  return "nullValue" in t ? index_esm2017_kt : "booleanValue" in t ? {
    booleanValue: !1
  } : "integerValue" in t || "doubleValue" in t ? {
    doubleValue: NaN
  } : "timestampValue" in t ? {
    timestampValue: {
      seconds: Number.MIN_SAFE_INTEGER
    }
  } : "stringValue" in t ? {
    stringValue: ""
  } : "bytesValue" in t ? {
    bytesValue: ""
  } : "referenceValue" in t ? index_esm2017_qt(index_esm2017_vt.empty(), index_esm2017_xt.empty()) : "geoPointValue" in t ? {
    geoPointValue: {
      latitude: -90,
      longitude: -180
    }
  } : "arrayValue" in t ? {
    arrayValue: {}
  } : "mapValue" in t ? {
    mapValue: {}
  } : dist_index_esm2017_L();
}
/** Returns the largest value for the given value type (exclusive). */


function index_esm2017_Yt(t) {
  return "nullValue" in t ? {
    booleanValue: !1
  } : "booleanValue" in t ? {
    doubleValue: NaN
  } : "integerValue" in t || "doubleValue" in t ? {
    timestampValue: {
      seconds: Number.MIN_SAFE_INTEGER
    }
  } : "timestampValue" in t ? {
    stringValue: ""
  } : "stringValue" in t ? {
    bytesValue: ""
  } : "bytesValue" in t ? index_esm2017_qt(index_esm2017_vt.empty(), index_esm2017_xt.empty()) : "referenceValue" in t ? {
    geoPointValue: {
      latitude: -90,
      longitude: -180
    }
  } : "geoPointValue" in t ? {
    arrayValue: {}
  } : "arrayValue" in t ? {
    mapValue: {}
  } : "mapValue" in t ? index_esm2017_Nt : dist_index_esm2017_L();
}

function index_esm2017_Xt(t, e) {
  var n = index_esm2017_$t(t.value, e.value);
  return 0 !== n ? n : t.inclusive && !e.inclusive ? -1 : !t.inclusive && e.inclusive ? 1 : 0;
}

function index_esm2017_Zt(t, e) {
  var n = index_esm2017_$t(t.value, e.value);
  return 0 !== n ? n : t.inclusive && !e.inclusive ? 1 : !t.inclusive && e.inclusive ? -1 : 0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
 * ability to add and remove fields (via the ObjectValueBuilder).
 */


var index_esm2017_te = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function te(t) {
    firestore_dist_index_esm2017_classCallCheck(this, te);

    this.value = t;
  }

  firestore_dist_index_esm2017_createClass(te, [{
    key: "field",
    value:
    /**
     * Returns the value at the given path or null.
     *
     * @param path - the path to search
     * @returns The value at the path or null if the path is not set.
     */
    function field(t) {
      if (t.isEmpty()) return this.value;
      {
        var e = this.value;

        for (var n = 0; n < t.length - 1; ++n) {
          if (e = (e.mapValue.fields || {})[t.get(n)], !index_esm2017_Wt(e)) return null;
        }

        return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
      }
    }
    /**
     * Sets the field to the provided value.
     *
     * @param path - The field path to set.
     * @param value - The value to set.
     */

  }, {
    key: "set",
    value: function set(t, e) {
      this.getFieldsMap(t.popLast())[t.lastSegment()] = index_esm2017_zt(e);
    }
    /**
     * Sets the provided fields to the provided values.
     *
     * @param data - A map of fields to values (or null for deletes).
     */

  }, {
    key: "setAll",
    value: function setAll(t) {
      var _this10 = this;

      var e = index_esm2017_mt.emptyPath(),
          n = {},
          s = [];
      t.forEach(function (t, i) {
        if (!e.isImmediateParentOf(i)) {
          // Insert the accumulated changes at this parent location
          var _t10 = _this10.getFieldsMap(e);

          _this10.applyChanges(_t10, n, s), n = {}, s = [], e = i.popLast();
        }

        t ? n[i.lastSegment()] = index_esm2017_zt(t) : s.push(i.lastSegment());
      });
      var i = this.getFieldsMap(e);
      this.applyChanges(i, n, s);
    }
    /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path - The field path to remove.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      var e = this.field(t.popLast());
      index_esm2017_Wt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return index_esm2017_Ot(this.value, t.value);
    }
    /**
     * Returns the map that contains the leaf element of `path`. If the parent
     * entry does not yet exist, or if it is not a map, a new map will be created.
     */

  }, {
    key: "getFieldsMap",
    value: function getFieldsMap(t) {
      var e = this.value;
      e.mapValue.fields || (e.mapValue = {
        fields: {}
      });

      for (var n = 0; n < t.length; ++n) {
        var s = e.mapValue.fields[t.get(n)];
        index_esm2017_Wt(s) && s.mapValue.fields || (s = {
          mapValue: {
            fields: {}
          }
        }, e.mapValue.fields[t.get(n)] = s), e = s;
      }

      return e.mapValue.fields;
    }
    /**
     * Modifies `fieldsMap` by adding, replacing or deleting the specified
     * entries.
     */

  }, {
    key: "applyChanges",
    value: function applyChanges(t, e, n) {
      index_esm2017_lt(e, function (e, n) {
        return t[e] = n;
      });

      var _iterator4 = firestore_dist_index_esm2017_createForOfIteratorHelper(n),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _e9 = _step4.value;
          delete t[_e9];
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "clone",
    value: function clone() {
      return new te(index_esm2017_zt(this.value));
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new te({
        mapValue: {}
      });
    }
  }]);

  return te;
}()));
/**
 * Returns a FieldMask built from all fields in a MapValue.
 */


function index_esm2017_ee(t) {
  var e = [];
  return index_esm2017_lt(t.fields, function (t, n) {
    var s = new index_esm2017_mt([t]);

    if (index_esm2017_Wt(n)) {
      var _t11 = index_esm2017_ee(n.mapValue).fields;
      if (0 === _t11.length) // Preserve the empty map by adding it to the FieldMask.
        e.push(s);else {
        // For nested and non-empty ObjectValues, add the FieldPath of the
        // leaf nodes.
        var _iterator5 = firestore_dist_index_esm2017_createForOfIteratorHelper(_t11),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _n4 = _step5.value;
            e.push(s.child(_n4));
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    } else // For nested and non-empty ObjectValues, add the FieldPath of the leaf
      // nodes.
      e.push(s);
  }), new index_esm2017_gt(e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a document in Firestore with a key, version, data and whether it
 * has local mutations applied to it.
 *
 * Documents can transition between states via `convertToFoundDocument()`,
 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
 * not transition to one of these states even after all mutations have been
 * applied, `isValidDocument()` returns false and the document should be removed
 * from all views.
 */


var index_esm2017_ne = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ne(t, e, n, s, i, r) {
    firestore_dist_index_esm2017_classCallCheck(this, ne);

    this.key = t, this.documentType = e, this.version = n, this.readTime = s, this.data = i, this.documentState = r;
  }
  /**
   * Creates a document with no known version or data, but which can serve as
   * base document for mutations.
   */


  firestore_dist_index_esm2017_createClass(ne, [{
    key: "convertToFoundDocument",
    value:
    /**
     * Changes the document type to indicate that it exists and that its version
     * and data are known.
     */
    function convertToFoundDocument(t, e) {
      return this.version = t, this.documentType = 1
      /* FOUND_DOCUMENT */
      , this.data = e, this.documentState = 0
      /* SYNCED */
      , this;
    }
    /**
     * Changes the document type to indicate that it doesn't exist at the given
     * version.
     */

  }, {
    key: "convertToNoDocument",
    value: function convertToNoDocument(t) {
      return this.version = t, this.documentType = 2
      /* NO_DOCUMENT */
      , this.data = index_esm2017_te.empty(), this.documentState = 0
      /* SYNCED */
      , this;
    }
    /**
     * Changes the document type to indicate that it exists at a given version but
     * that its data is not known (e.g. a document that was updated without a known
     * base document).
     */

  }, {
    key: "convertToUnknownDocument",
    value: function convertToUnknownDocument(t) {
      return this.version = t, this.documentType = 3
      /* UNKNOWN_DOCUMENT */
      , this.data = index_esm2017_te.empty(), this.documentState = 2
      /* HAS_COMMITTED_MUTATIONS */
      , this;
    }
  }, {
    key: "setHasCommittedMutations",
    value: function setHasCommittedMutations() {
      return this.documentState = 2
      /* HAS_COMMITTED_MUTATIONS */
      , this;
    }
  }, {
    key: "setHasLocalMutations",
    value: function setHasLocalMutations() {
      return this.documentState = 1
      /* HAS_LOCAL_MUTATIONS */
      , this;
    }
  }, {
    key: "setReadTime",
    value: function setReadTime(t) {
      return this.readTime = t, this;
    }
  }, {
    key: "hasLocalMutations",
    get: function get() {
      return 1
      /* HAS_LOCAL_MUTATIONS */
      === this.documentState;
    }
  }, {
    key: "hasCommittedMutations",
    get: function get() {
      return 2
      /* HAS_COMMITTED_MUTATIONS */
      === this.documentState;
    }
  }, {
    key: "hasPendingWrites",
    get: function get() {
      return this.hasLocalMutations || this.hasCommittedMutations;
    }
  }, {
    key: "isValidDocument",
    value: function isValidDocument() {
      return 0
      /* INVALID */
      !== this.documentType;
    }
  }, {
    key: "isFoundDocument",
    value: function isFoundDocument() {
      return 1
      /* FOUND_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isNoDocument",
    value: function isNoDocument() {
      return 2
      /* NO_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isUnknownDocument",
    value: function isUnknownDocument() {
      return 3
      /* UNKNOWN_DOCUMENT */
      === this.documentType;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof ne && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
    }
  }, {
    key: "mutableCopy",
    value: function mutableCopy() {
      return new ne(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Document(".concat(this.key, ", ").concat(this.version, ", ").concat(JSON.stringify(this.data.value), ", {documentType: ").concat(this.documentType, "}), {documentState: ").concat(this.documentState, "})");
    }
  }], [{
    key: "newInvalidDocument",
    value: function newInvalidDocument(t) {
      return new ne(t, 0
      /* INVALID */
      , index_esm2017_ct.min(), index_esm2017_ct.min(), index_esm2017_te.empty(), 0
      /* SYNCED */
      );
    }
    /**
     * Creates a new document that is known to exist with the given data at the
     * given version.
     */

  }, {
    key: "newFoundDocument",
    value: function newFoundDocument(t, e, n) {
      return new ne(t, 1
      /* FOUND_DOCUMENT */
      , e, index_esm2017_ct.min(), n, 0
      /* SYNCED */
      );
    }
    /** Creates a new document that is known to not exist at the given version. */

  }, {
    key: "newNoDocument",
    value: function newNoDocument(t, e) {
      return new ne(t, 2
      /* NO_DOCUMENT */
      , e, index_esm2017_ct.min(), index_esm2017_te.empty(), 0
      /* SYNCED */
      );
    }
    /**
     * Creates a new document that is known to exist at the given version but
     * whose data is not known (e.g. a document that was updated without a known
     * base document).
     */

  }, {
    key: "newUnknownDocument",
    value: function newUnknownDocument(t, e) {
      return new ne(t, 3
      /* UNKNOWN_DOCUMENT */
      , e, index_esm2017_ct.min(), index_esm2017_te.empty(), 2
      /* HAS_COMMITTED_MUTATIONS */
      );
    }
  }]);

  return ne;
}()));
/**
 * Compares the value for field `field` in the provided documents. Throws if
 * the field does not exist in both documents.
 */

/**
 * An index definition for field indexes in Firestore.
 *
 * Every index is associated with a collection. The definition contains a list
 * of fields and their index kind (which can be `ASCENDING`, `DESCENDING` or
 * `CONTAINS` for ArrayContains/ArrayContainsAny queries).
 *
 * Unlike the backend, the SDK does not differentiate between collection or
 * collection group-scoped indices. Every index can be used for both single
 * collection and collection group queries.
 */


var index_esm2017_se = /*#__PURE__*/firestore_dist_index_esm2017_createClass(function se(
/**
 * The index ID. Returns -1 if the index ID is not available (e.g. the index
 * has not yet been persisted).
 */
t,
/** The collection ID this index applies to. */
e,
/** The field segments for this index. */
n,
/** Shows how up-to-date the index is for the current user. */
s) {
  firestore_dist_index_esm2017_classCallCheck(this, se);

  this.indexId = t, this.collectionGroup = e, this.fields = n, this.indexState = s;
});
/** An ID for an index that has not yet been added to persistence.  */

/** Returns the ArrayContains/ArrayContainsAny segment for this index. */


function index_esm2017_ie(t) {
  return t.fields.find(function (t) {
    return 2
    /* CONTAINS */
    === t.kind;
  });
}
/** Returns all directional (ascending/descending) segments for this index. */


function index_esm2017_re(t) {
  return t.fields.filter(function (t) {
    return 2
    /* CONTAINS */
    !== t.kind;
  });
}
/**
 * Returns the order of the document key component for the given index.
 *
 * PORTING NOTE: This is only used in the Web IndexedDb implementation.
 */


index_esm2017_se.UNKNOWN_ID = -1;
/** An index component consisting of field path and index type.  */

var index_esm2017_oe = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function oe(
/** The field path of the component. */
t,
/** The fields sorting order. */
e) {
  firestore_dist_index_esm2017_classCallCheck(this, oe);

  this.fieldPath = t, this.kind = e;
})));
/**
 * Stores the "high water mark" that indicates how updated the Index is for the
 * current user.
 */


var index_esm2017_ue = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ue(
  /**
   * Indicates when the index was last updated (relative to other indexes).
   */
  t,
  /** The the latest indexed read time, document and batch id. */
  e) {
    firestore_dist_index_esm2017_classCallCheck(this, ue);

    this.sequenceNumber = t, this.offset = e;
  }
  /** The state of an index that has not yet been backfilled. */


  firestore_dist_index_esm2017_createClass(ue, null, [{
    key: "empty",
    value: function empty() {
      return new ue(0, index_esm2017_he.min());
    }
  }]);

  return ue;
}()));
/**
 * Creates an offset that matches all documents with a read time higher than
 * `readTime`.
 */


function index_esm2017_ae(t, e) {
  // We want to create an offset that matches all documents with a read time
  // greater than the provided read time. To do so, we technically need to
  // create an offset for `(readTime, MAX_DOCUMENT_KEY)`. While we could use
  // Unicode codepoints to generate MAX_DOCUMENT_KEY, it is much easier to use
  // `(readTime + 1, DocumentKey.empty())` since `> DocumentKey.empty()` matches
  // all valid document IDs.
  var n = t.toTimestamp().seconds,
      s = t.toTimestamp().nanoseconds + 1,
      i = index_esm2017_ct.fromTimestamp(1e9 === s ? new index_esm2017_at(n + 1, 0) : new index_esm2017_at(n, s));
  return new index_esm2017_he(i, index_esm2017_xt.empty(), e);
}
/** Creates a new offset based on the provided document. */


function index_esm2017_ce(t) {
  return new index_esm2017_he(t.readTime, t.key, -1);
}
/**
 * Stores the latest read time, document and batch ID that were processed for an
 * index.
 */


var index_esm2017_he = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function he(
  /**
   * The latest read time version that has been indexed by Firestore for this
   * field index.
   */
  t,
  /**
   * The key of the last document that was indexed for this query. Use
   * `DocumentKey.empty()` if no document has been indexed.
   */
  e,
  /*
   * The largest mutation batch id that's been processed by Firestore.
   */
  n) {
    firestore_dist_index_esm2017_classCallCheck(this, he);

    this.readTime = t, this.documentKey = e, this.largestBatchId = n;
  }
  /** Returns an offset that sorts before all regular offsets. */


  firestore_dist_index_esm2017_createClass(he, null, [{
    key: "min",
    value: function min() {
      return new he(index_esm2017_ct.min(), index_esm2017_xt.empty(), -1);
    }
    /** Returns an offset that sorts after all regular offsets. */

  }, {
    key: "max",
    value: function max() {
      return new he(index_esm2017_ct.max(), index_esm2017_xt.empty(), -1);
    }
  }]);

  return he;
}()));

function index_esm2017_le(t, e) {
  var n = t.readTime.compareTo(e.readTime);
  return 0 !== n ? n : (n = index_esm2017_xt.comparator(t.documentKey, e.documentKey), 0 !== n ? n : index_esm2017_rt(t.largestBatchId, e.largestBatchId));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.


var index_esm2017_fe = /*#__PURE__*/function () {
  function fe(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, fe);

    this.comparator = t, this.root = e || index_esm2017_e.EMPTY;
  } // Returns a copy of the map, with the specified key/value added or replaced.


  firestore_dist_index_esm2017_createClass(fe, [{
    key: "insert",
    value: function insert(t, e) {
      return new fe(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, index_esm2017_e.BLACK, null, null));
    } // Returns a copy of the map, with the specified key removed.

  }, {
    key: "remove",
    value: function remove(t) {
      return new fe(this.comparator, this.root.remove(t, this.comparator).copy(null, null, index_esm2017_e.BLACK, null, null));
    } // Returns the value of the node with the given key, or null.

  }, {
    key: "get",
    value: function get(t) {
      var e = this.root;

      for (; !e.isEmpty();) {
        var n = this.comparator(t, e.key);
        if (0 === n) return e.value;
        n < 0 ? e = e.left : n > 0 && (e = e.right);
      }

      return null;
    } // Returns the index of the element in this sorted map, or -1 if it doesn't
    // exist.

  }, {
    key: "indexOf",
    value: function indexOf(t) {
      // Number of nodes that were pruned when descending right
      var e = 0,
          n = this.root;

      for (; !n.isEmpty();) {
        var s = this.comparator(t, n.key);
        if (0 === s) return e + n.left.size;
        s < 0 ? n = n.left : ( // Count all nodes left of the node plus the node itself
        e += n.left.size + 1, n = n.right);
      } // Node not found


      return -1;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.root.isEmpty();
    } // Returns the total number of nodes in the map.

  }, {
    key: "size",
    get: function get() {
      return this.root.size;
    } // Returns the minimum key in the map.

  }, {
    key: "minKey",
    value: function minKey() {
      return this.root.minKey();
    } // Returns the maximum key in the map.

  }, {
    key: "maxKey",
    value: function maxKey() {
      return this.root.maxKey();
    } // Traverses the map in key order and calls the specified action function
    // for each key/value pair. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.

  }, {
    key: "inorderTraversal",
    value: function inorderTraversal(t) {
      return this.root.inorderTraversal(t);
    }
  }, {
    key: "forEach",
    value: function forEach(t) {
      this.inorderTraversal(function (e, n) {
        return t(e, n), !1;
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      var t = [];
      return this.inorderTraversal(function (e, n) {
        return t.push("".concat(e, ":").concat(n)), !1;
      }), "{".concat(t.join(", "), "}");
    } // Traverses the map in reverse key order and calls the specified action
    // function for each key/value pair. If action returns true, traversal is
    // aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.

  }, {
    key: "reverseTraversal",
    value: function reverseTraversal(t) {
      return this.root.reverseTraversal(t);
    } // Returns an iterator over the SortedMap.

  }, {
    key: "getIterator",
    value: function getIterator() {
      return new index_esm2017_de(this.root, null, this.comparator, !1);
    }
  }, {
    key: "getIteratorFrom",
    value: function getIteratorFrom(t) {
      return new index_esm2017_de(this.root, t, this.comparator, !1);
    }
  }, {
    key: "getReverseIterator",
    value: function getReverseIterator() {
      return new index_esm2017_de(this.root, null, this.comparator, !0);
    }
  }, {
    key: "getReverseIteratorFrom",
    value: function getReverseIteratorFrom(t) {
      return new index_esm2017_de(this.root, t, this.comparator, !0);
    }
  }]);

  return fe;
}(); // end SortedMap
// An iterator over an LLRBNode.


var index_esm2017_de = /*#__PURE__*/function () {
  function de(t, e, n, s) {
    firestore_dist_index_esm2017_classCallCheck(this, de);

    this.isReverse = s, this.nodeStack = [];
    var i = 1;

    for (; !t.isEmpty();) {
      if (i = e ? n(t.key, e) : 1, // flip the comparison if we're going in reverse
      e && s && (i *= -1), i < 0) // This node is less than our start key. ignore it
        t = this.isReverse ? t.left : t.right;else {
        if (0 === i) {
          // This node is exactly equal to our start key. Push it on the stack,
          // but stop iterating;
          this.nodeStack.push(t);
          break;
        } // This node is greater than our start key, add it to the stack and move
        // to the next one


        this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
      }
    }
  }

  firestore_dist_index_esm2017_createClass(de, [{
    key: "getNext",
    value: function getNext() {
      var t = this.nodeStack.pop();
      var e = {
        key: t.key,
        value: t.value
      };
      if (this.isReverse) for (t = t.left; !t.isEmpty();) {
        this.nodeStack.push(t), t = t.right;
      } else for (t = t.right; !t.isEmpty();) {
        this.nodeStack.push(t), t = t.left;
      }
      return e;
    }
  }, {
    key: "hasNext",
    value: function hasNext() {
      return this.nodeStack.length > 0;
    }
  }, {
    key: "peek",
    value: function peek() {
      if (0 === this.nodeStack.length) return null;
      var t = this.nodeStack[this.nodeStack.length - 1];
      return {
        key: t.key,
        value: t.value
      };
    }
  }]);

  return de;
}(); // end SortedMapIterator
// Represents a node in a Left-leaning Red-Black tree.


var index_esm2017_e = /*#__PURE__*/function () {
  function _e(t, e, n, s, i) {
    firestore_dist_index_esm2017_classCallCheck(this, _e);

    this.key = t, this.value = e, this.color = null != n ? n : _e.RED, this.left = null != s ? s : _e.EMPTY, this.right = null != i ? i : _e.EMPTY, this.size = this.left.size + 1 + this.right.size;
  } // Returns a copy of the current node, optionally replacing pieces of it.


  firestore_dist_index_esm2017_createClass(_e, [{
    key: "copy",
    value: function copy(t, e, n, s, i) {
      return new _e(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !1;
    } // Traverses the tree in key order and calls the specified action function
    // for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.

  }, {
    key: "inorderTraversal",
    value: function inorderTraversal(t) {
      return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
    } // Traverses the tree in reverse key order and calls the specified action
    // function for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.

  }, {
    key: "reverseTraversal",
    value: function reverseTraversal(t) {
      return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
    } // Returns the minimum node in the tree.

  }, {
    key: "min",
    value: function min() {
      return this.left.isEmpty() ? this : this.left.min();
    } // Returns the maximum key in the tree.

  }, {
    key: "minKey",
    value: function minKey() {
      return this.min().key;
    } // Returns the maximum key in the tree.

  }, {
    key: "maxKey",
    value: function maxKey() {
      return this.right.isEmpty() ? this.key : this.right.maxKey();
    } // Returns new tree, with the key/value added.

  }, {
    key: "insert",
    value: function insert(t, e, n) {
      var s = this;
      var i = n(t, s.key);
      return s = i < 0 ? s.copy(null, null, null, s.left.insert(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.insert(t, e, n)), s.fixUp();
    }
  }, {
    key: "removeMin",
    value: function removeMin() {
      if (this.left.isEmpty()) return _e.EMPTY;
      var t = this;
      return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();
    } // Returns new tree, with the specified item removed.

  }, {
    key: "remove",
    value: function remove(t, e) {
      var n,
          s = this;
      if (e(t, s.key) < 0) s.left.isEmpty() || s.left.isRed() || s.left.left.isRed() || (s = s.moveRedLeft()), s = s.copy(null, null, null, s.left.remove(t, e), null);else {
        if (s.left.isRed() && (s = s.rotateRight()), s.right.isEmpty() || s.right.isRed() || s.right.left.isRed() || (s = s.moveRedRight()), 0 === e(t, s.key)) {
          if (s.right.isEmpty()) return _e.EMPTY;
          n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.removeMin());
        }

        s = s.copy(null, null, null, null, s.right.remove(t, e));
      }
      return s.fixUp();
    }
  }, {
    key: "isRed",
    value: function isRed() {
      return this.color;
    } // Returns new tree after performing any needed rotations.

  }, {
    key: "fixUp",
    value: function fixUp() {
      var t = this;
      return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
    }
  }, {
    key: "moveRedLeft",
    value: function moveRedLeft() {
      var t = this.colorFlip();
      return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;
    }
  }, {
    key: "moveRedRight",
    value: function moveRedRight() {
      var t = this.colorFlip();
      return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
    }
  }, {
    key: "rotateLeft",
    value: function rotateLeft() {
      var t = this.copy(null, null, _e.RED, null, this.right.left);
      return this.right.copy(null, null, this.color, t, null);
    }
  }, {
    key: "rotateRight",
    value: function rotateRight() {
      var t = this.copy(null, null, _e.RED, this.left.right, null);
      return this.left.copy(null, null, this.color, null, t);
    }
  }, {
    key: "colorFlip",
    value: function colorFlip() {
      var t = this.left.copy(null, null, !this.left.color, null, null),
          e = this.right.copy(null, null, !this.right.color, null, null);
      return this.copy(null, null, !this.color, t, e);
    } // For testing.

  }, {
    key: "checkMaxDepth",
    value: function checkMaxDepth() {
      var t = this.check();
      return Math.pow(2, t) <= this.size + 1;
    } // In a balanced RB tree, the black-depth (number of black nodes) from root to
    // leaves is equal on both sides.  This function verifies that or asserts.

  }, {
    key: "check",
    value: function check() {
      if (this.isRed() && this.left.isRed()) throw dist_index_esm2017_L();
      if (this.right.isRed()) throw dist_index_esm2017_L();
      var t = this.left.check();
      if (t !== this.right.check()) throw dist_index_esm2017_L();
      return t + (this.isRed() ? 0 : 1);
    }
  }]);

  return _e;
}(); // end LLRBNode
// Empty node is shared between all LLRB trees.
// eslint-disable-next-line @typescript-eslint/no-explicit-any


index_esm2017_e.EMPTY = null, index_esm2017_e.RED = !0, index_esm2017_e.BLACK = !1; // end LLRBEmptyNode

index_esm2017_e.EMPTY = new (
/*#__PURE__*/
// Represents an empty node (a leaf node in the Red-Black Tree).
function () {
  function _class() {
    firestore_dist_index_esm2017_classCallCheck(this, _class);

    this.size = 0;
  }

  firestore_dist_index_esm2017_createClass(_class, [{
    key: "key",
    get: function get() {
      throw dist_index_esm2017_L();
    }
  }, {
    key: "value",
    get: function get() {
      throw dist_index_esm2017_L();
    }
  }, {
    key: "color",
    get: function get() {
      throw dist_index_esm2017_L();
    }
  }, {
    key: "left",
    get: function get() {
      throw dist_index_esm2017_L();
    }
  }, {
    key: "right",
    get: function get() {
      throw dist_index_esm2017_L();
    } // Returns a copy of the current node.

  }, {
    key: "copy",
    value: function copy(t, e, n, s, i) {
      return this;
    } // Returns a copy of the tree, with the specified key/value added.

  }, {
    key: "insert",
    value: function insert(t, e, n) {
      return new index_esm2017_e(t, e);
    } // Returns a copy of the tree, with the specified key removed.

  }, {
    key: "remove",
    value: function remove(t, e) {
      return this;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return !0;
    }
  }, {
    key: "inorderTraversal",
    value: function inorderTraversal(t) {
      return !1;
    }
  }, {
    key: "reverseTraversal",
    value: function reverseTraversal(t) {
      return !1;
    }
  }, {
    key: "minKey",
    value: function minKey() {
      return null;
    }
  }, {
    key: "maxKey",
    value: function maxKey() {
      return null;
    }
  }, {
    key: "isRed",
    value: function isRed() {
      return !1;
    } // For testing.

  }, {
    key: "checkMaxDepth",
    value: function checkMaxDepth() {
      return !0;
    }
  }, {
    key: "check",
    value: function check() {
      return 0;
    }
  }]);

  return _class;
}())();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */

var index_esm2017_we = /*#__PURE__*/function () {
  function we(t) {
    firestore_dist_index_esm2017_classCallCheck(this, we);

    this.comparator = t, this.data = new index_esm2017_fe(this.comparator);
  }

  firestore_dist_index_esm2017_createClass(we, [{
    key: "has",
    value: function has(t) {
      return null !== this.data.get(t);
    }
  }, {
    key: "first",
    value: function first() {
      return this.data.minKey();
    }
  }, {
    key: "last",
    value: function last() {
      return this.data.maxKey();
    }
  }, {
    key: "size",
    get: function get() {
      return this.data.size;
    }
  }, {
    key: "indexOf",
    value: function indexOf(t) {
      return this.data.indexOf(t);
    }
    /** Iterates elements in order defined by "comparator" */

  }, {
    key: "forEach",
    value: function forEach(t) {
      this.data.inorderTraversal(function (e, n) {
        return t(e), !1;
      });
    }
    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */

  }, {
    key: "forEachInRange",
    value: function forEachInRange(t, e) {
      var n = this.data.getIteratorFrom(t[0]);

      for (; n.hasNext();) {
        var s = n.getNext();
        if (this.comparator(s.key, t[1]) >= 0) return;
        e(s.key);
      }
    }
    /**
     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
     */

  }, {
    key: "forEachWhile",
    value: function forEachWhile(t, e) {
      var n;

      for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext();) {
        if (!t(n.getNext().key)) return;
      }
    }
    /** Finds the least element greater than or equal to `elem`. */

  }, {
    key: "firstAfterOrEqual",
    value: function firstAfterOrEqual(t) {
      var e = this.data.getIteratorFrom(t);
      return e.hasNext() ? e.getNext().key : null;
    }
  }, {
    key: "getIterator",
    value: function getIterator() {
      return new index_esm2017_me(this.data.getIterator());
    }
  }, {
    key: "getIteratorFrom",
    value: function getIteratorFrom(t) {
      return new index_esm2017_me(this.data.getIteratorFrom(t));
    }
    /** Inserts or updates an element */

  }, {
    key: "add",
    value: function add(t) {
      return this.copy(this.data.remove(t).insert(t, !0));
    }
    /** Deletes an element */

  }, {
    key: "delete",
    value: function _delete(t) {
      return this.has(t) ? this.copy(this.data.remove(t)) : this;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.data.isEmpty();
    }
  }, {
    key: "unionWith",
    value: function unionWith(t) {
      var e = this; // Make sure `result` always refers to the larger one of the two sets.

      return e.size < t.size && (e = t, t = this), t.forEach(function (t) {
        e = e.add(t);
      }), e;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      if (!(t instanceof we)) return !1;
      if (this.size !== t.size) return !1;
      var e = this.data.getIterator(),
          n = t.data.getIterator();

      for (; e.hasNext();) {
        var _t12 = e.getNext().key,
            s = n.getNext().key;
        if (0 !== this.comparator(_t12, s)) return !1;
      }

      return !0;
    }
  }, {
    key: "toArray",
    value: function toArray() {
      var t = [];
      return this.forEach(function (e) {
        t.push(e);
      }), t;
    }
  }, {
    key: "toString",
    value: function toString() {
      var t = [];
      return this.forEach(function (e) {
        return t.push(e);
      }), "SortedSet(" + t.toString() + ")";
    }
  }, {
    key: "copy",
    value: function copy(t) {
      var e = new we(this.comparator);
      return e.data = t, e;
    }
  }]);

  return we;
}();

var index_esm2017_me = /*#__PURE__*/function () {
  function me(t) {
    firestore_dist_index_esm2017_classCallCheck(this, me);

    this.iter = t;
  }

  firestore_dist_index_esm2017_createClass(me, [{
    key: "getNext",
    value: function getNext() {
      return this.iter.getNext().key;
    }
  }, {
    key: "hasNext",
    value: function hasNext() {
      return this.iter.hasNext();
    }
  }]);

  return me;
}();
/**
 * Compares two sorted sets for equality using their natural ordering. The
 * method computes the intersection and invokes `onAdd` for every element that
 * is in `after` but not `before`. `onRemove` is invoked for every element in
 * `before` but missing from `after`.
 *
 * The method creates a copy of both `before` and `after` and runs in O(n log
 * n), where n is the size of the two lists.
 *
 * @param before - The elements that exist in the original set.
 * @param after - The elements to diff against the original set.
 * @param comparator - The comparator for the elements in before and after.
 * @param onAdd - A function to invoke for every element that is part of `
 * after` but not `before`.
 * @param onRemove - A function to invoke for every element that is part of
 * `before` but not `after`.
 */

/**
 * Returns the next element from the iterator or `undefined` if none available.
 */


function index_esm2017_ge(t) {
  return t.hasNext() ? t.getNext() : void 0;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Visible for testing


var index_esm2017_ye = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function ye(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

  firestore_dist_index_esm2017_classCallCheck(this, ye);

  this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, this.startAt = r, this.endAt = o, this.P = null;
})));
/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */


function index_esm2017_pe(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  return new index_esm2017_ye(t, e, n, s, i, r, o);
}

function index_esm2017_Ie(t) {
  var e = dist_index_esm2017_K(t);

  if (null === e.P) {
    var _t13 = e.path.canonicalString();

    null !== e.collectionGroup && (_t13 += "|cg:" + e.collectionGroup), _t13 += "|f:", _t13 += e.filters.map(function (t) {
      return (e = t).field.canonicalString() + e.op.toString() + index_esm2017_Lt(e.value);
      var e;
    }).join(","), _t13 += "|ob:", _t13 += e.orderBy.map(function (t) {
      return function (t) {
        // TODO(b/29183165): Make this collision robust.
        return t.field.canonicalString() + t.dir;
      }(t);
    }).join(","), index_esm2017_St(e.limit) || (_t13 += "|l:", _t13 += e.limit), e.startAt && (_t13 += "|lb:", _t13 += e.startAt.inclusive ? "b:" : "a:", _t13 += e.startAt.position.map(function (t) {
      return index_esm2017_Lt(t);
    }).join(",")), e.endAt && (_t13 += "|ub:", _t13 += e.endAt.inclusive ? "a:" : "b:", _t13 += e.endAt.position.map(function (t) {
      return index_esm2017_Lt(t);
    }).join(",")), e.P = _t13;
  }

  return e.P;
}

function index_esm2017_Te(t) {
  var e = t.path.canonicalString();
  return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), t.filters.length > 0 && (e += ", filters: [".concat(t.filters.map(function (t) {
    return "".concat((e = t).field.canonicalString(), " ").concat(e.op, " ").concat(index_esm2017_Lt(e.value));
    /** Returns a debug description for `filter`. */

    var e;
    /** Filter that matches on key fields (i.e. '__name__'). */
  }).join(", "), "]")), index_esm2017_St(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += ", orderBy: [".concat(t.orderBy.map(function (t) {
    return function (t) {
      return "".concat(t.field.canonicalString(), " (").concat(t.dir, ")");
    }(t);
  }).join(", "), "]")), t.startAt && (e += ", startAt: ", e += t.startAt.inclusive ? "b:" : "a:", e += t.startAt.position.map(function (t) {
    return index_esm2017_Lt(t);
  }).join(",")), t.endAt && (e += ", endAt: ", e += t.endAt.inclusive ? "a:" : "b:", e += t.endAt.position.map(function (t) {
    return index_esm2017_Lt(t);
  }).join(",")), "Target(".concat(e, ")");
}

function index_esm2017_Ee(t, e) {
  if (t.limit !== e.limit) return !1;
  if (t.orderBy.length !== e.orderBy.length) return !1;

  for (var _n5 = 0; _n5 < t.orderBy.length; _n5++) {
    if (!index_esm2017_$e(t.orderBy[_n5], e.orderBy[_n5])) return !1;
  }

  if (t.filters.length !== e.filters.length) return !1;

  for (var i = 0; i < t.filters.length; i++) {
    if (n = t.filters[i], s = e.filters[i], n.op !== s.op || !n.field.isEqual(s.field) || !index_esm2017_Ot(n.value, s.value)) return !1;
  }

  var n, s;
  return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!index_esm2017_Le(t.startAt, e.startAt) && index_esm2017_Le(t.endAt, e.endAt);
}

function index_esm2017_Ae(t) {
  return index_esm2017_xt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
}
/** Returns the field filters that target the given field path. */


function index_esm2017_Re(t, e) {
  return t.filters.filter(function (t) {
    return t instanceof index_esm2017_Ve && t.field.isEqual(e);
  });
}
/**
 * Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY
 * filters. Returns `null` if there are no such filters.
 */

/**
 * Returns the value to use as the lower bound for ascending index segment at
 * the provided `fieldPath` (or the upper bound for an descending segment).
 */


function index_esm2017_be(t, e, n) {
  var s = index_esm2017_kt,
      i = !0; // Process all filters to find a value for the current field segment

  var _iterator6 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_Re(t, e)),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var _n6 = _step6.value;

      var _t15 = index_esm2017_kt,
          _e10 = !0;

      switch (_n6.op) {
        case "<"
        /* LESS_THAN */
        :
        case "<="
        /* LESS_THAN_OR_EQUAL */
        :
          _t15 = index_esm2017_Jt(_n6.value);
          break;

        case "=="
        /* EQUAL */
        :
        case "in"
        /* IN */
        :
        case ">="
        /* GREATER_THAN_OR_EQUAL */
        :
          _t15 = _n6.value;
          break;

        case ">"
        /* GREATER_THAN */
        :
          _t15 = _n6.value, _e10 = !1;
          break;

        case "!="
        /* NOT_EQUAL */
        :
        case "not-in"
        /* NOT_IN */
        :
          _t15 = index_esm2017_kt;
        // Remaining filters cannot be used as lower bounds.
      }

      index_esm2017_Xt({
        value: s,
        inclusive: i
      }, {
        value: _t15,
        inclusive: _e10
      }) < 0 && (s = _t15, i = _e10);
    } // If there is an additional bound, compare the values against the existing
    // range to see if we can narrow the scope.

  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  if (null !== n) for (var r = 0; r < t.orderBy.length; ++r) {
    if (t.orderBy[r].field.isEqual(e)) {
      var _t14 = n.position[r];
      index_esm2017_Xt({
        value: s,
        inclusive: i
      }, {
        value: _t14,
        inclusive: n.inclusive
      }) < 0 && (s = _t14, i = n.inclusive);
      break;
    }
  }
  return {
    value: s,
    inclusive: i
  };
}
/**
 * Returns the value to use as the upper bound for ascending index segment at
 * the provided `fieldPath` (or the lower bound for a descending segment).
 */


function index_esm2017_Pe(t, e, n) {
  var s = index_esm2017_Nt,
      i = !0; // Process all filters to find a value for the current field segment

  var _iterator7 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_Re(t, e)),
      _step7;

  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var _n7 = _step7.value;

      var _t17 = index_esm2017_Nt,
          _e11 = !0;

      switch (_n7.op) {
        case ">="
        /* GREATER_THAN_OR_EQUAL */
        :
        case ">"
        /* GREATER_THAN */
        :
          _t17 = index_esm2017_Yt(_n7.value), _e11 = !1;
          break;

        case "=="
        /* EQUAL */
        :
        case "in"
        /* IN */
        :
        case "<="
        /* LESS_THAN_OR_EQUAL */
        :
          _t17 = _n7.value;
          break;

        case "<"
        /* LESS_THAN */
        :
          _t17 = _n7.value, _e11 = !1;
          break;

        case "!="
        /* NOT_EQUAL */
        :
        case "not-in"
        /* NOT_IN */
        :
          _t17 = index_esm2017_Nt;
        // Remaining filters cannot be used as upper bounds.
      }

      index_esm2017_Zt({
        value: s,
        inclusive: i
      }, {
        value: _t17,
        inclusive: _e11
      }) > 0 && (s = _t17, i = _e11);
    } // If there is an additional bound, compare the values against the existing
    // range to see if we can narrow the scope.

  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  if (null !== n) for (var r = 0; r < t.orderBy.length; ++r) {
    if (t.orderBy[r].field.isEqual(e)) {
      var _t16 = n.position[r];
      index_esm2017_Zt({
        value: s,
        inclusive: i
      }, {
        value: _t16,
        inclusive: n.inclusive
      }) > 0 && (s = _t16, i = n.inclusive);
      break;
    }
  }
  return {
    value: s,
    inclusive: i
  };
}
/** Returns the number of segments of a perfect index for this target. */


var index_esm2017_Ve = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_ref2) {
  firestore_dist_index_esm2017_inherits(Ve, _ref2);

  var _super4 = firestore_dist_index_esm2017_createSuper(Ve);

  function Ve(t, e, n) {
    var _this11;

    firestore_dist_index_esm2017_classCallCheck(this, Ve);

    _this11 = _super4.call(this), _this11.field = t, _this11.op = e, _this11.value = n;
    return _this11;
  }
  /**
   * Creates a filter based on the provided arguments.
   */


  firestore_dist_index_esm2017_createClass(Ve, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field); // Types do not have to match in NOT_EQUAL filters.

      return "!="
      /* NOT_EQUAL */
      === this.op ? null !== e && this.v(index_esm2017_$t(e, this.value)) : null !== e && index_esm2017_Mt(this.value) === index_esm2017_Mt(e) && this.v(index_esm2017_$t(e, this.value)); // Only compare types with matching backend order (such as double and int).
    }
  }, {
    key: "v",
    value: function v(t) {
      switch (this.op) {
        case "<"
        /* LESS_THAN */
        :
          return t < 0;

        case "<="
        /* LESS_THAN_OR_EQUAL */
        :
          return t <= 0;

        case "=="
        /* EQUAL */
        :
          return 0 === t;

        case "!="
        /* NOT_EQUAL */
        :
          return 0 !== t;

        case ">"
        /* GREATER_THAN */
        :
          return t > 0;

        case ">="
        /* GREATER_THAN_OR_EQUAL */
        :
          return t >= 0;

        default:
          return dist_index_esm2017_L();
      }
    }
  }, {
    key: "S",
    value: function S() {
      return ["<"
      /* LESS_THAN */
      , "<="
      /* LESS_THAN_OR_EQUAL */
      , ">"
      /* GREATER_THAN */
      , ">="
      /* GREATER_THAN_OR_EQUAL */
      , "!="
      /* NOT_EQUAL */
      , "not-in"
      /* NOT_IN */
      ].indexOf(this.op) >= 0;
    }
  }], [{
    key: "create",
    value: function create(t, e, n) {
      return t.isKeyField() ? "in"
      /* IN */
      === e || "not-in"
      /* NOT_IN */
      === e ? this.V(t, e, n) : new index_esm2017_ve(t, e, n) : "array-contains"
      /* ARRAY_CONTAINS */
      === e ? new index_esm2017_xe(t, n) : "in"
      /* IN */
      === e ? new index_esm2017_Ne(t, n) : "not-in"
      /* NOT_IN */
      === e ? new index_esm2017_ke(t, n) : "array-contains-any"
      /* ARRAY_CONTAINS_ANY */
      === e ? new index_esm2017_Me(t, n) : new Ve(t, e, n);
    }
  }, {
    key: "V",
    value: function V(t, e, n) {
      return "in"
      /* IN */
      === e ? new index_esm2017_Se(t, n) : new index_esm2017_De(t, n);
    }
  }]);

  return Ve;
}( /*#__PURE__*/function () {
  function _class2() {
    firestore_dist_index_esm2017_classCallCheck(this, _class2);
  }

  return firestore_dist_index_esm2017_createClass(_class2);
}())));

var index_esm2017_ve = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ve) {
  firestore_dist_index_esm2017_inherits(ve, _Ve);

  var _super5 = firestore_dist_index_esm2017_createSuper(ve);

  function ve(t, e, n) {
    var _this12;

    firestore_dist_index_esm2017_classCallCheck(this, ve);

    _this12 = _super5.call(this, t, e, n), _this12.key = index_esm2017_xt.fromName(n.referenceValue);
    return _this12;
  }

  firestore_dist_index_esm2017_createClass(ve, [{
    key: "matches",
    value: function matches(t) {
      var e = index_esm2017_xt.comparator(t.key, this.key);
      return this.v(e);
    }
  }]);

  return ve;
}(index_esm2017_Ve)));
/** Filter that matches on key fields within an array. */


var index_esm2017_Se = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ve2) {
  firestore_dist_index_esm2017_inherits(Se, _Ve2);

  var _super6 = firestore_dist_index_esm2017_createSuper(Se);

  function Se(t, e) {
    var _this13;

    firestore_dist_index_esm2017_classCallCheck(this, Se);

    _this13 = _super6.call(this, t, "in"
    /* IN */
    , e), _this13.keys = index_esm2017_Ce("in"
    /* IN */
    , e);
    return _this13;
  }

  firestore_dist_index_esm2017_createClass(Se, [{
    key: "matches",
    value: function matches(t) {
      return this.keys.some(function (e) {
        return e.isEqual(t.key);
      });
    }
  }]);

  return Se;
}(index_esm2017_Ve)));
/** Filter that matches on key fields not present within an array. */


var index_esm2017_De = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ve3) {
  firestore_dist_index_esm2017_inherits(De, _Ve3);

  var _super7 = firestore_dist_index_esm2017_createSuper(De);

  function De(t, e) {
    var _this14;

    firestore_dist_index_esm2017_classCallCheck(this, De);

    _this14 = _super7.call(this, t, "not-in"
    /* NOT_IN */
    , e), _this14.keys = index_esm2017_Ce("not-in"
    /* NOT_IN */
    , e);
    return _this14;
  }

  firestore_dist_index_esm2017_createClass(De, [{
    key: "matches",
    value: function matches(t) {
      return !this.keys.some(function (e) {
        return e.isEqual(t.key);
      });
    }
  }]);

  return De;
}(index_esm2017_Ve)));

function index_esm2017_Ce(t, e) {
  var n;
  return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map(function (t) {
    return index_esm2017_xt.fromName(t.referenceValue);
  });
}
/** A Filter that implements the array-contains operator. */


var index_esm2017_xe = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ve4) {
  firestore_dist_index_esm2017_inherits(xe, _Ve4);

  var _super8 = firestore_dist_index_esm2017_createSuper(xe);

  function xe(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, xe);

    return _super8.call(this, t, "array-contains"
    /* ARRAY_CONTAINS */
    , e);
  }

  firestore_dist_index_esm2017_createClass(xe, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field);
      return index_esm2017_Gt(e) && index_esm2017_Ft(e.arrayValue, this.value);
    }
  }]);

  return xe;
}(index_esm2017_Ve)));
/** A Filter that implements the IN operator. */


var index_esm2017_Ne = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ve5) {
  firestore_dist_index_esm2017_inherits(Ne, _Ve5);

  var _super9 = firestore_dist_index_esm2017_createSuper(Ne);

  function Ne(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Ne);

    return _super9.call(this, t, "in"
    /* IN */
    , e);
  }

  firestore_dist_index_esm2017_createClass(Ne, [{
    key: "matches",
    value: function matches(t) {
      var e = t.data.field(this.field);
      return null !== e && index_esm2017_Ft(this.value.arrayValue, e);
    }
  }]);

  return Ne;
}(index_esm2017_Ve)));
/** A Filter that implements the not-in operator. */


var index_esm2017_ke = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ve6) {
  firestore_dist_index_esm2017_inherits(ke, _Ve6);

  var _super10 = firestore_dist_index_esm2017_createSuper(ke);

  function ke(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, ke);

    return _super10.call(this, t, "not-in"
    /* NOT_IN */
    , e);
  }

  firestore_dist_index_esm2017_createClass(ke, [{
    key: "matches",
    value: function matches(t) {
      if (index_esm2017_Ft(this.value.arrayValue, {
        nullValue: "NULL_VALUE"
      })) return !1;
      var e = t.data.field(this.field);
      return null !== e && !index_esm2017_Ft(this.value.arrayValue, e);
    }
  }]);

  return ke;
}(index_esm2017_Ve)));
/** A Filter that implements the array-contains-any operator. */


var index_esm2017_Me = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ve7) {
  firestore_dist_index_esm2017_inherits(Me, _Ve7);

  var _super11 = firestore_dist_index_esm2017_createSuper(Me);

  function Me(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Me);

    return _super11.call(this, t, "array-contains-any"
    /* ARRAY_CONTAINS_ANY */
    , e);
  }

  firestore_dist_index_esm2017_createClass(Me, [{
    key: "matches",
    value: function matches(t) {
      var _this15 = this;

      var e = t.data.field(this.field);
      return !(!index_esm2017_Gt(e) || !e.arrayValue.values) && e.arrayValue.values.some(function (t) {
        return index_esm2017_Ft(_this15.value.arrayValue, t);
      });
    }
  }]);

  return Me;
}(index_esm2017_Ve)));
/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */


var index_esm2017_Oe = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function Oe(t, e) {
  firestore_dist_index_esm2017_classCallCheck(this, Oe);

  this.position = t, this.inclusive = e;
})));
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */


var index_esm2017_Fe = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function Fe(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "asc";

  firestore_dist_index_esm2017_classCallCheck(this, Fe);

  this.field = t, this.dir = e;
})));

function index_esm2017_$e(t, e) {
  return t.dir === e.dir && t.field.isEqual(e.field);
}

function index_esm2017_Be(t, e, n) {
  var s = 0;

  for (var i = 0; i < t.position.length; i++) {
    var r = e[i],
        o = t.position[i];
    if (r.field.isKeyField()) s = index_esm2017_xt.comparator(index_esm2017_xt.fromName(o.referenceValue), n.key);else {
      s = index_esm2017_$t(o, n.data.field(r.field));
    }
    if ("desc"
    /* DESCENDING */
    === r.dir && (s *= -1), 0 !== s) break;
  }

  return s;
}
/**
 * Returns true if a document sorts after a bound using the provided sort
 * order.
 */


function index_esm2017_Le(t, e) {
  if (null === t) return null === e;
  if (null === e) return !1;
  if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;

  for (var n = 0; n < t.position.length; n++) {
    if (!index_esm2017_Ot(t.position[n], e.position[n])) return !1;
  }

  return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Query encapsulates all the query attributes we support in the SDK. It can
 * be run against the LocalStore, as well as be converted to a `Target` to
 * query the RemoteStore results.
 *
 * Visible for testing.
 */


var index_esm2017_Ue = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(
/**
 * Initializes a Query with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 */
function Ue(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "F";
  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  var u = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;

  firestore_dist_index_esm2017_classCallCheck(this, Ue);

  this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = s, this.limit = i, this.limitType = r, this.startAt = o, this.endAt = u, this.D = null, // The corresponding `Target` of this `Query` instance.
  this.C = null, this.startAt, this.endAt;
})));
/** Creates a new Query instance with the options provided. */


function index_esm2017_qe(t, e, n, s, i, r, o, u) {
  return new index_esm2017_Ue(t, e, n, s, i, r, o, u);
}
/** Creates a new Query for a query that matches all documents at `path` */


function index_esm2017_Ke(t) {
  return new index_esm2017_Ue(t);
}
/**
 * Helper to convert a collection group query into a collection query at a
 * specific path. This is used when executing collection group queries, since
 * we have to split the query into a set of collection queries at multiple
 * paths.
 */

/**
 * Returns true if this query does not specify any query constraints that
 * could remove results.
 */


function index_esm2017_Ge(t) {
  return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
}

function index_esm2017_Qe(t) {
  return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
}

function index_esm2017_je(t) {
  var _iterator8 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.filters),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var e = _step8.value;
      if (e.S()) return e.field;
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }

  return null;
}
/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */

/**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */


function index_esm2017_We(t) {
  return null !== t.collectionGroup;
}
/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */


function index_esm2017_ze(t) {
  var e = dist_index_esm2017_K(t);

  if (null === e.D) {
    e.D = [];

    var _t18 = index_esm2017_je(e),
        n = index_esm2017_Qe(e);

    if (null !== _t18 && null === n) // In order to implicitly add key ordering, we must also add the
      // inequality filter field for it to be a valid query.
      // Note that the default inequality field and key ordering is ascending.
      _t18.isKeyField() || e.D.push(new index_esm2017_Fe(_t18)), e.D.push(new index_esm2017_Fe(index_esm2017_mt.keyField(), "asc"
      /* ASCENDING */
      ));else {
      var _t19 = !1;

      var _iterator9 = firestore_dist_index_esm2017_createForOfIteratorHelper(e.explicitOrderBy),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _n8 = _step9.value;
          e.D.push(_n8), _n8.field.isKeyField() && (_t19 = !0);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      if (!_t19) {
        // The order of the implicit key ordering always matches the last
        // explicit order by
        var _t20 = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc"
        /* ASCENDING */
        ;

        e.D.push(new index_esm2017_Fe(index_esm2017_mt.keyField(), _t20));
      }
    }
  }

  return e.D;
}
/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */


function index_esm2017_He(t) {
  var e = dist_index_esm2017_K(t);
  if (!e.C) if ("F"
  /* First */
  === e.limitType) e.C = index_esm2017_pe(e.path, e.collectionGroup, index_esm2017_ze(e), e.filters, e.limit, e.startAt, e.endAt);else {
    // Flip the orderBy directions since we want the last results
    var _t21 = [];

    var _iterator10 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_ze(e)),
        _step10;

    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var _n9 = _step10.value;

        var _e12 = "desc"
        /* DESCENDING */
        === _n9.dir ? "asc"
        /* ASCENDING */
        : "desc"
        /* DESCENDING */
        ;

        _t21.push(new index_esm2017_Fe(_n9.field, _e12));
      } // We need to swap the cursors to match the now-flipped query ordering.

    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }

    var n = e.endAt ? new index_esm2017_Oe(e.endAt.position, e.endAt.inclusive) : null,
        s = e.startAt ? new index_esm2017_Oe(e.startAt.position, e.startAt.inclusive) : null; // Now return as a LimitType.First query.

    e.C = index_esm2017_pe(e.path, e.collectionGroup, _t21, e.filters, e.limit, n, s);
  }
  return e.C;
}

function index_esm2017_Je(t, e, n) {
  return new index_esm2017_Ue(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
}

function index_esm2017_Ye(t, e) {
  return index_esm2017_Ee(index_esm2017_He(t), index_esm2017_He(e)) && t.limitType === e.limitType;
} // TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.


function index_esm2017_Xe(t) {
  return "".concat(index_esm2017_Ie(index_esm2017_He(t)), "|lt:").concat(t.limitType);
}

function index_esm2017_Ze(t) {
  return "Query(target=".concat(index_esm2017_Te(index_esm2017_He(t)), "; limitType=").concat(t.limitType, ")");
}
/** Returns whether `doc` matches the constraints of `query`. */


function index_esm2017_tn(t, e) {
  return e.isFoundDocument() && function (t, e) {
    var n = e.key.path;
    return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : index_esm2017_xt.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
  }
  /**
  * A document must have a value for every ordering clause in order to show up
  * in the results.
  */
  (t, e) && function (t, e) {
    var _iterator11 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.explicitOrderBy),
        _step11;

    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var n = _step11.value;
        // order by key always matches
        if (!n.field.isKeyField() && null === e.data.field(n.field)) return !1;
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }

    return !0;
  }(t, e) && function (t, e) {
    var _iterator12 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.filters),
        _step12;

    try {
      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
        var n = _step12.value;
        if (!n.matches(e)) return !1;
      }
    } catch (err) {
      _iterator12.e(err);
    } finally {
      _iterator12.f();
    }

    return !0;
  }
  /** Makes sure a document is within the bounds, if provided. */
  (t, e) && function (t, e) {
    if (t.startAt && !
    /**
    * Returns true if a document sorts before a bound using the provided sort
    * order.
    */
    function (t, e, n) {
      var s = index_esm2017_Be(t, e, n);
      return t.inclusive ? s <= 0 : s < 0;
    }(t.startAt, index_esm2017_ze(t), e)) return !1;
    if (t.endAt && !function (t, e, n) {
      var s = index_esm2017_Be(t, e, n);
      return t.inclusive ? s >= 0 : s > 0;
    }(t.endAt, index_esm2017_ze(t), e)) return !1;
    return !0;
  }
  /**
  * Returns the collection group that this query targets.
  *
  * PORTING NOTE: This is only used in the Web SDK to facilitate multi-tab
  * synchronization for query results.
  */
  (t, e);
}

function index_esm2017_en(t) {
  return t.collectionGroup || (t.path.length % 2 == 1 ? t.path.lastSegment() : t.path.get(t.path.length - 2));
}
/**
 * Returns a new comparator function that can be used to compare two documents
 * based on the Query's ordering constraint.
 */


function index_esm2017_nn(t) {
  return function (e, n) {
    var s = !1;

    var _iterator13 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_ze(t)),
        _step13;

    try {
      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
        var i = _step13.value;

        var _t22 = index_esm2017_sn(i, e, n);

        if (0 !== _t22) return _t22;
        s = s || i.field.isKeyField();
      }
    } catch (err) {
      _iterator13.e(err);
    } finally {
      _iterator13.f();
    }

    return 0;
  };
}

function index_esm2017_sn(t, e, n) {
  var s = t.field.isKeyField() ? index_esm2017_xt.comparator(e.key, n.key) : function (t, e, n) {
    var s = e.data.field(t),
        i = n.data.field(t);
    return null !== s && null !== i ? index_esm2017_$t(s, i) : dist_index_esm2017_L();
  }
  /**
  * @license
  * Copyright 2021 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /**
  * The initial mutation batch id for each index. Gets updated during index
  * backfill.
  */
  (t.field, e, n);

  switch (t.dir) {
    case "asc"
    /* ASCENDING */
    :
      return s;

    case "desc"
    /* DESCENDING */
    :
      return -1 * s;

    default:
      return dist_index_esm2017_L();
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */


function index_esm2017_rn(t, e) {
  if (t.N) {
    if (isNaN(e)) return {
      doubleValue: "NaN"
    };
    if (e === 1 / 0) return {
      doubleValue: "Infinity"
    };
    if (e === -1 / 0) return {
      doubleValue: "-Infinity"
    };
  }

  return {
    doubleValue: index_esm2017_Dt(e) ? "-0" : e
  };
}
/**
 * Returns an IntegerValue for `value`.
 */


function index_esm2017_on(t) {
  return {
    integerValue: "" + t
  };
}
/**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */


function index_esm2017_un(t, e) {
  return index_esm2017_Ct(e) ? index_esm2017_on(e) : index_esm2017_rn(t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Used to represent a field transform on a mutation. */


var index_esm2017_an = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function an() {
  firestore_dist_index_esm2017_classCallCheck(this, an);

  // Make sure that the structural type of `TransformOperation` is unique.
  // See https://github.com/microsoft/TypeScript/issues/5451
  this._ = void 0;
})));
/**
 * Computes the local transform result against the provided `previousValue`,
 * optionally using the provided localWriteTime.
 */


function index_esm2017_cn(t, e, n) {
  return t instanceof index_esm2017_fn ? function (t, e) {
    var n = {
      fields: {
        __type__: {
          stringValue: "server_timestamp"
        },
        __local_write_time__: {
          timestampValue: {
            seconds: t.seconds,
            nanos: t.nanoseconds
          }
        }
      }
    };
    return e && (n.fields.__previous_value__ = e), {
      mapValue: n
    };
  }(n, e) : t instanceof index_esm2017_dn ? index_esm2017_n(t, e) : t instanceof index_esm2017_wn ? index_esm2017_mn(t, e) : function (t, e) {
    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
    // precision and resolves overflows by reducing precision, we do not
    // manually cap overflows at 2^63.
    var n = index_esm2017_ln(t, e),
        s = index_esm2017_yn(n) + index_esm2017_yn(t.k);
    return index_esm2017_Kt(n) && index_esm2017_Kt(t.k) ? index_esm2017_on(s) : index_esm2017_rn(t.M, s);
  }(t, e);
}
/**
 * Computes a final transform result after the transform has been acknowledged
 * by the server, potentially using the server-provided transformResult.
 */


function index_esm2017_hn(t, e, n) {
  // The server just sends null as the transform result for array operations,
  // so we have to calculate a result the same as we do for local
  // applications.
  return t instanceof index_esm2017_dn ? index_esm2017_n(t, e) : t instanceof index_esm2017_wn ? index_esm2017_mn(t, e) : n;
}
/**
 * If this transform operation is not idempotent, returns the base value to
 * persist for this transform. If a base value is returned, the transform
 * operation is always applied to this base value, even if document has
 * already been updated.
 *
 * Base values provide consistent behavior for non-idempotent transforms and
 * allow us to return the same latency-compensated value even if the backend
 * has already applied the transform operation. The base value is null for
 * idempotent transforms, as they can be re-played even if the backend has
 * already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent transforms.
 */


function index_esm2017_ln(t, e) {
  return t instanceof index_esm2017_gn ? index_esm2017_Kt(n = e) || function (t) {
    return !!t && "doubleValue" in t;
  }
  /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
  (n) ? e : {
    integerValue: 0
  } : null;
  var n;
}
/** Transforms a value into a server-generated timestamp. */


var index_esm2017_fn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_an) {
  firestore_dist_index_esm2017_inherits(fn, _an);

  var _super12 = firestore_dist_index_esm2017_createSuper(fn);

  function fn() {
    firestore_dist_index_esm2017_classCallCheck(this, fn);

    return _super12.apply(this, arguments);
  }

  return firestore_dist_index_esm2017_createClass(fn);
}(index_esm2017_an)));
/** Transforms an array value via a union operation. */


var index_esm2017_dn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_an2) {
  firestore_dist_index_esm2017_inherits(dn, _an2);

  var _super13 = firestore_dist_index_esm2017_createSuper(dn);

  function dn(t) {
    var _this16;

    firestore_dist_index_esm2017_classCallCheck(this, dn);

    _this16 = _super13.call(this), _this16.elements = t;
    return _this16;
  }

  return firestore_dist_index_esm2017_createClass(dn);
}(index_esm2017_an)));

function index_esm2017_n(t, e) {
  var n = index_esm2017_pn(e);

  var _iterator14 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.elements),
      _step14;

  try {
    var _loop = function _loop() {
      var e = _step14.value;
      n.some(function (t) {
        return index_esm2017_Ot(t, e);
      }) || n.push(e);
    };

    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }

  return {
    arrayValue: {
      values: n
    }
  };
}
/** Transforms an array value via a remove operation. */


var index_esm2017_wn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_an3) {
  firestore_dist_index_esm2017_inherits(wn, _an3);

  var _super14 = firestore_dist_index_esm2017_createSuper(wn);

  function wn(t) {
    var _this17;

    firestore_dist_index_esm2017_classCallCheck(this, wn);

    _this17 = _super14.call(this), _this17.elements = t;
    return _this17;
  }

  return firestore_dist_index_esm2017_createClass(wn);
}(index_esm2017_an)));

function index_esm2017_mn(t, e) {
  var n = index_esm2017_pn(e);

  var _iterator15 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.elements),
      _step15;

  try {
    var _loop2 = function _loop2() {
      var e = _step15.value;
      n = n.filter(function (t) {
        return !index_esm2017_Ot(t, e);
      });
    };

    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator15.e(err);
  } finally {
    _iterator15.f();
  }

  return {
    arrayValue: {
      values: n
    }
  };
}
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */


var index_esm2017_gn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_an4) {
  firestore_dist_index_esm2017_inherits(gn, _an4);

  var _super15 = firestore_dist_index_esm2017_createSuper(gn);

  function gn(t, e) {
    var _this18;

    firestore_dist_index_esm2017_classCallCheck(this, gn);

    _this18 = _super15.call(this), _this18.M = t, _this18.k = e;
    return _this18;
  }

  return firestore_dist_index_esm2017_createClass(gn);
}(index_esm2017_an)));

function index_esm2017_yn(t) {
  return index_esm2017_Et(t.integerValue || t.doubleValue);
}

function index_esm2017_pn(t) {
  return index_esm2017_Gt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** A field path and the TransformOperation to perform upon it. */


var index_esm2017_In = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function In(t, e) {
  firestore_dist_index_esm2017_classCallCheck(this, In);

  this.field = t, this.transform = e;
})));

function index_esm2017_Tn(t, e) {
  return t.field.isEqual(e.field) && function (t, e) {
    return t instanceof index_esm2017_dn && e instanceof index_esm2017_dn || t instanceof index_esm2017_wn && e instanceof index_esm2017_wn ? index_esm2017_ot(t.elements, e.elements, index_esm2017_Ot) : t instanceof index_esm2017_gn && e instanceof index_esm2017_gn ? index_esm2017_Ot(t.k, e.k) : t instanceof index_esm2017_fn && e instanceof index_esm2017_fn;
  }(t.transform, e.transform);
}
/** The result of successfully applying a mutation to the backend. */


var index_esm2017_En = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function En(
/**
 * The version at which the mutation was committed:
 *
 * - For most operations, this is the updateTime in the WriteResult.
 * - For deletes, the commitTime of the WriteResponse (because deletes are
 *   not stored and have no updateTime).
 *
 * Note that these versions can be different: No-op writes will not change
 * the updateTime even though the commitTime advances.
 */
t,
/**
 * The resulting fields returned from the backend after a mutation
 * containing field transforms has been committed. Contains one FieldValue
 * for each FieldTransform that was in the mutation.
 *
 * Will be empty if the mutation did not contain any field transforms.
 */
e) {
  firestore_dist_index_esm2017_classCallCheck(this, En);

  this.version = t, this.transformResults = e;
})));
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */


var index_esm2017_An = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function An(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, An);

    this.updateTime = t, this.exists = e;
  }
  /** Creates a new empty Precondition. */


  firestore_dist_index_esm2017_createClass(An, [{
    key: "isNone",
    get:
    /** Returns whether this Precondition is empty. */
    function get() {
      return void 0 === this.updateTime && void 0 === this.exists;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
    }
  }], [{
    key: "none",
    value: function none() {
      return new An();
    }
    /** Creates a new Precondition with an exists flag. */

  }, {
    key: "exists",
    value: function exists(t) {
      return new An(void 0, t);
    }
    /** Creates a new Precondition based on a version a document exists at. */

  }, {
    key: "updateTime",
    value: function updateTime(t) {
      return new An(t);
    }
  }]);

  return An;
}()));
/** Returns true if the preconditions is valid for the given document. */


function index_esm2017_Rn(t, e) {
  return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
}
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set and Patch mutations. For Delete mutations, we
 * reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        InvalidDocument(v0)   Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set and Patch mutations. As deletes have no
 * explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
 * the updated version.
 *
 * Field transforms are used only with Patch and Set Mutations. We use the
 * `updateTransforms` message to store transforms, rather than the `transforms`s
 * messages.
 *
 * ## Subclassing Notes
 *
 * Every type of mutation needs to implement its own applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document (see `setMutationApplyToRemoteDocument()` for an
 * example).
 */


var index_esm2017_bn = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function bn() {
  firestore_dist_index_esm2017_classCallCheck(this, bn);
})));
/**
 * Applies this mutation to the given document for the purposes of computing a
 * new remote document. If the input document doesn't match the expected state
 * (e.g. it is invalid or outdated), the document type may transition to
 * unknown.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param mutationResult - The result of applying the mutation from the backend.
 */


function index_esm2017_Pn(t, e, n) {
  t instanceof index_esm2017_Cn ? function (t, e, n) {
    // Unlike setMutationApplyToLocalView, if we're applying a mutation to a
    // remote document the server has accepted the mutation so the precondition
    // must have held.
    var s = t.value.clone(),
        i = index_esm2017_kn(t.fieldTransforms, e, n.transformResults);
    s.setAll(i), e.convertToFoundDocument(n.version, s).setHasCommittedMutations();
  }(t, e, n) : t instanceof index_esm2017_xn ? function (t, e, n) {
    if (!index_esm2017_Rn(t.precondition, e)) // Since the mutation was not rejected, we know that the precondition
      // matched on the backend. We therefore must not have the expected version
      // of the document in our cache and convert to an UnknownDocument with a
      // known updateTime.
      return void e.convertToUnknownDocument(n.version);
    var s = index_esm2017_kn(t.fieldTransforms, e, n.transformResults),
        i = e.data;
    i.setAll(index_esm2017_Nn(t)), i.setAll(s), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
  }(t, e, n) : function (t, e, n) {
    // Unlike applyToLocalView, if we're applying a mutation to a remote
    // document the server has accepted the mutation so the precondition must
    // have held.
    e.convertToNoDocument(n.version).setHasCommittedMutations();
  }(0, e, n);
}
/**
 * Applies this mutation to the given document for the purposes of computing
 * the new local view of a document. If the input document doesn't match the
 * expected state, the document is not modified.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param localWriteTime - A timestamp indicating the local write time of the
 *     batch this mutation is a part of.
 */


function index_esm2017_Vn(t, e, n) {
  t instanceof index_esm2017_Cn ? function (t, e, n) {
    if (!index_esm2017_Rn(t.precondition, e)) // The mutation failed to apply (e.g. a document ID created with add()
      // caused a name collision).
      return;
    var s = t.value.clone(),
        i = index_esm2017_Mn(t.fieldTransforms, n, e);
    s.setAll(i), e.convertToFoundDocument(index_esm2017_Dn(e), s).setHasLocalMutations();
  }
  /**
  * A mutation that modifies fields of the document at the given key with the
  * given values. The values are applied through a field mask:
  *
  *  * When a field is in both the mask and the values, the corresponding field
  *    is updated.
  *  * When a field is in neither the mask nor the values, the corresponding
  *    field is unmodified.
  *  * When a field is in the mask but not in the values, the corresponding field
  *    is deleted.
  *  * When a field is not in the mask but is in the values, the values map is
  *    ignored.
  */
  (t, e, n) : t instanceof index_esm2017_xn ? function (t, e, n) {
    if (!index_esm2017_Rn(t.precondition, e)) return;
    var s = index_esm2017_Mn(t.fieldTransforms, n, e),
        i = e.data;
    i.setAll(index_esm2017_Nn(t)), i.setAll(s), e.convertToFoundDocument(index_esm2017_Dn(e), i).setHasLocalMutations();
  }
  /**
  * Returns a FieldPath/Value map with the content of the PatchMutation.
  */
  (t, e, n) : function (t, e) {
    index_esm2017_Rn(t.precondition, e) && // We don't call `setHasLocalMutations()` since we want to be backwards
    // compatible with the existing SDK behavior.
    e.convertToNoDocument(index_esm2017_ct.min());
  }
  /**
  * A mutation that verifies the existence of the document at the given key with
  * the provided precondition.
  *
  * The `verify` operation is only used in Transactions, and this class serves
  * primarily to facilitate serialization into protos.
  */
  (t, e);
}
/**
 * If this mutation is not idempotent, returns the base value to persist with
 * this mutation. If a base value is returned, the mutation is always applied
 * to this base value, even if document has already been updated.
 *
 * The base value is a sparse object that consists of only the document
 * fields for which this mutation contains a non-idempotent transformation
 * (e.g. a numeric increment). The provided value guarantees consistent
 * behavior for non-idempotent transforms and allow us to return the same
 * latency-compensated value even if the backend has already applied the
 * mutation. The base value is null for idempotent mutations, as they can be
 * re-played even if the backend has already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent mutations.
 */


function index_esm2017_vn(t, e) {
  var n = null;

  var _iterator16 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.fieldTransforms),
      _step16;

  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var s = _step16.value;

      var _t23 = e.data.field(s.field),
          i = index_esm2017_ln(s.transform, _t23 || null);

      null != i && (null == n && (n = index_esm2017_te.empty()), n.set(s.field, i));
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }

  return n || null;
}

function index_esm2017_Sn(t, e) {
  return t.type === e.type && !!t.key.isEqual(e.key) && !!t.precondition.isEqual(e.precondition) && !!function (t, e) {
    return void 0 === t && void 0 === e || !(!t || !e) && index_esm2017_ot(t, e, function (t, e) {
      return index_esm2017_Tn(t, e);
    });
  }(t.fieldTransforms, e.fieldTransforms) && (0
  /* Set */
  === t.type ? t.value.isEqual(e.value) : 1
  /* Patch */
  !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask));
}
/**
 * Returns the version from the given document for use as the result of a
 * mutation. Mutations are defined to return the version of the base document
 * only if it is an existing document. Deleted and unknown documents have a
 * post-mutation version of SnapshotVersion.min().
 */


function index_esm2017_Dn(t) {
  return t.isFoundDocument() ? t.version : index_esm2017_ct.min();
}
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */


var index_esm2017_Cn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn) {
  firestore_dist_index_esm2017_inherits(Cn, _bn);

  var _super16 = firestore_dist_index_esm2017_createSuper(Cn);

  function Cn(t, e, n) {
    var _this19;

    var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    firestore_dist_index_esm2017_classCallCheck(this, Cn);

    _this19 = _super16.call(this), _this19.key = t, _this19.value = e, _this19.precondition = n, _this19.fieldTransforms = s, _this19.type = 0
    /* Set */
    ;
    return _this19;
  }

  return firestore_dist_index_esm2017_createClass(Cn);
}(index_esm2017_bn)));

var index_esm2017_xn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn2) {
  firestore_dist_index_esm2017_inherits(xn, _bn2);

  var _super17 = firestore_dist_index_esm2017_createSuper(xn);

  function xn(t, e, n, s) {
    var _this20;

    var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

    firestore_dist_index_esm2017_classCallCheck(this, xn);

    _this20 = _super17.call(this), _this20.key = t, _this20.data = e, _this20.fieldMask = n, _this20.precondition = s, _this20.fieldTransforms = i, _this20.type = 1
    /* Patch */
    ;
    return _this20;
  }

  return firestore_dist_index_esm2017_createClass(xn);
}(index_esm2017_bn)));

function index_esm2017_Nn(t) {
  var e = new Map();
  return t.fieldMask.fields.forEach(function (n) {
    if (!n.isEmpty()) {
      var s = t.data.field(n);
      e.set(n, s);
    }
  }), e;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use after a mutation
 * containing transforms has been acknowledged by the server.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param mutableDocument - The current state of the document after applying all
 * previous mutations.
 * @param serverTransformResults - The transform results received by the server.
 * @returns The transform results list.
 */


function index_esm2017_kn(t, e, n) {
  var s = new Map();
  dist_index_esm2017_U(t.length === n.length);

  for (var i = 0; i < n.length; i++) {
    var r = t[i],
        o = r.transform,
        u = e.data.field(r.field);
    s.set(r.field, index_esm2017_hn(o, u, n[i]));
  }

  return s;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use when applying a
 * transform locally.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param localWriteTime - The local time of the mutation (used to
 *     generate ServerTimestampValues).
 * @param mutableDocument - The current state of the document after applying all
 *     previous mutations.
 * @returns The transform results list.
 */


function index_esm2017_Mn(t, e, n) {
  var s = new Map();

  var _iterator17 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
      _step17;

  try {
    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
      var i = _step17.value;
      var _t24 = i.transform,
          r = n.data.field(i.field);
      s.set(i.field, index_esm2017_cn(_t24, r, e));
    }
  } catch (err) {
    _iterator17.e(err);
  } finally {
    _iterator17.f();
  }

  return s;
}
/** A mutation that deletes the document at the given key. */


var index_esm2017_On = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn3) {
  firestore_dist_index_esm2017_inherits(On, _bn3);

  var _super18 = firestore_dist_index_esm2017_createSuper(On);

  function On(t, e) {
    var _this21;

    firestore_dist_index_esm2017_classCallCheck(this, On);

    _this21 = _super18.call(this), _this21.key = t, _this21.precondition = e, _this21.type = 2
    /* Delete */
    , _this21.fieldTransforms = [];
    return _this21;
  }

  return firestore_dist_index_esm2017_createClass(On);
}(index_esm2017_bn)));

var index_esm2017_Fn = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_bn4) {
  firestore_dist_index_esm2017_inherits(Fn, _bn4);

  var _super19 = firestore_dist_index_esm2017_createSuper(Fn);

  function Fn(t, e) {
    var _this22;

    firestore_dist_index_esm2017_classCallCheck(this, Fn);

    _this22 = _super19.call(this), _this22.key = t, _this22.precondition = e, _this22.type = 3
    /* Verify */
    , _this22.fieldTransforms = [];
    return _this22;
  }

  return firestore_dist_index_esm2017_createClass(Fn);
}(index_esm2017_bn)));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_$n = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass( // TODO(b/33078163): just use simplest form of existence filter for now
function $n(t) {
  firestore_dist_index_esm2017_classCallCheck(this, $n);

  this.count = t;
})));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers or change this into a const enum.
 */


var index_esm2017_Bn, index_esm2017_Ln;
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */

function index_esm2017_Un(t) {
  switch (t) {
    default:
      return dist_index_esm2017_L();

    case index_esm2017_G.CANCELLED:
    case index_esm2017_G.UNKNOWN:
    case index_esm2017_G.DEADLINE_EXCEEDED:
    case index_esm2017_G.RESOURCE_EXHAUSTED:
    case index_esm2017_G.INTERNAL:
    case index_esm2017_G.UNAVAILABLE: // Unauthenticated means something went wrong with our token and we need
    // to retry with new credentials which will happen automatically.

    case index_esm2017_G.UNAUTHENTICATED:
      return !1;

    case index_esm2017_G.INVALID_ARGUMENT:
    case index_esm2017_G.NOT_FOUND:
    case index_esm2017_G.ALREADY_EXISTS:
    case index_esm2017_G.PERMISSION_DENIED:
    case index_esm2017_G.FAILED_PRECONDITION: // Aborted might be retried in some scenarios, but that is dependant on
    // the context and should handled individually by the calling code.
    // See https://cloud.google.com/apis/design/errors.

    case index_esm2017_G.ABORTED:
    case index_esm2017_G.OUT_OF_RANGE:
    case index_esm2017_G.UNIMPLEMENTED:
    case index_esm2017_G.DATA_LOSS:
      return !0;
  }
}
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */

/**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */


function index_esm2017_qn(t) {
  if (void 0 === t) // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    return dist_index_esm2017_F("GRPC error has no .code"), index_esm2017_G.UNKNOWN;

  switch (t) {
    case index_esm2017_Bn.OK:
      return index_esm2017_G.OK;

    case index_esm2017_Bn.CANCELLED:
      return index_esm2017_G.CANCELLED;

    case index_esm2017_Bn.UNKNOWN:
      return index_esm2017_G.UNKNOWN;

    case index_esm2017_Bn.DEADLINE_EXCEEDED:
      return index_esm2017_G.DEADLINE_EXCEEDED;

    case index_esm2017_Bn.RESOURCE_EXHAUSTED:
      return index_esm2017_G.RESOURCE_EXHAUSTED;

    case index_esm2017_Bn.INTERNAL:
      return index_esm2017_G.INTERNAL;

    case index_esm2017_Bn.UNAVAILABLE:
      return index_esm2017_G.UNAVAILABLE;

    case index_esm2017_Bn.UNAUTHENTICATED:
      return index_esm2017_G.UNAUTHENTICATED;

    case index_esm2017_Bn.INVALID_ARGUMENT:
      return index_esm2017_G.INVALID_ARGUMENT;

    case index_esm2017_Bn.NOT_FOUND:
      return index_esm2017_G.NOT_FOUND;

    case index_esm2017_Bn.ALREADY_EXISTS:
      return index_esm2017_G.ALREADY_EXISTS;

    case index_esm2017_Bn.PERMISSION_DENIED:
      return index_esm2017_G.PERMISSION_DENIED;

    case index_esm2017_Bn.FAILED_PRECONDITION:
      return index_esm2017_G.FAILED_PRECONDITION;

    case index_esm2017_Bn.ABORTED:
      return index_esm2017_G.ABORTED;

    case index_esm2017_Bn.OUT_OF_RANGE:
      return index_esm2017_G.OUT_OF_RANGE;

    case index_esm2017_Bn.UNIMPLEMENTED:
      return index_esm2017_G.UNIMPLEMENTED;

    case index_esm2017_Bn.DATA_LOSS:
      return index_esm2017_G.DATA_LOSS;

    default:
      return dist_index_esm2017_L();
  }
}
/**
 * Converts an HTTP response's error status to the equivalent error code.
 *
 * @param status - An HTTP error response status ("FAILED_PRECONDITION",
 * "UNKNOWN", etc.)
 * @returns The equivalent Code. Non-matching responses are mapped to
 *     Code.UNKNOWN.
 */


(index_esm2017_Ln = index_esm2017_Bn || (index_esm2017_Bn = {}))[index_esm2017_Ln.OK = 0] = "OK", index_esm2017_Ln[index_esm2017_Ln.CANCELLED = 1] = "CANCELLED", index_esm2017_Ln[index_esm2017_Ln.UNKNOWN = 2] = "UNKNOWN", index_esm2017_Ln[index_esm2017_Ln.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", index_esm2017_Ln[index_esm2017_Ln.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", index_esm2017_Ln[index_esm2017_Ln.NOT_FOUND = 5] = "NOT_FOUND", index_esm2017_Ln[index_esm2017_Ln.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", index_esm2017_Ln[index_esm2017_Ln.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", index_esm2017_Ln[index_esm2017_Ln.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", index_esm2017_Ln[index_esm2017_Ln.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", index_esm2017_Ln[index_esm2017_Ln.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", index_esm2017_Ln[index_esm2017_Ln.ABORTED = 10] = "ABORTED", index_esm2017_Ln[index_esm2017_Ln.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", index_esm2017_Ln[index_esm2017_Ln.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", index_esm2017_Ln[index_esm2017_Ln.INTERNAL = 13] = "INTERNAL", index_esm2017_Ln[index_esm2017_Ln.UNAVAILABLE = 14] = "UNAVAILABLE", index_esm2017_Ln[index_esm2017_Ln.DATA_LOSS = 15] = "DATA_LOSS";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A map implementation that uses objects as keys. Objects must have an
 * associated equals function and must be immutable. Entries in the map are
 * stored together with the key being produced from the mapKeyFn. This map
 * automatically handles collisions of keys.
 */

var index_esm2017_Kn = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Kn(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Kn);

    this.mapKeyFn = t, this.equalsFn = e,
    /**
     * The inner map for a key/value pair. Due to the possibility of collisions we
     * keep a list of entries that we do a linear search through to find an actual
     * match. Note that collisions should be rare, so we still expect near
     * constant time lookups in practice.
     */
    this.inner = {},
    /** The number of entries stored in the map */
    this.innerSize = 0;
  }
  /** Get a value for this key, or undefined if it does not exist. */


  firestore_dist_index_esm2017_createClass(Kn, [{
    key: "get",
    value: function get(t) {
      var e = this.mapKeyFn(t),
          n = this.inner[e];

      if (void 0 !== n) {
        var _iterator18 = firestore_dist_index_esm2017_createForOfIteratorHelper(n),
            _step18;

        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var _step18$value = dist_index_esm2017_slicedToArray(_step18.value, 2),
                _e13 = _step18$value[0],
                s = _step18$value[1];

            if (this.equalsFn(_e13, t)) return s;
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
      }
    }
  }, {
    key: "has",
    value: function has(t) {
      return void 0 !== this.get(t);
    }
    /** Put this key and value in the map. */

  }, {
    key: "set",
    value: function set(t, e) {
      var n = this.mapKeyFn(t),
          s = this.inner[n];
      if (void 0 === s) return this.inner[n] = [[t, e]], void this.innerSize++;

      for (var _n10 = 0; _n10 < s.length; _n10++) {
        if (this.equalsFn(s[_n10][0], t)) // This is updating an existing entry and does not increase `innerSize`.
          return void (s[_n10] = [t, e]);
      }

      s.push([t, e]), this.innerSize++;
    }
    /**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      var e = this.mapKeyFn(t),
          n = this.inner[e];
      if (void 0 === n) return !1;

      for (var s = 0; s < n.length; s++) {
        if (this.equalsFn(n[s][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(s, 1), this.innerSize--, !0;
      }

      return !1;
    }
  }, {
    key: "forEach",
    value: function forEach(t) {
      index_esm2017_lt(this.inner, function (e, n) {
        var _iterator19 = firestore_dist_index_esm2017_createForOfIteratorHelper(n),
            _step19;

        try {
          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
            var _step19$value = dist_index_esm2017_slicedToArray(_step19.value, 2),
                _e14 = _step19$value[0],
                s = _step19$value[1];

            t(_e14, s);
          }
        } catch (err) {
          _iterator19.e(err);
        } finally {
          _iterator19.f();
        }
      });
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return index_esm2017_ft(this.inner);
    }
  }, {
    key: "size",
    value: function size() {
      return this.innerSize;
    }
  }]);

  return Kn;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_Gn = new index_esm2017_fe(index_esm2017_xt.comparator);

function index_esm2017_Qn() {
  return index_esm2017_Gn;
}

var index_esm2017_jn = new index_esm2017_fe(index_esm2017_xt.comparator);

function index_esm2017_Wn() {
  var e = index_esm2017_jn;

  for (var _len5 = arguments.length, t = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    t[_key5] = arguments[_key5];
  }

  for (var _i3 = 0, _t25 = t; _i3 < _t25.length; _i3++) {
    var n = _t25[_i3];
    e = e.insert(n.key, n);
  }

  return e;
}

function index_esm2017_zn() {
  return new index_esm2017_Kn(function (t) {
    return t.toString();
  }, function (t, e) {
    return t.isEqual(e);
  });
}

var index_esm2017_Hn = new index_esm2017_fe(index_esm2017_xt.comparator);
var index_esm2017_Jn = new index_esm2017_we(index_esm2017_xt.comparator);

function index_esm2017_Yn() {
  var e = index_esm2017_Jn;

  for (var _len6 = arguments.length, t = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    t[_key6] = arguments[_key6];
  }

  for (var _i4 = 0, _t26 = t; _i4 < _t26.length; _i4++) {
    var n = _t26[_i4];
    e = e.add(n);
  }

  return e;
}

var index_esm2017_Xn = new index_esm2017_we(index_esm2017_rt);

function index_esm2017_Zn() {
  return index_esm2017_Xn;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An event from the RemoteStore. It is split into targetChanges (changes to the
 * state or the set of documents in our watched targets) and documentUpdates
 * (changes to the actual documents).
 */


var ts = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ts(
  /**
   * The snapshot version this event brings us up to, or MIN if not set.
   */
  t,
  /**
   * A map from target to changes to the target. See TargetChange.
   */
  e,
  /**
   * A set of targets that is known to be inconsistent. Listens for these
   * targets should be re-established without resume tokens.
   */
  n,
  /**
   * A set of which documents have changed or been deleted, along with the
   * doc's new values (if not deleted).
   */
  s,
  /**
   * A set of which document updates are due only to limbo resolution targets.
   */
  i) {
    firestore_dist_index_esm2017_classCallCheck(this, ts);

    this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = s, this.resolvedLimboDocuments = i;
  }
  /**
   * HACK: Views require RemoteEvents in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized RemoteEvent that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only


  firestore_dist_index_esm2017_createClass(ts, null, [{
    key: "createSynthesizedRemoteEventForCurrentChange",
    value: function createSynthesizedRemoteEventForCurrentChange(t, e) {
      var n = new Map();
      return n.set(t, es.createSynthesizedTargetChangeForCurrentChange(t, e)), new ts(index_esm2017_ct.min(), n, index_esm2017_Zn(), index_esm2017_Qn(), index_esm2017_Yn());
    }
  }]);

  return ts;
}()));
/**
 * A TargetChange specifies the set of changes for a specific target as part of
 * a RemoteEvent. These changes track which documents are added, modified or
 * removed, as well as the target's resume token and whether the target is
 * marked CURRENT.
 * The actual changes *to* documents are not part of the TargetChange since
 * documents may be part of multiple targets.
 */


var es = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function es(
  /**
   * An opaque, server-assigned token that allows watching a query to be resumed
   * after disconnecting without retransmitting all the data that matches the
   * query. The resume token essentially identifies a point in time from which
   * the server should resume sending results.
   */
  t,
  /**
   * The "current" (synced) status of this target. Note that "current"
   * has special meaning in the RPC protocol that implies that a target is
   * both up-to-date and consistent with the rest of the watch stream.
   */
  e,
  /**
   * The set of documents that were newly assigned to this target as part of
   * this remote event.
   */
  n,
  /**
   * The set of documents that were already assigned to this target but received
   * an update during this remote event.
   */
  s,
  /**
   * The set of documents that were removed from this target as part of this
   * remote event.
   */
  i) {
    firestore_dist_index_esm2017_classCallCheck(this, es);

    this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = s, this.removedDocuments = i;
  }
  /**
   * This method is used to create a synthesized TargetChanges that can be used to
   * apply a CURRENT status change to a View (for queries executed in a different
   * tab) or for new queries (to raise snapshots with correct CURRENT status).
   */


  firestore_dist_index_esm2017_createClass(es, null, [{
    key: "createSynthesizedTargetChangeForCurrentChange",
    value: function createSynthesizedTargetChangeForCurrentChange(t, e) {
      return new es(index_esm2017_pt.EMPTY_BYTE_STRING, e, index_esm2017_Yn(), index_esm2017_Yn(), index_esm2017_Yn());
    }
  }]);

  return es;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a changed document and a list of target ids to which this change
 * applies.
 *
 * If document has been deleted NoDocument will be provided.
 */


var ns = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function ns(
/** The new document applies to all of these targets. */
t,
/** The new document is removed from all of these targets. */
e,
/** The key of the document for this change. */
n,
/**
 * The new document or NoDocument if it was deleted. Is null if the
 * document went out of view without the server sending a new document.
 */
s) {
  firestore_dist_index_esm2017_classCallCheck(this, ns);

  this.O = t, this.removedTargetIds = e, this.key = n, this.F = s;
})));

var ss = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function ss(t, e) {
  firestore_dist_index_esm2017_classCallCheck(this, ss);

  this.targetId = t, this.$ = e;
})));

var is = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function is(
/** What kind of change occurred to the watch target. */
t,
/** The target IDs that were added/removed/set. */
e) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : index_esm2017_pt.EMPTY_BYTE_STRING;
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  firestore_dist_index_esm2017_classCallCheck(this, is);

  this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
})));
/** Tracks the internal state of a Watch target. */


var rs = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function rs() {
    firestore_dist_index_esm2017_classCallCheck(this, rs);

    /**
     * The number of pending responses (adds or removes) that we are waiting on.
     * We only consider targets active that have no pending responses.
     */
    this.B = 0,
    /**
     * Keeps track of the document changes since the last raised snapshot.
     *
     * These changes are continuously updated as we receive document updates and
     * always reflect the current set of changes against the last issued snapshot.
     */
    this.L = as(),
    /** See public getters for explanations of these fields. */
    this.U = index_esm2017_pt.EMPTY_BYTE_STRING, this.q = !1,
    /**
     * Whether this target state should be included in the next snapshot. We
     * initialize to true so that newly-added targets are included in the next
     * RemoteEvent.
     */
    this.K = !0;
  }
  /**
   * Whether this target has been marked 'current'.
   *
   * 'Current' has special meaning in the RPC protocol: It implies that the
   * Watch backend has sent us all changes up to the point at which the target
   * was added and that the target is consistent with the rest of the watch
   * stream.
   */


  firestore_dist_index_esm2017_createClass(rs, [{
    key: "current",
    get: function get() {
      return this.q;
    }
    /** The last resume token sent to us for this target. */

  }, {
    key: "resumeToken",
    get: function get() {
      return this.U;
    }
    /** Whether this target has pending target adds or target removes. */

  }, {
    key: "G",
    get: function get() {
      return 0 !== this.B;
    }
    /** Whether we have modified any state that should trigger a snapshot. */

  }, {
    key: "j",
    get: function get() {
      return this.K;
    }
    /**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */

  }, {
    key: "W",
    value: function W(t) {
      t.approximateByteSize() > 0 && (this.K = !0, this.U = t);
    }
    /**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */

  }, {
    key: "H",
    value: function H() {
      var t = index_esm2017_Yn(),
          e = index_esm2017_Yn(),
          n = index_esm2017_Yn();
      return this.L.forEach(function (s, i) {
        switch (i) {
          case 0
          /* Added */
          :
            t = t.add(s);
            break;

          case 2
          /* Modified */
          :
            e = e.add(s);
            break;

          case 1
          /* Removed */
          :
            n = n.add(s);
            break;

          default:
            dist_index_esm2017_L();
        }
      }), new es(this.U, this.q, t, e, n);
    }
    /**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */

  }, {
    key: "J",
    value: function J() {
      this.K = !1, this.L = as();
    }
  }, {
    key: "Y",
    value: function Y(t, e) {
      this.K = !0, this.L = this.L.insert(t, e);
    }
  }, {
    key: "X",
    value: function X(t) {
      this.K = !0, this.L = this.L.remove(t);
    }
  }, {
    key: "Z",
    value: function Z() {
      this.B += 1;
    }
  }, {
    key: "tt",
    value: function tt() {
      this.B -= 1;
    }
  }, {
    key: "et",
    value: function et() {
      this.K = !0, this.q = !0;
    }
  }]);

  return rs;
}()));
/**
 * A helper class to accumulate watch changes into a RemoteEvent.
 */


var os = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function os(t) {
    firestore_dist_index_esm2017_classCallCheck(this, os);

    this.nt = t,
    /** The internal state of all tracked targets. */
    this.st = new Map(),
    /** Keeps track of the documents to update since the last raised snapshot. */
    this.it = index_esm2017_Qn(),
    /** A mapping of document keys to their set of target IDs. */
    this.rt = us(),
    /**
     * A list of targets with existence filter mismatches. These targets are
     * known to be inconsistent and their listens needs to be re-established by
     * RemoteStore.
     */
    this.ot = new index_esm2017_we(index_esm2017_rt);
  }
  /**
   * Processes and adds the DocumentWatchChange to the current set of changes.
   */


  firestore_dist_index_esm2017_createClass(os, [{
    key: "ut",
    value: function ut(t) {
      var _iterator20 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.O),
          _step20;

      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
          var e = _step20.value;
          t.F && t.F.isFoundDocument() ? this.at(e, t.F) : this.ct(e, t.key, t.F);
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }

      var _iterator21 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.removedTargetIds),
          _step21;

      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var _e15 = _step21.value;
          this.ct(_e15, t.key, t.F);
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
    }
    /** Processes and adds the WatchTargetChange to the current set of changes. */

  }, {
    key: "ht",
    value: function ht(t) {
      var _this23 = this;

      this.forEachTarget(t, function (e) {
        var n = _this23.lt(e);

        switch (t.state) {
          case 0
          /* NoChange */
          :
            _this23.ft(e) && n.W(t.resumeToken);
            break;

          case 1
          /* Added */
          :
            // We need to decrement the number of pending acks needed from watch
            // for this targetId.
            n.tt(), n.G || // We have a freshly added target, so we need to reset any state
            // that we had previously. This can happen e.g. when remove and add
            // back a target for existence filter mismatches.
            n.J(), n.W(t.resumeToken);
            break;

          case 2
          /* Removed */
          :
            // We need to keep track of removed targets to we can post-filter and
            // remove any target changes.
            // We need to decrement the number of pending acks needed from watch
            // for this targetId.
            n.tt(), n.G || _this23.removeTarget(e);
            break;

          case 3
          /* Current */
          :
            _this23.ft(e) && (n.et(), n.W(t.resumeToken));
            break;

          case 4
          /* Reset */
          :
            _this23.ft(e) && ( // Reset the target and synthesizes removes for all existing
            // documents. The backend will re-add any documents that still
            // match the target before it sends the next global snapshot.
            _this23.dt(e), n.W(t.resumeToken));
            break;

          default:
            dist_index_esm2017_L();
        }
      });
    }
    /**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */

  }, {
    key: "forEachTarget",
    value: function forEachTarget(t, e) {
      var _this24 = this;

      t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.st.forEach(function (t, n) {
        _this24.ft(n) && e(n);
      });
    }
    /**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */

  }, {
    key: "_t",
    value: function _t(t) {
      var e = t.targetId,
          n = t.$.count,
          s = this.wt(e);

      if (s) {
        var _t27 = s.target;
        if (index_esm2017_Ae(_t27)) {
          if (0 === n) {
            // The existence filter told us the document does not exist. We deduce
            // that this document does not exist and apply a deleted document to
            // our updates. Without applying this deleted document there might be
            // another query that will raise this document as part of a snapshot
            // until it is resolved, essentially exposing inconsistency between
            // queries.
            var _n11 = new index_esm2017_xt(_t27.path);

            this.ct(e, _n11, index_esm2017_ne.newNoDocument(_n11, index_esm2017_ct.min()));
          } else dist_index_esm2017_U(1 === n);
        } else {
          this.gt(e) !== n && ( // Existence filter mismatch: We reset the mapping and raise a new
          // snapshot with `isFromCache:true`.
          this.dt(e), this.ot = this.ot.add(e));
        }
      }
    }
    /**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */

  }, {
    key: "yt",
    value: function yt(t) {
      var _this25 = this;

      var e = new Map();
      this.st.forEach(function (n, s) {
        var i = _this25.wt(s);

        if (i) {
          if (n.current && index_esm2017_Ae(i.target)) {
            // Document queries for document that don't exist can produce an empty
            // result set. To update our local cache, we synthesize a document
            // delete if we have not previously received the document. This
            // resolves the limbo state of the document, removing it from
            // limboDocumentRefs.
            // TODO(dimond): Ideally we would have an explicit lookup target
            // instead resulting in an explicit delete message and we could
            // remove this special logic.
            var _e16 = new index_esm2017_xt(i.target.path);

            null !== _this25.it.get(_e16) || _this25.It(s, _e16) || _this25.ct(s, _e16, index_esm2017_ne.newNoDocument(_e16, t));
          }

          n.j && (e.set(s, n.H()), n.J());
        }
      });
      var n = index_esm2017_Yn(); // We extract the set of limbo-only document updates as the GC logic
      // special-cases documents that do not appear in the target cache.
      // TODO(gsoltis): Expand on this comment once GC is available in the JS
      // client.

      this.rt.forEach(function (t, e) {
        var s = !0;
        e.forEachWhile(function (t) {
          var e = _this25.wt(t);

          return !e || 2
          /* LimboResolution */
          === e.purpose || (s = !1, !1);
        }), s && (n = n.add(t));
      }), this.it.forEach(function (e, n) {
        return n.setReadTime(t);
      });
      var s = new ts(t, e, this.ot, this.it, n);
      return this.it = index_esm2017_Qn(), this.rt = us(), this.ot = new index_esm2017_we(index_esm2017_rt), s;
    }
    /**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */
    // Visible for testing.

  }, {
    key: "at",
    value: function at(t, e) {
      if (!this.ft(t)) return;
      var n = this.It(t, e.key) ? 2
      /* Modified */
      : 0
      /* Added */
      ;
      this.lt(t).Y(e.key, n), this.it = this.it.insert(e.key, e), this.rt = this.rt.insert(e.key, this.Tt(e.key).add(t));
    }
    /**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */
    // Visible for testing.

  }, {
    key: "ct",
    value: function ct(t, e, n) {
      if (!this.ft(t)) return;
      var s = this.lt(t);
      this.It(t, e) ? s.Y(e, 1
      /* Removed */
      ) : // The document may have entered and left the target before we raised a
      // snapshot, so we can just ignore the change.
      s.X(e), this.rt = this.rt.insert(e, this.Tt(e)["delete"](t)), n && (this.it = this.it.insert(e, n));
    }
  }, {
    key: "removeTarget",
    value: function removeTarget(t) {
      this.st["delete"](t);
    }
    /**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */

  }, {
    key: "gt",
    value: function gt(t) {
      var e = this.lt(t).H();
      return this.nt.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
    }
    /**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */

  }, {
    key: "Z",
    value: function Z(t) {
      this.lt(t).Z();
    }
  }, {
    key: "lt",
    value: function lt(t) {
      var e = this.st.get(t);
      return e || (e = new rs(), this.st.set(t, e)), e;
    }
  }, {
    key: "Tt",
    value: function Tt(t) {
      var e = this.rt.get(t);
      return e || (e = new index_esm2017_we(index_esm2017_rt), this.rt = this.rt.insert(t, e)), e;
    }
    /**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */

  }, {
    key: "ft",
    value: function ft(t) {
      var e = null !== this.wt(t);
      return e || dist_index_esm2017_O("WatchChangeAggregator", "Detected inactive target", t), e;
    }
    /**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */

  }, {
    key: "wt",
    value: function wt(t) {
      var e = this.st.get(t);
      return e && e.G ? null : this.nt.Et(t);
    }
    /**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */

  }, {
    key: "dt",
    value: function dt(t) {
      var _this26 = this;

      this.st.set(t, new rs());
      this.nt.getRemoteKeysForTarget(t).forEach(function (e) {
        _this26.ct(t, e,
        /*updatedDocument=*/
        null);
      });
    }
    /**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */

  }, {
    key: "It",
    value: function It(t, e) {
      return this.nt.getRemoteKeysForTarget(t).has(e);
    }
  }]);

  return os;
}()));

function us() {
  return new index_esm2017_fe(index_esm2017_xt.comparator);
}

function as() {
  return new index_esm2017_fe(index_esm2017_xt.comparator);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var cs = function () {
  var t = {
    asc: "ASCENDING",
    desc: "DESCENDING"
  };
  return t;
}(),
    hs = function () {
  var t = {
    "<": "LESS_THAN",
    "<=": "LESS_THAN_OR_EQUAL",
    ">": "GREATER_THAN",
    ">=": "GREATER_THAN_OR_EQUAL",
    "==": "EQUAL",
    "!=": "NOT_EQUAL",
    "array-contains": "ARRAY_CONTAINS",
    "in": "IN",
    "not-in": "NOT_IN",
    "array-contains-any": "ARRAY_CONTAINS_ANY"
  };
  return t;
}();
/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */


var ls = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function ls(t, e) {
  firestore_dist_index_esm2017_classCallCheck(this, ls);

  this.databaseId = t, this.N = e;
})));
/**
 * Returns a value for a Date that's appropriate to put into a proto.
 */


function fs(t, e) {
  if (t.N) {
    return "".concat(new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", ""), ".").concat(("000000000" + e.nanoseconds).slice(-9), "Z");
  }

  return {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */


function ds(t, e) {
  return t.N ? e.toBase64() : e.toUint8Array();
}
/**
 * Returns a ByteString based on the proto string value.
 */


function _s(t, e) {
  return fs(t, e.toTimestamp());
}

function ws(t) {
  return dist_index_esm2017_U(!!t), index_esm2017_ct.fromTimestamp(function (t) {
    var e = index_esm2017_Tt(t);
    return new index_esm2017_at(e.seconds, e.nanos);
  }(t));
}

function ms(t, e) {
  return function (t) {
    return new index_esm2017_t(["projects", t.projectId, "databases", t.database]);
  }(t).child("documents").child(e).canonicalString();
}

function gs(t) {
  var e = index_esm2017_t.fromString(t);

  return dist_index_esm2017_U(Ks(e)), e;
}

function ys(t, e) {
  return ms(t.databaseId, e.path);
}

function ps(t, e) {
  var n = gs(e);
  if (n.get(1) !== t.databaseId.projectId) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
  if (n.get(3) !== t.databaseId.database) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
  return new index_esm2017_xt(As(n));
}

function Is(t, e) {
  return ms(t.databaseId, e);
}

function Ts(t) {
  var e = gs(t); // In v1beta1 queries for collections at the root did not have a trailing
  // "/documents". In v1 all resource paths contain "/documents". Preserve the
  // ability to read the v1beta1 form for compatibility with queries persisted
  // in the local target cache.

  return 4 === e.length ? index_esm2017_t.emptyPath() : As(e);
}

function Es(t) {
  return new index_esm2017_t(["projects", t.databaseId.projectId, "databases", t.databaseId.database]).canonicalString();
}

function As(t) {
  return dist_index_esm2017_U(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
}
/** Creates a Document proto from key and fields (but no create/update time) */


function Rs(t, e, n) {
  return {
    name: ys(t, e),
    fields: n.value.mapValue.fields
  };
}

function bs(t, e, n) {
  var s = ps(t, e.name),
      i = ws(e.updateTime),
      r = new index_esm2017_te({
    mapValue: {
      fields: e.fields
    }
  }),
      o = index_esm2017_ne.newFoundDocument(s, i, r);
  return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;
}

function Ps(t, e) {
  return "found" in e ? function (t, e) {
    dist_index_esm2017_U(!!e.found), e.found.name, e.found.updateTime;
    var n = ps(t, e.found.name),
        s = ws(e.found.updateTime),
        i = new index_esm2017_te({
      mapValue: {
        fields: e.found.fields
      }
    });
    return index_esm2017_ne.newFoundDocument(n, s, i);
  }(t, e) : "missing" in e ? function (t, e) {
    dist_index_esm2017_U(!!e.missing), dist_index_esm2017_U(!!e.readTime);
    var n = ps(t, e.missing),
        s = ws(e.readTime);
    return index_esm2017_ne.newNoDocument(n, s);
  }(t, e) : dist_index_esm2017_L();
}

function Vs(t, e) {
  var n;

  if ("targetChange" in e) {
    e.targetChange; // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
    // if unset

    var s = function (t) {
      return "NO_CHANGE" === t ? 0
      /* NoChange */
      : "ADD" === t ? 1
      /* Added */
      : "REMOVE" === t ? 2
      /* Removed */
      : "CURRENT" === t ? 3
      /* Current */
      : "RESET" === t ? 4
      /* Reset */
      : dist_index_esm2017_L();
    }(e.targetChange.targetChangeType || "NO_CHANGE"),
        i = e.targetChange.targetIds || [],
        r = function (t, e) {
      return t.N ? (dist_index_esm2017_U(void 0 === e || "string" == typeof e), index_esm2017_pt.fromBase64String(e || "")) : (dist_index_esm2017_U(void 0 === e || e instanceof Uint8Array), index_esm2017_pt.fromUint8Array(e || new Uint8Array()));
    }(t, e.targetChange.resumeToken),
        o = e.targetChange.cause,
        u = o && function (t) {
      var e = void 0 === t.code ? index_esm2017_G.UNKNOWN : index_esm2017_qn(t.code);
      return new dist_index_esm2017_Q(e, t.message || "");
    }
    /**
    * Returns a value for a number (or null) that's appropriate to put into
    * a google.protobuf.Int32Value proto.
    * DO NOT USE THIS FOR ANYTHING ELSE.
    * This method cheats. It's typed as returning "number" because that's what
    * our generated proto interfaces say Int32Value must be. But GRPC actually
    * expects a { value: <number> } struct.
    */
    (o);

    n = new is(s, i, r, u || null);
  } else if ("documentChange" in e) {
    e.documentChange;
    var _s2 = e.documentChange;
    _s2.document, _s2.document.name, _s2.document.updateTime;

    var _i5 = ps(t, _s2.document.name),
        _r2 = ws(_s2.document.updateTime),
        _o2 = new index_esm2017_te({
      mapValue: {
        fields: _s2.document.fields
      }
    }),
        _u2 = index_esm2017_ne.newFoundDocument(_i5, _r2, _o2),
        a = _s2.targetIds || [],
        c = _s2.removedTargetIds || [];

    n = new ns(a, c, _u2.key, _u2);
  } else if ("documentDelete" in e) {
    e.documentDelete;
    var _s3 = e.documentDelete;
    _s3.document;

    var _i6 = ps(t, _s3.document),
        _r3 = _s3.readTime ? ws(_s3.readTime) : index_esm2017_ct.min(),
        _o3 = index_esm2017_ne.newNoDocument(_i6, _r3),
        _u3 = _s3.removedTargetIds || [];

    n = new ns([], _u3, _o3.key, _o3);
  } else if ("documentRemove" in e) {
    e.documentRemove;
    var _s4 = e.documentRemove;
    _s4.document;

    var _i7 = ps(t, _s4.document),
        _r4 = _s4.removedTargetIds || [];

    n = new ns([], _r4, _i7, null);
  } else {
    if (!("filter" in e)) return dist_index_esm2017_L();
    {
      e.filter;
      var _t28 = e.filter;
      _t28.targetId;

      var _s5 = _t28.count || 0,
          _i8 = new index_esm2017_$n(_s5),
          _r5 = _t28.targetId;

      n = new ss(_r5, _i8);
    }
  }

  return n;
}

function vs(t, e) {
  var n;
  if (e instanceof index_esm2017_Cn) n = {
    update: Rs(t, e.key, e.value)
  };else if (e instanceof index_esm2017_On) n = {
    "delete": ys(t, e.key)
  };else if (e instanceof index_esm2017_xn) n = {
    update: Rs(t, e.key, e.data),
    updateMask: qs(e.fieldMask)
  };else {
    if (!(e instanceof index_esm2017_Fn)) return dist_index_esm2017_L();
    n = {
      verify: ys(t, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map(function (t) {
    return function (t, e) {
      var n = e.transform;
      if (n instanceof index_esm2017_fn) return {
        fieldPath: e.field.canonicalString(),
        setToServerValue: "REQUEST_TIME"
      };
      if (n instanceof index_esm2017_dn) return {
        fieldPath: e.field.canonicalString(),
        appendMissingElements: {
          values: n.elements
        }
      };
      if (n instanceof index_esm2017_wn) return {
        fieldPath: e.field.canonicalString(),
        removeAllFromArray: {
          values: n.elements
        }
      };
      if (n instanceof index_esm2017_gn) return {
        fieldPath: e.field.canonicalString(),
        increment: n.k
      };
      throw dist_index_esm2017_L();
    }(0, t);
  })), e.precondition.isNone || (n.currentDocument = function (t, e) {
    return void 0 !== e.updateTime ? {
      updateTime: _s(t, e.updateTime)
    } : void 0 !== e.exists ? {
      exists: e.exists
    } : dist_index_esm2017_L();
  }(t, e.precondition)), n;
}

function Ss(t, e) {
  var n = e.currentDocument ? function (t) {
    return void 0 !== t.updateTime ? index_esm2017_An.updateTime(ws(t.updateTime)) : void 0 !== t.exists ? index_esm2017_An.exists(t.exists) : index_esm2017_An.none();
  }(e.currentDocument) : index_esm2017_An.none(),
      s = e.updateTransforms ? e.updateTransforms.map(function (e) {
    return function (t, e) {
      var n = null;
      if ("setToServerValue" in e) dist_index_esm2017_U("REQUEST_TIME" === e.setToServerValue), n = new index_esm2017_fn();else if ("appendMissingElements" in e) {
        var _t29 = e.appendMissingElements.values || [];

        n = new index_esm2017_dn(_t29);
      } else if ("removeAllFromArray" in e) {
        var _t30 = e.removeAllFromArray.values || [];

        n = new index_esm2017_wn(_t30);
      } else "increment" in e ? n = new index_esm2017_gn(t, e.increment) : dist_index_esm2017_L();
      var s = index_esm2017_mt.fromServerFormat(e.fieldPath);
      return new index_esm2017_In(s, n);
    }(t, e);
  }) : [];

  if (e.update) {
    e.update.name;
    var i = ps(t, e.update.name),
        r = new index_esm2017_te({
      mapValue: {
        fields: e.update.fields
      }
    });

    if (e.updateMask) {
      var _t31 = function (t) {
        var e = t.fieldPaths || [];
        return new index_esm2017_gt(e.map(function (t) {
          return index_esm2017_mt.fromServerFormat(t);
        }));
      }(e.updateMask);

      return new index_esm2017_xn(i, r, _t31, n, s);
    }

    return new index_esm2017_Cn(i, r, n, s);
  }

  if (e["delete"]) {
    var _s6 = ps(t, e["delete"]);

    return new index_esm2017_On(_s6, n);
  }

  if (e.verify) {
    var _s7 = ps(t, e.verify);

    return new index_esm2017_Fn(_s7, n);
  }

  return dist_index_esm2017_L();
}

function Ds(t, e) {
  return t && t.length > 0 ? (dist_index_esm2017_U(void 0 !== e), t.map(function (t) {
    return function (t, e) {
      // NOTE: Deletes don't have an updateTime.
      var n = t.updateTime ? ws(t.updateTime) : ws(e);
      return n.isEqual(index_esm2017_ct.min()) && ( // The Firestore Emulator currently returns an update time of 0 for
      // deletes of non-existing documents (rather than null). This breaks the
      // test "get deleted doc while offline with source=cache" as NoDocuments
      // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
      // TODO(#2149): Remove this when Emulator is fixed
      n = ws(e)), new index_esm2017_En(n, t.transformResults || []);
    }(t, e);
  })) : [];
}

function Cs(t, e) {
  return {
    documents: [Is(t, e.path)]
  };
}

function xs(t, e) {
  // Dissect the path into parent, collectionId, and optional key filter.
  var n = {
    structuredQuery: {}
  },
      s = e.path;
  null !== e.collectionGroup ? (n.parent = Is(t, s), n.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: !0
  }]) : (n.parent = Is(t, s.popLast()), n.structuredQuery.from = [{
    collectionId: s.lastSegment()
  }]);

  var i = function (t) {
    if (0 === t.length) return;
    var e = t.map(function (t) {
      return (// visible for testing
        function (t) {
          if ("=="
          /* EQUAL */
          === t.op) {
            if (index_esm2017_jt(t.value)) return {
              unaryFilter: {
                field: $s(t.field),
                op: "IS_NAN"
              }
            };
            if (index_esm2017_Qt(t.value)) return {
              unaryFilter: {
                field: $s(t.field),
                op: "IS_NULL"
              }
            };
          } else if ("!="
          /* NOT_EQUAL */
          === t.op) {
            if (index_esm2017_jt(t.value)) return {
              unaryFilter: {
                field: $s(t.field),
                op: "IS_NOT_NAN"
              }
            };
            if (index_esm2017_Qt(t.value)) return {
              unaryFilter: {
                field: $s(t.field),
                op: "IS_NOT_NULL"
              }
            };
          }

          return {
            fieldFilter: {
              field: $s(t.field),
              op: Fs(t.op),
              value: t.value
            }
          };
        }(t)
      );
    });
    if (1 === e.length) return e[0];
    return {
      compositeFilter: {
        op: "AND",
        filters: e
      }
    };
  }(e.filters);

  i && (n.structuredQuery.where = i);

  var r = function (t) {
    if (0 === t.length) return;
    return t.map(function (t) {
      return (// visible for testing
        function (t) {
          return {
            field: $s(t.field),
            direction: Os(t.dir)
          };
        }(t)
      );
    });
  }(e.orderBy);

  r && (n.structuredQuery.orderBy = r);

  var o = function (t, e) {
    return t.N || index_esm2017_St(e) ? e : {
      value: e
    };
  }
  /**
  * Returns a number (or null) from a google.protobuf.Int32Value proto.
  */
  (t, e.limit);

  var u;
  return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {
    before: (u = e.startAt).inclusive,
    values: u.position
  }), e.endAt && (n.structuredQuery.endAt = function (t) {
    return {
      before: !t.inclusive,
      values: t.position
    };
  }(e.endAt)), n;
}

function Ns(t) {
  var e = Ts(t.parent);
  var n = t.structuredQuery,
      s = n.from ? n.from.length : 0;
  var i = null;

  if (s > 0) {
    dist_index_esm2017_U(1 === s);
    var _t32 = n.from[0];
    _t32.allDescendants ? i = _t32.collectionId : e = e.child(_t32.collectionId);
  }

  var r = [];
  n.where && (r = Ms(n.where));
  var o = [];
  n.orderBy && (o = n.orderBy.map(function (t) {
    return function (t) {
      return new index_esm2017_Fe(Bs(t.field), // visible for testing
      function (t) {
        switch (t) {
          case "ASCENDING":
            return "asc"
            /* ASCENDING */
            ;

          case "DESCENDING":
            return "desc"
            /* DESCENDING */
            ;

          default:
            return;
        }
      } // visible for testing
      (t.direction));
    }(t);
  }));
  var u = null;
  n.limit && (u = function (t) {
    var e;
    return e = "object" == firestore_dist_index_esm2017_typeof(t) ? t.value : t, index_esm2017_St(e) ? null : e;
  }(n.limit));
  var a = null;
  n.startAt && (a = function (t) {
    var e = !!t.before,
        n = t.values || [];
    return new index_esm2017_Oe(n, e);
  }(n.startAt));
  var c = null;
  return n.endAt && (c = function (t) {
    var e = !t.before,
        n = t.values || [];
    return new index_esm2017_Oe(n, e);
  } // visible for testing
  (n.endAt)), index_esm2017_qe(e, i, o, r, u, "F"
  /* First */
  , a, c);
}

function ks(t, e) {
  var n = function (t, e) {
    switch (e) {
      case 0
      /* Listen */
      :
        return null;

      case 1
      /* ExistenceFilterMismatch */
      :
        return "existence-filter-mismatch";

      case 2
      /* LimboResolution */
      :
        return "limbo-document";

      default:
        return dist_index_esm2017_L();
    }
  }(0, e.purpose);

  return null == n ? null : {
    "goog-listen-tags": n
  };
}

function Ms(t) {
  return t ? void 0 !== t.unaryFilter ? [Us(t)] : void 0 !== t.fieldFilter ? [Ls(t)] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map(function (t) {
    return Ms(t);
  }).reduce(function (t, e) {
    return t.concat(e);
  }) : dist_index_esm2017_L() : [];
}

function Os(t) {
  return cs[t];
}

function Fs(t) {
  return hs[t];
}

function $s(t) {
  return {
    fieldPath: t.canonicalString()
  };
}

function Bs(t) {
  return index_esm2017_mt.fromServerFormat(t.fieldPath);
}

function Ls(t) {
  return index_esm2017_Ve.create(Bs(t.fieldFilter.field), function (t) {
    switch (t) {
      case "EQUAL":
        return "=="
        /* EQUAL */
        ;

      case "NOT_EQUAL":
        return "!="
        /* NOT_EQUAL */
        ;

      case "GREATER_THAN":
        return ">"
        /* GREATER_THAN */
        ;

      case "GREATER_THAN_OR_EQUAL":
        return ">="
        /* GREATER_THAN_OR_EQUAL */
        ;

      case "LESS_THAN":
        return "<"
        /* LESS_THAN */
        ;

      case "LESS_THAN_OR_EQUAL":
        return "<="
        /* LESS_THAN_OR_EQUAL */
        ;

      case "ARRAY_CONTAINS":
        return "array-contains"
        /* ARRAY_CONTAINS */
        ;

      case "IN":
        return "in"
        /* IN */
        ;

      case "NOT_IN":
        return "not-in"
        /* NOT_IN */
        ;

      case "ARRAY_CONTAINS_ANY":
        return "array-contains-any"
        /* ARRAY_CONTAINS_ANY */
        ;

      default:
        return dist_index_esm2017_L();
    }
  }(t.fieldFilter.op), t.fieldFilter.value);
}

function Us(t) {
  switch (t.unaryFilter.op) {
    case "IS_NAN":
      var e = Bs(t.unaryFilter.field);
      return index_esm2017_Ve.create(e, "=="
      /* EQUAL */
      , {
        doubleValue: NaN
      });

    case "IS_NULL":
      var n = Bs(t.unaryFilter.field);
      return index_esm2017_Ve.create(n, "=="
      /* EQUAL */
      , {
        nullValue: "NULL_VALUE"
      });

    case "IS_NOT_NAN":
      var s = Bs(t.unaryFilter.field);
      return index_esm2017_Ve.create(s, "!="
      /* NOT_EQUAL */
      , {
        doubleValue: NaN
      });

    case "IS_NOT_NULL":
      var i = Bs(t.unaryFilter.field);
      return index_esm2017_Ve.create(i, "!="
      /* NOT_EQUAL */
      , {
        nullValue: "NULL_VALUE"
      });

    default:
      return dist_index_esm2017_L();
  }
}

function qs(t) {
  var e = [];
  return t.fields.forEach(function (t) {
    return e.push(t.canonicalString());
  }), {
    fieldPaths: e
  };
}

function Ks(t) {
  // Resource names have at least 4 components (project ID, database ID)
  return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */


function Gs(t) {
  var e = "";

  for (var n = 0; n < t.length; n++) {
    e.length > 0 && (e = js(e)), e = Qs(t.get(n), e);
  }

  return js(e);
}
/** Encodes a single segment of a resource path into the given result */


function Qs(t, e) {
  var n = e;
  var s = t.length;

  for (var _e17 = 0; _e17 < s; _e17++) {
    var _s8 = t.charAt(_e17);

    switch (_s8) {
      case "\0":
        n += "";
        break;

      case "":
        n += "";
        break;

      default:
        n += _s8;
    }
  }

  return n;
}
/** Encodes a path separator into the given result */


function js(t) {
  return t + "";
}
/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */


function Ws(t) {
  // Event the empty path must encode as a path of at least length 2. A path
  // with exactly 2 must be the empty path.
  var e = t.length;
  if (dist_index_esm2017_U(e >= 2), 2 === e) return dist_index_esm2017_U("" === t.charAt(0) && "" === t.charAt(1)), index_esm2017_t.emptyPath(); // Escape characters cannot exist past the second-to-last position in the
  // source value.

  var n = e - 2,
      s = [];
  var i = "";

  for (var r = 0; r < e;) {
    // The last two characters of a valid encoded path must be a separator, so
    // there must be an end to this segment.
    var _e18 = t.indexOf("", r);

    (_e18 < 0 || _e18 > n) && dist_index_esm2017_L();

    switch (t.charAt(_e18 + 1)) {
      case "":
        var _n12 = t.substring(r, _e18);

        var o = void 0;
        0 === i.length ? // Avoid copying for the common case of a segment that excludes \0
        // and \001
        o = _n12 : (i += _n12, o = i, i = ""), s.push(o);
        break;

      case "":
        i += t.substring(r, _e18), i += "\0";
        break;

      case "":
        // The escape character can be used in the output to encode itself.
        i += t.substring(r, _e18 + 1);
        break;

      default:
        dist_index_esm2017_L();
    }

    r = _e18 + 2;
  }

  return new index_esm2017_t(s);
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var zs = (/* unused pure expression or super */ null && (["userId", "batchId"]));
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Name of the IndexedDb object store.
 *
 * Note that the name 'owner' is chosen to ensure backwards compatibility with
 * older clients that only supported single locked access to the persistence
 * layer.
 */

/**
 * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
 * index to iterate over all at document mutations for a given path or lower.
 */

function Hs(t, e) {
  return [t, Gs(e)];
}
/**
 * Creates a full index key of [userId, encodedPath, batchId] for inserting
 * and deleting into the DbDocumentMutations index.
 */


function Js(t, e, n) {
  return [t, Gs(e), n];
}
/**
 * Because we store all the useful information for this store in the key,
 * there is no useful information to store as the value. The raw (unencoded)
 * path cannot be stored because IndexedDb doesn't store prototype
 * information.
 */


var Ys = {},
    Xs = (/* unused pure expression or super */ null && (["prefixPath", "collectionGroup", "readTime", "documentId"])),
    Zs = (/* unused pure expression or super */ null && (["prefixPath", "collectionGroup", "documentId"])),
    ti = (/* unused pure expression or super */ null && (["collectionGroup", "readTime", "prefixPath", "documentId"])),
    ei = (/* unused pure expression or super */ null && (["canonicalId", "targetId"])),
    ni = (/* unused pure expression or super */ null && (["targetId", "path"])),
    si = (/* unused pure expression or super */ null && (["path", "targetId"])),
    ii = (/* unused pure expression or super */ null && (["collectionId", "parent"])),
    ri = (/* unused pure expression or super */ null && (["indexId", "uid"])),
    oi = (/* unused pure expression or super */ null && (["uid", "sequenceNumber"])),
    ui = (/* unused pure expression or super */ null && (["indexId", "uid", "arrayValue", "directionalValue", "orderedDocumentKey", "documentKey"])),
    ai = (/* unused pure expression or super */ null && (["indexId", "uid", "orderedDocumentKey"])),
    ci = (/* unused pure expression or super */ null && (["userId", "collectionPath", "documentId"])),
    hi = (/* unused pure expression or super */ null && (["userId", "collectionPath", "largestBatchId"])),
    li = (/* unused pure expression or super */ null && (["userId", "collectionGroup", "largestBatchId"])),
    fi = ["mutationQueues", "mutations", "documentMutations", "remoteDocuments", "targets", "owner", "targetGlobal", "targetDocuments"].concat(["clientMetadata"]).concat(["remoteDocumentGlobal"]).concat(["collectionParents"]).concat(["bundles", "namedQueries"]),
    di = [].concat(dist_index_esm2017_toConsumableArray(fi), ["documentOverlays"]),
    _i = ["mutationQueues", "mutations", "documentMutations", "remoteDocumentsV14", "targets", "owner", "targetGlobal", "targetDocuments", "clientMetadata", "remoteDocumentGlobal", "collectionParents", "bundles", "namedQueries", "documentOverlays"],
    wi = [].concat(_i, ["indexConfiguration", "indexState", "indexEntries"]);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var mi = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
/**
 * A base class representing a persistence transaction, encapsulating both the
 * transaction's sequence numbers as well as a list of onCommitted listeners.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */

var gi = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function gi() {
    firestore_dist_index_esm2017_classCallCheck(this, gi);

    this.onCommittedListeners = [];
  }

  firestore_dist_index_esm2017_createClass(gi, [{
    key: "addOnCommittedListener",
    value: function addOnCommittedListener(t) {
      this.onCommittedListeners.push(t);
    }
  }, {
    key: "raiseOnCommittedEvent",
    value: function raiseOnCommittedEvent() {
      this.onCommittedListeners.forEach(function (t) {
        return t();
      });
    }
  }]);

  return gi;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * PersistencePromise is essentially a re-implementation of Promise except
 * it has a .next() method instead of .then() and .next() and .catch() callbacks
 * are executed synchronously when a PersistencePromise resolves rather than
 * asynchronously (Promise implementations use setImmediate() or similar).
 *
 * This is necessary to interoperate with IndexedDB which will automatically
 * commit transactions if control is returned to the event loop without
 * synchronously initiating another operation on the transaction.
 *
 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
 * Promises.
 */


var yi = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function yi(t) {
    var _this27 = this;

    firestore_dist_index_esm2017_classCallCheck(this, yi);

    // NOTE: next/catchCallback will always point to our own wrapper functions,
    // not the user's raw next() or catch() callbacks.
    this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
    this.result = void 0, this.error = void 0, this.isDone = !1, // Set to true when .then() or .catch() are called and prevents additional
    // chaining.
    this.callbackAttached = !1, t(function (t) {
      _this27.isDone = !0, _this27.result = t, _this27.nextCallback && // value should be defined unless T is Void, but we can't express
      // that in the type system.
      _this27.nextCallback(t);
    }, function (t) {
      _this27.isDone = !0, _this27.error = t, _this27.catchCallback && _this27.catchCallback(t);
    });
  }

  firestore_dist_index_esm2017_createClass(yi, [{
    key: "catch",
    value: function _catch(t) {
      return this.next(void 0, t);
    }
  }, {
    key: "next",
    value: function next(t, e) {
      var _this28 = this;

      return this.callbackAttached && dist_index_esm2017_L(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(e, this.error) : this.wrapSuccess(t, this.result) : new yi(function (n, s) {
        _this28.nextCallback = function (e) {
          _this28.wrapSuccess(t, e).next(n, s);
        }, _this28.catchCallback = function (t) {
          _this28.wrapFailure(e, t).next(n, s);
        };
      });
    }
  }, {
    key: "toPromise",
    value: function toPromise() {
      var _this29 = this;

      return new Promise(function (t, e) {
        _this29.next(t, e);
      });
    }
  }, {
    key: "wrapUserFunction",
    value: function wrapUserFunction(t) {
      try {
        var e = t();
        return e instanceof yi ? e : yi.resolve(e);
      } catch (t) {
        return yi.reject(t);
      }
    }
  }, {
    key: "wrapSuccess",
    value: function wrapSuccess(t, e) {
      return t ? this.wrapUserFunction(function () {
        return t(e);
      }) : yi.resolve(e);
    }
  }, {
    key: "wrapFailure",
    value: function wrapFailure(t, e) {
      return t ? this.wrapUserFunction(function () {
        return t(e);
      }) : yi.reject(e);
    }
  }], [{
    key: "resolve",
    value: function resolve(t) {
      return new yi(function (e, n) {
        e(t);
      });
    }
  }, {
    key: "reject",
    value: function reject(t) {
      return new yi(function (e, n) {
        n(t);
      });
    }
  }, {
    key: "waitFor",
    value: function waitFor( // Accept all Promise types in waitFor().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    t) {
      return new yi(function (e, n) {
        var s = 0,
            i = 0,
            r = !1;
        t.forEach(function (t) {
          ++s, t.next(function () {
            ++i, r && i === s && e();
          }, function (t) {
            return n(t);
          });
        }), r = !0, i === s && e();
      });
    }
    /**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */

  }, {
    key: "or",
    value: function or(t) {
      var e = yi.resolve(!1);

      var _iterator22 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
          _step22;

      try {
        var _loop3 = function _loop3() {
          var n = _step22.value;
          e = e.next(function (t) {
            return t ? yi.resolve(t) : n();
          });
        };

        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          _loop3();
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }

      return e;
    }
  }, {
    key: "forEach",
    value: function forEach(t, e) {
      var _this30 = this;

      var n = [];
      return t.forEach(function (t, s) {
        n.push(e.call(_this30, t, s));
      }), this.waitFor(n);
    }
  }]);

  return yi;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// References to `window` are guarded by SimpleDb.isAvailable()

/* eslint-disable no-restricted-globals */

/**
 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
 * specific object store.
 */


var pi = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function pi(t, e) {
    var _this31 = this;

    firestore_dist_index_esm2017_classCallCheck(this, pi);

    this.action = t, this.transaction = e, this.aborted = !1,
    /**
     * A `Promise` that resolves with the result of the IndexedDb transaction.
     */
    this.At = new index_esm2017_j(), this.transaction.oncomplete = function () {
      _this31.At.resolve();
    }, this.transaction.onabort = function () {
      e.error ? _this31.At.reject(new Ei(t, e.error)) : _this31.At.resolve();
    }, this.transaction.onerror = function (e) {
      var n = Vi(e.target.error);

      _this31.At.reject(new Ei(t, n));
    };
  }

  firestore_dist_index_esm2017_createClass(pi, [{
    key: "Rt",
    get: function get() {
      return this.At.promise;
    }
  }, {
    key: "abort",
    value: function abort(t) {
      t && this.At.reject(t), this.aborted || (dist_index_esm2017_O("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), this.aborted = !0, this.transaction.abort());
    }
  }, {
    key: "bt",
    value: function bt() {
      // If the browser supports V3 IndexedDB, we invoke commit() explicitly to
      // speed up index DB processing if the event loop remains blocks.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var t = this.transaction;
      this.aborted || "function" != typeof t.commit || t.commit();
    }
    /**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */

  }, {
    key: "store",
    value: function store(t) {
      var e = this.transaction.objectStore(t);
      return new Ri(e);
    }
  }], [{
    key: "open",
    value: function open(t, e, n, s) {
      try {
        return new pi(e, t.transaction(s, n));
      } catch (t) {
        throw new Ei(e, t);
      }
    }
  }]);

  return pi;
}()));
/**
 * Provides a wrapper around IndexedDb with a simplified interface that uses
 * Promise-like return values to chain operations. Real promises cannot be used
 * since .then() continuations are executed asynchronously (e.g. via
 * .setImmediate), which would cause IndexedDB to end the transaction.
 * See PersistencePromise for more details.
 */


var Ii = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /*
   * Creates a new SimpleDb wrapper for IndexedDb database `name`.
   *
   * Note that `version` must not be a downgrade. IndexedDB does not support
   * downgrading the schema version. We currently do not support any way to do
   * versioning outside of IndexedDB's versioning mechanism, as only
   * version-upgrade transactions are allowed to do things like create
   * objectstores.
   */
  function Ii(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, Ii);

    this.name = t, this.version = e, this.Pt = n; // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
    // whatever reason it's much harder to hit after 12.2 so we only proactively
    // log on 12.2.

    12.2 === Ii.Vt(getUA()) && dist_index_esm2017_F("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
  }
  /** Deletes the specified database. */


  firestore_dist_index_esm2017_createClass(Ii, [{
    key: "Nt",
    value:
    /**
     * Opens the specified database, creating or upgrading it if necessary.
     */
    function () {
      var _Nt = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(t) {
        var _this32 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.t0 = this.db;

                if (_context2.t0) {
                  _context2.next = 6;
                  break;
                }

                dist_index_esm2017_O("SimpleDb", "Opening database:", this.name);
                _context2.next = 5;
                return new Promise(function (e, n) {
                  // TODO(mikelehen): Investigate browser compatibility.
                  // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                  // suggests IE9 and older WebKit browsers handle upgrade
                  // differently. They expect setVersion, as described here:
                  // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                  var s = indexedDB.open(_this32.name, _this32.version);
                  s.onsuccess = function (t) {
                    var n = t.target.result;
                    e(n);
                  }, s.onblocked = function () {
                    n(new Ei(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                  }, s.onerror = function (e) {
                    var s = e.target.error;
                    "VersionError" === s.name ? n(new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : "InvalidStateError" === s.name ? n(new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + s)) : n(new Ei(t, s));
                  }, s.onupgradeneeded = function (t) {
                    dist_index_esm2017_O("SimpleDb", 'Database "' + _this32.name + '" requires upgrade from version:', t.oldVersion);
                    var e = t.target.result;

                    _this32.Pt.kt(e, s.transaction, t.oldVersion, _this32.version).next(function () {
                      dist_index_esm2017_O("SimpleDb", "Database upgrade to version " + _this32.version + " complete");
                    });
                  };
                });

              case 5:
                this.db = _context2.sent;

              case 6:
                this.Mt && (this.db.onversionchange = function (t) {
                  return _this32.Mt(t);
                });
                return _context2.abrupt("return", this.db);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function Nt(_x) {
        return _Nt.apply(this, arguments);
      }

      return Nt;
    }()
  }, {
    key: "Ot",
    value: function Ot(t) {
      this.Mt = t, this.db && (this.db.onversionchange = function (e) {
        return t(e);
      });
    }
  }, {
    key: "runTransaction",
    value: function () {
      var _runTransaction = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(t, e, n, s) {
        var _this33 = this;

        var i, r, _ret, _e19;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                i = "readonly" === e;
                r = 0;

              case 2:
                ++r;
                _context4.prev = 3;
                return _context4.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  var e, r;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return _this33.Nt(t);

                        case 2:
                          _this33.db = _context3.sent;
                          e = pi.open(_this33.db, t, i ? "readonly" : "readwrite", n), r = s(e).next(function (t) {
                            return e.bt(), t;
                          })["catch"](function (t) {
                            return (// Abort the transaction if there was an error.
                              e.abort(t), yi.reject(t)
                            );
                          }).toPromise(); // As noted above, errors are propagated by aborting the transaction. So
                          // we swallow any error here to avoid the browser logging it as unhandled.

                          r["catch"](function () {});
                          _context3.next = 7;
                          return e.Rt;

                        case 7:
                          _context3.t0 = r;
                          return _context3.abrupt("return", {
                            v: _context3.t0
                          });

                        case 9:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                })(), "t0", 5);

              case 5:
                _ret = _context4.t0;

                if (!(firestore_dist_index_esm2017_typeof(_ret) === "object")) {
                  _context4.next = 8;
                  break;
                }

                return _context4.abrupt("return", _ret.v);

              case 8:
                _context4.next = 15;
                break;

              case 10:
                _context4.prev = 10;
                _context4.t1 = _context4["catch"](3);
                // TODO(schmidt-sebastian): We could probably be smarter about this and
                // not retry exceptions that are likely unrecoverable (such as quota
                // exceeded errors).
                // Note: We cannot use an instanceof check for FirestoreException, since the
                // exception is wrapped in a generic error by our async/await handling.
                _e19 = "FirebaseError" !== _context4.t1.name && r < 3;

                if (!(dist_index_esm2017_O("SimpleDb", "Transaction failed with error:", _context4.t1.message, "Retrying:", _e19), this.close(), !_e19)) {
                  _context4.next = 15;
                  break;
                }

                return _context4.abrupt("return", Promise.reject(_context4.t1));

              case 15:
                _context4.next = 2;
                break;

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[3, 10]]);
      }));

      function runTransaction(_x2, _x3, _x4, _x5) {
        return _runTransaction.apply(this, arguments);
      }

      return runTransaction;
    }()
  }, {
    key: "close",
    value: function close() {
      this.db && this.db.close(), this.db = void 0;
    }
  }], [{
    key: "delete",
    value: function _delete(t) {
      return dist_index_esm2017_O("SimpleDb", "Removing database:", t), bi(window.indexedDB.deleteDatabase(t)).toPromise();
    }
    /** Returns true if IndexedDB is available in the current environment. */

  }, {
    key: "vt",
    value: function vt() {
      if (!isIndexedDBAvailable()) return !1;
      if (Ii.St()) return !0; // We extensively use indexed array values and compound keys,
      // which IE and Edge do not support. However, they still have indexedDB
      // defined on the window, so we need to check for them here and make sure
      // to return that persistence is not enabled for those browsers.
      // For tracking support of this feature, see here:
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
      // Check the UA string to find out the browser.

      var t = getUA(),
          e = Ii.Vt(t),
          n = 0 < e && e < 10,
          s = Ii.Dt(t),
          i = 0 < s && s < 4.5; // IE 10
      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
      // IE 11
      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
      // Edge
      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
      // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
      // iOS Safari: Disable for users running iOS version < 10.

      return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
    }
    /**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */

  }, {
    key: "St",
    value: function St() {
      var t;
      return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Ct);
    }
    /** Helper to get a typed SimpleDbStore from a transaction. */

  }, {
    key: "xt",
    value: function xt(t, e) {
      return t.store(e);
    } // visible for testing

    /** Parse User Agent to determine iOS version. Returns -1 if not found. */

  }, {
    key: "Vt",
    value: function Vt(t) {
      var e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i),
          n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
      return Number(n);
    } // visible for testing

    /** Parse User Agent to determine Android version. Returns -1 if not found. */

  }, {
    key: "Dt",
    value: function Dt(t) {
      var e = t.match(/Android ([\d.]+)/i),
          n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
      return Number(n);
    }
  }]);

  return Ii;
}()));
/**
 * A controller for iterating over a key range or index. It allows an iterate
 * callback to delete the currently-referenced object, or jump to a new key
 * within the key range or index.
 */


var Ti = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ti(t) {
    firestore_dist_index_esm2017_classCallCheck(this, Ti);

    this.Ft = t, this.$t = !1, this.Bt = null;
  }

  firestore_dist_index_esm2017_createClass(Ti, [{
    key: "isDone",
    get: function get() {
      return this.$t;
    }
  }, {
    key: "Lt",
    get: function get() {
      return this.Bt;
    }
  }, {
    key: "cursor",
    set: function set(t) {
      this.Ft = t;
    }
    /**
     * This function can be called to stop iteration at any point.
     */

  }, {
    key: "done",
    value: function done() {
      this.$t = !0;
    }
    /**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */

  }, {
    key: "Ut",
    value: function Ut(t) {
      this.Bt = t;
    }
    /**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */

  }, {
    key: "delete",
    value: function _delete() {
      return bi(this.Ft["delete"]());
    }
  }]);

  return Ti;
}()));
/** An error that wraps exceptions that thrown during IndexedDB execution. */


var Ei = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Q) {
  firestore_dist_index_esm2017_inherits(Ei, _Q);

  var _super20 = firestore_dist_index_esm2017_createSuper(Ei);

  function Ei(t, e) {
    var _this34;

    firestore_dist_index_esm2017_classCallCheck(this, Ei);

    _this34 = _super20.call(this, index_esm2017_G.UNAVAILABLE, "IndexedDB transaction '".concat(t, "' failed: ").concat(e)), _this34.name = "IndexedDbTransactionError";
    return _this34;
  }

  return firestore_dist_index_esm2017_createClass(Ei);
}(dist_index_esm2017_Q)));
/** Verifies whether `e` is an IndexedDbTransactionError. */


function Ai(t) {
  // Use name equality, as instanceof checks on errors don't work with errors
  // that wrap other errors.
  return "IndexedDbTransactionError" === t.name;
}
/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */


var Ri = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ri(t) {
    firestore_dist_index_esm2017_classCallCheck(this, Ri);

    this.store = t;
  }

  firestore_dist_index_esm2017_createClass(Ri, [{
    key: "put",
    value: function put(t, e) {
      var n;
      return void 0 !== e ? (dist_index_esm2017_O("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (dist_index_esm2017_O("SimpleDb", "PUT", this.store.name, "<auto-key>", t), n = this.store.put(t)), bi(n);
    }
    /**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value - The object to write.
     * @returns The key of the value to add.
     */

  }, {
    key: "add",
    value: function add(t) {
      dist_index_esm2017_O("SimpleDb", "ADD", this.store.name, t, t);
      return bi(this.store.add(t));
    }
    /**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @returns The object with the specified key or null if no object exists.
     */

  }, {
    key: "get",
    value: function get(t) {
      var _this35 = this;

      // We're doing an unsafe cast to ValueType.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return bi(this.store.get(t)).next(function (e) {
        return (// Normalize nonexistence to null.
          void 0 === e && (e = null), dist_index_esm2017_O("SimpleDb", "GET", _this35.store.name, t, e), e
        );
      });
    }
  }, {
    key: "delete",
    value: function _delete(t) {
      dist_index_esm2017_O("SimpleDb", "DELETE", this.store.name, t);
      return bi(this.store["delete"](t));
    }
    /**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */

  }, {
    key: "count",
    value: function count() {
      dist_index_esm2017_O("SimpleDb", "COUNT", this.store.name);
      return bi(this.store.count());
    }
  }, {
    key: "qt",
    value: function qt(t, e) {
      var n = this.options(t, e); // Use `getAll()` if the browser supports IndexedDB v3, as it is roughly
      // 20% faster. Unfortunately, getAll() does not support custom indices.

      if (n.index || "function" != typeof this.store.getAll) {
        var _t33 = this.cursor(n),
            _e20 = [];

        return this.Kt(_t33, function (t, n) {
          _e20.push(n);
        }).next(function () {
          return _e20;
        });
      }

      {
        var _t34 = this.store.getAll(n.range);

        return new yi(function (e, n) {
          _t34.onerror = function (t) {
            n(t.target.error);
          }, _t34.onsuccess = function (t) {
            e(t.target.result);
          };
        });
      }
    }
    /**
     * Loads the first `count` elements from the provided index range. Loads all
     * elements if no limit is provided.
     */

  }, {
    key: "Gt",
    value: function Gt(t, e) {
      var n = this.store.getAll(t, null === e ? void 0 : e);
      return new yi(function (t, e) {
        n.onerror = function (t) {
          e(t.target.error);
        }, n.onsuccess = function (e) {
          t(e.target.result);
        };
      });
    }
  }, {
    key: "Qt",
    value: function Qt(t, e) {
      dist_index_esm2017_O("SimpleDb", "DELETE ALL", this.store.name);
      var n = this.options(t, e);
      n.jt = !1;
      var s = this.cursor(n);
      return this.Kt(s, function (t, e, n) {
        return n["delete"]();
      });
    }
  }, {
    key: "Wt",
    value: function Wt(t, e) {
      var n;
      e ? n = t : (n = {}, e = t);
      var s = this.cursor(n);
      return this.Kt(s, e);
    }
    /**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */

  }, {
    key: "zt",
    value: function zt(t) {
      var e = this.cursor({});
      return new yi(function (n, s) {
        e.onerror = function (t) {
          var e = Vi(t.target.error);
          s(e);
        }, e.onsuccess = function (e) {
          var s = e.target.result;
          s ? t(s.primaryKey, s.value).next(function (t) {
            t ? s["continue"]() : n();
          }) : n();
        };
      });
    }
  }, {
    key: "Kt",
    value: function Kt(t, e) {
      var n = [];
      return new yi(function (s, i) {
        t.onerror = function (t) {
          i(t.target.error);
        }, t.onsuccess = function (t) {
          var i = t.target.result;
          if (!i) return void s();
          var r = new Ti(i),
              o = e(i.primaryKey, i.value, r);

          if (o instanceof yi) {
            var _t35 = o["catch"](function (t) {
              return r.done(), yi.reject(t);
            });

            n.push(_t35);
          }

          r.isDone ? s() : null === r.Lt ? i["continue"]() : i["continue"](r.Lt);
        };
      }).next(function () {
        return yi.waitFor(n);
      });
    }
  }, {
    key: "options",
    value: function options(t, e) {
      var n;
      return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
        index: n,
        range: e
      };
    }
  }, {
    key: "cursor",
    value: function cursor(t) {
      var e = "next";

      if (t.reverse && (e = "prev"), t.index) {
        var n = this.store.index(t.index);
        return t.jt ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
      }

      return this.store.openCursor(t.range, e);
    }
  }]);

  return Ri;
}()));
/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */


function bi(t) {
  return new yi(function (e, n) {
    t.onsuccess = function (t) {
      var n = t.target.result;
      e(n);
    }, t.onerror = function (t) {
      var e = Vi(t.target.error);
      n(e);
    };
  });
} // Guard so we only report the error once.


var Pi = (/* unused pure expression or super */ null && (!1));

function Vi(t) {
  var e = Ii.Vt(getUA());

  if (e >= 12.2 && e < 13) {
    var _e21 = "An internal error was encountered in the Indexed Database server";

    if (t.message.indexOf(_e21) >= 0) {
      // Wrap error in a more descriptive one.
      var _t36 = new dist_index_esm2017_Q("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '".concat(_e21, "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround."));

      return Pi || (Pi = !0, // Throw a global exception outside of this promise chain, for the user to
      // potentially catch.
      setTimeout(function () {
        throw _t36;
      }, 0)), _t36;
    }
  }

  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var vi = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_gi) {
  firestore_dist_index_esm2017_inherits(vi, _gi);

  var _super21 = firestore_dist_index_esm2017_createSuper(vi);

  function vi(t, e) {
    var _this36;

    firestore_dist_index_esm2017_classCallCheck(this, vi);

    _this36 = _super21.call(this), _this36.Ht = t, _this36.currentSequenceNumber = e;
    return _this36;
  }

  return firestore_dist_index_esm2017_createClass(vi);
}(gi)));

function Si(t, e) {
  var n = dist_index_esm2017_K(t);
  return Ii.xt(n.Ht, e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A batch of mutations that will be sent as one unit to the backend.
 */


var Di = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * @param batchId - The unique ID of this mutation batch.
   * @param localWriteTime - The original write time of this mutation.
   * @param baseMutations - Mutations that are used to populate the base
   * values when this mutation is applied locally. This can be used to locally
   * overwrite values that are persisted in the remote document cache. Base
   * mutations are never sent to the backend.
   * @param mutations - The user-provided mutations in this mutation batch.
   * User-provided mutations are applied both locally and remotely on the
   * backend.
   */
  function Di(t, e, n, s) {
    firestore_dist_index_esm2017_classCallCheck(this, Di);

    this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = s;
  }
  /**
   * Applies all the mutations in this MutationBatch to the specified document
   * to compute the state of the remote document
   *
   * @param document - The document to apply mutations to.
   * @param batchResult - The result of applying the MutationBatch to the
   * backend.
   */


  firestore_dist_index_esm2017_createClass(Di, [{
    key: "applyToRemoteDocument",
    value: function applyToRemoteDocument(t, e) {
      var n = e.mutationResults;

      for (var _e22 = 0; _e22 < this.mutations.length; _e22++) {
        var s = this.mutations[_e22];

        if (s.key.isEqual(t.key)) {
          index_esm2017_Pn(s, t, n[_e22]);
        }
      }
    }
    /**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param document - The document to apply mutations to.
     */

  }, {
    key: "applyToLocalView",
    value: function applyToLocalView(t) {
      // First, apply the base state. This allows us to apply non-idempotent
      // transform against a consistent set of values.
      var _iterator23 = firestore_dist_index_esm2017_createForOfIteratorHelper(this.baseMutations),
          _step23;

      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var e = _step23.value;
          e.key.isEqual(t.key) && index_esm2017_Vn(e, t, this.localWriteTime);
        } // Second, apply all user-provided mutations.

      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }

      var _iterator24 = firestore_dist_index_esm2017_createForOfIteratorHelper(this.mutations),
          _step24;

      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
          var _e23 = _step24.value;
          _e23.key.isEqual(t.key) && index_esm2017_Vn(_e23, t, this.localWriteTime);
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }
    }
    /**
     * Computes the local view for all provided documents given the mutations in
     * this batch.
     */

  }, {
    key: "applyToLocalDocumentSet",
    value: function applyToLocalDocumentSet(t) {
      var _this37 = this;

      // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
      // directly (as done in `applyToLocalView()`), we can reduce the complexity
      // to O(n).
      this.mutations.forEach(function (e) {
        var n = t.get(e.key),
            s = n; // TODO(mutabledocuments): This method should take a MutableDocumentMap
        // and we should remove this cast.

        _this37.applyToLocalView(s), n.isValidDocument() || s.convertToNoDocument(index_esm2017_ct.min());
      });
    }
  }, {
    key: "keys",
    value: function keys() {
      return this.mutations.reduce(function (t, e) {
        return t.add(e.key);
      }, index_esm2017_Yn());
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this.batchId === t.batchId && index_esm2017_ot(this.mutations, t.mutations, function (t, e) {
        return index_esm2017_Sn(t, e);
      }) && index_esm2017_ot(this.baseMutations, t.baseMutations, function (t, e) {
        return index_esm2017_Sn(t, e);
      });
    }
  }]);

  return Di;
}()));
/** The result of applying a mutation batch to the backend. */


var Ci = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ci(t, e, n,
  /**
   * A pre-computed mapping from each mutated document to the resulting
   * version.
   */
  s) {
    firestore_dist_index_esm2017_classCallCheck(this, Ci);

    this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = s;
  }
  /**
   * Creates a new MutationBatchResult for the given batch and results. There
   * must be one result for each mutation in the batch. This static factory
   * caches a document=&gt;version mapping (docVersions).
   */


  firestore_dist_index_esm2017_createClass(Ci, null, [{
    key: "from",
    value: function from(t, e, n) {
      dist_index_esm2017_U(t.mutations.length === n.length);
      var s = index_esm2017_Hn;
      var i = t.mutations;

      for (var _t37 = 0; _t37 < i.length; _t37++) {
        s = s.insert(i[_t37].key, n[_t37].version);
      }

      return new Ci(t, e, n, s);
    }
  }]);

  return Ci;
}()));
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Representation of an overlay computed by Firestore.
 *
 * Holds information about a mutation and the largest batch id in Firestore when
 * the mutation was created.
 */


var xi = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function xi(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, xi);

    this.largestBatchId = t, this.mutation = e;
  }

  firestore_dist_index_esm2017_createClass(xi, [{
    key: "getKey",
    value: function getKey() {
      return this.mutation.key;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return null !== t && this.mutation === t.mutation;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Overlay{\n      largestBatchId: ".concat(this.largestBatchId, ",\n      mutation: ").concat(this.mutation.toString(), "\n    }");
    }
  }]);

  return xi;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable set of metadata that the local store tracks for each target.
 */


var Ni = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ni(
  /** The target being listened to. */
  t,
  /**
   * The target ID to which the target corresponds; Assigned by the
   * LocalStore for user listens and by the SyncEngine for limbo watches.
   */
  e,
  /** The purpose of the target. */
  n,
  /**
   * The sequence number of the last transaction during which this target data
   * was modified.
   */
  s) {
    var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : index_esm2017_ct.min();
    var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : index_esm2017_ct.min();
    var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : index_esm2017_pt.EMPTY_BYTE_STRING;

    firestore_dist_index_esm2017_classCallCheck(this, Ni);

    this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = s, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
  }
  /** Creates a new target data instance with an updated sequence number. */


  firestore_dist_index_esm2017_createClass(Ni, [{
    key: "withSequenceNumber",
    value: function withSequenceNumber(t) {
      return new Ni(this.target, this.targetId, this.purpose, t, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }
    /**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */

  }, {
    key: "withResumeToken",
    value: function withResumeToken(t, e) {
      return new Ni(this.target, this.targetId, this.purpose, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
    }
    /**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */

  }, {
    key: "withLastLimboFreeSnapshotVersion",
    value: function withLastLimboFreeSnapshotVersion(t) {
      return new Ni(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, t, this.resumeToken);
    }
  }]);

  return Ni;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Serializer for values stored in the LocalStore. */


var ki = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function ki(t) {
  firestore_dist_index_esm2017_classCallCheck(this, ki);

  this.Jt = t;
})));
/** Decodes a remote document from storage locally to a Document. */


function Mi(t, e) {
  var n;
  if (e.document) n = bs(t.Jt, e.document, !!e.hasCommittedMutations);else if (e.noDocument) {
    var _t38 = index_esm2017_xt.fromSegments(e.noDocument.path),
        s = Bi(e.noDocument.readTime);

    n = index_esm2017_ne.newNoDocument(_t38, s), e.hasCommittedMutations && n.setHasCommittedMutations();
  } else {
    if (!e.unknownDocument) return dist_index_esm2017_L();
    {
      var _t39 = index_esm2017_xt.fromSegments(e.unknownDocument.path),
          _s9 = Bi(e.unknownDocument.version);

      n = index_esm2017_ne.newUnknownDocument(_t39, _s9);
    }
  }
  return e.readTime && n.setReadTime(function (t) {
    var e = new index_esm2017_at(t[0], t[1]);
    return index_esm2017_ct.fromTimestamp(e);
  }(e.readTime)), n;
}
/** Encodes a document for storage locally. */


function Oi(t, e) {
  var n = e.key,
      s = {
    prefixPath: n.getCollectionPath().popLast().toArray(),
    collectionGroup: n.collectionGroup,
    documentId: n.path.lastSegment(),
    readTime: Fi(e.readTime),
    hasCommittedMutations: e.hasCommittedMutations
  };
  if (e.isFoundDocument()) s.document = function (t, e) {
    return {
      name: ys(t, e.key),
      fields: e.data.value.mapValue.fields,
      updateTime: fs(t, e.version.toTimestamp())
    };
  }(t.Jt, e);else if (e.isNoDocument()) s.noDocument = {
    path: n.path.toArray(),
    readTime: $i(e.version)
  };else {
    if (!e.isUnknownDocument()) return dist_index_esm2017_L();
    s.unknownDocument = {
      path: n.path.toArray(),
      version: $i(e.version)
    };
  }
  return s;
}

function Fi(t) {
  var e = t.toTimestamp();
  return [e.seconds, e.nanoseconds];
}

function $i(t) {
  var e = t.toTimestamp();
  return {
    seconds: e.seconds,
    nanoseconds: e.nanoseconds
  };
}

function Bi(t) {
  var e = new index_esm2017_at(t.seconds, t.nanoseconds);
  return index_esm2017_ct.fromTimestamp(e);
}
/** Encodes a batch of mutations into a DbMutationBatch for local storage. */

/** Decodes a DbMutationBatch into a MutationBatch */


function Li(t, e) {
  var n = (e.baseMutations || []).map(function (e) {
    return Ss(t.Jt, e);
  }); // Squash old transform mutations into existing patch or set mutations.
  // The replacement of representing `transforms` with `update_transforms`
  // on the SDK means that old `transform` mutations stored in IndexedDB need
  // to be updated to `update_transforms`.
  // TODO(b/174608374): Remove this code once we perform a schema migration.

  for (var _t40 = 0; _t40 < e.mutations.length - 1; ++_t40) {
    var _n13 = e.mutations[_t40];

    if (_t40 + 1 < e.mutations.length && void 0 !== e.mutations[_t40 + 1].transform) {
      var _s10 = e.mutations[_t40 + 1];
      _n13.updateTransforms = _s10.transform.fieldTransforms, e.mutations.splice(_t40 + 1, 1), ++_t40;
    }
  }

  var s = e.mutations.map(function (e) {
    return Ss(t.Jt, e);
  }),
      i = index_esm2017_at.fromMillis(e.localWriteTimeMs);
  return new Di(e.batchId, i, n, s);
}
/** Decodes a DbTarget into TargetData */


function Ui(t) {
  var e = Bi(t.readTime),
      n = void 0 !== t.lastLimboFreeSnapshotVersion ? Bi(t.lastLimboFreeSnapshotVersion) : index_esm2017_ct.min();
  var s;
  var i;
  return void 0 !== t.query.documents ? (dist_index_esm2017_U(1 === (i = t.query).documents.length), s = index_esm2017_He(index_esm2017_Ke(Ts(i.documents[0])))) : s = function (t) {
    return index_esm2017_He(Ns(t));
  }(t.query), new Ni(s, t.targetId, 0
  /* Listen */
  , t.lastListenSequenceNumber, e, n, index_esm2017_pt.fromBase64String(t.resumeToken));
}
/** Encodes TargetData into a DbTarget for storage locally. */


function qi(t, e) {
  var n = $i(e.snapshotVersion),
      s = $i(e.lastLimboFreeSnapshotVersion);
  var i;
  i = index_esm2017_Ae(e.target) ? Cs(t.Jt, e.target) : xs(t.Jt, e.target); // We can't store the resumeToken as a ByteString in IndexedDb, so we
  // convert it to a base64 string for storage.

  var r = e.resumeToken.toBase64(); // lastListenSequenceNumber is always 0 until we do real GC.

  return {
    targetId: e.targetId,
    canonicalId: index_esm2017_Ie(e.target),
    readTime: n,
    resumeToken: r,
    lastListenSequenceNumber: e.sequenceNumber,
    lastLimboFreeSnapshotVersion: s,
    query: i
  };
}
/**
 * A helper function for figuring out what kind of query has been stored.
 */

/**
 * Encodes a `BundledQuery` from bundle proto to a Query object.
 *
 * This reconstructs the original query used to build the bundle being loaded,
 * including features exists only in SDKs (for example: limit-to-last).
 */


function Ki(t) {
  var e = Ns({
    parent: t.parent,
    structuredQuery: t.structuredQuery
  });
  return "LAST" === t.limitType ? index_esm2017_Je(e, e.limit, "L"
  /* Last */
  ) : e;
}
/** Encodes a NamedQuery proto object to a NamedQuery model object. */

/** Encodes a DbDocumentOverlay object to an Overlay model object. */


function Gi(t, e) {
  return new xi(e.largestBatchId, Ss(t.Jt, e.overlayMutation));
}
/** Decodes an Overlay model object into a DbDocumentOverlay object. */

/**
 * Returns the DbDocumentOverlayKey corresponding to the given user and
 * document key.
 */


function Qi(t, e) {
  var n = e.path.lastSegment();
  return [t, Gs(e.path.popLast()), n];
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ji = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ji() {
    firestore_dist_index_esm2017_classCallCheck(this, ji);
  }

  firestore_dist_index_esm2017_createClass(ji, [{
    key: "getBundleMetadata",
    value: function getBundleMetadata(t, e) {
      return Wi(t).get(e).next(function (t) {
        if (t) return {
          id: (e = t).bundleId,
          createTime: Bi(e.createTime),
          version: e.version
        };
        /** Encodes a DbBundle to a BundleMetadata object. */

        var e;
        /** Encodes a BundleMetadata to a DbBundle. */
      });
    }
  }, {
    key: "saveBundleMetadata",
    value: function saveBundleMetadata(t, e) {
      return Wi(t).put({
        bundleId: (n = e).id,
        createTime: $i(ws(n.createTime)),
        version: n.version
      });
      var n;
      /** Encodes a DbNamedQuery to a NamedQuery. */
    }
  }, {
    key: "getNamedQuery",
    value: function getNamedQuery(t, e) {
      return zi(t).get(e).next(function (t) {
        if (t) return {
          name: (e = t).name,
          query: Ki(e.bundledQuery),
          readTime: Bi(e.readTime)
        };
        var e;
        /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */
      });
    }
  }, {
    key: "saveNamedQuery",
    value: function saveNamedQuery(t, e) {
      return zi(t).put(function (t) {
        return {
          name: t.name,
          readTime: $i(ws(t.readTime)),
          bundledQuery: t.bundledQuery
        };
      }(e));
    }
  }]);

  return ji;
}()));
/**
 * Helper to get a typed SimpleDbStore for the bundles object store.
 */


function Wi(t) {
  return Si(t, "bundles");
}
/**
 * Helper to get a typed SimpleDbStore for the namedQueries object store.
 */


function zi(t) {
  return Si(t, "namedQueries");
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Implementation of DocumentOverlayCache using IndexedDb.
 */


var Hi = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * @param serializer - The document serializer.
   * @param userId - The userId for which we are accessing overlays.
   */
  function Hi(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Hi);

    this.M = t, this.userId = e;
  }

  firestore_dist_index_esm2017_createClass(Hi, [{
    key: "getOverlay",
    value: function getOverlay(t, e) {
      var _this38 = this;

      return Ji(t).get(Qi(this.userId, e)).next(function (t) {
        return t ? Gi(_this38.M, t) : null;
      });
    }
  }, {
    key: "saveOverlays",
    value: function saveOverlays(t, e, n) {
      var _this39 = this;

      var s = [];
      return n.forEach(function (n, i) {
        var r = new xi(e, i);
        s.push(_this39.Xt(t, r));
      }), yi.waitFor(s);
    }
  }, {
    key: "removeOverlaysForBatchId",
    value: function removeOverlaysForBatchId(t, e, n) {
      var _this40 = this;

      var s = new Set(); // Get the set of unique collection paths.

      e.forEach(function (t) {
        return s.add(Gs(t.getCollectionPath()));
      });
      var i = [];
      return s.forEach(function (e) {
        var s = IDBKeyRange.bound([_this40.userId, e, n], [_this40.userId, e, n + 1],
        /*lowerOpen=*/
        !1,
        /*upperOpen=*/
        !0);
        i.push(Ji(t).Qt("collectionPathOverlayIndex", s));
      }), yi.waitFor(i);
    }
  }, {
    key: "getOverlaysForCollection",
    value: function getOverlaysForCollection(t, e, n) {
      var _this41 = this;

      var s = index_esm2017_zn(),
          i = Gs(e),
          r = IDBKeyRange.bound([this.userId, i, n], [this.userId, i, Number.POSITIVE_INFINITY],
      /*lowerOpen=*/
      !0);
      return Ji(t).qt("collectionPathOverlayIndex", r).next(function (t) {
        var _iterator25 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
            _step25;

        try {
          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
            var _e24 = _step25.value;

            var _t41 = Gi(_this41.M, _e24);

            s.set(_t41.getKey(), _t41);
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }

        return s;
      });
    }
  }, {
    key: "getOverlaysForCollectionGroup",
    value: function getOverlaysForCollectionGroup(t, e, n, s) {
      var _this42 = this;

      var i = index_esm2017_zn();
      var r; // We want batch IDs larger than `sinceBatchId`, and so the lower bound
      // is not inclusive.

      var o = IDBKeyRange.bound([this.userId, e, n], [this.userId, e, Number.POSITIVE_INFINITY],
      /*lowerOpen=*/
      !0);
      return Ji(t).Wt({
        index: "collectionGroupOverlayIndex",
        range: o
      }, function (t, e, n) {
        // We do not want to return partial batch overlays, even if the size
        // of the result set exceeds the given `count` argument. Therefore, we
        // continue to aggregate results even after the result size exceeds
        // `count` if there are more overlays from the `currentBatchId`.
        var o = Gi(_this42.M, e);
        i.size() < s || o.largestBatchId === r ? (i.set(o.getKey(), o), r = o.largestBatchId) : n.done();
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "Xt",
    value: function Xt(t, e) {
      return Ji(t).put(function (t, e, n) {
        var _Qi = Qi(e, n.mutation.key),
            _Qi2 = dist_index_esm2017_slicedToArray(_Qi, 3),
            s = _Qi2[0],
            i = _Qi2[1],
            r = _Qi2[2];

        return {
          userId: e,
          collectionPath: i,
          documentId: r,
          collectionGroup: n.mutation.key.getCollectionGroup(),
          largestBatchId: n.largestBatchId,
          overlayMutation: vs(t.Jt, n.mutation)
        };
      }(this.M, this.userId, e));
    }
  }], [{
    key: "Yt",
    value: function Yt(t, e) {
      var n = e.uid || "";
      return new Hi(t, n);
    }
  }]);

  return Hi;
}()));
/**
 * Helper to get a typed SimpleDbStore for the document overlay object store.
 */


function Ji(t) {
  return Si(t, "documentOverlays");
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Note: This code is copied from the backend. Code that is not used by
// Firestore was removed.

/** Firestore index value writer.  */


var Yi = /*#__PURE__*/function () {
  function Yi() {
    firestore_dist_index_esm2017_classCallCheck(this, Yi);
  } // The write methods below short-circuit writing terminators for values
  // containing a (terminating) truncated value.
  // As an example, consider the resulting encoding for:
  // ["bar", [2, "foo"]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TERM, TERM, TERM)
  // ["bar", [2, truncated("foo")]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TRUNC)
  // ["bar", truncated(["foo"])] -> (STRING, "bar", TERM, ARRAY. STRING, "foo", TERM, TRUNC)

  /** Writes an index value.  */


  firestore_dist_index_esm2017_createClass(Yi, [{
    key: "Zt",
    value: function Zt(t, e) {
      this.te(t, e), // Write separator to split index values
      // (see go/firestore-storage-format#encodings).
      e.ee();
    }
  }, {
    key: "te",
    value: function te(t, e) {
      if ("nullValue" in t) this.ne(e, 5);else if ("booleanValue" in t) this.ne(e, 10), e.se(t.booleanValue ? 1 : 0);else if ("integerValue" in t) this.ne(e, 15), e.se(index_esm2017_Et(t.integerValue));else if ("doubleValue" in t) {
        var n = index_esm2017_Et(t.doubleValue);
        isNaN(n) ? this.ne(e, 13) : (this.ne(e, 15), index_esm2017_Dt(n) ? // -0.0, 0 and 0.0 are all considered the same
        e.se(0) : e.se(n));
      } else if ("timestampValue" in t) {
        var _n14 = t.timestampValue;
        this.ne(e, 20), "string" == typeof _n14 ? e.ie(_n14) : (e.ie("".concat(_n14.seconds || "")), e.se(_n14.nanos || 0));
      } else if ("stringValue" in t) this.re(t.stringValue, e), this.oe(e);else if ("bytesValue" in t) this.ne(e, 30), e.ue(index_esm2017_At(t.bytesValue)), this.oe(e);else if ("referenceValue" in t) this.ae(t.referenceValue, e);else if ("geoPointValue" in t) {
        var _n15 = t.geoPointValue;
        this.ne(e, 45), e.se(_n15.latitude || 0), e.se(_n15.longitude || 0);
      } else "mapValue" in t ? index_esm2017_Ht(t) ? this.ne(e, Number.MAX_SAFE_INTEGER) : (this.ce(t.mapValue, e), this.oe(e)) : "arrayValue" in t ? (this.he(t.arrayValue, e), this.oe(e)) : dist_index_esm2017_L();
    }
  }, {
    key: "re",
    value: function re(t, e) {
      this.ne(e, 25), this.le(t, e);
    }
  }, {
    key: "le",
    value: function le(t, e) {
      e.ie(t);
    }
  }, {
    key: "ce",
    value: function ce(t, e) {
      var n = t.fields || {};
      this.ne(e, 55);

      for (var _i9 = 0, _Object$keys = Object.keys(n); _i9 < _Object$keys.length; _i9++) {
        var _t42 = _Object$keys[_i9];
        this.re(_t42, e), this.te(n[_t42], e);
      }
    }
  }, {
    key: "he",
    value: function he(t, e) {
      var n = t.values || [];
      this.ne(e, 50);

      var _iterator26 = firestore_dist_index_esm2017_createForOfIteratorHelper(n),
          _step26;

      try {
        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
          var _t43 = _step26.value;
          this.te(_t43, e);
        }
      } catch (err) {
        _iterator26.e(err);
      } finally {
        _iterator26.f();
      }
    }
  }, {
    key: "ae",
    value: function ae(t, e) {
      var _this43 = this;

      this.ne(e, 37);
      index_esm2017_xt.fromName(t).path.forEach(function (t) {
        _this43.ne(e, 60), _this43.le(t, e);
      });
    }
  }, {
    key: "ne",
    value: function ne(t, e) {
      t.se(e);
    }
  }, {
    key: "oe",
    value: function oe(t) {
      // While the SDK does not implement truncation, the truncation marker is
      // used to terminate all variable length values (which are strings, bytes,
      // references, arrays and maps).
      t.se(2);
    }
  }]);

  return Yi;
}();

Yi.fe = new Yi();
/**
 * Counts the number of zeros in a byte.
 *
 * Visible for testing.
 */

function Xi(t) {
  if (0 === t) return 8;
  var e = 0;
  return t >> 4 == 0 && ( // Test if the first four bits are zero.
  e += 4, t <<= 4), t >> 6 == 0 && ( // Test if the first two (or next two) bits are zero.
  e += 2, t <<= 2), t >> 7 == 0 && ( // Test if the remaining bit is zero.
  e += 1), e;
}
/** Counts the number of leading zeros in the given byte array. */

/**
 * Returns the number of bytes required to store "value". Leading zero bytes
 * are skipped.
 */


function Zi(t) {
  // This is just the number of bytes for the unsigned representation of the number.
  var e = 64 - function (t) {
    var e = 0;

    for (var n = 0; n < 8; ++n) {
      var s = Xi(255 & t[n]);
      if (e += s, 8 !== s) break;
    }

    return e;
  }(t);

  return Math.ceil(e / 8);
}
/**
 * OrderedCodeWriter is a minimal-allocation implementation of the writing
 * behavior defined by the backend.
 *
 * The code is ported from its Java counterpart.
 */


var index_esm2017_tr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function tr() {
    firestore_dist_index_esm2017_classCallCheck(this, tr);

    this.buffer = new Uint8Array(1024), this.position = 0;
  }

  firestore_dist_index_esm2017_createClass(tr, [{
    key: "de",
    value: function de(t) {
      var e = t[Symbol.iterator]();
      var n = e.next();

      for (; !n.done;) {
        this._e(n.value), n = e.next();
      }

      this.we();
    }
  }, {
    key: "me",
    value: function me(t) {
      var e = t[Symbol.iterator]();
      var n = e.next();

      for (; !n.done;) {
        this.ge(n.value), n = e.next();
      }

      this.ye();
    }
    /** Writes utf8 bytes into this byte sequence, ascending. */

  }, {
    key: "pe",
    value: function pe(t) {
      var _iterator27 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
          _step27;

      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var e = _step27.value;

          var _t44 = e.charCodeAt(0);

          if (_t44 < 128) this._e(_t44);else if (_t44 < 2048) this._e(960 | _t44 >>> 6), this._e(128 | 63 & _t44);else if (e < "\uD800" || "\uDBFF" < e) this._e(480 | _t44 >>> 12), this._e(128 | 63 & _t44 >>> 6), this._e(128 | 63 & _t44);else {
            var _t45 = e.codePointAt(0);

            this._e(240 | _t45 >>> 18), this._e(128 | 63 & _t45 >>> 12), this._e(128 | 63 & _t45 >>> 6), this._e(128 | 63 & _t45);
          }
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }

      this.we();
    }
    /** Writes utf8 bytes into this byte sequence, descending */

  }, {
    key: "Ie",
    value: function Ie(t) {
      var _iterator28 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
          _step28;

      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var e = _step28.value;

          var _t46 = e.charCodeAt(0);

          if (_t46 < 128) this.ge(_t46);else if (_t46 < 2048) this.ge(960 | _t46 >>> 6), this.ge(128 | 63 & _t46);else if (e < "\uD800" || "\uDBFF" < e) this.ge(480 | _t46 >>> 12), this.ge(128 | 63 & _t46 >>> 6), this.ge(128 | 63 & _t46);else {
            var _t47 = e.codePointAt(0);

            this.ge(240 | _t47 >>> 18), this.ge(128 | 63 & _t47 >>> 12), this.ge(128 | 63 & _t47 >>> 6), this.ge(128 | 63 & _t47);
          }
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }

      this.ye();
    }
  }, {
    key: "Te",
    value: function Te(t) {
      // Values are encoded with a single byte length prefix, followed by the
      // actual value in big-endian format with leading 0 bytes dropped.
      var e = this.Ee(t),
          n = Zi(e);
      this.Ae(1 + n), this.buffer[this.position++] = 255 & n; // Write the length

      for (var _t48 = e.length - n; _t48 < e.length; ++_t48) {
        this.buffer[this.position++] = 255 & e[_t48];
      }
    }
  }, {
    key: "Re",
    value: function Re(t) {
      // Values are encoded with a single byte length prefix, followed by the
      // inverted value in big-endian format with leading 0 bytes dropped.
      var e = this.Ee(t),
          n = Zi(e);
      this.Ae(1 + n), this.buffer[this.position++] = ~(255 & n); // Write the length

      for (var _t49 = e.length - n; _t49 < e.length; ++_t49) {
        this.buffer[this.position++] = ~(255 & e[_t49]);
      }
    }
    /**
     * Writes the "infinity" byte sequence that sorts after all other byte
     * sequences written in ascending order.
     */

  }, {
    key: "be",
    value: function be() {
      this.Pe(255), this.Pe(255);
    }
    /**
     * Writes the "infinity" byte sequence that sorts before all other byte
     * sequences written in descending order.
     */

  }, {
    key: "Ve",
    value: function Ve() {
      this.ve(255), this.ve(255);
    }
    /**
     * Resets the buffer such that it is the same as when it was newly
     * constructed.
     */

  }, {
    key: "reset",
    value: function reset() {
      this.position = 0;
    }
  }, {
    key: "seed",
    value: function seed(t) {
      this.Ae(t.length), this.buffer.set(t, this.position), this.position += t.length;
    }
    /** Makes a copy of the encoded bytes in this buffer.  */

  }, {
    key: "Se",
    value: function Se() {
      return this.buffer.slice(0, this.position);
    }
    /**
     * Encodes `val` into an encoding so that the order matches the IEEE 754
     * floating-point comparison results with the following exceptions:
     *   -0.0 < 0.0
     *   all non-NaN < NaN
     *   NaN = NaN
     */

  }, {
    key: "Ee",
    value: function Ee(t) {
      var e =
      /** Converts a JavaScript number to a byte array (using big endian encoding). */
      function (t) {
        var e = new DataView(new ArrayBuffer(8));
        return e.setFloat64(0, t,
        /* littleEndian= */
        !1), new Uint8Array(e.buffer);
      }(t),
          n = 0 != (128 & e[0]); // Check if the first bit is set. We use a bit mask since value[0] is
      // encoded as a number from 0 to 255.
      // Revert the two complement to get natural ordering


      e[0] ^= n ? 255 : 128;

      for (var _t50 = 1; _t50 < e.length; ++_t50) {
        e[_t50] ^= n ? 255 : 0;
      }

      return e;
    }
    /** Writes a single byte ascending to the buffer. */

  }, {
    key: "_e",
    value: function _e(t) {
      var e = 255 & t;
      0 === e ? (this.Pe(0), this.Pe(255)) : 255 === e ? (this.Pe(255), this.Pe(0)) : this.Pe(e);
    }
    /** Writes a single byte descending to the buffer.  */

  }, {
    key: "ge",
    value: function ge(t) {
      var e = 255 & t;
      0 === e ? (this.ve(0), this.ve(255)) : 255 === e ? (this.ve(255), this.ve(0)) : this.ve(t);
    }
  }, {
    key: "we",
    value: function we() {
      this.Pe(0), this.Pe(1);
    }
  }, {
    key: "ye",
    value: function ye() {
      this.ve(0), this.ve(1);
    }
  }, {
    key: "Pe",
    value: function Pe(t) {
      this.Ae(1), this.buffer[this.position++] = t;
    }
  }, {
    key: "ve",
    value: function ve(t) {
      this.Ae(1), this.buffer[this.position++] = ~t;
    }
  }, {
    key: "Ae",
    value: function Ae(t) {
      var e = t + this.position;
      if (e <= this.buffer.length) return; // Try doubling.

      var n = 2 * this.buffer.length; // Still not big enough? Just allocate the right size.

      n < e && (n = e); // Create the new buffer.

      var s = new Uint8Array(n);
      s.set(this.buffer), // copy old data
      this.buffer = s;
    }
  }]);

  return tr;
}()));

var index_esm2017_er = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function er(t) {
    firestore_dist_index_esm2017_classCallCheck(this, er);

    this.De = t;
  }

  firestore_dist_index_esm2017_createClass(er, [{
    key: "ue",
    value: function ue(t) {
      this.De.de(t);
    }
  }, {
    key: "ie",
    value: function ie(t) {
      this.De.pe(t);
    }
  }, {
    key: "se",
    value: function se(t) {
      this.De.Te(t);
    }
  }, {
    key: "ee",
    value: function ee() {
      this.De.be();
    }
  }]);

  return er;
}()));

var index_esm2017_nr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function nr(t) {
    firestore_dist_index_esm2017_classCallCheck(this, nr);

    this.De = t;
  }

  firestore_dist_index_esm2017_createClass(nr, [{
    key: "ue",
    value: function ue(t) {
      this.De.me(t);
    }
  }, {
    key: "ie",
    value: function ie(t) {
      this.De.Ie(t);
    }
  }, {
    key: "se",
    value: function se(t) {
      this.De.Re(t);
    }
  }, {
    key: "ee",
    value: function ee() {
      this.De.Ve();
    }
  }]);

  return nr;
}()));
/**
 * Implements `DirectionalIndexByteEncoder` using `OrderedCodeWriter` for the
 * actual encoding.
 */


var index_esm2017_sr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function sr() {
    firestore_dist_index_esm2017_classCallCheck(this, sr);

    this.De = new index_esm2017_tr(), this.Ce = new index_esm2017_er(this.De), this.xe = new index_esm2017_nr(this.De);
  }

  firestore_dist_index_esm2017_createClass(sr, [{
    key: "seed",
    value: function seed(t) {
      this.De.seed(t);
    }
  }, {
    key: "Ne",
    value: function Ne(t) {
      return 0
      /* ASCENDING */
      === t ? this.Ce : this.xe;
    }
  }, {
    key: "Se",
    value: function Se() {
      return this.De.Se();
    }
  }, {
    key: "reset",
    value: function reset() {
      this.De.reset();
    }
  }]);

  return sr;
}()));
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Represents an index entry saved by the SDK in persisted storage. */


var index_esm2017_ir = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ir(t, e, n, s) {
    firestore_dist_index_esm2017_classCallCheck(this, ir);

    this.indexId = t, this.documentKey = e, this.arrayValue = n, this.directionalValue = s;
  }
  /**
   * Returns an IndexEntry entry that sorts immediately after the current
   * directional value.
   */


  firestore_dist_index_esm2017_createClass(ir, [{
    key: "ke",
    value: function ke() {
      var t = this.directionalValue.length,
          e = 0 === t || 255 === this.directionalValue[t - 1] ? t + 1 : t,
          n = new Uint8Array(e);
      return n.set(this.directionalValue, 0), e !== t ? n.set([0], this.directionalValue.length) : ++n[n.length - 1], new ir(this.indexId, this.documentKey, this.arrayValue, n);
    }
  }]);

  return ir;
}()));

function index_esm2017_rr(t, e) {
  var n = t.indexId - e.indexId;
  return 0 !== n ? n : (n = index_esm2017_or(t.arrayValue, e.arrayValue), 0 !== n ? n : (n = index_esm2017_or(t.directionalValue, e.directionalValue), 0 !== n ? n : index_esm2017_xt.comparator(t.documentKey, e.documentKey)));
}

function index_esm2017_or(t, e) {
  for (var n = 0; n < t.length && n < e.length; ++n) {
    var s = t[n] - e[n];
    if (0 !== s) return s;
  }

  return t.length - e.length;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A light query planner for Firestore.
 *
 * This class matches a `FieldIndex` against a Firestore Query `Target`. It
 * determines whether a given index can be used to serve the specified target.
 *
 * The following table showcases some possible index configurations:
 *
 * Query                                               | Index
 * -----------------------------------------------------------------------------
 * where('a', '==', 'a').where('b', '==', 'b')         | a ASC, b DESC
 * where('a', '==', 'a').where('b', '==', 'b')         | a ASC
 * where('a', '==', 'a').where('b', '==', 'b')         | b DESC
 * where('a', '>=', 'a').orderBy('a')                  | a ASC
 * where('a', '>=', 'a').orderBy('a', 'desc')          | a DESC
 * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC, b ASC
 * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC
 * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS, b ASCENDING
 * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS
 */


var index_esm2017_ur = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ur(t) {
    firestore_dist_index_esm2017_classCallCheck(this, ur);

    this.collectionId = null != t.collectionGroup ? t.collectionGroup : t.path.lastSegment(), this.Me = t.orderBy, this.Oe = [];

    var _iterator29 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.filters),
        _step29;

    try {
      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
        var e = _step29.value;
        var _t51 = e;
        _t51.S() ? this.Fe = _t51 : this.Oe.push(_t51);
      }
    } catch (err) {
      _iterator29.e(err);
    } finally {
      _iterator29.f();
    }
  }
  /**
   * Returns whether the index can be used to serve the TargetIndexMatcher's
   * target.
   *
   * An index is considered capable of serving the target when:
   * - The target uses all index segments for its filters and orderBy clauses.
   *   The target can have additional filter and orderBy clauses, but not
   *   fewer.
   * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also
   *   have a corresponding `CONTAINS` segment.
   * - All directional index segments can be mapped to the target as a series of
   *   equality filters, a single inequality filter and a series of orderBy
   *   clauses.
   * - The segments that represent the equality filters may appear out of order.
   * - The optional segment for the inequality filter must appear after all
   *   equality segments.
   * - The segments that represent that orderBy clause of the target must appear
   *   in order after all equality and inequality segments. Single orderBy
   *   clauses cannot be skipped, but a continuous orderBy suffix may be
   *   omitted.
   */


  firestore_dist_index_esm2017_createClass(ur, [{
    key: "$e",
    value: function $e(t) {
      // If there is an array element, find a matching filter.
      var e = index_esm2017_ie(t);
      if (void 0 !== e && !this.Be(e)) return !1;
      var n = index_esm2017_re(t);
      var s = 0,
          i = 0; // Process all equalities first. Equalities can appear out of order.

      for (; s < n.length && this.Be(n[s]); ++s) {
        ;
      } // If we already have processed all segments, all segments are used to serve
      // the equality filters and we do not need to map any segments to the
      // target's inequality and orderBy clauses.


      if (s === n.length) return !0; // If there is an inequality filter, the next segment must match both the
      // filter and the first orderBy clause.

      if (void 0 !== this.Fe) {
        var _t52 = n[s];
        if (!this.Le(this.Fe, _t52) || !this.Ue(this.Me[i++], _t52)) return !1;
        ++s;
      } // All remaining segments need to represent the prefix of the target's
      // orderBy.


      for (; s < n.length; ++s) {
        var _t53 = n[s];
        if (i >= this.Me.length || !this.Ue(this.Me[i++], _t53)) return !1;
      }

      return !0;
    }
  }, {
    key: "Be",
    value: function Be(t) {
      var _iterator30 = firestore_dist_index_esm2017_createForOfIteratorHelper(this.Oe),
          _step30;

      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var e = _step30.value;
          if (this.Le(e, t)) return !0;
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }

      return !1;
    }
  }, {
    key: "Le",
    value: function Le(t, e) {
      if (void 0 === t || !t.field.isEqual(e.fieldPath)) return !1;
      var n = "array-contains"
      /* ARRAY_CONTAINS */
      === t.op || "array-contains-any"
      /* ARRAY_CONTAINS_ANY */
      === t.op;
      return 2
      /* CONTAINS */
      === e.kind === n;
    }
  }, {
    key: "Ue",
    value: function Ue(t, e) {
      return !!t.field.isEqual(e.fieldPath) && (0
      /* ASCENDING */
      === e.kind && "asc"
      /* ASCENDING */
      === t.dir || 1
      /* DESCENDING */
      === e.kind && "desc"
      /* DESCENDING */
      === t.dir);
    }
  }]);

  return ur;
}()));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory implementation of IndexManager.
 */


var index_esm2017_ar = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ar() {
    firestore_dist_index_esm2017_classCallCheck(this, ar);

    this.qe = new index_esm2017_cr();
  }

  firestore_dist_index_esm2017_createClass(ar, [{
    key: "addToCollectionParentIndex",
    value: function addToCollectionParentIndex(t, e) {
      return this.qe.add(e), yi.resolve();
    }
  }, {
    key: "getCollectionParents",
    value: function getCollectionParents(t, e) {
      return yi.resolve(this.qe.getEntries(e));
    }
  }, {
    key: "addFieldIndex",
    value: function addFieldIndex(t, e) {
      // Field indices are not supported with memory persistence.
      return yi.resolve();
    }
  }, {
    key: "deleteFieldIndex",
    value: function deleteFieldIndex(t, e) {
      // Field indices are not supported with memory persistence.
      return yi.resolve();
    }
  }, {
    key: "getDocumentsMatchingTarget",
    value: function getDocumentsMatchingTarget(t, e) {
      // Field indices are not supported with memory persistence.
      return yi.resolve(null);
    }
  }, {
    key: "getIndexType",
    value: function getIndexType(t, e) {
      // Field indices are not supported with memory persistence.
      return yi.resolve(0
      /* NONE */
      );
    }
  }, {
    key: "getFieldIndexes",
    value: function getFieldIndexes(t, e) {
      // Field indices are not supported with memory persistence.
      return yi.resolve([]);
    }
  }, {
    key: "getNextCollectionGroupToUpdate",
    value: function getNextCollectionGroupToUpdate(t) {
      // Field indices are not supported with memory persistence.
      return yi.resolve(null);
    }
  }, {
    key: "getMinOffset",
    value: function getMinOffset(t, e) {
      return yi.resolve(index_esm2017_he.min());
    }
  }, {
    key: "updateCollectionGroup",
    value: function updateCollectionGroup(t, e, n) {
      // Field indices are not supported with memory persistence.
      return yi.resolve();
    }
  }, {
    key: "updateIndexEntries",
    value: function updateIndexEntries(t, e) {
      // Field indices are not supported with memory persistence.
      return yi.resolve();
    }
  }]);

  return ar;
}()));
/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */


var index_esm2017_cr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function cr() {
    firestore_dist_index_esm2017_classCallCheck(this, cr);

    this.index = {};
  } // Returns false if the entry already existed.


  firestore_dist_index_esm2017_createClass(cr, [{
    key: "add",
    value: function add(t) {
      var e = t.lastSegment(),
          n = t.popLast(),
          s = this.index[e] || new index_esm2017_we(index_esm2017_t.comparator),
          i = !s.has(n);
      return this.index[e] = s.add(n), i;
    }
  }, {
    key: "has",
    value: function has(t) {
      var e = t.lastSegment(),
          n = t.popLast(),
          s = this.index[e];
      return s && s.has(n);
    }
  }, {
    key: "getEntries",
    value: function getEntries(t) {
      return (this.index[t] || new index_esm2017_we(index_esm2017_t.comparator)).toArray();
    }
  }]);

  return cr;
}()));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_hr = new Uint8Array(0);
/**
 * A persisted implementation of IndexManager.
 *
 * PORTING NOTE: Unlike iOS and Android, the Web SDK does not memoize index
 * data as it supports multi-tab access.
 */

var index_esm2017_lr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function lr(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, lr);

    this.user = t, this.databaseId = e,
    /**
     * An in-memory copy of the index entries we've already written since the SDK
     * launched. Used to avoid re-writing the same entry repeatedly.
     *
     * This is *NOT* a complete cache of what's in persistence and so can never be
     * used to satisfy reads.
     */
    this.Ke = new index_esm2017_cr(),
    /**
     * Maps from a target to its equivalent list of sub-targets. Each sub-target
     * contains only one term from the target's disjunctive normal form (DNF).
     */
    this.Ge = new index_esm2017_Kn(function (t) {
      return index_esm2017_Ie(t);
    }, function (t, e) {
      return index_esm2017_Ee(t, e);
    }), this.uid = t.uid || "";
  }
  /**
   * Adds a new entry to the collection parent index.
   *
   * Repeated calls for the same collectionPath should be avoided within a
   * transaction as IndexedDbIndexManager only caches writes once a transaction
   * has been committed.
   */


  firestore_dist_index_esm2017_createClass(lr, [{
    key: "addToCollectionParentIndex",
    value: function addToCollectionParentIndex(t, e) {
      var _this44 = this;

      if (!this.Ke.has(e)) {
        var n = e.lastSegment(),
            s = e.popLast();
        t.addOnCommittedListener(function () {
          // Add the collection to the in memory cache only if the transaction was
          // successfully committed.
          _this44.Ke.add(e);
        });
        var i = {
          collectionId: n,
          parent: Gs(s)
        };
        return index_esm2017_fr(t).put(i);
      }

      return yi.resolve();
    }
  }, {
    key: "getCollectionParents",
    value: function getCollectionParents(t, e) {
      var n = [],
          s = IDBKeyRange.bound([e, ""], [index_esm2017_ut(e), ""],
      /*lowerOpen=*/
      !1,
      /*upperOpen=*/
      !0);
      return index_esm2017_fr(t).qt(s).next(function (t) {
        var _iterator31 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
            _step31;

        try {
          for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
            var _s11 = _step31.value;
            // This collectionId guard shouldn't be necessary (and isn't as long
            // as we're running in a real browser), but there's a bug in
            // indexeddbshim that breaks our range in our tests running in node:
            // https://github.com/axemclion/IndexedDBShim/issues/334
            if (_s11.collectionId !== e) break;
            n.push(Ws(_s11.parent));
          }
        } catch (err) {
          _iterator31.e(err);
        } finally {
          _iterator31.f();
        }

        return n;
      });
    }
  }, {
    key: "addFieldIndex",
    value: function addFieldIndex(t, e) {
      // TODO(indexing): Verify that the auto-incrementing index ID works in
      // Safari & Firefox.
      var n = index_esm2017_r(t),
          s = function (t) {
        return {
          indexId: t.indexId,
          collectionGroup: t.collectionGroup,
          fields: t.fields.map(function (t) {
            return [t.fieldPath.canonicalString(), t.kind];
          })
        };
      }(e); // `indexId` is auto-populated by IndexedDb


      return delete s.indexId, n.add(s).next();
    }
  }, {
    key: "deleteFieldIndex",
    value: function deleteFieldIndex(t, e) {
      var n = index_esm2017_r(t),
          s = index_esm2017_wr(t),
          i = index_esm2017_dr(t);

      return n["delete"](e.indexId).next(function () {
        return s["delete"](IDBKeyRange.bound([e.indexId], [e.indexId + 1],
        /*lowerOpen=*/
        !1,
        /*upperOpen=*/
        !0));
      }).next(function () {
        return i["delete"](IDBKeyRange.bound([e.indexId], [e.indexId + 1],
        /*lowerOpen=*/
        !1,
        /*upperOpen=*/
        !0));
      });
    }
  }, {
    key: "getDocumentsMatchingTarget",
    value: function getDocumentsMatchingTarget(t, e) {
      var _this45 = this;

      var n = index_esm2017_dr(t);
      var s = !0;
      var i = new Map();
      return yi.forEach(this.Qe(e), function (e) {
        return _this45.je(t, e).next(function (t) {
          s && (s = !!t), i.set(e, t);
        });
      }).next(function () {
        if (s) {
          var _t54 = index_esm2017_Yn();

          var _s12 = [];
          return yi.forEach(i, function (i, r) {
            /** Returns a debug representation of the field index */
            var o;
            dist_index_esm2017_O("IndexedDbIndexManager", "Using index ".concat((o = i, "id=".concat(o.indexId, "|cg=").concat(o.collectionGroup, "|f=").concat(o.fields.map(function (t) {
              return "".concat(t.fieldPath, ":").concat(t.kind);
            }).join(","))), " to execute ").concat(index_esm2017_Ie(e)));

            var u = function (t, e) {
              var n = index_esm2017_ie(e);
              if (void 0 === n) return null;

              var _iterator32 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_Re(t, n.fieldPath)),
                  _step32;

              try {
                for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
                  var _e25 = _step32.value;

                  switch (_e25.op) {
                    case "array-contains-any"
                    /* ARRAY_CONTAINS_ANY */
                    :
                      return _e25.value.arrayValue.values || [];

                    case "array-contains"
                    /* ARRAY_CONTAINS */
                    :
                      return [_e25.value];
                    // Remaining filters are not array filters.
                  }
                }
              } catch (err) {
                _iterator32.e(err);
              } finally {
                _iterator32.f();
              }

              return null;
            }
            /**
            * Returns the list of values that are used in != or NOT_IN filters. Returns
            * `null` if there are no such filters.
            */
            (r, i),
                a = function (t, e) {
              var n = new Map();

              var _iterator33 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_re(e)),
                  _step33;

              try {
                for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
                  var _s13 = _step33.value;

                  var _iterator34 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_Re(t, _s13.fieldPath)),
                      _step34;

                  try {
                    for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
                      var _e26 = _step34.value;

                      switch (_e26.op) {
                        case "=="
                        /* EQUAL */
                        :
                        case "in"
                        /* IN */
                        :
                          // Encode equality prefix, which is encoded in the index value before
                          // the inequality (e.g. `a == 'a' && b != 'b'` is encoded to
                          // `value != 'ab'`).
                          n.set(_s13.fieldPath.canonicalString(), _e26.value);
                          break;

                        case "not-in"
                        /* NOT_IN */
                        :
                        case "!="
                        /* NOT_EQUAL */
                        :
                          // NotIn/NotEqual is always a suffix. There cannot be any remaining
                          // segments and hence we can return early here.
                          return n.set(_s13.fieldPath.canonicalString(), _e26.value), Array.from(n.values());
                        // Remaining filters cannot be used as notIn bounds.
                      }
                    }
                  } catch (err) {
                    _iterator34.e(err);
                  } finally {
                    _iterator34.f();
                  }
                }
              } catch (err) {
                _iterator33.e(err);
              } finally {
                _iterator33.f();
              }

              return null;
            }
            /**
            * Returns a lower bound of field values that can be used as a starting point to
            * scan the index defined by `fieldIndex`. Returns `MIN_VALUE` if no lower bound
            * exists.
            */
            (r, i),
                c = function (t, e) {
              var n = [];
              var s = !0; // For each segment, retrieve a lower bound if there is a suitable filter or
              // startAt.

              var _iterator35 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_re(e)),
                  _step35;

              try {
                for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
                  var _i10 = _step35.value;

                  var _e27 = 0
                  /* ASCENDING */
                  === _i10.kind ? index_esm2017_be(t, _i10.fieldPath, t.startAt) : index_esm2017_Pe(t, _i10.fieldPath, t.startAt);

                  n.push(_e27.value), s && (s = _e27.inclusive);
                }
              } catch (err) {
                _iterator35.e(err);
              } finally {
                _iterator35.f();
              }

              return new index_esm2017_Oe(n, s);
            }
            /**
            * Returns an upper bound of field values that can be used as an ending point
            * when scanning the index defined by `fieldIndex`. Returns `MAX_VALUE` if no
            * upper bound exists.
            */
            (r, i),
                h = function (t, e) {
              var n = [];
              var s = !0; // For each segment, retrieve an upper bound if there is a suitable filter or
              // endAt.

              var _iterator36 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_re(e)),
                  _step36;

              try {
                for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                  var _i11 = _step36.value;

                  var _e28 = 0
                  /* ASCENDING */
                  === _i11.kind ? index_esm2017_Pe(t, _i11.fieldPath, t.endAt) : index_esm2017_be(t, _i11.fieldPath, t.endAt);

                  n.push(_e28.value), s && (s = _e28.inclusive);
                }
              } catch (err) {
                _iterator36.e(err);
              } finally {
                _iterator36.f();
              }

              return new index_esm2017_Oe(n, s);
            }(r, i),
                l = _this45.We(i, r, c),
                f = _this45.We(i, r, h),
                d = _this45.ze(i, r, a),
                _ = _this45.He(i.indexId, u, l, c.inclusive, f, h.inclusive, d);

            return yi.forEach(_, function (i) {
              return n.Gt(i, e.limit).next(function (e) {
                e.forEach(function (e) {
                  var n = index_esm2017_xt.fromSegments(e.documentKey);
                  _t54.has(n) || (_t54 = _t54.add(n), _s12.push(n));
                });
              });
            });
          }).next(function () {
            return _s12;
          });
        }

        return yi.resolve(null);
      });
    }
  }, {
    key: "Qe",
    value: function Qe(t) {
      var e = this.Ge.get(t);
      return e || ( // TODO(orquery): Implement DNF transform
      e = [t], this.Ge.set(t, e), e);
    }
    /**
     * Constructs a key range query on `DbIndexEntryStore` that unions all
     * bounds.
     */

  }, {
    key: "He",
    value: function He(t, e, n, s, i, r, o) {
      var _this46 = this;

      // The number of total index scans we union together. This is similar to a
      // distributed normal form, but adapted for array values. We create a single
      // index range per value in an ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filter
      // combined with the values from the query bounds.
      var u = (null != e ? e.length : 1) * Math.max(n.length, i.length),
          a = u / (null != e ? e.length : 1),
          c = [];

      var _loop4 = function _loop4(h) {
        var u = e ? _this46.Je(e[h / a]) : index_esm2017_hr,
            l = _this46.Ye(t, u, n[h % a], s),
            f = _this46.Xe(t, u, i[h % a], r),
            d = o.map(function (e) {
          return _this46.Ye(t, u, e,
          /* inclusive= */
          !0);
        });

        c.push.apply(c, dist_index_esm2017_toConsumableArray(_this46.createRange(l, f, d)));
      };

      for (var h = 0; h < u; ++h) {
        _loop4(h);
      }

      return c;
    }
    /** Generates the lower bound for `arrayValue` and `directionalValue`. */

  }, {
    key: "Ye",
    value: function Ye(t, e, n, s) {
      var i = new index_esm2017_ir(t, index_esm2017_xt.empty(), e, n);
      return s ? i : i.ke();
    }
    /** Generates the upper bound for `arrayValue` and `directionalValue`. */

  }, {
    key: "Xe",
    value: function Xe(t, e, n, s) {
      var i = new index_esm2017_ir(t, index_esm2017_xt.empty(), e, n);
      return s ? i.ke() : i;
    }
  }, {
    key: "je",
    value: function je(t, e) {
      var n = new index_esm2017_ur(e),
          s = null != e.collectionGroup ? e.collectionGroup : e.path.lastSegment();
      return this.getFieldIndexes(t, s).next(function (t) {
        // Return the index with the most number of segments.
        var e = null;

        var _iterator37 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
            _step37;

        try {
          for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
            var _s14 = _step37.value;
            n.$e(_s14) && (!e || _s14.fields.length > e.fields.length) && (e = _s14);
          }
        } catch (err) {
          _iterator37.e(err);
        } finally {
          _iterator37.f();
        }

        return e;
      });
    }
  }, {
    key: "getIndexType",
    value: function getIndexType(t, e) {
      var _this47 = this;

      var n = 2
      /* FULL */
      ;
      return yi.forEach(this.Qe(e), function (e) {
        return _this47.je(t, e).next(function (t) {
          t ? 0
          /* NONE */
          !== n && t.fields.length < function (t) {
            var e = new index_esm2017_we(index_esm2017_mt.comparator),
                n = !1;

            var _iterator38 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.filters),
                _step38;

            try {
              for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
                var s = _step38.value;
                // TODO(orquery): Use the flattened filters here
                var _t55 = s; // __name__ is not an explicit segment of any index, so we don't need to
                // count it.

                _t55.field.isKeyField() || ( // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.
                // For instance, it is possible to have an index for "a ARRAY a ASC". Even
                // though these are on the same field, they should be counted as two
                // separate segments in an index.
                "array-contains"
                /* ARRAY_CONTAINS */
                === _t55.op || "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                === _t55.op ? n = !0 : e = e.add(_t55.field));
              }
            } catch (err) {
              _iterator38.e(err);
            } finally {
              _iterator38.f();
            }

            var _iterator39 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.orderBy),
                _step39;

            try {
              for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
                var _n16 = _step39.value;
                // __name__ is not an explicit segment of any index, so we don't need to
                // count it.
                _n16.field.isKeyField() || (e = e.add(_n16.field));
              }
            } catch (err) {
              _iterator39.e(err);
            } finally {
              _iterator39.f();
            }

            return e.size + (n ? 1 : 0);
          }(e) && (n = 1
          /* PARTIAL */
          ) : n = 0
          /* NONE */
          ;
        });
      }).next(function () {
        return n;
      });
    }
    /**
     * Returns the byte encoded form of the directional values in the field index.
     * Returns `null` if the document does not have all fields specified in the
     * index.
     */

  }, {
    key: "Ze",
    value: function Ze(t, e) {
      var n = new index_esm2017_sr();

      var _iterator40 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_re(t)),
          _step40;

      try {
        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
          var s = _step40.value;

          var _t56 = e.data.field(s.fieldPath);

          if (null == _t56) return null;
          var i = n.Ne(s.kind);
          Yi.fe.Zt(_t56, i);
        }
      } catch (err) {
        _iterator40.e(err);
      } finally {
        _iterator40.f();
      }

      return n.Se();
    }
    /** Encodes a single value to the ascending index format. */

  }, {
    key: "Je",
    value: function Je(t) {
      var e = new index_esm2017_sr();
      return Yi.fe.Zt(t, e.Ne(0
      /* ASCENDING */
      )), e.Se();
    }
    /**
     * Returns an encoded form of the document key that sorts based on the key
     * ordering of the field index.
     */

  }, {
    key: "tn",
    value: function tn(t, e) {
      var n = new index_esm2017_sr();
      return Yi.fe.Zt(index_esm2017_qt(this.databaseId, e), n.Ne(function (t) {
        var e = index_esm2017_re(t);
        return 0 === e.length ? 0
        /* ASCENDING */
        : e[e.length - 1].kind;
      }(t))), n.Se();
    }
    /**
     * Encodes the given field values according to the specification in `target`.
     * For IN queries, a list of possible values is returned.
     */

  }, {
    key: "ze",
    value: function ze(t, e, n) {
      if (null === n) return [];
      var s = [];
      s.push(new index_esm2017_sr());
      var i = 0;

      var _iterator41 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_re(t)),
          _step41;

      try {
        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
          var r = _step41.value;
          var _t57 = n[i++];

          var _iterator42 = firestore_dist_index_esm2017_createForOfIteratorHelper(s),
              _step42;

          try {
            for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
              var _n17 = _step42.value;
              if (this.en(e, r.fieldPath) && index_esm2017_Gt(_t57)) s = this.nn(s, r, _t57);else {
                var _e29 = _n17.Ne(r.kind);

                Yi.fe.Zt(_t57, _e29);
              }
            }
          } catch (err) {
            _iterator42.e(err);
          } finally {
            _iterator42.f();
          }
        }
      } catch (err) {
        _iterator41.e(err);
      } finally {
        _iterator41.f();
      }

      return this.sn(s);
    }
    /**
     * Encodes the given bounds according to the specification in `target`. For IN
     * queries, a list of possible values is returned.
     */

  }, {
    key: "We",
    value: function We(t, e, n) {
      return this.ze(t, e, n.position);
    }
    /** Returns the byte representation for the provided encoders. */

  }, {
    key: "sn",
    value: function sn(t) {
      var e = [];

      for (var n = 0; n < t.length; ++n) {
        e[n] = t[n].Se();
      }

      return e;
    }
    /**
     * Creates a separate encoder for each element of an array.
     *
     * The method appends each value to all existing encoders (e.g. filter("a",
     * "==", "a1").filter("b", "in", ["b1", "b2"]) becomes ["a1,b1", "a1,b2"]). A
     * list of new encoders is returned.
     */

  }, {
    key: "nn",
    value: function nn(t, e, n) {
      var s = dist_index_esm2017_toConsumableArray(t),
          i = [];

      var _iterator43 = firestore_dist_index_esm2017_createForOfIteratorHelper(n.arrayValue.values || []),
          _step43;

      try {
        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
          var _t58 = _step43.value;

          var _iterator44 = firestore_dist_index_esm2017_createForOfIteratorHelper(s),
              _step44;

          try {
            for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
              var _n18 = _step44.value;

              var _s15 = new index_esm2017_sr();

              _s15.seed(_n18.Se()), Yi.fe.Zt(_t58, _s15.Ne(e.kind)), i.push(_s15);
            }
          } catch (err) {
            _iterator44.e(err);
          } finally {
            _iterator44.f();
          }
        }
      } catch (err) {
        _iterator43.e(err);
      } finally {
        _iterator43.f();
      }

      return i;
    }
  }, {
    key: "en",
    value: function en(t, e) {
      return !!t.filters.find(function (t) {
        return t instanceof index_esm2017_Ve && t.field.isEqual(e) && ("in"
        /* IN */
        === t.op || "not-in"
        /* NOT_IN */
        === t.op);
      });
    }
  }, {
    key: "getFieldIndexes",
    value: function getFieldIndexes(t, e) {
      var _this48 = this;

      var n = index_esm2017_r(t),
          s = index_esm2017_wr(t);

      return (e ? n.qt("collectionGroupIndex", IDBKeyRange.bound(e, e)) : n.qt()).next(function (t) {
        var e = [];
        return yi.forEach(t, function (t) {
          return s.get([t.indexId, _this48.uid]).next(function (n) {
            e.push(function (t, e) {
              var n = e ? new index_esm2017_ue(e.sequenceNumber, new index_esm2017_he(Bi(e.readTime), new index_esm2017_xt(Ws(e.documentKey)), e.largestBatchId)) : index_esm2017_ue.empty(),
                  s = t.fields.map(function (_ref3) {
                var _ref4 = dist_index_esm2017_slicedToArray(_ref3, 2),
                    t = _ref4[0],
                    e = _ref4[1];

                return new index_esm2017_oe(index_esm2017_mt.fromServerFormat(t), e);
              });
              return new index_esm2017_se(t.indexId, t.collectionGroup, s, n);
            }(t, n));
          });
        }).next(function () {
          return e;
        });
      });
    }
  }, {
    key: "getNextCollectionGroupToUpdate",
    value: function getNextCollectionGroupToUpdate(t) {
      return this.getFieldIndexes(t).next(function (t) {
        return 0 === t.length ? null : (t.sort(function (t, e) {
          var n = t.indexState.sequenceNumber - e.indexState.sequenceNumber;
          return 0 !== n ? n : index_esm2017_rt(t.collectionGroup, e.collectionGroup);
        }), t[0].collectionGroup);
      });
    }
  }, {
    key: "updateCollectionGroup",
    value: function updateCollectionGroup(t, e, n) {
      var _this49 = this;

      var s = index_esm2017_r(t),
          i = index_esm2017_wr(t);

      return this.rn(t).next(function (t) {
        return s.qt("collectionGroupIndex", IDBKeyRange.bound(e, e)).next(function (e) {
          return yi.forEach(e, function (e) {
            return i.put(function (t, e, n, s) {
              return {
                indexId: t,
                uid: e.uid || "",
                sequenceNumber: n,
                readTime: $i(s.readTime),
                documentKey: Gs(s.documentKey.path),
                largestBatchId: s.largestBatchId
              };
            }(e.indexId, _this49.user, t, n));
          });
        });
      });
    }
  }, {
    key: "updateIndexEntries",
    value: function updateIndexEntries(t, e) {
      var _this50 = this;

      // Porting Note: `getFieldIndexes()` on Web does not cache index lookups as
      // it could be used across different IndexedDB transactions. As any cached
      // data might be invalidated by other multi-tab clients, we can only trust
      // data within a single IndexedDB transaction. We therefore add a cache
      // here.
      var n = new Map();
      return yi.forEach(e, function (e, s) {
        var i = n.get(e.collectionGroup);
        return (i ? yi.resolve(i) : _this50.getFieldIndexes(t, e.collectionGroup)).next(function (i) {
          return n.set(e.collectionGroup, i), yi.forEach(i, function (n) {
            return _this50.on(t, e, n).next(function (e) {
              var i = _this50.un(s, n);

              return e.isEqual(i) ? yi.resolve() : _this50.an(t, s, n, e, i);
            });
          });
        });
      });
    }
  }, {
    key: "cn",
    value: function cn(t, e, n, s) {
      return index_esm2017_dr(t).put({
        indexId: s.indexId,
        uid: this.uid,
        arrayValue: s.arrayValue,
        directionalValue: s.directionalValue,
        orderedDocumentKey: this.tn(n, e.key),
        documentKey: e.key.path.toArray()
      });
    }
  }, {
    key: "hn",
    value: function hn(t, e, n, s) {
      return index_esm2017_dr(t)["delete"]([s.indexId, this.uid, s.arrayValue, s.directionalValue, this.tn(n, e.key), e.key.path.toArray()]);
    }
  }, {
    key: "on",
    value: function on(t, e, n) {
      var s = index_esm2017_dr(t);
      var i = new index_esm2017_we(index_esm2017_rr);
      return s.Wt({
        index: "documentKeyIndex",
        range: IDBKeyRange.only([n.indexId, this.uid, this.tn(n, e)])
      }, function (t, s) {
        i = i.add(new index_esm2017_ir(n.indexId, e, s.arrayValue, s.directionalValue));
      }).next(function () {
        return i;
      });
    }
    /** Creates the index entries for the given document. */

  }, {
    key: "un",
    value: function un(t, e) {
      var n = new index_esm2017_we(index_esm2017_rr);
      var s = this.Ze(e, t);
      if (null == s) return n;
      var i = index_esm2017_ie(e);

      if (null != i) {
        var r = t.data.field(i.fieldPath);

        if (index_esm2017_Gt(r)) {
          var _iterator45 = firestore_dist_index_esm2017_createForOfIteratorHelper(r.arrayValue.values || []),
              _step45;

          try {
            for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
              var _i12 = _step45.value;
              n = n.add(new index_esm2017_ir(e.indexId, t.key, this.Je(_i12), s));
            }
          } catch (err) {
            _iterator45.e(err);
          } finally {
            _iterator45.f();
          }
        }
      } else n = n.add(new index_esm2017_ir(e.indexId, t.key, index_esm2017_hr, s));

      return n;
    }
    /**
     * Updates the index entries for the provided document by deleting entries
     * that are no longer referenced in `newEntries` and adding all newly added
     * entries.
     */

  }, {
    key: "an",
    value: function an(t, e, n, s, i) {
      var _this51 = this;

      dist_index_esm2017_O("IndexedDbIndexManager", "Updating index entries for document '%s'", e.key);
      var r = [];
      return function (t, e, n, s, i) {
        var r = t.getIterator(),
            o = e.getIterator();
        var u = index_esm2017_ge(r),
            a = index_esm2017_ge(o); // Walk through the two sets at the same time, using the ordering defined by
        // `comparator`.

        for (; u || a;) {
          var _t59 = !1,
              _e30 = !1;

          if (u && a) {
            var _s16 = n(u, a);

            _s16 < 0 ? // The element was removed if the next element in our ordered
            // walkthrough is only in `before`.
            _e30 = !0 : _s16 > 0 && ( // The element was added if the next element in our ordered walkthrough
            // is only in `after`.
            _t59 = !0);
          } else null != u ? _e30 = !0 : _t59 = !0;

          _t59 ? (s(a), a = index_esm2017_ge(o)) : _e30 ? (i(u), u = index_esm2017_ge(r)) : (u = index_esm2017_ge(r), a = index_esm2017_ge(o));
        }
      }(s, i, index_esm2017_rr,
      /* onAdd= */
      function (s) {
        r.push(_this51.cn(t, e, n, s));
      },
      /* onRemove= */
      function (s) {
        r.push(_this51.hn(t, e, n, s));
      }), yi.waitFor(r);
    }
  }, {
    key: "rn",
    value: function rn(t) {
      var e = 1;
      return index_esm2017_wr(t).Wt({
        index: "sequenceNumberIndex",
        reverse: !0,
        range: IDBKeyRange.upperBound([this.uid, Number.MAX_SAFE_INTEGER])
      }, function (t, n, s) {
        s.done(), e = n.sequenceNumber + 1;
      }).next(function () {
        return e;
      });
    }
    /**
     * Returns a new set of IDB ranges that splits the existing range and excludes
     * any values that match the `notInValue` from these ranges. As an example,
     * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.
     */

  }, {
    key: "createRange",
    value: function createRange(t, e, n) {
      // The notIn values need to be sorted and unique so that we can return a
      // sorted set of non-overlapping ranges.
      n = n.sort(function (t, e) {
        return index_esm2017_rr(t, e);
      }).filter(function (t, e, n) {
        return !e || 0 !== index_esm2017_rr(t, n[e - 1]);
      });
      var s = [];
      s.push(t);

      var _iterator46 = firestore_dist_index_esm2017_createForOfIteratorHelper(n),
          _step46;

      try {
        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
          var _i13 = _step46.value;

          var _n19 = index_esm2017_rr(_i13, t),
              r = index_esm2017_rr(_i13, e);

          if (0 === _n19) // `notInValue` is the lower bound. We therefore need to raise the bound
            // to the next value.
            s[0] = t.ke();else if (_n19 > 0 && r < 0) // `notInValue` is in the middle of the range
            s.push(_i13), s.push(_i13.ke());else if (r > 0) // `notInValue` (and all following values) are out of the range
            break;
        }
      } catch (err) {
        _iterator46.e(err);
      } finally {
        _iterator46.f();
      }

      s.push(e);
      var i = [];

      for (var _t60 = 0; _t60 < s.length; _t60 += 2) {
        i.push(IDBKeyRange.bound([s[_t60].indexId, this.uid, s[_t60].arrayValue, s[_t60].directionalValue, index_esm2017_hr, []], [s[_t60 + 1].indexId, this.uid, s[_t60 + 1].arrayValue, s[_t60 + 1].directionalValue, index_esm2017_hr, []]));
      }

      return i;
    }
  }, {
    key: "getMinOffset",
    value: function getMinOffset(t, e) {
      var _this52 = this;

      var n;
      return yi.forEach(this.Qe(e), function (e) {
        return _this52.je(t, e).next(function (t) {
          t ? (!n || index_esm2017_le(t.indexState.offset, n) < 0) && (n = t.indexState.offset) : n = index_esm2017_he.min();
        });
      }).next(function () {
        return n;
      });
    }
  }]);

  return lr;
}()));
/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */


function index_esm2017_fr(t) {
  return Si(t, "collectionParents");
}
/**
 * Helper to get a typed SimpleDbStore for the index entry object store.
 */


function index_esm2017_dr(t) {
  return Si(t, "indexEntries");
}
/**
 * Helper to get a typed SimpleDbStore for the index configuration object store.
 */


function index_esm2017_r(t) {
  return Si(t, "indexConfiguration");
}
/**
 * Helper to get a typed SimpleDbStore for the index state object store.
 */


function index_esm2017_wr(t) {
  return Si(t, "indexState");
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_mr = {
  didRun: !1,
  sequenceNumbersCollected: 0,
  targetsRemoved: 0,
  documentsRemoved: 0
};

var index_esm2017_gr = /*#__PURE__*/function () {
  function gr( // When we attempt to collect, we will only do so if the cache size is greater than this
  // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
  t, // The percentage of sequence numbers that we will attempt to collect
  e, // A cap on the total number of sequence numbers that will be collected. This prevents
  // us from collecting a huge number of sequence numbers if the cache has grown very large.
  n) {
    firestore_dist_index_esm2017_classCallCheck(this, gr);

    this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
  }

  firestore_dist_index_esm2017_createClass(gr, null, [{
    key: "withCacheSize",
    value: function withCacheSize(t) {
      return new gr(t, gr.DEFAULT_COLLECTION_PERCENTILE, gr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
    }
  }]);

  return gr;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Delete a mutation batch and the associated document mutations.
 * @returns A PersistencePromise of the document mutations that were removed.
 */


function index_esm2017_yr(t, e, n) {
  var s = t.store("mutations"),
      i = t.store("documentMutations"),
      r = [],
      o = IDBKeyRange.only(n.batchId);
  var u = 0;
  var a = s.Wt({
    range: o
  }, function (t, e, n) {
    return u++, n["delete"]();
  });
  r.push(a.next(function () {
    dist_index_esm2017_U(1 === u);
  }));
  var c = [];

  var _iterator47 = firestore_dist_index_esm2017_createForOfIteratorHelper(n.mutations),
      _step47;

  try {
    for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
      var _t61 = _step47.value;

      var _s17 = Js(e, _t61.key.path, n.batchId);

      r.push(i["delete"](_s17)), c.push(_t61.key);
    }
  } catch (err) {
    _iterator47.e(err);
  } finally {
    _iterator47.f();
  }

  return yi.waitFor(r).next(function () {
    return c;
  });
}
/**
 * Returns an approximate size for the given document.
 */


function index_esm2017_pr(t) {
  if (!t) return 0;
  var e;
  if (t.document) e = t.document;else if (t.unknownDocument) e = t.unknownDocument;else {
    if (!t.noDocument) throw dist_index_esm2017_L();
    e = t.noDocument;
  }
  return JSON.stringify(e).length;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** A mutation queue for a specific user, backed by IndexedDB. */


index_esm2017_gr.DEFAULT_COLLECTION_PERCENTILE = 10, index_esm2017_gr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, index_esm2017_gr.DEFAULT = new index_esm2017_gr(41943040, index_esm2017_gr.DEFAULT_COLLECTION_PERCENTILE, index_esm2017_gr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), index_esm2017_gr.DISABLED = new index_esm2017_gr(-1, 0, 0);

var index_esm2017_Ir = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ir(
  /**
   * The normalized userId (e.g. null UID => "" userId) used to store /
   * retrieve mutations.
   */
  t, e, n, s) {
    firestore_dist_index_esm2017_classCallCheck(this, Ir);

    this.userId = t, this.M = e, this.indexManager = n, this.referenceDelegate = s,
    /**
     * Caches the document keys for pending mutation batches. If the mutation
     * has been removed from IndexedDb, the cached value may continue to
     * be used to retrieve the batch's document keys. To remove a cached value
     * locally, `removeCachedMutationKeys()` should be invoked either directly
     * or through `removeMutationBatches()`.
     *
     * With multi-tab, when the primary client acknowledges or rejects a mutation,
     * this cache is used by secondary clients to invalidate the local
     * view of the documents that were previously affected by the mutation.
     */
    // PORTING NOTE: Multi-tab only.
    this.ln = {};
  }
  /**
   * Creates a new mutation queue for the given user.
   * @param user - The user for which to create a mutation queue.
   * @param serializer - The serializer to use when persisting to IndexedDb.
   */


  firestore_dist_index_esm2017_createClass(Ir, [{
    key: "checkEmpty",
    value: function checkEmpty(t) {
      var e = !0;
      var n = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
      return index_esm2017_Er(t).Wt({
        index: "userMutationsIndex",
        range: n
      }, function (t, n, s) {
        e = !1, s.done();
      }).next(function () {
        return e;
      });
    }
  }, {
    key: "addMutationBatch",
    value: function addMutationBatch(t, e, n, s) {
      var _this53 = this;

      var i = index_esm2017_Ar(t),
          r = index_esm2017_Er(t); // The IndexedDb implementation in Chrome (and Firefox) does not handle
      // compound indices that include auto-generated keys correctly. To ensure
      // that the index entry is added correctly in all browsers, we perform two
      // writes: The first write is used to retrieve the next auto-generated Batch
      // ID, and the second write populates the index and stores the actual
      // mutation batch.
      // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
      // We write an empty object to obtain key
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      return r.add({}).next(function (o) {
        dist_index_esm2017_U("number" == typeof o);

        var u = new Di(o, e, n, s),
            a = function (t, e, n) {
          var s = n.baseMutations.map(function (e) {
            return vs(t.Jt, e);
          }),
              i = n.mutations.map(function (e) {
            return vs(t.Jt, e);
          });
          return {
            userId: e,
            batchId: n.batchId,
            localWriteTimeMs: n.localWriteTime.toMillis(),
            baseMutations: s,
            mutations: i
          };
        }(_this53.M, _this53.userId, u),
            c = [];

        var h = new index_esm2017_we(function (t, e) {
          return index_esm2017_rt(t.canonicalString(), e.canonicalString());
        });

        var _iterator48 = firestore_dist_index_esm2017_createForOfIteratorHelper(s),
            _step48;

        try {
          for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
            var _t62 = _step48.value;

            var _e31 = Js(_this53.userId, _t62.key.path, o);

            h = h.add(_t62.key.path.popLast()), c.push(r.put(a)), c.push(i.put(_e31, Ys));
          }
        } catch (err) {
          _iterator48.e(err);
        } finally {
          _iterator48.f();
        }

        return h.forEach(function (e) {
          c.push(_this53.indexManager.addToCollectionParentIndex(t, e));
        }), t.addOnCommittedListener(function () {
          _this53.ln[o] = u.keys();
        }), yi.waitFor(c).next(function () {
          return u;
        });
      });
    }
  }, {
    key: "lookupMutationBatch",
    value: function lookupMutationBatch(t, e) {
      var _this54 = this;

      return index_esm2017_Er(t).get(e).next(function (t) {
        return t ? (dist_index_esm2017_U(t.userId === _this54.userId), Li(_this54.M, t)) : null;
      });
    }
    /**
     * Returns the document keys for the mutation batch with the given batchId.
     * For primary clients, this method returns `null` after
     * `removeMutationBatches()` has been called. Secondary clients return a
     * cached result until `removeCachedMutationKeys()` is invoked.
     */
    // PORTING NOTE: Multi-tab only.

  }, {
    key: "fn",
    value: function fn(t, e) {
      var _this55 = this;

      return this.ln[e] ? yi.resolve(this.ln[e]) : this.lookupMutationBatch(t, e).next(function (t) {
        if (t) {
          var n = t.keys();
          return _this55.ln[e] = n, n;
        }

        return null;
      });
    }
  }, {
    key: "getNextMutationBatchAfterBatchId",
    value: function getNextMutationBatchAfterBatchId(t, e) {
      var _this56 = this;

      var n = e + 1,
          s = IDBKeyRange.lowerBound([this.userId, n]);
      var i = null;
      return index_esm2017_Er(t).Wt({
        index: "userMutationsIndex",
        range: s
      }, function (t, e, s) {
        e.userId === _this56.userId && (dist_index_esm2017_U(e.batchId >= n), i = Li(_this56.M, e)), s.done();
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "getHighestUnacknowledgedBatchId",
    value: function getHighestUnacknowledgedBatchId(t) {
      var e = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);
      var n = -1;
      return index_esm2017_Er(t).Wt({
        index: "userMutationsIndex",
        range: e,
        reverse: !0
      }, function (t, e, s) {
        n = e.batchId, s.done();
      }).next(function () {
        return n;
      });
    }
  }, {
    key: "getAllMutationBatches",
    value: function getAllMutationBatches(t) {
      var _this57 = this;

      var e = IDBKeyRange.bound([this.userId, -1], [this.userId, Number.POSITIVE_INFINITY]);
      return index_esm2017_Er(t).qt("userMutationsIndex", e).next(function (t) {
        return t.map(function (t) {
          return Li(_this57.M, t);
        });
      });
    }
  }, {
    key: "getAllMutationBatchesAffectingDocumentKey",
    value: function getAllMutationBatchesAffectingDocumentKey(t, e) {
      var _this58 = this;

      // Scan the document-mutation index starting with a prefix starting with
      // the given documentKey.
      var n = Hs(this.userId, e.path),
          s = IDBKeyRange.lowerBound(n),
          i = [];
      return index_esm2017_Ar(t).Wt({
        range: s
      }, function (n, s, r) {
        var _n20 = dist_index_esm2017_slicedToArray(n, 3),
            o = _n20[0],
            u = _n20[1],
            a = _n20[2],
            c = Ws(u); // Only consider rows matching exactly the specific key of
        // interest. Note that because we order by path first, and we
        // order terminators before path separators, we'll encounter all
        // the index rows for documentKey contiguously. In particular, all
        // the rows for documentKey will occur before any rows for
        // documents nested in a subcollection beneath documentKey so we
        // can stop as soon as we hit any such row.


        if (o === _this58.userId && e.path.isEqual(c)) // Look up the mutation batch in the store.
          return index_esm2017_Er(t).get(a).next(function (t) {
            if (!t) throw dist_index_esm2017_L();
            dist_index_esm2017_U(t.userId === _this58.userId), i.push(Li(_this58.M, t));
          });
        r.done();
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "getAllMutationBatchesAffectingDocumentKeys",
    value: function getAllMutationBatchesAffectingDocumentKeys(t, e) {
      var _this59 = this;

      var n = new index_esm2017_we(index_esm2017_rt);
      var s = [];
      return e.forEach(function (e) {
        var i = Hs(_this59.userId, e.path),
            r = IDBKeyRange.lowerBound(i),
            o = index_esm2017_Ar(t).Wt({
          range: r
        }, function (t, s, i) {
          var _t63 = dist_index_esm2017_slicedToArray(t, 3),
              r = _t63[0],
              o = _t63[1],
              u = _t63[2],
              a = Ws(o); // Only consider rows matching exactly the specific key of
          // interest. Note that because we order by path first, and we
          // order terminators before path separators, we'll encounter all
          // the index rows for documentKey contiguously. In particular, all
          // the rows for documentKey will occur before any rows for
          // documents nested in a subcollection beneath documentKey so we
          // can stop as soon as we hit any such row.


          r === _this59.userId && e.path.isEqual(a) ? n = n.add(u) : i.done();
        });
        s.push(o);
      }), yi.waitFor(s).next(function () {
        return _this59.dn(t, n);
      });
    }
  }, {
    key: "getAllMutationBatchesAffectingQuery",
    value: function getAllMutationBatchesAffectingQuery(t, e) {
      var _this60 = this;

      var n = e.path,
          s = n.length + 1,
          i = Hs(this.userId, n),
          r = IDBKeyRange.lowerBound(i); // Collect up unique batchIDs encountered during a scan of the index. Use a
      // SortedSet to accumulate batch IDs so they can be traversed in order in a
      // scan of the main table.

      var o = new index_esm2017_we(index_esm2017_rt);
      return index_esm2017_Ar(t).Wt({
        range: r
      }, function (t, e, i) {
        var _t64 = dist_index_esm2017_slicedToArray(t, 3),
            r = _t64[0],
            u = _t64[1],
            a = _t64[2],
            c = Ws(u);

        r === _this60.userId && n.isPrefixOf(c) ? // Rows with document keys more than one segment longer than the
        // query path can't be matches. For example, a query on 'rooms'
        // can't match the document /rooms/abc/messages/xyx.
        // TODO(mcg): we'll need a different scanner when we implement
        // ancestor queries.
        c.length === s && (o = o.add(a)) : i.done();
      }).next(function () {
        return _this60.dn(t, o);
      });
    }
  }, {
    key: "dn",
    value: function dn(t, e) {
      var _this61 = this;

      var n = [],
          s = []; // TODO(rockwood): Implement this using iterate.

      return e.forEach(function (e) {
        s.push(index_esm2017_Er(t).get(e).next(function (t) {
          if (null === t) throw dist_index_esm2017_L();
          dist_index_esm2017_U(t.userId === _this61.userId), n.push(Li(_this61.M, t));
        }));
      }), yi.waitFor(s).next(function () {
        return n;
      });
    }
  }, {
    key: "removeMutationBatch",
    value: function removeMutationBatch(t, e) {
      var _this62 = this;

      return index_esm2017_yr(t.Ht, this.userId, e).next(function (n) {
        return t.addOnCommittedListener(function () {
          _this62._n(e.batchId);
        }), yi.forEach(n, function (e) {
          return _this62.referenceDelegate.markPotentiallyOrphaned(t, e);
        });
      });
    }
    /**
     * Clears the cached keys for a mutation batch. This method should be
     * called by secondary clients after they process mutation updates.
     *
     * Note that this method does not have to be called from primary clients as
     * the corresponding cache entries are cleared when an acknowledged or
     * rejected batch is removed from the mutation queue.
     */
    // PORTING NOTE: Multi-tab only

  }, {
    key: "_n",
    value: function _n(t) {
      delete this.ln[t];
    }
  }, {
    key: "performConsistencyCheck",
    value: function performConsistencyCheck(t) {
      var _this63 = this;

      return this.checkEmpty(t).next(function (e) {
        if (!e) return yi.resolve(); // Verify that there are no entries in the documentMutations index if
        // the queue is empty.

        var n = IDBKeyRange.lowerBound([_this63.userId]);
        var s = [];
        return index_esm2017_Ar(t).Wt({
          range: n
        }, function (t, e, n) {
          if (t[0] === _this63.userId) {
            var _e32 = Ws(t[1]);

            s.push(_e32);
          } else n.done();
        }).next(function () {
          dist_index_esm2017_U(0 === s.length);
        });
      });
    }
  }, {
    key: "containsKey",
    value: function containsKey(t, e) {
      return index_esm2017_Tr(t, this.userId, e);
    } // PORTING NOTE: Multi-tab only (state is held in memory in other clients).

    /** Returns the mutation queue's metadata from IndexedDb. */

  }, {
    key: "wn",
    value: function wn(t) {
      var _this64 = this;

      return index_esm2017_Rr(t).get(this.userId).next(function (t) {
        return t || {
          userId: _this64.userId,
          lastAcknowledgedBatchId: -1,
          lastStreamToken: ""
        };
      });
    }
  }], [{
    key: "Yt",
    value: function Yt(t, e, n, s) {
      // TODO(mcg): Figure out what constraints there are on userIDs
      // In particular, are there any reserved characters? are empty ids allowed?
      // For the moment store these together in the same mutations table assuming
      // that empty userIDs aren't allowed.
      dist_index_esm2017_U("" !== t.uid);
      var i = t.isAuthenticated() ? t.uid : "";
      return new Ir(i, e, n, s);
    }
  }]);

  return Ir;
}()));
/**
 * @returns true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */


function index_esm2017_Tr(t, e, n) {
  var s = Hs(e, n.path),
      i = s[1],
      r = IDBKeyRange.lowerBound(s);
  var o = !1;
  return index_esm2017_Ar(t).Wt({
    range: r,
    jt: !0
  }, function (t, n, s) {
    var _t65 = dist_index_esm2017_slicedToArray(t, 3),
        r = _t65[0],
        u = _t65[1],

    /*batchID*/
    a = _t65[2];

    r === e && u === i && (o = !0), s.done();
  }).next(function () {
    return o;
  });
}
/** Returns true if any mutation queue contains the given document. */

/**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */


function index_esm2017_Er(t) {
  return Si(t, "mutations");
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */


function index_esm2017_Ar(t) {
  return Si(t, "documentMutations");
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */


function index_esm2017_Rr(t) {
  return Si(t, "mutationQueues");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Offset to ensure non-overlapping target ids. */

/**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the target cache, and one for
 * for the sync engine (to generate limbo documents targets). These
 * generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */


var index_esm2017_br = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function br(t) {
    firestore_dist_index_esm2017_classCallCheck(this, br);

    this.mn = t;
  }

  firestore_dist_index_esm2017_createClass(br, [{
    key: "next",
    value: function next() {
      return this.mn += 2, this.mn;
    }
  }], [{
    key: "gn",
    value: function gn() {
      // The target cache generator must return '2' in its first call to `next()`
      // as there is no differentiation in the protocol layer between an unset
      // number and the number '0'. If we were to sent a target with target ID
      // '0', the backend would consider it unset and replace it with its own ID.
      return new br(0);
    }
  }, {
    key: "yn",
    value: function yn() {
      // Sync engine assigns target IDs for limbo document detection.
      return new br(-1);
    }
  }]);

  return br;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_Pr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Pr(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Pr);

    this.referenceDelegate = t, this.M = e;
  } // PORTING NOTE: We don't cache global metadata for the target cache, since
  // some of it (in particular `highestTargetId`) can be modified by secondary
  // tabs. We could perhaps be more granular (and e.g. still cache
  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
  // to IndexedDb whenever we need to read metadata. We can revisit if it turns
  // out to have a meaningful performance impact.


  firestore_dist_index_esm2017_createClass(Pr, [{
    key: "allocateTargetId",
    value: function allocateTargetId(t) {
      var _this65 = this;

      return this.pn(t).next(function (e) {
        var n = new index_esm2017_br(e.highestTargetId);
        return e.highestTargetId = n.next(), _this65.In(t, e).next(function () {
          return e.highestTargetId;
        });
      });
    }
  }, {
    key: "getLastRemoteSnapshotVersion",
    value: function getLastRemoteSnapshotVersion(t) {
      return this.pn(t).next(function (t) {
        return index_esm2017_ct.fromTimestamp(new index_esm2017_at(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds));
      });
    }
  }, {
    key: "getHighestSequenceNumber",
    value: function getHighestSequenceNumber(t) {
      return this.pn(t).next(function (t) {
        return t.highestListenSequenceNumber;
      });
    }
  }, {
    key: "setTargetsMetadata",
    value: function setTargetsMetadata(t, e, n) {
      var _this66 = this;

      return this.pn(t).next(function (s) {
        return s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.toTimestamp()), e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), _this66.In(t, s);
      });
    }
  }, {
    key: "addTargetData",
    value: function addTargetData(t, e) {
      var _this67 = this;

      return this.Tn(t, e).next(function () {
        return _this67.pn(t).next(function (n) {
          return n.targetCount += 1, _this67.En(e, n), _this67.In(t, n);
        });
      });
    }
  }, {
    key: "updateTargetData",
    value: function updateTargetData(t, e) {
      return this.Tn(t, e);
    }
  }, {
    key: "removeTargetData",
    value: function removeTargetData(t, e) {
      var _this68 = this;

      return this.removeMatchingKeysForTargetId(t, e.targetId).next(function () {
        return index_esm2017_Vr(t)["delete"](e.targetId);
      }).next(function () {
        return _this68.pn(t);
      }).next(function (e) {
        return dist_index_esm2017_U(e.targetCount > 0), e.targetCount -= 1, _this68.In(t, e);
      });
    }
    /**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */

  }, {
    key: "removeTargets",
    value: function removeTargets(t, e, n) {
      var _this69 = this;

      var s = 0;
      var i = [];
      return index_esm2017_Vr(t).Wt(function (r, o) {
        var u = Ui(o);
        u.sequenceNumber <= e && null === n.get(u.targetId) && (s++, i.push(_this69.removeTargetData(t, u)));
      }).next(function () {
        return yi.waitFor(i);
      }).next(function () {
        return s;
      });
    }
    /**
     * Call provided function with each `TargetData` that we have cached.
     */

  }, {
    key: "forEachTarget",
    value: function forEachTarget(t, e) {
      return index_esm2017_Vr(t).Wt(function (t, n) {
        var s = Ui(n);
        e(s);
      });
    }
  }, {
    key: "pn",
    value: function pn(t) {
      return index_esm2017_vr(t).get("targetGlobalKey").next(function (t) {
        return dist_index_esm2017_U(null !== t), t;
      });
    }
  }, {
    key: "In",
    value: function In(t, e) {
      return index_esm2017_vr(t).put("targetGlobalKey", e);
    }
  }, {
    key: "Tn",
    value: function Tn(t, e) {
      return index_esm2017_Vr(t).put(qi(this.M, e));
    }
    /**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */

  }, {
    key: "En",
    value: function En(t, e) {
      var n = !1;
      return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, n = !0), n;
    }
  }, {
    key: "getTargetCount",
    value: function getTargetCount(t) {
      return this.pn(t).next(function (t) {
        return t.targetCount;
      });
    }
  }, {
    key: "getTargetData",
    value: function getTargetData(t, e) {
      // Iterating by the canonicalId may yield more than one result because
      // canonicalId values are not required to be unique per target. This query
      // depends on the queryTargets index to be efficient.
      var n = index_esm2017_Ie(e),
          s = IDBKeyRange.bound([n, Number.NEGATIVE_INFINITY], [n, Number.POSITIVE_INFINITY]);
      var i = null;
      return index_esm2017_Vr(t).Wt({
        range: s,
        index: "queryTargetsIndex"
      }, function (t, n, s) {
        var r = Ui(n); // After finding a potential match, check that the target is
        // actually equal to the requested target.

        index_esm2017_Ee(e, r.target) && (i = r, s.done());
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "addMatchingKeys",
    value: function addMatchingKeys(t, e, n) {
      var _this70 = this;

      // PORTING NOTE: The reverse index (documentsTargets) is maintained by
      // IndexedDb.
      var s = [],
          i = index_esm2017_Sr(t);
      return e.forEach(function (e) {
        var r = Gs(e.path);
        s.push(i.put({
          targetId: n,
          path: r
        })), s.push(_this70.referenceDelegate.addReference(t, n, e));
      }), yi.waitFor(s);
    }
  }, {
    key: "removeMatchingKeys",
    value: function removeMatchingKeys(t, e, n) {
      var _this71 = this;

      // PORTING NOTE: The reverse index (documentsTargets) is maintained by
      // IndexedDb.
      var s = index_esm2017_Sr(t);
      return yi.forEach(e, function (e) {
        var i = Gs(e.path);
        return yi.waitFor([s["delete"]([n, i]), _this71.referenceDelegate.removeReference(t, n, e)]);
      });
    }
  }, {
    key: "removeMatchingKeysForTargetId",
    value: function removeMatchingKeysForTargetId(t, e) {
      var n = index_esm2017_Sr(t),
          s = IDBKeyRange.bound([e], [e + 1],
      /*lowerOpen=*/
      !1,
      /*upperOpen=*/
      !0);
      return n["delete"](s);
    }
  }, {
    key: "getMatchingKeysForTargetId",
    value: function getMatchingKeysForTargetId(t, e) {
      var n = IDBKeyRange.bound([e], [e + 1],
      /*lowerOpen=*/
      !1,
      /*upperOpen=*/
      !0),
          s = index_esm2017_Sr(t);
      var i = index_esm2017_Yn();
      return s.Wt({
        range: n,
        jt: !0
      }, function (t, e, n) {
        var s = Ws(t[1]),
            r = new index_esm2017_xt(s);
        i = i.add(r);
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "containsKey",
    value: function containsKey(t, e) {
      var n = Gs(e.path),
          s = IDBKeyRange.bound([n], [index_esm2017_ut(n)],
      /*lowerOpen=*/
      !1,
      /*upperOpen=*/
      !0);
      var i = 0;
      return index_esm2017_Sr(t).Wt({
        index: "documentTargetsIndex",
        jt: !0,
        range: s
      }, function (_ref5, n, s) {
        var _ref6 = dist_index_esm2017_slicedToArray(_ref5, 2),
            t = _ref6[0],
            e = _ref6[1];

        // Having a sentinel row for a document does not count as containing that document;
        // For the target cache, containing the document means the document is part of some
        // target.
        0 !== t && (i++, s.done());
      }).next(function () {
        return i > 0;
      });
    }
    /**
     * Looks up a TargetData entry by target ID.
     *
     * @param targetId - The target ID of the TargetData entry to look up.
     * @returns The cached TargetData entry, or null if the cache has no entry for
     * the target.
     */
    // PORTING NOTE: Multi-tab only.

  }, {
    key: "Et",
    value: function Et(t, e) {
      return index_esm2017_Vr(t).get(e).next(function (t) {
        return t ? Ui(t) : null;
      });
    }
  }]);

  return Pr;
}()));
/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */


function index_esm2017_Vr(t) {
  return Si(t, "targets");
}
/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */


function index_esm2017_vr(t) {
  return Si(t, "targetGlobal");
}
/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */


function index_esm2017_Sr(t) {
  return Si(t, "targetDocuments");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err - An error returned by a LocalStore operation.
 * @returns A Promise that resolves after we recovered, or the original error.
 */


function index_esm2017_Dr(_x6) {
  return _Dr.apply(this, arguments);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _Dr() {
  _Dr = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee70(t) {
    return regeneratorRuntime.wrap(function _callee70$(_context70) {
      while (1) {
        switch (_context70.prev = _context70.next) {
          case 0:
            if (!(t.code !== index_esm2017_G.FAILED_PRECONDITION || t.message !== mi)) {
              _context70.next = 2;
              break;
            }

            throw t;

          case 2:
            dist_index_esm2017_O("LocalStore", "Unexpectedly lost primary lease");

          case 3:
          case "end":
            return _context70.stop();
        }
      }
    }, _callee70);
  }));
  return _Dr.apply(this, arguments);
}

function index_esm2017_Cr(_ref7, _ref8) {
  var _ref9 = dist_index_esm2017_slicedToArray(_ref7, 2),
      t = _ref9[0],
      e = _ref9[1];

  var _ref10 = dist_index_esm2017_slicedToArray(_ref8, 2),
      n = _ref10[0],
      s = _ref10[1];

  var i = index_esm2017_rt(t, n);
  return 0 === i ? index_esm2017_rt(e, s) : i;
}
/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */


var index_esm2017_xr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function xr(t) {
    firestore_dist_index_esm2017_classCallCheck(this, xr);

    this.An = t, this.buffer = new index_esm2017_we(index_esm2017_Cr), this.Rn = 0;
  }

  firestore_dist_index_esm2017_createClass(xr, [{
    key: "bn",
    value: function bn() {
      return ++this.Rn;
    }
  }, {
    key: "Pn",
    value: function Pn(t) {
      var e = [t, this.bn()];
      if (this.buffer.size < this.An) this.buffer = this.buffer.add(e);else {
        var _t66 = this.buffer.last();

        index_esm2017_Cr(e, _t66) < 0 && (this.buffer = this.buffer["delete"](_t66).add(e));
      }
    }
  }, {
    key: "maxValue",
    get: function get() {
      // Guaranteed to be non-empty. If we decide we are not collecting any
      // sequence numbers, nthSequenceNumber below short-circuits. If we have
      // decided that we are collecting n sequence numbers, it's because n is some
      // percentage of the existing sequence numbers. That means we should never
      // be in a situation where we are collecting sequence numbers but don't
      // actually have any.
      return this.buffer.last()[0];
    }
  }]);

  return xr;
}()));
/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */


var index_esm2017_Nr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Nr(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Nr);

    this.garbageCollector = t, this.asyncQueue = e, this.Vn = !1, this.vn = null;
  }

  firestore_dist_index_esm2017_createClass(Nr, [{
    key: "start",
    value: function start(t) {
      -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.Sn(t);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.vn && (this.vn.cancel(), this.vn = null);
    }
  }, {
    key: "started",
    get: function get() {
      return null !== this.vn;
    }
  }, {
    key: "Sn",
    value: function Sn(t) {
      var _this72 = this;

      var e = this.Vn ? 3e5 : 6e4;
      dist_index_esm2017_O("LruGarbageCollector", "Garbage collection scheduled in ".concat(e, "ms")), this.vn = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection"
      /* LruGarbageCollection */
      , e, /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _this72.vn = null, _this72.Vn = !0;
                _context5.prev = 1;
                _context5.next = 4;
                return t.collectGarbage(_this72.garbageCollector);

              case 4:
                _context5.next = 14;
                break;

              case 6:
                _context5.prev = 6;
                _context5.t0 = _context5["catch"](1);

                if (!Ai(_context5.t0)) {
                  _context5.next = 12;
                  break;
                }

                dist_index_esm2017_O("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", _context5.t0);
                _context5.next = 14;
                break;

              case 12:
                _context5.next = 14;
                return index_esm2017_Dr(_context5.t0);

              case 14:
                _context5.next = 16;
                return _this72.Sn(t);

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[1, 6]]);
      })));
    }
  }]);

  return Nr;
}()));
/** Implements the steps for LRU garbage collection. */


var index_esm2017_kr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function kr(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, kr);

    this.Dn = t, this.params = e;
  }

  firestore_dist_index_esm2017_createClass(kr, [{
    key: "calculateTargetCount",
    value: function calculateTargetCount(t, e) {
      return this.Dn.Cn(t).next(function (t) {
        return Math.floor(e / 100 * t);
      });
    }
  }, {
    key: "nthSequenceNumber",
    value: function nthSequenceNumber(t, e) {
      var _this73 = this;

      if (0 === e) return yi.resolve(index_esm2017_nt.A);
      var n = new index_esm2017_xr(e);
      return this.Dn.forEachTarget(t, function (t) {
        return n.Pn(t.sequenceNumber);
      }).next(function () {
        return _this73.Dn.xn(t, function (t) {
          return n.Pn(t);
        });
      }).next(function () {
        return n.maxValue;
      });
    }
  }, {
    key: "removeTargets",
    value: function removeTargets(t, e, n) {
      return this.Dn.removeTargets(t, e, n);
    }
  }, {
    key: "removeOrphanedDocuments",
    value: function removeOrphanedDocuments(t, e) {
      return this.Dn.removeOrphanedDocuments(t, e);
    }
  }, {
    key: "collect",
    value: function collect(t, e) {
      var _this74 = this;

      return -1 === this.params.cacheSizeCollectionThreshold ? (dist_index_esm2017_O("LruGarbageCollector", "Garbage collection skipped; disabled"), yi.resolve(index_esm2017_mr)) : this.getCacheSize(t).next(function (n) {
        return n < _this74.params.cacheSizeCollectionThreshold ? (dist_index_esm2017_O("LruGarbageCollector", "Garbage collection skipped; Cache size ".concat(n, " is lower than threshold ").concat(_this74.params.cacheSizeCollectionThreshold)), index_esm2017_mr) : _this74.Nn(t, e);
      });
    }
  }, {
    key: "getCacheSize",
    value: function getCacheSize(t) {
      return this.Dn.getCacheSize(t);
    }
  }, {
    key: "Nn",
    value: function Nn(t, e) {
      var _this75 = this;

      var n, s, i, r, o, a, c;
      var h = Date.now();
      return this.calculateTargetCount(t, this.params.percentileToCollect).next(function (e) {
        return (// Cap at the configured max
          e > _this75.params.maximumSequenceNumbersToCollect ? (dist_index_esm2017_O("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of ".concat(_this75.params.maximumSequenceNumbersToCollect, " from ").concat(e)), s = _this75.params.maximumSequenceNumbersToCollect) : s = e, r = Date.now(), _this75.nthSequenceNumber(t, s)
        );
      }).next(function (s) {
        return n = s, o = Date.now(), _this75.removeTargets(t, n, e);
      }).next(function (e) {
        return i = e, a = Date.now(), _this75.removeOrphanedDocuments(t, n);
      }).next(function (t) {
        if (c = Date.now(), dist_index_esm2017_k() <= LogLevel.DEBUG) {
          dist_index_esm2017_O("LruGarbageCollector", "LRU Garbage Collection\n\tCounted targets in ".concat(r - h, "ms\n\tDetermined least recently used ").concat(s, " in ") + (o - r) + "ms\n" + "\tRemoved ".concat(i, " targets in ") + (a - o) + "ms\n" + "\tRemoved ".concat(t, " documents in ") + (c - a) + "ms\n" + "Total Duration: ".concat(c - h, "ms"));
        }

        return yi.resolve({
          didRun: !0,
          sequenceNumbersCollected: s,
          targetsRemoved: i,
          documentsRemoved: t
        });
      });
    }
  }]);

  return kr;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Provides LRU functionality for IndexedDB persistence. */


var Mr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Mr(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Mr);

    this.db = t, this.garbageCollector = function (t, e) {
      return new index_esm2017_kr(t, e);
    }(this, e);
  }

  firestore_dist_index_esm2017_createClass(Mr, [{
    key: "Cn",
    value: function Cn(t) {
      var e = this.kn(t);
      return this.db.getTargetCache().getTargetCount(t).next(function (t) {
        return e.next(function (e) {
          return t + e;
        });
      });
    }
  }, {
    key: "kn",
    value: function kn(t) {
      var e = 0;
      return this.xn(t, function (t) {
        e++;
      }).next(function () {
        return e;
      });
    }
  }, {
    key: "forEachTarget",
    value: function forEachTarget(t, e) {
      return this.db.getTargetCache().forEachTarget(t, e);
    }
  }, {
    key: "xn",
    value: function xn(t, e) {
      return this.Mn(t, function (t, n) {
        return e(n);
      });
    }
  }, {
    key: "addReference",
    value: function addReference(t, e, n) {
      return index_esm2017_Or(t, n);
    }
  }, {
    key: "removeReference",
    value: function removeReference(t, e, n) {
      return index_esm2017_Or(t, n);
    }
  }, {
    key: "removeTargets",
    value: function removeTargets(t, e, n) {
      return this.db.getTargetCache().removeTargets(t, e, n);
    }
  }, {
    key: "markPotentiallyOrphaned",
    value: function markPotentiallyOrphaned(t, e) {
      return index_esm2017_Or(t, e);
    }
    /**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */

  }, {
    key: "On",
    value: function On(t, e) {
      return function (t, e) {
        var n = !1;
        return index_esm2017_Rr(t).zt(function (s) {
          return index_esm2017_Tr(t, s, e).next(function (t) {
            return t && (n = !0), yi.resolve(!t);
          });
        }).next(function () {
          return n;
        });
      }(t, e);
    }
  }, {
    key: "removeOrphanedDocuments",
    value: function removeOrphanedDocuments(t, e) {
      var _this76 = this;

      var n = this.db.getRemoteDocumentCache().newChangeBuffer(),
          s = [];
      var i = 0;
      return this.Mn(t, function (r, o) {
        if (o <= e) {
          var _e33 = _this76.On(t, r).next(function (e) {
            if (!e) // Our size accounting requires us to read all documents before
              // removing them.
              return i++, n.getEntry(t, r).next(function () {
                return n.removeEntry(r, index_esm2017_ct.min()), index_esm2017_Sr(t)["delete"]([0, Gs(r.path)]);
              });
          });

          s.push(_e33);
        }
      }).next(function () {
        return yi.waitFor(s);
      }).next(function () {
        return n.apply(t);
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "removeTarget",
    value: function removeTarget(t, e) {
      var n = e.withSequenceNumber(t.currentSequenceNumber);
      return this.db.getTargetCache().updateTargetData(t, n);
    }
  }, {
    key: "updateLimboDocument",
    value: function updateLimboDocument(t, e) {
      return index_esm2017_Or(t, e);
    }
    /**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */

  }, {
    key: "Mn",
    value: function Mn(t, e) {
      var n = index_esm2017_Sr(t);
      var s,
          i = index_esm2017_nt.A;
      return n.Wt({
        index: "documentTargetsIndex"
      }, function (_ref12, _ref13) {
        var _ref14 = dist_index_esm2017_slicedToArray(_ref12, 2),
            t = _ref14[0],
            n = _ref14[1];

        var r = _ref13.path,
            o = _ref13.sequenceNumber;
        0 === t ? ( // if nextToReport is valid, report it, this is a new key so the
        // last one must not be a member of any targets.
        i !== index_esm2017_nt.A && e(new index_esm2017_xt(Ws(s)), i), // set nextToReport to be this sequence number. It's the next one we
        // might report, if we don't find any targets for this document.
        // Note that the sequence number must be defined when the targetId
        // is 0.
        i = o, s = r) : // set nextToReport to be invalid, we know we don't need to report
        // this one since we found a target for it.
        i = index_esm2017_nt.A;
      }).next(function () {
        // Since we report sequence numbers after getting to the next key, we
        // need to check if the last key we iterated over was an orphaned
        // document and report it.
        i !== index_esm2017_nt.A && e(new index_esm2017_xt(Ws(s)), i);
      });
    }
  }, {
    key: "getCacheSize",
    value: function getCacheSize(t) {
      return this.db.getRemoteDocumentCache().getSize(t);
    }
  }]);

  return Mr;
}()));

function index_esm2017_Or(t, e) {
  return index_esm2017_Sr(t).put(
  /**
  * @returns A value suitable for writing a sentinel row in the target-document
  * store.
  */
  function (t, e) {
    return {
      targetId: 0,
      path: Gs(t.path),
      sequenceNumber: e
    };
  }(e, t.currentSequenceNumber));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
 * It can be used to batch up a set of changes to be written to the cache, but
 * additionally supports reading entries back with the `getEntry()` method,
 * falling back to the underlying RemoteDocumentCache if no entry is
 * buffered.
 *
 * Entries added to the cache *must* be read first. This is to facilitate
 * calculating the size delta of the pending changes.
 *
 * PORTING NOTE: This class was implemented then removed from other platforms.
 * If byte-counting ends up being needed on the other platforms, consider
 * porting this class as part of that implementation work.
 */


var index_esm2017_Fr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Fr() {
    firestore_dist_index_esm2017_classCallCheck(this, Fr);

    // A mapping of document key to the new cache entry that should be written.
    this.changes = new index_esm2017_Kn(function (t) {
      return t.toString();
    }, function (t, e) {
      return t.isEqual(e);
    }), this.changesApplied = !1;
  }
  /**
   * Buffers a `RemoteDocumentCache.addEntry()` call.
   *
   * You can only modify documents that have already been retrieved via
   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
   */


  firestore_dist_index_esm2017_createClass(Fr, [{
    key: "addEntry",
    value: function addEntry(t) {
      this.assertNotApplied(), this.changes.set(t.key, t);
    }
    /**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */

  }, {
    key: "removeEntry",
    value: function removeEntry(t, e) {
      this.assertNotApplied(), this.changes.set(t, index_esm2017_ne.newInvalidDocument(t).setReadTime(e));
    }
    /**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document or an invalid document if we have nothing
     * cached.
     */

  }, {
    key: "getEntry",
    value: function getEntry(t, e) {
      this.assertNotApplied();
      var n = this.changes.get(e);
      return void 0 !== n ? yi.resolve(n) : this.getFromCache(t, e);
    }
    /**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys - The keys of the entries to look up.
     * @returns A map of cached documents, indexed by key. If an entry cannot be
     *     found, the corresponding key will be mapped to an invalid document.
     */

  }, {
    key: "getEntries",
    value: function getEntries(t, e) {
      return this.getAllFromCache(t, e);
    }
    /**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */

  }, {
    key: "apply",
    value: function apply(t) {
      return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
    }
    /** Helper to assert this.changes is not null  */

  }, {
    key: "assertNotApplied",
    value: function assertNotApplied() {}
  }]);

  return Fr;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newIndexedDbRemoteDocumentCache()`.
 */


var index_esm2017_$r = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function $r(t) {
    firestore_dist_index_esm2017_classCallCheck(this, $r);

    this.M = t;
  }

  firestore_dist_index_esm2017_createClass($r, [{
    key: "setIndexManager",
    value: function setIndexManager(t) {
      this.indexManager = t;
    }
    /**
     * Adds the supplied entries to the cache.
     *
     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */

  }, {
    key: "addEntry",
    value: function addEntry(t, e, n) {
      return index_esm2017_Ur(t).put(n);
    }
    /**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */

  }, {
    key: "removeEntry",
    value: function removeEntry(t, e, n) {
      return index_esm2017_Ur(t)["delete"](
      /**
      * Returns a key that can be used for document lookups via the primary key of
      * the DbRemoteDocument object store.
      */
      function (t, e) {
        var n = t.path.toArray();
        return [
        /* prefix path */
        n.slice(0, n.length - 2),
        /* collection id */
        n[n.length - 2], Fi(e),
        /* document id */
        n[n.length - 1]];
      }
      /**
      * Returns a key that can be used for document lookups on the
      * `DbRemoteDocumentDocumentCollectionGroupIndex` index.
      */
      (e, n));
    }
    /**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */

  }, {
    key: "updateMetadata",
    value: function updateMetadata(t, e) {
      var _this77 = this;

      return this.getMetadata(t).next(function (n) {
        return n.byteSize += e, _this77.Fn(t, n);
      });
    }
  }, {
    key: "getEntry",
    value: function getEntry(t, e) {
      var _this78 = this;

      var n = index_esm2017_ne.newInvalidDocument(e);
      return index_esm2017_Ur(t).Wt({
        index: "documentKeyIndex",
        range: IDBKeyRange.only(index_esm2017_qr(e))
      }, function (t, s) {
        n = _this78.$n(e, s);
      }).next(function () {
        return n;
      });
    }
    /**
     * Looks up an entry in the cache.
     *
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document entry and its size.
     */

  }, {
    key: "Bn",
    value: function Bn(t, e) {
      var _this79 = this;

      var n = {
        size: 0,
        document: index_esm2017_ne.newInvalidDocument(e)
      };
      return index_esm2017_Ur(t).Wt({
        index: "documentKeyIndex",
        range: IDBKeyRange.only(index_esm2017_qr(e))
      }, function (t, s) {
        n = {
          document: _this79.$n(e, s),
          size: index_esm2017_pr(s)
        };
      }).next(function () {
        return n;
      });
    }
  }, {
    key: "getEntries",
    value: function getEntries(t, e) {
      var _this80 = this;

      var n = index_esm2017_Qn();
      return this.Ln(t, e, function (t, e) {
        var s = _this80.$n(t, e);

        n = n.insert(t, s);
      }).next(function () {
        return n;
      });
    }
    /**
     * Looks up several entries in the cache.
     *
     * @param documentKeys - The set of keys entries to look up.
     * @returns A map of documents indexed by key and a map of sizes indexed by
     *     key (zero if the document does not exist).
     */

  }, {
    key: "Un",
    value: function Un(t, e) {
      var _this81 = this;

      var n = index_esm2017_Qn(),
          s = new index_esm2017_fe(index_esm2017_xt.comparator);
      return this.Ln(t, e, function (t, e) {
        var i = _this81.$n(t, e);

        n = n.insert(t, i), s = s.insert(t, index_esm2017_pr(e));
      }).next(function () {
        return {
          documents: n,
          qn: s
        };
      });
    }
  }, {
    key: "Ln",
    value: function Ln(t, e, n) {
      if (e.isEmpty()) return yi.resolve();
      var s = new index_esm2017_we(Gr);
      e.forEach(function (t) {
        return s = s.add(t);
      });
      var i = IDBKeyRange.bound(index_esm2017_qr(s.first()), index_esm2017_qr(s.last())),
          r = s.getIterator();
      var o = r.getNext();
      return index_esm2017_Ur(t).Wt({
        index: "documentKeyIndex",
        range: i
      }, function (t, e, s) {
        var i = index_esm2017_xt.fromSegments([].concat(dist_index_esm2017_toConsumableArray(e.prefixPath), [e.collectionGroup, e.documentId])); // Go through keys not found in cache.

        for (; o && Gr(o, i) < 0;) {
          n(o, null), o = r.getNext();
        }

        o && o.isEqual(i) && ( // Key found in cache.
        n(o, e), o = r.hasNext() ? r.getNext() : null), // Skip to the next key (if there is one).
        o ? s.Ut(index_esm2017_qr(o)) : s.done();
      }).next(function () {
        // The rest of the keys are not in the cache. One case where `iterate`
        // above won't go through them is when the cache is empty.
        for (; o;) {
          n(o, null), o = r.hasNext() ? r.getNext() : null;
        }
      });
    }
  }, {
    key: "getAllFromCollection",
    value: function getAllFromCollection(t, e, n) {
      var _this82 = this;

      var s = [e.popLast().toArray(), e.lastSegment(), Fi(n.readTime), n.documentKey.path.isEmpty() ? "" : n.documentKey.path.lastSegment()],
          i = [e.popLast().toArray(), e.lastSegment(), [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER], ""];
      return index_esm2017_Ur(t).qt(IDBKeyRange.bound(s, i, !0)).next(function (t) {
        var e = index_esm2017_Qn();

        var _iterator49 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
            _step49;

        try {
          for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
            var _n21 = _step49.value;

            var _t67 = _this82.$n(index_esm2017_xt.fromSegments(_n21.prefixPath.concat(_n21.collectionGroup, _n21.documentId)), _n21);

            e = e.insert(_t67.key, _t67);
          }
        } catch (err) {
          _iterator49.e(err);
        } finally {
          _iterator49.f();
        }

        return e;
      });
    }
  }, {
    key: "getAllFromCollectionGroup",
    value: function getAllFromCollectionGroup(t, e, n, s) {
      var _this83 = this;

      var i = index_esm2017_Qn();
      var r = Kr(e, n),
          o = Kr(e, index_esm2017_he.max());
      return index_esm2017_Ur(t).Wt({
        index: "collectionGroupIndex",
        range: IDBKeyRange.bound(r, o, !0)
      }, function (t, e, n) {
        var r = _this83.$n(index_esm2017_xt.fromSegments(e.prefixPath.concat(e.collectionGroup, e.documentId)), e);

        i = i.insert(r.key, r), i.size === s && n.done();
      }).next(function () {
        return i;
      });
    }
  }, {
    key: "newChangeBuffer",
    value: function newChangeBuffer(t) {
      return new Br(this, !!t && t.trackRemovals);
    }
  }, {
    key: "getSize",
    value: function getSize(t) {
      return this.getMetadata(t).next(function (t) {
        return t.byteSize;
      });
    }
  }, {
    key: "getMetadata",
    value: function getMetadata(t) {
      return index_esm2017_Lr(t).get("remoteDocumentGlobalKey").next(function (t) {
        return dist_index_esm2017_U(!!t), t;
      });
    }
  }, {
    key: "Fn",
    value: function Fn(t, e) {
      return index_esm2017_Lr(t).put("remoteDocumentGlobalKey", e);
    }
    /**
     * Decodes `dbRemoteDoc` and returns the document (or an invalid document if
     * the document corresponds to the format used for sentinel deletes).
     */

  }, {
    key: "$n",
    value: function $n(t, e) {
      if (e) {
        var _t68 = Mi(this.M, e); // Whether the document is a sentinel removal and should only be used in the
        // `getNewDocumentChanges()`


        if (!(_t68.isNoDocument() && _t68.version.isEqual(index_esm2017_ct.min()))) return _t68;
      }

      return index_esm2017_ne.newInvalidDocument(t);
    }
  }]);

  return $r;
}()));
/** Creates a new IndexedDbRemoteDocumentCache. */

/**
 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
 *
 * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
 * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
 * when we apply the changes.
 */


var Br = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Fr) {
  firestore_dist_index_esm2017_inherits(Br, _Fr);

  var _super22 = firestore_dist_index_esm2017_createSuper(Br);

  /**
   * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
   * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
   * `getNewDocumentChanges()`.
   */
  function Br(t, e) {
    var _this84;

    firestore_dist_index_esm2017_classCallCheck(this, Br);

    _this84 = _super22.call(this), _this84.Kn = t, _this84.trackRemovals = e, // A map of document sizes and read times prior to applying the changes in
    // this buffer.
    _this84.Gn = new index_esm2017_Kn(function (t) {
      return t.toString();
    }, function (t, e) {
      return t.isEqual(e);
    });
    return _this84;
  }

  firestore_dist_index_esm2017_createClass(Br, [{
    key: "applyChanges",
    value: function applyChanges(t) {
      var _this85 = this;

      var e = [];
      var n = 0,
          s = new index_esm2017_we(function (t, e) {
        return index_esm2017_rt(t.canonicalString(), e.canonicalString());
      });
      return this.changes.forEach(function (i, r) {
        var o = _this85.Gn.get(i);

        if (e.push(_this85.Kn.removeEntry(t, i, o.readTime)), r.isValidDocument()) {
          var u = Oi(_this85.Kn.M, r);
          s = s.add(i.path.popLast());
          var a = index_esm2017_pr(u);
          n += a - o.size, e.push(_this85.Kn.addEntry(t, i, u));
        } else if (n -= o.size, _this85.trackRemovals) {
          // In order to track removals, we store a "sentinel delete" in the
          // RemoteDocumentCache. This entry is represented by a NoDocument
          // with a version of 0 and ignored by `maybeDecodeDocument()` but
          // preserved in `getNewDocumentChanges()`.
          var _n22 = Oi(_this85.Kn.M, r.convertToNoDocument(index_esm2017_ct.min()));

          e.push(_this85.Kn.addEntry(t, i, _n22));
        }
      }), s.forEach(function (n) {
        e.push(_this85.Kn.indexManager.addToCollectionParentIndex(t, n));
      }), e.push(this.Kn.updateMetadata(t, n)), yi.waitFor(e);
    }
  }, {
    key: "getFromCache",
    value: function getFromCache(t, e) {
      var _this86 = this;

      // Record the size of everything we load from the cache so we can compute a delta later.
      return this.Kn.Bn(t, e).next(function (t) {
        return _this86.Gn.set(e, {
          size: t.size,
          readTime: t.document.readTime
        }), t.document;
      });
    }
  }, {
    key: "getAllFromCache",
    value: function getAllFromCache(t, e) {
      var _this87 = this;

      // Record the size of everything we load from the cache so we can compute
      // a delta later.
      return this.Kn.Un(t, e).next(function (_ref15) {
        var t = _ref15.documents,
            e = _ref15.qn;
        return (// Note: `getAllFromCache` returns two maps instead of a single map from
          // keys to `DocumentSizeEntry`s. This is to allow returning the
          // `MutableDocumentMap` directly, without a conversion.
          e.forEach(function (e, n) {
            _this87.Gn.set(e, {
              size: n,
              readTime: t.get(e).readTime
            });
          }), t
        );
      });
    }
  }]);

  return Br;
}(index_esm2017_Fr)));

function index_esm2017_Lr(t) {
  return Si(t, "remoteDocumentGlobal");
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */


function index_esm2017_Ur(t) {
  return Si(t, "remoteDocumentsV14");
}
/**
 * Returns a key that can be used for document lookups on the
 * `DbRemoteDocumentDocumentKeyIndex` index.
 */


function index_esm2017_qr(t) {
  var e = t.path.toArray();
  return [
  /* prefix path */
  e.slice(0, e.length - 2),
  /* collection id */
  e[e.length - 2],
  /* document id */
  e[e.length - 1]];
}

function Kr(t, e) {
  var n = e.documentKey.path.toArray();
  return [
  /* collection id */
  t, Fi(e.readTime),
  /* prefix path */
  n.slice(0, n.length - 2),
  /* document id */
  n.length > 0 ? n[n.length - 1] : ""];
}
/**
 * Comparator that compares document keys according to the primary key sorting
 * used by the `DbRemoteDocumentDocument` store (by prefix path, collection id
 * and then document ID).
 *
 * Visible for testing.
 */


function Gr(t, e) {
  var n = t.path.toArray(),
      s = e.path.toArray(); // The ordering is based on https://chromium.googlesource.com/chromium/blink/+/fe5c21fef94dae71c1c3344775b8d8a7f7e6d9ec/Source/modules/indexeddb/IDBKey.cpp#74

  var i = 0;

  for (var _t69 = 0; _t69 < n.length - 2 && _t69 < s.length - 2; ++_t69) {
    if (i = index_esm2017_rt(n[_t69], s[_t69]), i) return i;
  }

  return i = index_esm2017_rt(n.length, s.length), i || (i = index_esm2017_rt(n[n.length - 2], s[s.length - 2]), i || index_esm2017_rt(n[n.length - 1], s[s.length - 1]));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO(indexing): Remove this constant

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Performs database creation and schema upgrades. */


var Qr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Qr(t) {
    firestore_dist_index_esm2017_classCallCheck(this, Qr);

    this.M = t;
  }
  /**
   * Performs database creation and schema upgrades.
   *
   * Note that in production, this method is only ever used to upgrade the schema
   * to SCHEMA_VERSION. Different values of toVersion are only used for testing
   * and local feature development.
   */


  firestore_dist_index_esm2017_createClass(Qr, [{
    key: "kt",
    value: function kt(t, e, n, s) {
      var _this88 = this;

      var i = new pi("createOrUpgrade", e);
      n < 1 && s >= 1 && (function (t) {
        t.createObjectStore("owner");
      }(t), function (t) {
        t.createObjectStore("mutationQueues", {
          keyPath: "userId"
        });
        t.createObjectStore("mutations", {
          keyPath: "batchId",
          autoIncrement: !0
        }).createIndex("userMutationsIndex", zs, {
          unique: !0
        }), t.createObjectStore("documentMutations");
      }
      /**
      * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
      * and rewrites all data.
      */
      (t), index_esm2017_jr(t), function (t) {
        t.createObjectStore("remoteDocuments");
      }(t)); // Migration 2 to populate the targetGlobal object no longer needed since
      // migration 3 unconditionally clears it.

      var r = yi.resolve();
      return n < 3 && s >= 3 && ( // Brand new clients don't need to drop and recreate--only clients that
      // potentially have corrupt data.
      0 !== n && (!function (t) {
        t.deleteObjectStore("targetDocuments"), t.deleteObjectStore("targets"), t.deleteObjectStore("targetGlobal");
      }(t), index_esm2017_jr(t)), r = r.next(function () {
        return (
          /**
          * Creates the target global singleton row.
          *
          * @param txn - The version upgrade transaction for indexeddb
          */
          function (t) {
            var e = t.store("targetGlobal"),
                n = {
              highestTargetId: 0,
              highestListenSequenceNumber: 0,
              lastRemoteSnapshotVersion: index_esm2017_ct.min().toTimestamp(),
              targetCount: 0
            };
            return e.put("targetGlobalKey", n);
          }(i)
        );
      })), n < 4 && s >= 4 && (0 !== n && ( // Schema version 3 uses auto-generated keys to generate globally unique
      // mutation batch IDs (this was previously ensured internally by the
      // client). To migrate to the new schema, we have to read all mutations
      // and write them back out. We preserve the existing batch IDs to guarantee
      // consistency with other object stores. Any further mutation batch IDs will
      // be auto-generated.
      r = r.next(function () {
        return function (t, e) {
          return e.store("mutations").qt().next(function (n) {
            t.deleteObjectStore("mutations");
            t.createObjectStore("mutations", {
              keyPath: "batchId",
              autoIncrement: !0
            }).createIndex("userMutationsIndex", zs, {
              unique: !0
            });
            var s = e.store("mutations"),
                i = n.map(function (t) {
              return s.put(t);
            });
            return yi.waitFor(i);
          });
        }(t, i);
      })), r = r.next(function () {
        !function (t) {
          t.createObjectStore("clientMetadata", {
            keyPath: "clientId"
          });
        }(t);
      })), n < 5 && s >= 5 && (r = r.next(function () {
        return _this88.Qn(i);
      })), n < 6 && s >= 6 && (r = r.next(function () {
        return function (t) {
          t.createObjectStore("remoteDocumentGlobal");
        }(t), _this88.jn(i);
      })), n < 7 && s >= 7 && (r = r.next(function () {
        return _this88.Wn(i);
      })), n < 8 && s >= 8 && (r = r.next(function () {
        return _this88.zn(t, i);
      })), n < 9 && s >= 9 && (r = r.next(function () {
        // Multi-Tab used to manage its own changelog, but this has been moved
        // to the DbRemoteDocument object store itself. Since the previous change
        // log only contained transient data, we can drop its object store.
        !function (t) {
          t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
        }(t); // Note: Schema version 9 used to create a read time index for the
        // RemoteDocumentCache. This is now done with schema version 13.
      })), n < 10 && s >= 10 && (r = r.next(function () {
        return _this88.Hn(i);
      })), n < 11 && s >= 11 && (r = r.next(function () {
        !function (t) {
          t.createObjectStore("bundles", {
            keyPath: "bundleId"
          });
        }(t), function (t) {
          t.createObjectStore("namedQueries", {
            keyPath: "name"
          });
        }(t);
      })), n < 12 && s >= 12 && (r = r.next(function () {
        !function (t) {
          var e = t.createObjectStore("documentOverlays", {
            keyPath: ci
          });
          e.createIndex("collectionPathOverlayIndex", hi, {
            unique: !1
          }), e.createIndex("collectionGroupOverlayIndex", li, {
            unique: !1
          });
        }(t);
      })), n < 13 && s >= 13 && (r = r.next(function () {
        return function (t) {
          var e = t.createObjectStore("remoteDocumentsV14", {
            keyPath: Xs
          });
          e.createIndex("documentKeyIndex", Zs), e.createIndex("collectionGroupIndex", ti);
        }(t);
      }).next(function () {
        return _this88.Jn(t, i);
      }).next(function () {
        return t.deleteObjectStore("remoteDocuments");
      })), n < 14 && s >= 14 && (r = r.next(function () {
        !function (t) {
          t.createObjectStore("indexConfiguration", {
            keyPath: "indexId",
            autoIncrement: !0
          }).createIndex("collectionGroupIndex", "collectionGroup", {
            unique: !1
          });
          t.createObjectStore("indexState", {
            keyPath: ri
          }).createIndex("sequenceNumberIndex", oi, {
            unique: !1
          });
          t.createObjectStore("indexEntries", {
            keyPath: ui
          }).createIndex("documentKeyIndex", ai, {
            unique: !1
          });
        }(t);
      })), r;
    }
  }, {
    key: "jn",
    value: function jn(t) {
      var e = 0;
      return t.store("remoteDocuments").Wt(function (t, n) {
        e += index_esm2017_pr(n);
      }).next(function () {
        var n = {
          byteSize: e
        };
        return t.store("remoteDocumentGlobal").put("remoteDocumentGlobalKey", n);
      });
    }
  }, {
    key: "Qn",
    value: function Qn(t) {
      var _this89 = this;

      var e = t.store("mutationQueues"),
          n = t.store("mutations");
      return e.qt().next(function (e) {
        return yi.forEach(e, function (e) {
          var s = IDBKeyRange.bound([e.userId, -1], [e.userId, e.lastAcknowledgedBatchId]);
          return n.qt("userMutationsIndex", s).next(function (n) {
            return yi.forEach(n, function (n) {
              dist_index_esm2017_U(n.userId === e.userId);
              var s = Li(_this89.M, n);
              return index_esm2017_yr(t, e.userId, s).next(function () {});
            });
          });
        });
      });
    }
    /**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */

  }, {
    key: "Wn",
    value: function Wn(t) {
      var e = t.store("targetDocuments"),
          n = t.store("remoteDocuments");
      return t.store("targetGlobal").get("targetGlobalKey").next(function (t) {
        var s = [];
        return n.Wt(function (n, i) {
          var r = new index_esm2017_t(n),
              o = function (t) {
            return [0, Gs(t)];
          }(r);

          s.push(e.get(o).next(function (n) {
            return n ? yi.resolve() : function (n) {
              return e.put({
                targetId: 0,
                path: Gs(n),
                sequenceNumber: t.highestListenSequenceNumber
              });
            }(r);
          }));
        }).next(function () {
          return yi.waitFor(s);
        });
      });
    }
  }, {
    key: "zn",
    value: function zn(t, e) {
      // Create the index.
      t.createObjectStore("collectionParents", {
        keyPath: ii
      });

      var n = e.store("collectionParents"),
          s = new index_esm2017_cr(),
          i = function i(t) {
        if (s.add(t)) {
          var _e34 = t.lastSegment(),
              _s18 = t.popLast();

          return n.put({
            collectionId: _e34,
            parent: Gs(_s18)
          });
        }
      }; // Helper to add an index entry iff we haven't already written it.
      // Index existing remote documents.


      return e.store("remoteDocuments").Wt({
        jt: !0
      }, function (t, e) {
        var n = new index_esm2017_t(t);
        return i(n.popLast());
      }).next(function () {
        return e.store("documentMutations").Wt({
          jt: !0
        }, function (_ref16, s) {
          var _ref17 = dist_index_esm2017_slicedToArray(_ref16, 3),
              t = _ref17[0],
              e = _ref17[1],
              n = _ref17[2];

          var r = Ws(e);
          return i(r.popLast());
        });
      });
    }
  }, {
    key: "Hn",
    value: function Hn(t) {
      var _this90 = this;

      var e = t.store("targets");
      return e.Wt(function (t, n) {
        var s = Ui(n),
            i = qi(_this90.M, s);
        return e.put(i);
      });
    }
  }, {
    key: "Jn",
    value: function Jn(t, e) {
      var n = e.store("remoteDocuments"),
          s = [];
      return n.Wt(function (t, n) {
        var i = e.store("remoteDocumentsV14"),
            r = (o = n, o.document ? new index_esm2017_xt(index_esm2017_t.fromString(o.document.name).popFirst(5)) : o.noDocument ? index_esm2017_xt.fromSegments(o.noDocument.path) : o.unknownDocument ? index_esm2017_xt.fromSegments(o.unknownDocument.path) : dist_index_esm2017_L()).path.toArray();
        var o;
        /**
        * @license
        * Copyright 2017 Google LLC
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *   http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */

        var u = {
          prefixPath: r.slice(0, r.length - 2),
          collectionGroup: r[r.length - 2],
          documentId: r[r.length - 1],
          readTime: n.readTime || [0, 0],
          unknownDocument: n.unknownDocument,
          noDocument: n.noDocument,
          document: n.document,
          hasCommittedMutations: !!n.hasCommittedMutations
        };
        s.push(i.put(u));
      }).next(function () {
        return yi.waitFor(s);
      });
    }
  }]);

  return Qr;
}()));

function index_esm2017_jr(t) {
  t.createObjectStore("targetDocuments", {
    keyPath: ni
  }).createIndex("documentTargetsIndex", si, {
    unique: !0
  }); // NOTE: This is unique only because the TargetId is the suffix.

  t.createObjectStore("targets", {
    keyPath: "targetId"
  }).createIndex("queryTargetsIndex", ei, {
    unique: !0
  }), t.createObjectStore("targetGlobal");
}

var Wr = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data is garbage collected.
 */

/**
 * An IndexedDB-backed instance of Persistence. Data is stored persistently
 * across sessions.
 *
 * On Web only, the Firestore SDKs support shared access to its persistence
 * layer. This allows multiple browser tabs to read and write to IndexedDb and
 * to synchronize state even without network connectivity. Shared access is
 * currently optional and not enabled unless all clients invoke
 * `enablePersistence()` with `{synchronizeTabs:true}`.
 *
 * In multi-tab mode, if multiple clients are active at the same time, the SDK
 * will designate one client as the “primary client”. An effort is made to pick
 * a visible, network-connected and active client, and this client is
 * responsible for letting other clients know about its presence. The primary
 * client writes a unique client-generated identifier (the client ID) to
 * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
 * update this entry, another client can acquire the lease and take over as
 * primary.
 *
 * Some persistence operations in the SDK are designated as primary-client only
 * operations. This includes the acknowledgment of mutations and all updates of
 * remote documents. The effects of these operations are written to persistence
 * and then broadcast to other tabs via LocalStorage (see
 * `WebStorageSharedClientState`), which then refresh their state from
 * persistence.
 *
 * Similarly, the primary client listens to notifications sent by secondary
 * clients to discover persistence changes written by secondary clients, such as
 * the addition of new mutations and query targets.
 *
 * If multi-tab is not enabled and another tab already obtained the primary
 * lease, IndexedDbPersistence enters a failed state and all subsequent
 * operations will automatically fail.
 *
 * Additionally, there is an optimization so that when a tab is closed, the
 * primary lease is released immediately (this is especially important to make
 * sure that a refreshed tab is able to immediately re-acquire the primary
 * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
 * since it is an asynchronous API. So in addition to attempting to give up the
 * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
 * LocalStorage which acts as an indicator that another tab should go ahead and
 * take the primary lease immediately regardless of the current lease timestamp.
 *
 * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
 * longer optional.
 */

var zr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function zr(
  /**
   * Whether to synchronize the in-memory state of multiple tabs and share
   * access to local persistence.
   */
  t, e, n, s, i, r, o, u, a,
  /**
   * If set to true, forcefully obtains database access. Existing tabs will
   * no longer be able to access IndexedDB.
   */
  c) {
    var h = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 13;

    firestore_dist_index_esm2017_classCallCheck(this, zr);

    if (this.allowTabSynchronization = t, this.persistenceKey = e, this.clientId = n, this.Yn = i, this.window = r, this.document = o, this.Xn = a, this.Zn = c, this.ts = h, this.es = null, this.ns = !1, this.isPrimary = !1, this.networkEnabled = !0,
    /** Our window.unload handler, if registered. */
    this.ss = null, this.inForeground = !1,
    /** Our 'visibilitychange' listener if registered. */
    this.rs = null,
    /** The client metadata refresh task. */
    this.os = null,
    /** The last time we garbage collected the client metadata object store. */
    this.us = Number.NEGATIVE_INFINITY,
    /** A listener to notify on primary state changes. */
    this.cs = function (t) {
      return Promise.resolve();
    }, !zr.vt()) throw new dist_index_esm2017_Q(index_esm2017_G.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
    this.referenceDelegate = new Mr(this, s), this.hs = e + "main", this.M = new ki(u), this.ls = new Ii(this.hs, this.ts, new Qr(this.M)), this.fs = new index_esm2017_Pr(this.referenceDelegate, this.M), this.ds = function (t) {
      return new index_esm2017_$r(t);
    }(this.M), this._s = new ji(), this.window && this.window.localStorage ? this.ws = this.window.localStorage : (this.ws = null, !1 === c && dist_index_esm2017_F("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
  }
  /**
   * Attempt to start IndexedDb persistence.
   *
   * @returns Whether persistence was enabled.
   */


  firestore_dist_index_esm2017_createClass(zr, [{
    key: "start",
    value: function start() {
      var _this91 = this;

      // NOTE: This is expected to fail sometimes (in the case of another tab
      // already having the persistence lock), so it's the first thing we should
      // do.
      return this.gs().then(function () {
        if (!_this91.isPrimary && !_this91.allowTabSynchronization) // Fail `start()` if `synchronizeTabs` is disabled and we cannot
          // obtain the primary lease.
          throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, Wr);
        return _this91.ys(), _this91.ps(), _this91.Is(), _this91.runTransaction("getHighestListenSequenceNumber", "readonly", function (t) {
          return _this91.fs.getHighestSequenceNumber(t);
        });
      }).then(function (t) {
        _this91.es = new index_esm2017_nt(t, _this91.Xn);
      }).then(function () {
        _this91.ns = !0;
      })["catch"](function (t) {
        return _this91.ls && _this91.ls.close(), Promise.reject(t);
      });
    }
    /**
     * Registers a listener that gets called when the primary state of the
     * instance changes. Upon registering, this listener is invoked immediately
     * with the current primary state.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */

  }, {
    key: "Ts",
    value: function Ts(t) {
      var _this92 = this;

      return this.cs = /*#__PURE__*/function () {
        var _ref18 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(e) {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (!_this92.started) {
                    _context6.next = 2;
                    break;
                  }

                  return _context6.abrupt("return", t(e));

                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        return function (_x7) {
          return _ref18.apply(this, arguments);
        };
      }(), t(this.isPrimary);
    }
    /**
     * Registers a listener that gets called when the database receives a
     * version change event indicating that it has deleted.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */

  }, {
    key: "setDatabaseDeletedListener",
    value: function setDatabaseDeletedListener(t) {
      this.ls.Ot( /*#__PURE__*/function () {
        var _ref19 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e) {
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.t0 = null === e.newVersion;

                  if (!_context7.t0) {
                    _context7.next = 4;
                    break;
                  }

                  _context7.next = 4;
                  return t();

                case 4:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7);
        }));

        return function (_x8) {
          return _ref19.apply(this, arguments);
        };
      }());
    }
    /**
     * Adjusts the current network state in the client's metadata, potentially
     * affecting the primary lease.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */

  }, {
    key: "setNetworkEnabled",
    value: function setNetworkEnabled(t) {
      var _this93 = this;

      this.networkEnabled !== t && (this.networkEnabled = t, // Schedule a primary lease refresh for immediate execution. The eventual
      // lease update will be propagated via `primaryStateListener`.
      this.Yn.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.t0 = _this93.started;

                if (!_context8.t0) {
                  _context8.next = 4;
                  break;
                }

                _context8.next = 4;
                return _this93.gs();

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }))));
    }
    /**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */

  }, {
    key: "gs",
    value: function gs() {
      var _this94 = this;

      return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function (t) {
        return Jr(t).put({
          clientId: _this94.clientId,
          updateTimeMs: Date.now(),
          networkEnabled: _this94.networkEnabled,
          inForeground: _this94.inForeground
        }).next(function () {
          if (_this94.isPrimary) return _this94.Es(t).next(function (t) {
            t || (_this94.isPrimary = !1, _this94.Yn.enqueueRetryable(function () {
              return _this94.cs(!1);
            }));
          });
        }).next(function () {
          return _this94.As(t);
        }).next(function (e) {
          return _this94.isPrimary && !e ? _this94.Rs(t).next(function () {
            return !1;
          }) : !!e && _this94.bs(t).next(function () {
            return !0;
          });
        });
      })["catch"](function (t) {
        if (Ai(t)) // Proceed with the existing state. Any subsequent access to
          // IndexedDB will verify the lease.
          return dist_index_esm2017_O("IndexedDbPersistence", "Failed to extend owner lease: ", t), _this94.isPrimary;
        if (!_this94.allowTabSynchronization) throw t;
        return dist_index_esm2017_O("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t),
        /* isPrimary= */
        !1;
      }).then(function (t) {
        _this94.isPrimary !== t && _this94.Yn.enqueueRetryable(function () {
          return _this94.cs(t);
        }), _this94.isPrimary = t;
      });
    }
  }, {
    key: "Es",
    value: function Es(t) {
      var _this95 = this;

      return Hr(t).get("owner").next(function (t) {
        return yi.resolve(_this95.Ps(t));
      });
    }
  }, {
    key: "Vs",
    value: function Vs(t) {
      return Jr(t)["delete"](this.clientId);
    }
    /**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */

  }, {
    key: "vs",
    value: function () {
      var _vs = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var _this96 = this;

        var t, _iterator50, _step50, e;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(this.isPrimary && !this.Ss(this.us, 18e5))) {
                  _context9.next = 6;
                  break;
                }

                this.us = Date.now();
                _context9.next = 4;
                return this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function (t) {
                  var e = Si(t, "clientMetadata");
                  return e.qt().next(function (t) {
                    var n = _this96.Ds(t, 18e5),
                        s = t.filter(function (t) {
                      return -1 === n.indexOf(t);
                    }); // Delete metadata for clients that are no longer considered active.


                    // Delete metadata for clients that are no longer considered active.
                    return yi.forEach(s, function (t) {
                      return e["delete"](t.clientId);
                    }).next(function () {
                      return s;
                    });
                  });
                })["catch"](function () {
                  return [];
                });

              case 4:
                t = _context9.sent;

                // Delete potential leftover entries that may continue to mark the
                // inactive clients as zombied in LocalStorage.
                // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                // the client atomically, but we can't. So we opt to delete the IndexedDb
                // entries first to avoid potentially reviving a zombied client.
                if (this.ws) {
                  _iterator50 = firestore_dist_index_esm2017_createForOfIteratorHelper(t);

                  try {
                    for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
                      e = _step50.value;
                      this.ws.removeItem(this.Cs(e.clientId));
                    }
                  } catch (err) {
                    _iterator50.e(err);
                  } finally {
                    _iterator50.f();
                  }
                }

              case 6:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function vs() {
        return _vs.apply(this, arguments);
      }

      return vs;
    }()
    /**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */

  }, {
    key: "Is",
    value: function Is() {
      var _this97 = this;

      this.os = this.Yn.enqueueAfterDelay("client_metadata_refresh"
      /* ClientMetadataRefresh */
      , 4e3, function () {
        return _this97.gs().then(function () {
          return _this97.vs();
        }).then(function () {
          return _this97.Is();
        });
      });
    }
    /** Checks whether `client` is the local client. */

  }, {
    key: "Ps",
    value: function Ps(t) {
      return !!t && t.ownerId === this.clientId;
    }
    /**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */

  }, {
    key: "As",
    value: function As(t) {
      var _this98 = this;

      if (this.Zn) return yi.resolve(!0);
      return Hr(t).get("owner").next(function (e) {
        // A client is eligible for the primary lease if:
        // - its network is enabled and the client's tab is in the foreground.
        // - its network is enabled and no other client's tab is in the
        //   foreground.
        // - every clients network is disabled and the client's tab is in the
        //   foreground.
        // - every clients network is disabled and no other client's tab is in
        //   the foreground.
        // - the `forceOwningTab` setting was passed in.
        if (null !== e && _this98.Ss(e.leaseTimestampMs, 5e3) && !_this98.xs(e.ownerId)) {
          if (_this98.Ps(e) && _this98.networkEnabled) return !0;

          if (!_this98.Ps(e)) {
            if (!e.allowTabSynchronization) // Fail the `canActAsPrimary` check if the current leaseholder has
              // not opted into multi-tab synchronization. If this happens at
              // client startup, we reject the Promise returned by
              // `enablePersistence()` and the user can continue to use Firestore
              // with in-memory persistence.
              // If this fails during a lease refresh, we will instead block the
              // AsyncQueue from executing further operations. Note that this is
              // acceptable since mixing & matching different `synchronizeTabs`
              // settings is not supported.
              // TODO(b/114226234): Remove this check when `synchronizeTabs` can
              // no longer be turned off.
              throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, Wr);
            return !1;
          }
        }

        return !(!_this98.networkEnabled || !_this98.inForeground) || Jr(t).qt().next(function (t) {
          return void 0 === _this98.Ds(t, 5e3).find(function (t) {
            if (_this98.clientId !== t.clientId) {
              var _e35 = !_this98.networkEnabled && t.networkEnabled,
                  n = !_this98.inForeground && t.inForeground,
                  s = _this98.networkEnabled === t.networkEnabled;

              if (_e35 || n && s) return !0;
            }

            return !1;
          });
        });
      }).next(function (t) {
        return _this98.isPrimary !== t && dist_index_esm2017_O("IndexedDbPersistence", "Client ".concat(t ? "is" : "is not", " eligible for a primary lease.")), t;
      });
    }
  }, {
    key: "shutdown",
    value: function () {
      var _shutdown = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        var _this99 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.ns = !1;
                this.Ns();
                this.os && (this.os.cancel(), this.os = null);
                this.ks();
                this.Ms();
                _context10.next = 7;
                return this.ls.runTransaction("shutdown", "readwrite", ["owner", "clientMetadata"], function (t) {
                  var e = new vi(t, index_esm2017_nt.A);
                  return _this99.Rs(e).next(function () {
                    return _this99.Vs(e);
                  });
                });

              case 7:
                this.ls.close();
                // Remove the entry marking the client as zombied from LocalStorage since
                // we successfully deleted its metadata from IndexedDb.
                this.Os();

              case 9:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function shutdown() {
        return _shutdown.apply(this, arguments);
      }

      return shutdown;
    }()
    /**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */

  }, {
    key: "Ds",
    value: function Ds(t, e) {
      var _this100 = this;

      return t.filter(function (t) {
        return _this100.Ss(t.updateTimeMs, e) && !_this100.xs(t.clientId);
      });
    }
    /**
     * Returns the IDs of the clients that are currently active. If multi-tab
     * is not supported, returns an array that only contains the local client's
     * ID.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */

  }, {
    key: "Fs",
    value: function Fs() {
      var _this101 = this;

      return this.runTransaction("getActiveClients", "readonly", function (t) {
        return Jr(t).qt().next(function (t) {
          return _this101.Ds(t, 18e5).map(function (t) {
            return t.clientId;
          });
        });
      });
    }
  }, {
    key: "started",
    get: function get() {
      return this.ns;
    }
  }, {
    key: "getMutationQueue",
    value: function getMutationQueue(t, e) {
      return index_esm2017_Ir.Yt(t, this.M, e, this.referenceDelegate);
    }
  }, {
    key: "getTargetCache",
    value: function getTargetCache() {
      return this.fs;
    }
  }, {
    key: "getRemoteDocumentCache",
    value: function getRemoteDocumentCache() {
      return this.ds;
    }
  }, {
    key: "getIndexManager",
    value: function getIndexManager(t) {
      return new index_esm2017_lr(t, this.M.Jt.databaseId);
    }
  }, {
    key: "getDocumentOverlayCache",
    value: function getDocumentOverlayCache(t) {
      return Hi.Yt(this.M, t);
    }
  }, {
    key: "getBundleCache",
    value: function getBundleCache() {
      return this._s;
    }
  }, {
    key: "runTransaction",
    value: function runTransaction(t, e, n) {
      var _this102 = this;

      dist_index_esm2017_O("IndexedDbPersistence", "Starting transaction:", t);
      var s = "readonly" === e ? "readonly" : "readwrite",
          i = 14 === (r = this.ts) ? wi : 13 === r ? _i : 12 === r ? di : 11 === r ? fi : void dist_index_esm2017_L();
      /** Returns the object stores for the provided schema. */

      var r;
      var o; // Do all transactions as readwrite against all object stores, since we
      // are the only reader/writer.

      return this.ls.runTransaction(t, s, i, function (s) {
        return o = new vi(s, _this102.es ? _this102.es.next() : index_esm2017_nt.A), "readwrite-primary" === e ? _this102.Es(o).next(function (t) {
          return !!t || _this102.As(o);
        }).next(function (e) {
          if (!e) throw dist_index_esm2017_F("Failed to obtain primary lease for action '".concat(t, "'.")), _this102.isPrimary = !1, _this102.Yn.enqueueRetryable(function () {
            return _this102.cs(!1);
          }), new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, mi);
          return n(o);
        }).next(function (t) {
          return _this102.bs(o).next(function () {
            return t;
          });
        }) : _this102.$s(o).next(function () {
          return n(o);
        });
      }).then(function (t) {
        return o.raiseOnCommittedEvent(), t;
      });
    }
    /**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */
    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
    // be turned off.

  }, {
    key: "$s",
    value: function $s(t) {
      var _this103 = this;

      return Hr(t).get("owner").next(function (t) {
        if (null !== t && _this103.Ss(t.leaseTimestampMs, 5e3) && !_this103.xs(t.ownerId) && !_this103.Ps(t) && !(_this103.Zn || _this103.allowTabSynchronization && t.allowTabSynchronization)) throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, Wr);
      });
    }
    /**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */

  }, {
    key: "bs",
    value: function bs(t) {
      var e = {
        ownerId: this.clientId,
        allowTabSynchronization: this.allowTabSynchronization,
        leaseTimestampMs: Date.now()
      };
      return Hr(t).put("owner", e);
    }
  }, {
    key: "Rs",
    value:
    /** Checks the primary lease and removes it if we are the current primary. */
    function Rs(t) {
      var _this104 = this;

      var e = Hr(t);
      return e.get("owner").next(function (t) {
        return _this104.Ps(t) ? (dist_index_esm2017_O("IndexedDbPersistence", "Releasing primary lease."), e["delete"]("owner")) : yi.resolve();
      });
    }
    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */

  }, {
    key: "Ss",
    value: function Ss(t, e) {
      var n = Date.now();
      return !(t < n - e) && (!(t > n) || (dist_index_esm2017_F("Detected an update time that is in the future: ".concat(t, " > ").concat(n)), !1));
    }
  }, {
    key: "ys",
    value: function ys() {
      var _this105 = this;

      null !== this.document && "function" == typeof this.document.addEventListener && (this.rs = function () {
        _this105.Yn.enqueueAndForget(function () {
          return _this105.inForeground = "visible" === _this105.document.visibilityState, _this105.gs();
        });
      }, this.document.addEventListener("visibilitychange", this.rs), this.inForeground = "visible" === this.document.visibilityState);
    }
  }, {
    key: "ks",
    value: function ks() {
      this.rs && (this.document.removeEventListener("visibilitychange", this.rs), this.rs = null);
    }
    /**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */

  }, {
    key: "ps",
    value: function ps() {
      var _this106 = this;

      var t;
      "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.ss = function () {
        // Note: In theory, this should be scheduled on the AsyncQueue since it
        // accesses internal state. We execute this code directly during shutdown
        // to make sure it gets a chance to run.
        _this106.Ns(), isSafari() && navigator.appVersion.match(/Version\/1[45]/) && // On Safari 14 and 15, we do not run any cleanup actions as it might
        // trigger a bug that prevents Safari from re-opening IndexedDB during
        // the next page load.
        // See https://bugs.webkit.org/show_bug.cgi?id=226547
        _this106.Yn.enterRestrictedMode(
        /* purgeExistingTasks= */
        !0), _this106.Yn.enqueueAndForget(function () {
          return _this106.shutdown();
        });
      }, this.window.addEventListener("pagehide", this.ss));
    }
  }, {
    key: "Ms",
    value: function Ms() {
      this.ss && (this.window.removeEventListener("pagehide", this.ss), this.ss = null);
    }
    /**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */

  }, {
    key: "xs",
    value: function xs(t) {
      var e;

      try {
        var n = null !== (null === (e = this.ws) || void 0 === e ? void 0 : e.getItem(this.Cs(t)));
        return dist_index_esm2017_O("IndexedDbPersistence", "Client '".concat(t, "' ").concat(n ? "is" : "is not", " zombied in LocalStorage")), n;
      } catch (t) {
        // Gracefully handle if LocalStorage isn't working.
        return dist_index_esm2017_F("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
      }
    }
    /**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */

  }, {
    key: "Ns",
    value: function Ns() {
      if (this.ws) try {
        this.ws.setItem(this.Cs(this.clientId), String(Date.now()));
      } catch (t) {
        // Gracefully handle if LocalStorage isn't available / working.
        dist_index_esm2017_F("Failed to set zombie client id.", t);
      }
    }
    /** Removes the zombied client entry if it exists. */

  }, {
    key: "Os",
    value: function Os() {
      if (this.ws) try {
        this.ws.removeItem(this.Cs(this.clientId));
      } catch (t) {// Ignore
      }
    }
  }, {
    key: "Cs",
    value: function Cs(t) {
      return "firestore_zombie_".concat(this.persistenceKey, "_").concat(t);
    }
  }], [{
    key: "vt",
    value: function vt() {
      return Ii.vt();
    }
  }]);

  return zr;
}()));
/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */


function Hr(t) {
  return Si(t, "owner");
}
/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */


function Jr(t) {
  return Si(t, "clientMetadata");
}
/**
 * Generates a string used as a prefix when storing data in IndexedDB and
 * LocalStorage.
 */


function Yr(t, e) {
  // Use two different prefix formats:
  //   * firestore / persistenceKey / projectID . databaseID / ...
  //   * firestore / persistenceKey / projectID / ...
  // projectIDs are DNS-compatible names and cannot contain dots
  // so there's no danger of collisions.
  var n = t.projectId;
  return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A readonly view of the local state of all documents we're tracking (i.e. we
 * have a cached version in remoteDocumentCache or local mutations for the
 * document). The view is computed by applying the mutations in the
 * MutationQueue to the RemoteDocumentCache.
 */


var Xr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Xr(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, Xr);

    this.ds = t, this.Bs = e, this.indexManager = n;
  }
  /**
   * Get the local view of the document identified by `key`.
   *
   * @returns Local view of the document or null if we don't have any cached
   * state for it.
   */


  firestore_dist_index_esm2017_createClass(Xr, [{
    key: "Ls",
    value: function Ls(t, e) {
      var _this107 = this;

      return this.Bs.getAllMutationBatchesAffectingDocumentKey(t, e).next(function (n) {
        return _this107.Us(t, e, n);
      });
    }
    /** Internal version of `getDocument` that allows reusing batches. */

  }, {
    key: "Us",
    value: function Us(t, e, n) {
      return this.ds.getEntry(t, e).next(function (t) {
        var _iterator51 = firestore_dist_index_esm2017_createForOfIteratorHelper(n),
            _step51;

        try {
          for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
            var _e36 = _step51.value;

            _e36.applyToLocalView(t);
          }
        } catch (err) {
          _iterator51.e(err);
        } finally {
          _iterator51.f();
        }

        return t;
      });
    } // Returns the view of the given `docs` as they would appear after applying
    // all mutations in the given `batches`.

  }, {
    key: "qs",
    value: function qs(t, e) {
      t.forEach(function (t, n) {
        var _iterator52 = firestore_dist_index_esm2017_createForOfIteratorHelper(e),
            _step52;

        try {
          for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
            var _t70 = _step52.value;

            _t70.applyToLocalView(n);
          }
        } catch (err) {
          _iterator52.e(err);
        } finally {
          _iterator52.f();
        }
      });
    }
    /**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */

  }, {
    key: "Ks",
    value: function Ks(t, e) {
      var _this108 = this;

      return this.ds.getEntries(t, e).next(function (e) {
        return _this108.Gs(t, e).next(function () {
          return e;
        });
      });
    }
    /**
     * Applies the local view the given `baseDocs` without retrieving documents
     * from the local store.
     */

  }, {
    key: "Gs",
    value: function Gs(t, e) {
      var _this109 = this;

      return this.Bs.getAllMutationBatchesAffectingDocumentKeys(t, e).next(function (t) {
        return _this109.qs(e, t);
      });
    }
    /**
     * Performs a query against the local view of all documents.
     *
     * @param transaction - The persistence transaction.
     * @param query - The query to match documents against.
     * @param offset - Read time and key to start scanning by (exclusive).
     */

  }, {
    key: "Qs",
    value: function Qs(t, e, n) {
      /**
      * Returns whether the query matches a single document by path (rather than a
      * collection).
      */
      return function (t) {
        return index_esm2017_xt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
      }(e) ? this.js(t, e.path) : index_esm2017_We(e) ? this.Ws(t, e, n) : this.zs(t, e, n);
    }
  }, {
    key: "js",
    value: function js(t, e) {
      // Just do a simple document lookup.
      return this.Ls(t, new index_esm2017_xt(e)).next(function (t) {
        var e = index_esm2017_Wn();
        return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
      });
    }
  }, {
    key: "Ws",
    value: function Ws(t, e, n) {
      var _this110 = this;

      var s = e.collectionGroup;
      var i = index_esm2017_Wn();
      return this.indexManager.getCollectionParents(t, s).next(function (r) {
        return yi.forEach(r, function (r) {
          var o = function (t, e) {
            return new index_esm2017_Ue(e,
            /*collectionGroup=*/
            null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
          }(e, r.child(s));

          return _this110.zs(t, o, n).next(function (t) {
            t.forEach(function (t, e) {
              i = i.insert(t, e);
            });
          });
        }).next(function () {
          return i;
        });
      });
    }
  }, {
    key: "zs",
    value: function zs(t, e, n) {
      var _this111 = this;

      // Query the remote documents and overlay mutations.
      var s;
      return this.ds.getAllFromCollection(t, e.path, n).next(function (n) {
        return s = n, _this111.Bs.getAllMutationBatchesAffectingQuery(t, e);
      }).next(function (t) {
        var _iterator53 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
            _step53;

        try {
          for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
            var _e37 = _step53.value;

            var _iterator54 = firestore_dist_index_esm2017_createForOfIteratorHelper(_e37.mutations),
                _step54;

            try {
              for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
                var _t71 = _step54.value;
                var _n23 = _t71.key;
                var i = s.get(_n23);
                null == i && ( // Create invalid document to apply mutations on top of
                i = index_esm2017_ne.newInvalidDocument(_n23), s = s.insert(_n23, i)), index_esm2017_Vn(_t71, i, _e37.localWriteTime), i.isFoundDocument() || (s = s.remove(_n23));
              }
            } catch (err) {
              _iterator54.e(err);
            } finally {
              _iterator54.f();
            }
          }
        } catch (err) {
          _iterator53.e(err);
        } finally {
          _iterator53.f();
        }
      }).next(function () {
        return (// Finally, filter out any documents that don't actually match
          // the query.
          s.forEach(function (t, n) {
            index_esm2017_tn(e, n) || (s = s.remove(t));
          }), s
        );
      });
    }
  }]);

  return Xr;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A set of changes to what documents are currently in view and out of view for
 * a given query. These changes are sent to the LocalStore by the View (via
 * the SyncEngine) and are used to pin / unpin documents as appropriate.
 */


var Zr = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Zr(t, e, n, s) {
    firestore_dist_index_esm2017_classCallCheck(this, Zr);

    this.targetId = t, this.fromCache = e, this.Hs = n, this.Js = s;
  }

  firestore_dist_index_esm2017_createClass(Zr, null, [{
    key: "Ys",
    value: function Ys(t, e) {
      var n = index_esm2017_Yn(),
          s = index_esm2017_Yn();

      var _iterator55 = firestore_dist_index_esm2017_createForOfIteratorHelper(e.docChanges),
          _step55;

      try {
        for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
          var _t72 = _step55.value;

          switch (_t72.type) {
            case 0
            /* Added */
            :
              n = n.add(_t72.doc.key);
              break;

            case 1
            /* Removed */
            :
              s = s.add(_t72.doc.key);
            // do nothing
          }
        }
      } catch (err) {
        _iterator55.e(err);
      } finally {
        _iterator55.f();
      }

      return new Zr(t, e.fromCache, n, s);
    }
  }]);

  return Zr;
}()));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The Firestore query engine.
 *
 * Firestore queries can be executed in three modes. The Query Engine determines
 * what mode to use based on what data is persisted. The mode only determines
 * the runtime complexity of the query - the result set is equivalent across all
 * implementations.
 *
 * The Query engine will use indexed-based execution if a user has configured
 * any index that can be used to execute query (via `setIndexConfiguration()`).
 * Otherwise, the engine will try to optimize the query by re-using a previously
 * persisted query result. If that is not possible, the query will be executed
 * via a full collection scan.
 *
 * Index-based execution is the default when available. The query engine
 * supports partial indexed execution and merges the result from the index
 * lookup with documents that have not yet been indexed. The index evaluation
 * matches the backend's format and as such, the SDK can use indexing for all
 * queries that the backend supports.
 *
 * If no index exists, the query engine tries to take advantage of the target
 * document mapping in the TargetCache. These mappings exists for all queries
 * that have been synced with the backend at least once and allow the query
 * engine to only read documents that previously matched a query plus any
 * documents that were edited after the query was last listened to.
 *
 * There are some cases when this optimization is not guaranteed to produce
 * the same results as full collection scans. In these cases, query
 * processing falls back to full scans. These cases are:
 *
 * - Limit queries where a document that matched the query previously no longer
 *   matches the query.
 *
 * - Limit queries where a document edit may cause the document to sort below
 *   another document that is in the local cache.
 *
 * - Queries that have never been CURRENT or free of limbo documents.
 */


var to = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function to() {
    firestore_dist_index_esm2017_classCallCheck(this, to);

    this.Xs = !1;
  }
  /** Sets the document view to query against. */


  firestore_dist_index_esm2017_createClass(to, [{
    key: "initialize",
    value: function initialize(t, e) {
      this.Zs = t, this.indexManager = e, this.Xs = !0;
    }
    /** Returns all local documents matching the specified query. */

  }, {
    key: "Qs",
    value: function Qs(t, e, n, s) {
      var _this112 = this;

      return this.ti(t, e).next(function (i) {
        return i || _this112.ei(t, e, s, n);
      }).next(function (n) {
        return n || _this112.ni(t, e);
      });
    }
    /**
     * Performs an indexed query that evaluates the query based on a collection's
     * persisted index values. Returns `null` if an index is not available.
     */

  }, {
    key: "ti",
    value: function ti(t, e) {
      return yi.resolve(null);
    }
    /**
     * Performs a query based on the target's persisted query mapping. Returns
     * `null` if the mapping is not available or cannot be used.
     */

  }, {
    key: "ei",
    value: function ei(t, e, n, s) {
      var _this113 = this;

      return index_esm2017_Ge(e) || s.isEqual(index_esm2017_ct.min()) ? this.ni(t, e) : this.Zs.Ks(t, n).next(function (i) {
        var r = _this113.si(e, i);

        return _this113.ii(e, r, n, s) ? _this113.ni(t, e) : (dist_index_esm2017_k() <= LogLevel.DEBUG && dist_index_esm2017_O("QueryEngine", "Re-using previous result from %s to execute query: %s", s.toString(), index_esm2017_Ze(e)), _this113.ri(t, r, e, index_esm2017_ae(s, -1)));
      }); // Queries that have never seen a snapshot without limbo free documents
      // should also be run as a full collection scan.
    }
    /** Applies the query filter and sorting to the provided documents.  */

  }, {
    key: "si",
    value: function si(t, e) {
      // Sort the documents and re-apply the query filter since previously
      // matching documents do not necessarily still match the query.
      var n = new index_esm2017_we(index_esm2017_nn(t));
      return e.forEach(function (e, s) {
        index_esm2017_tn(t, s) && (n = n.add(s));
      }), n;
    }
    /**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param query The query.
     * @param sortedPreviousResults - The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys - The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion - The version of the snapshot when the
     * query was last synchronized.
     */

  }, {
    key: "ii",
    value: function ii(t, e, n, s) {
      if (null === t.limit) // Queries without limits do not need to be refilled.
        return !1;
      if (n.size !== e.size) // The query needs to be refilled if a previously matching document no
        // longer matches.
        return !0; // Limit queries are not eligible for index-free query execution if there is
      // a potential that an older document from cache now sorts before a document
      // that was previously part of the limit. This, however, can only happen if
      // the document at the edge of the limit goes out of limit.
      // If a document that is not the limit boundary sorts differently,
      // the boundary of the limit itself did not change and documents from cache
      // will continue to be "rejected" by this boundary. Therefore, we can ignore
      // any modifications that don't affect the last document.

      var i = "F"
      /* First */
      === t.limitType ? e.last() : e.first();
      return !!i && (i.hasPendingWrites || i.version.compareTo(s) > 0);
    }
  }, {
    key: "ni",
    value: function ni(t, e) {
      return dist_index_esm2017_k() <= LogLevel.DEBUG && dist_index_esm2017_O("QueryEngine", "Using full collection scan to execute query:", index_esm2017_Ze(e)), this.Zs.Qs(t, e, index_esm2017_he.min());
    }
    /**
     * Combines the results from an indexed execution with the remaining documents
     * that have not yet been indexed.
     */

  }, {
    key: "ri",
    value: function ri(t, e, n, s) {
      // Retrieve all results for documents that were updated since the offset.
      return this.Zs.Qs(t, n, s).next(function (t) {
        return (// Merge with existing results
          e.forEach(function (e) {
            t = t.insert(e.key, e);
          }), t
        );
      });
    }
  }]);

  return to;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Implements `LocalStore` interface.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */


var eo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function eo(
  /** Manages our in-memory or durable persistence. */
  t, e, n, s) {
    firestore_dist_index_esm2017_classCallCheck(this, eo);

    this.persistence = t, this.oi = e, this.M = s,
    /**
     * Maps a targetID to data about its target.
     *
     * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
     * of `applyRemoteEvent()` idempotent.
     */
    this.ui = new index_esm2017_fe(index_esm2017_rt),
    /** Maps a target to its targetID. */
    // TODO(wuandy): Evaluate if TargetId can be part of Target.
    this.ai = new index_esm2017_Kn(function (t) {
      return index_esm2017_Ie(t);
    }, index_esm2017_Ee),
    /**
     * A per collection group index of the last read time processed by
     * `getNewDocumentChanges()`.
     *
     * PORTING NOTE: This is only used for multi-tab synchronization.
     */
    this.ci = new Map(), this.hi = t.getRemoteDocumentCache(), this.fs = t.getTargetCache(), this._s = t.getBundleCache(), this.li(n);
  }

  firestore_dist_index_esm2017_createClass(eo, [{
    key: "li",
    value: function li(t) {
      // TODO(indexing): Add spec tests that test these components change after a
      // user change
      this.indexManager = this.persistence.getIndexManager(t), this.Bs = this.persistence.getMutationQueue(t, this.indexManager), this.fi = new Xr(this.hi, this.Bs, this.indexManager), this.hi.setIndexManager(this.indexManager), this.oi.initialize(this.fi, this.indexManager);
    }
  }, {
    key: "collectGarbage",
    value: function collectGarbage(t) {
      var _this114 = this;

      return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function (e) {
        return t.collect(e, _this114.ui);
      });
    }
  }]);

  return eo;
}()));

function no(
/** Manages our in-memory or durable persistence. */
t, e, n, s) {
  return new eo(t, e, n, s);
}
/**
 * Tells the LocalStore that the currently authenticated user has changed.
 *
 * In response the local store switches the mutation queue to the new user and
 * returns any resulting document changes.
 */
// PORTING NOTE: Android and iOS only return the documents affected by the
// change.


function so(_x9, _x10) {
  return _so.apply(this, arguments);
}
/* Accepts locally generated Mutations and commit them to storage. */

/**
 * Acknowledges the given batch.
 *
 * On the happy path when a batch is acknowledged, the local store will
 *
 *  + remove the batch from the mutation queue;
 *  + apply the changes to the remote document cache;
 *  + recalculate the latency compensated view implied by those changes (there
 *    may be mutations in the queue that affect the documents but haven't been
 *    acknowledged yet); and
 *  + give the changed documents back the sync engine
 *
 * @returns The resulting (modified) documents.
 */


function _so() {
  _so = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee71(t, e) {
    var n;
    return regeneratorRuntime.wrap(function _callee71$(_context71) {
      while (1) {
        switch (_context71.prev = _context71.next) {
          case 0:
            n = dist_index_esm2017_K(t);
            _context71.next = 3;
            return n.persistence.runTransaction("Handle user change", "readonly", function (t) {
              // Swap out the mutation queue, grabbing the pending mutation batches
              // before and after.
              var s;
              return n.Bs.getAllMutationBatches(t).next(function (i) {
                return s = i, n.li(e), n.Bs.getAllMutationBatches(t);
              }).next(function (e) {
                var i = [],
                    r = []; // Union the old/new changed keys.

                // Union the old/new changed keys.
                var o = index_esm2017_Yn();

                var _iterator82 = firestore_dist_index_esm2017_createForOfIteratorHelper(s),
                    _step82;

                try {
                  for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
                    var _t116 = _step82.value;
                    i.push(_t116.batchId);

                    var _iterator84 = firestore_dist_index_esm2017_createForOfIteratorHelper(_t116.mutations),
                        _step84;

                    try {
                      for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
                        var _e56 = _step84.value;
                        o = o.add(_e56.key);
                      }
                    } catch (err) {
                      _iterator84.e(err);
                    } finally {
                      _iterator84.f();
                    }
                  }
                } catch (err) {
                  _iterator82.e(err);
                } finally {
                  _iterator82.f();
                }

                var _iterator83 = firestore_dist_index_esm2017_createForOfIteratorHelper(e),
                    _step83;

                try {
                  for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
                    var _t117 = _step83.value;
                    r.push(_t117.batchId);

                    var _iterator85 = firestore_dist_index_esm2017_createForOfIteratorHelper(_t117.mutations),
                        _step85;

                    try {
                      for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
                        var _e57 = _step85.value;
                        o = o.add(_e57.key);
                      }
                    } catch (err) {
                      _iterator85.e(err);
                    } finally {
                      _iterator85.f();
                    }
                  } // Return the set of all (potentially) changed documents and the list
                  // of mutation batch IDs that were affected by change.

                } catch (err) {
                  _iterator83.e(err);
                } finally {
                  _iterator83.f();
                } // Return the set of all (potentially) changed documents and the list
                // of mutation batch IDs that were affected by change.


                // Return the set of all (potentially) changed documents and the list
                // of mutation batch IDs that were affected by change.
                return n.fi.Ks(t, o).next(function (t) {
                  return {
                    di: t,
                    removedBatchIds: i,
                    addedBatchIds: r
                  };
                });
              });
            });

          case 3:
            return _context71.abrupt("return", _context71.sent);

          case 4:
          case "end":
            return _context71.stop();
        }
      }
    }, _callee71);
  }));
  return _so.apply(this, arguments);
}

function io(t, e) {
  var n = dist_index_esm2017_K(t);
  return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function (t) {
    var s = e.batch.keys(),
        i = n.hi.newChangeBuffer({
      trackRemovals: !0
    });
    return function (t, e, n, s) {
      var i = n.batch,
          r = i.keys();
      var o = yi.resolve();
      return r.forEach(function (t) {
        o = o.next(function () {
          return s.getEntry(e, t);
        }).next(function (e) {
          var r = n.docVersions.get(t);
          dist_index_esm2017_U(null !== r), e.version.compareTo(r) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && ( // We use the commitVersion as the readTime rather than the
          // document's updateTime since the updateTime is not advanced
          // for updates that do not modify the underlying document.
          e.setReadTime(n.commitVersion), s.addEntry(e)));
        });
      }), o.next(function () {
        return t.Bs.removeMutationBatch(e, i);
      });
    }
    /** Returns the local view of the documents affected by a mutation batch. */
    // PORTING NOTE: Multi-Tab only.
    (n, t, e, i).next(function () {
      return i.apply(t);
    }).next(function () {
      return n.Bs.performConsistencyCheck(t);
    }).next(function () {
      return n.fi.Ks(t, s);
    });
  });
}
/**
 * Removes mutations from the MutationQueue for the specified batch;
 * LocalDocuments will be recalculated.
 *
 * @returns The resulting modified documents.
 */

/**
 * Returns the last consistent snapshot processed (used by the RemoteStore to
 * determine whether to buffer incoming snapshots from the backend).
 */


function ro(t) {
  var e = dist_index_esm2017_K(t);
  return e.persistence.runTransaction("Get last remote snapshot version", "readonly", function (t) {
    return e.fs.getLastRemoteSnapshotVersion(t);
  });
}
/**
 * Updates the "ground-state" (remote) documents. We assume that the remote
 * event reflects any write batches that have been acknowledged or rejected
 * (i.e. we do not re-apply local mutations to updates from this event).
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */


function oo(t, e) {
  var n = dist_index_esm2017_K(t),
      s = e.snapshotVersion;
  var i = n.ui;
  return n.persistence.runTransaction("Apply remote event", "readwrite-primary", function (t) {
    var r = n.hi.newChangeBuffer({
      trackRemovals: !0
    }); // Reset newTargetDataByTargetMap in case this transaction gets re-run.

    i = n.ui;
    var o = [];
    e.targetChanges.forEach(function (r, u) {
      var a = i.get(u);
      if (!a) return; // Only update the remote keys if the target is still active. This
      // ensures that we can persist the updated target data along with
      // the updated assignment.

      o.push(n.fs.removeMatchingKeys(t, r.removedDocuments, u).next(function () {
        return n.fs.addMatchingKeys(t, r.addedDocuments, u);
      }));
      var c = a.withSequenceNumber(t.currentSequenceNumber);
      e.targetMismatches.has(u) ? c = c.withResumeToken(index_esm2017_pt.EMPTY_BYTE_STRING, index_esm2017_ct.min()).withLastLimboFreeSnapshotVersion(index_esm2017_ct.min()) : r.resumeToken.approximateByteSize() > 0 && (c = c.withResumeToken(r.resumeToken, s)), i = i.insert(u, c), // Update the target data if there are target changes (or if
      // sufficient time has passed since the last update).

      /**
      * Returns true if the newTargetData should be persisted during an update of
      * an active target. TargetData should always be persisted when a target is
      * being released and should not call this function.
      *
      * While the target is active, TargetData updates can be omitted when nothing
      * about the target has changed except metadata like the resume token or
      * snapshot version. Occasionally it's worth the extra write to prevent these
      * values from getting too stale after a crash, but this doesn't have to be
      * too frequent.
      */
      function (t, e, n) {
        // Always persist target data if we don't already have a resume token.
        if (0 === t.resumeToken.approximateByteSize()) return !0; // Don't allow resume token changes to be buffered indefinitely. This
        // allows us to be reasonably up-to-date after a crash and avoids needing
        // to loop over all active queries on shutdown. Especially in the browser
        // we may not get time to do anything interesting while the current tab is
        // closing.

        if (e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8) return !0; // Otherwise if the only thing that has changed about a target is its resume
        // token it's not worth persisting. Note that the RemoteStore keeps an
        // in-memory view of the currently active targets which includes the current
        // resume token, so stream failure or user changes will still use an
        // up-to-date resume token regardless of what we do here.

        return n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0;
      }
      /**
      * Notifies local store of the changed views to locally pin documents.
      */
      (a, c, r) && o.push(n.fs.updateTargetData(t, c));
    });
    var u = index_esm2017_Qn(); // HACK: The only reason we allow a null snapshot version is so that we
    // can synthesize remote events when we get permission denied errors while
    // trying to resolve the state of a locally cached document that is in
    // limbo.

    if (e.documentUpdates.forEach(function (s) {
      e.resolvedLimboDocuments.has(s) && o.push(n.persistence.referenceDelegate.updateLimboDocument(t, s));
    }), // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
    // documents in advance in a single call.
    o.push(uo(t, r, e.documentUpdates).next(function (t) {
      u = t;
    })), !s.isEqual(index_esm2017_ct.min())) {
      var _e38 = n.fs.getLastRemoteSnapshotVersion(t).next(function (e) {
        return n.fs.setTargetsMetadata(t, t.currentSequenceNumber, s);
      });

      o.push(_e38);
    }

    return yi.waitFor(o).next(function () {
      return r.apply(t);
    }).next(function () {
      return n.fi.Gs(t, u);
    }).next(function () {
      return u;
    });
  }).then(function (t) {
    return n.ui = i, t;
  });
}
/**
 * Populates document change buffer with documents from backend or a bundle.
 * Returns the document changes resulting from applying those documents.
 *
 * @param txn - Transaction to use to read existing documents from storage.
 * @param documentBuffer - Document buffer to collect the resulted changes to be
 *        applied to storage.
 * @param documents - Documents to be applied.
 * @param globalVersion - A `SnapshotVersion` representing the read time if all
 *        documents have the same read time.
 * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
 *        have their own read time.
 *
 * Note: this function will use `documentVersions` if it is defined;
 * when it is not defined, resorts to `globalVersion`.
 */


function uo(t, e, n) {
  var s = index_esm2017_Yn();
  return n.forEach(function (t) {
    return s = s.add(t);
  }), e.getEntries(t, s).next(function (t) {
    var s = index_esm2017_Qn();
    return n.forEach(function (n, i) {
      var r = t.get(n); // Note: The order of the steps below is important, since we want
      // to ensure that rejected limbo resolutions (which fabricate
      // NoDocuments with SnapshotVersion.min()) never add documents to
      // cache.

      i.isNoDocument() && i.version.isEqual(index_esm2017_ct.min()) ? ( // NoDocuments with SnapshotVersion.min() are used in manufactured
      // events. We remove these documents from cache since we lost
      // access.
      e.removeEntry(n, i.readTime), s = s.insert(n, i)) : !r.isValidDocument() || i.version.compareTo(r.version) > 0 || 0 === i.version.compareTo(r.version) && r.hasPendingWrites ? (e.addEntry(i), s = s.insert(n, i)) : dist_index_esm2017_O("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", r.version, " Watch version:", i.version);
    }), s;
  });
}
/**
 * Gets the mutation batch after the passed in batchId in the mutation queue
 * or null if empty.
 * @param afterBatchId - If provided, the batch to search after.
 * @returns The next mutation or null if there wasn't one.
 */


function ao(t, e) {
  var n = dist_index_esm2017_K(t);
  return n.persistence.runTransaction("Get next mutation batch", "readonly", function (t) {
    return void 0 === e && (e = -1), n.Bs.getNextMutationBatchAfterBatchId(t, e);
  });
}
/**
 * Reads the current value of a Document with a given key or null if not
 * found - used for testing.
 */

/**
 * Assigns the given target an internal ID so that its results can be pinned so
 * they don't get GC'd. A target must be allocated in the local store before
 * the store can be used to manage its view.
 *
 * Allocating an already allocated `Target` will return the existing `TargetData`
 * for that `Target`.
 */


function co(t, e) {
  var n = dist_index_esm2017_K(t);
  return n.persistence.runTransaction("Allocate target", "readwrite", function (t) {
    var s;
    return n.fs.getTargetData(t, e).next(function (i) {
      return i ? ( // This target has been listened to previously, so reuse the
      // previous targetID.
      // TODO(mcg): freshen last accessed date?
      s = i, yi.resolve(s)) : n.fs.allocateTargetId(t).next(function (i) {
        return s = new Ni(e, i, 0
        /* Listen */
        , t.currentSequenceNumber), n.fs.addTargetData(t, s).next(function () {
          return s;
        });
      });
    });
  }).then(function (t) {
    // If Multi-Tab is enabled, the existing target data may be newer than
    // the in-memory data
    var s = n.ui.get(t.targetId);
    return (null === s || t.snapshotVersion.compareTo(s.snapshotVersion) > 0) && (n.ui = n.ui.insert(t.targetId, t), n.ai.set(e, t.targetId)), t;
  });
}
/**
 * Returns the TargetData as seen by the LocalStore, including updates that may
 * have not yet been persisted to the TargetCache.
 */
// Visible for testing.

/**
 * Unpins all the documents associated with the given target. If
 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
 * directly removes the associated target data from the target cache.
 *
 * Releasing a non-existing `Target` is a no-op.
 */
// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.


function ho(_x11, _x12, _x13) {
  return _ho.apply(this, arguments);
}
/**
 * Runs the specified query against the local store and returns the results,
 * potentially taking advantage of query data from previous executions (such
 * as the set of remote keys).
 *
 * @param usePreviousResults - Whether results from previous executions can
 * be used to optimize this query execution.
 */


function _ho() {
  _ho = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee72(t, e, n) {
    var s, i, r;
    return regeneratorRuntime.wrap(function _callee72$(_context72) {
      while (1) {
        switch (_context72.prev = _context72.next) {
          case 0:
            s = dist_index_esm2017_K(t), i = s.ui.get(e), r = n ? "readwrite" : "readwrite-primary";
            _context72.prev = 1;
            _context72.t0 = n;

            if (_context72.t0) {
              _context72.next = 6;
              break;
            }

            _context72.next = 6;
            return s.persistence.runTransaction("Release target", r, function (t) {
              return s.persistence.referenceDelegate.removeTarget(t, i);
            });

          case 6:
            _context72.next = 13;
            break;

          case 8:
            _context72.prev = 8;
            _context72.t1 = _context72["catch"](1);

            if (Ai(_context72.t1)) {
              _context72.next = 12;
              break;
            }

            throw _context72.t1;

          case 12:
            // All `releaseTarget` does is record the final metadata state for the
            // target, but we've been recording this periodically during target
            // activity. If we lose this write this could cause a very slight
            // difference in the order of target deletion during GC, but we
            // don't define exact LRU semantics so this is acceptable.
            dist_index_esm2017_O("LocalStore", "Failed to update sequence numbers for target ".concat(e, ": ").concat(_context72.t1));

          case 13:
            s.ui = s.ui.remove(e), s.ai["delete"](i.target);

          case 14:
          case "end":
            return _context72.stop();
        }
      }
    }, _callee72, null, [[1, 8]]);
  }));
  return _ho.apply(this, arguments);
}

function lo(t, e, n) {
  var s = dist_index_esm2017_K(t);
  var i = index_esm2017_ct.min(),
      r = index_esm2017_Yn();
  return s.persistence.runTransaction("Execute query", "readonly", function (t) {
    return function (t, e, n) {
      var s = dist_index_esm2017_K(t),
          i = s.ai.get(n);
      return void 0 !== i ? yi.resolve(s.ui.get(i)) : s.fs.getTargetData(e, n);
    }(s, t, index_esm2017_He(e)).next(function (e) {
      if (e) return i = e.lastLimboFreeSnapshotVersion, s.fs.getMatchingKeysForTargetId(t, e.targetId).next(function (t) {
        r = t;
      });
    }).next(function () {
      return s.oi.Qs(t, e, n ? i : index_esm2017_ct.min(), n ? r : index_esm2017_Yn());
    }).next(function (t) {
      return wo(s, index_esm2017_en(e), t), {
        documents: t,
        _i: r
      };
    });
  });
} // PORTING NOTE: Multi-Tab only.


function fo(t, e) {
  var n = dist_index_esm2017_K(t),
      s = dist_index_esm2017_K(n.fs),
      i = n.ui.get(e);
  return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", function (t) {
    return s.Et(t, e).next(function (t) {
      return t ? t.target : null;
    });
  });
}
/**
 * Returns the set of documents that have been updated since the last call.
 * If this is the first call, returns the set of changes since client
 * initialization. Further invocations will return document that have changed
 * since the prior call.
 */
// PORTING NOTE: Multi-Tab only.


function _o(t, e) {
  var n = dist_index_esm2017_K(t),
      s = n.ci.get(e) || index_esm2017_ct.min(); // Get the current maximum read time for the collection. This should always
  // exist, but to reduce the chance for regressions we default to
  // SnapshotVersion.Min()
  // TODO(indexing): Consider removing the default value.

  return n.persistence.runTransaction("Get new document changes", "readonly", function (t) {
    return n.hi.getAllFromCollectionGroup(t, e, index_esm2017_ae(s, -1),
    /* limit= */
    Number.MAX_SAFE_INTEGER);
  }).then(function (t) {
    return wo(n, e, t), t;
  });
}
/** Sets the collection group's maximum read time from the given documents. */
// PORTING NOTE: Multi-Tab only.


function wo(t, e, n) {
  var s = index_esm2017_ct.min();
  n.forEach(function (t, e) {
    e.readTime.compareTo(s) > 0 && (s = e.readTime);
  }), t.ci.set(e, s);
}
/**
 * Creates a new target using the given bundle name, which will be used to
 * hold the keys of all documents from the bundle in query-document mappings.
 * This ensures that the loaded documents do not get garbage collected
 * right away.
 */

/**
 * Applies the documents from a bundle to the "ground-state" (remote)
 * documents.
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */


function mo(_x14, _x15, _x16, _x17) {
  return _mo.apply(this, arguments);
}
/**
 * Returns a promise of a boolean to indicate if the given bundle has already
 * been loaded and the create time is newer than the current loading bundle.
 */

/**
 * Saves the given `NamedQuery` to local persistence.
 */


function _mo() {
  _mo = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee73(t, e, n, s) {
    var i, r, o, _iterator86, _step86, _t118, _n40, _s32, u, a;

    return regeneratorRuntime.wrap(function _callee73$(_context73) {
      while (1) {
        switch (_context73.prev = _context73.next) {
          case 0:
            i = dist_index_esm2017_K(t);
            r = index_esm2017_Yn(), o = index_esm2017_Qn();
            _iterator86 = firestore_dist_index_esm2017_createForOfIteratorHelper(n);

            try {
              for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
                _t118 = _step86.value;
                _n40 = e.wi(_t118.metadata.name);
                _t118.document && (r = r.add(_n40));
                _s32 = e.mi(_t118);
                _s32.setReadTime(e.gi(_t118.metadata.readTime)), o = o.insert(_n40, _s32);
              }
            } catch (err) {
              _iterator86.e(err);
            } finally {
              _iterator86.f();
            }

            u = i.hi.newChangeBuffer({
              trackRemovals: !0
            });
            _context73.next = 7;
            return co(i, function (t) {
              // It is OK that the path used for the query is not valid, because this will
              // not be read and queried.
              return index_esm2017_He(index_esm2017_Ke(index_esm2017_t.fromString("__bundle__/docs/".concat(t))));
            }(s));

          case 7:
            a = _context73.sent;
            return _context73.abrupt("return", i.persistence.runTransaction("Apply bundle documents", "readwrite", function (t) {
              return uo(t, u, o).next(function (e) {
                return u.apply(t), e;
              }).next(function (e) {
                return i.fs.removeMatchingKeysForTargetId(t, a.targetId).next(function () {
                  return i.fs.addMatchingKeys(t, r, a.targetId);
                }).next(function () {
                  return i.fi.Gs(t, e);
                }).next(function () {
                  return e;
                });
              });
            }));

          case 9:
          case "end":
            return _context73.stop();
        }
      }
    }, _callee73);
  }));
  return _mo.apply(this, arguments);
}

function go(_x18, _x19) {
  return _go.apply(this, arguments);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function _go() {
  _go = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee74(t, e) {
    var n,
        s,
        i,
        _args74 = arguments;
    return regeneratorRuntime.wrap(function _callee74$(_context74) {
      while (1) {
        switch (_context74.prev = _context74.next) {
          case 0:
            n = _args74.length > 2 && _args74[2] !== undefined ? _args74[2] : index_esm2017_Yn();
            _context74.next = 3;
            return co(t, index_esm2017_He(Ki(e.bundledQuery)));

          case 3:
            s = _context74.sent;
            i = dist_index_esm2017_K(t);
            return _context74.abrupt("return", i.persistence.runTransaction("Save named query", "readwrite", function (t) {
              var r = ws(e.readTime); // Simply save the query itself if it is older than what the SDK already
              // has.

              // Simply save the query itself if it is older than what the SDK already
              // has.
              if (s.snapshotVersion.compareTo(r) >= 0) return i._s.saveNamedQuery(t, e); // Update existing target data because the query from the bundle is newer.

              // Update existing target data because the query from the bundle is newer.
              var o = s.withResumeToken(index_esm2017_pt.EMPTY_BYTE_STRING, r);
              return i.ui = i.ui.insert(o.targetId, o), i.fs.updateTargetData(t, o).next(function () {
                return i.fs.removeMatchingKeysForTargetId(t, s.targetId);
              }).next(function () {
                return i.fs.addMatchingKeys(t, n, s.targetId);
              }).next(function () {
                return i._s.saveNamedQuery(t, e);
              });
            }));

          case 6:
          case "end":
            return _context74.stop();
        }
      }
    }, _callee74);
  }));
  return _go.apply(this, arguments);
}

var yo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function yo(t) {
    firestore_dist_index_esm2017_classCallCheck(this, yo);

    this.M = t, this.yi = new Map(), this.pi = new Map();
  }

  firestore_dist_index_esm2017_createClass(yo, [{
    key: "getBundleMetadata",
    value: function getBundleMetadata(t, e) {
      return yi.resolve(this.yi.get(e));
    }
  }, {
    key: "saveBundleMetadata",
    value: function saveBundleMetadata(t, e) {
      /** Decodes a BundleMetadata proto into a BundleMetadata object. */
      var n;
      return this.yi.set(e.id, {
        id: (n = e).id,
        version: n.version,
        createTime: ws(n.createTime)
      }), yi.resolve();
    }
  }, {
    key: "getNamedQuery",
    value: function getNamedQuery(t, e) {
      return yi.resolve(this.pi.get(e));
    }
  }, {
    key: "saveNamedQuery",
    value: function saveNamedQuery(t, e) {
      return this.pi.set(e.name, function (t) {
        return {
          name: t.name,
          query: Ki(t.bundledQuery),
          readTime: ws(t.readTime)
        };
      }(e)), yi.resolve();
    }
  }]);

  return yo;
}()));
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory implementation of DocumentOverlayCache.
 */


var po = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function po() {
    firestore_dist_index_esm2017_classCallCheck(this, po);

    // A map sorted by DocumentKey, whose value is a pair of the largest batch id
    // for the overlay and the overlay itself.
    this.overlays = new index_esm2017_fe(index_esm2017_xt.comparator), this.Ii = new Map();
  }

  firestore_dist_index_esm2017_createClass(po, [{
    key: "getOverlay",
    value: function getOverlay(t, e) {
      return yi.resolve(this.overlays.get(e));
    }
  }, {
    key: "saveOverlays",
    value: function saveOverlays(t, e, n) {
      var _this115 = this;

      return n.forEach(function (n, s) {
        _this115.Xt(t, e, s);
      }), yi.resolve();
    }
  }, {
    key: "removeOverlaysForBatchId",
    value: function removeOverlaysForBatchId(t, e, n) {
      var _this116 = this;

      var s = this.Ii.get(n);
      return void 0 !== s && (s.forEach(function (t) {
        return _this116.overlays = _this116.overlays.remove(t);
      }), this.Ii["delete"](n)), yi.resolve();
    }
  }, {
    key: "getOverlaysForCollection",
    value: function getOverlaysForCollection(t, e, n) {
      var s = index_esm2017_zn(),
          i = e.length + 1,
          r = new index_esm2017_xt(e.child("")),
          o = this.overlays.getIteratorFrom(r);

      for (; o.hasNext();) {
        var _t73 = o.getNext().value,
            _r6 = _t73.getKey();

        if (!e.isPrefixOf(_r6.path)) break; // Documents from sub-collections

        _r6.path.length === i && _t73.largestBatchId > n && s.set(_t73.getKey(), _t73);
      }

      return yi.resolve(s);
    }
  }, {
    key: "getOverlaysForCollectionGroup",
    value: function getOverlaysForCollectionGroup(t, e, n, s) {
      var i = new index_esm2017_fe(function (t, e) {
        return t - e;
      });
      var r = this.overlays.getIterator();

      for (; r.hasNext();) {
        var _t74 = r.getNext().value;

        if (_t74.getKey().getCollectionGroup() === e && _t74.largestBatchId > n) {
          var _e39 = i.get(_t74.largestBatchId);

          null === _e39 && (_e39 = index_esm2017_zn(), i = i.insert(_t74.largestBatchId, _e39)), _e39.set(_t74.getKey(), _t74);
        }
      }

      var o = index_esm2017_zn(),
          u = i.getIterator();

      for (; u.hasNext();) {
        if (u.getNext().value.forEach(function (t, e) {
          return o.set(t, e);
        }), o.size() >= s) break;
      }

      return yi.resolve(o);
    }
  }, {
    key: "Xt",
    value: function Xt(t, e, n) {
      if (null === n) return; // Remove the association of the overlay to its batch id.

      var s = this.overlays.get(n.key);

      if (null !== s) {
        var _t75 = this.Ii.get(s.largestBatchId)["delete"](n.key);

        this.Ii.set(s.largestBatchId, _t75);
      }

      this.overlays = this.overlays.insert(n.key, new xi(e, n)); // Create the association of this overlay to the given largestBatchId.

      var i = this.Ii.get(e);
      void 0 === i && (i = index_esm2017_Yn(), this.Ii.set(e, i)), this.Ii.set(e, i.add(n.key));
    }
  }]);

  return po;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */


var Io = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Io() {
    firestore_dist_index_esm2017_classCallCheck(this, Io);

    // A set of outstanding references to a document sorted by key.
    this.Ti = new index_esm2017_we(To.Ei), // A set of outstanding references to a document sorted by target id.
    this.Ai = new index_esm2017_we(To.Ri);
  }
  /** Returns true if the reference set contains no references. */


  firestore_dist_index_esm2017_createClass(Io, [{
    key: "isEmpty",
    value: function isEmpty() {
      return this.Ti.isEmpty();
    }
    /** Adds a reference to the given document key for the given ID. */

  }, {
    key: "addReference",
    value: function addReference(t, e) {
      var n = new To(t, e);
      this.Ti = this.Ti.add(n), this.Ai = this.Ai.add(n);
    }
    /** Add references to the given document keys for the given ID. */

  }, {
    key: "bi",
    value: function bi(t, e) {
      var _this117 = this;

      t.forEach(function (t) {
        return _this117.addReference(t, e);
      });
    }
    /**
     * Removes a reference to the given document key for the given
     * ID.
     */

  }, {
    key: "removeReference",
    value: function removeReference(t, e) {
      this.Pi(new To(t, e));
    }
  }, {
    key: "Vi",
    value: function Vi(t, e) {
      var _this118 = this;

      t.forEach(function (t) {
        return _this118.removeReference(t, e);
      });
    }
    /**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */

  }, {
    key: "vi",
    value: function vi(t) {
      var _this119 = this;

      var e = new index_esm2017_xt(new index_esm2017_t([])),
          n = new To(e, t),
          s = new To(e, t + 1),
          i = [];
      return this.Ai.forEachInRange([n, s], function (t) {
        _this119.Pi(t), i.push(t.key);
      }), i;
    }
  }, {
    key: "Si",
    value: function Si() {
      var _this120 = this;

      this.Ti.forEach(function (t) {
        return _this120.Pi(t);
      });
    }
  }, {
    key: "Pi",
    value: function Pi(t) {
      this.Ti = this.Ti["delete"](t), this.Ai = this.Ai["delete"](t);
    }
  }, {
    key: "Di",
    value: function Di(t) {
      var e = new index_esm2017_xt(new index_esm2017_t([])),
          n = new To(e, t),
          s = new To(e, t + 1);
      var i = index_esm2017_Yn();
      return this.Ai.forEachInRange([n, s], function (t) {
        i = i.add(t.key);
      }), i;
    }
  }, {
    key: "containsKey",
    value: function containsKey(t) {
      var e = new To(t, 0),
          n = this.Ti.firstAfterOrEqual(e);
      return null !== n && t.isEqual(n.key);
    }
  }]);

  return Io;
}()));

var To = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function To(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, To);

    this.key = t, this.Ci = e;
  }
  /** Compare by key then by ID */


  firestore_dist_index_esm2017_createClass(To, null, [{
    key: "Ei",
    value: function Ei(t, e) {
      return index_esm2017_xt.comparator(t.key, e.key) || index_esm2017_rt(t.Ci, e.Ci);
    }
    /** Compare by ID then by key */

  }, {
    key: "Ri",
    value: function Ri(t, e) {
      return index_esm2017_rt(t.Ci, e.Ci) || index_esm2017_xt.comparator(t.key, e.key);
    }
  }]);

  return To;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Eo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Eo(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Eo);

    this.indexManager = t, this.referenceDelegate = e,
    /**
     * The set of all mutations that have been sent but not yet been applied to
     * the backend.
     */
    this.Bs = [],
    /** Next value to use when assigning sequential IDs to each mutation batch. */
    this.xi = 1,
    /** An ordered mapping between documents and the mutations batch IDs. */
    this.Ni = new index_esm2017_we(To.Ei);
  }

  firestore_dist_index_esm2017_createClass(Eo, [{
    key: "checkEmpty",
    value: function checkEmpty(t) {
      return yi.resolve(0 === this.Bs.length);
    }
  }, {
    key: "addMutationBatch",
    value: function addMutationBatch(t, e, n, s) {
      var i = this.xi;
      this.xi++, this.Bs.length > 0 && this.Bs[this.Bs.length - 1];
      var r = new Di(i, e, n, s);
      this.Bs.push(r); // Track references by document key and index collection parents.

      var _iterator56 = firestore_dist_index_esm2017_createForOfIteratorHelper(s),
          _step56;

      try {
        for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
          var _e40 = _step56.value;
          this.Ni = this.Ni.add(new To(_e40.key, i)), this.indexManager.addToCollectionParentIndex(t, _e40.key.path.popLast());
        }
      } catch (err) {
        _iterator56.e(err);
      } finally {
        _iterator56.f();
      }

      return yi.resolve(r);
    }
  }, {
    key: "lookupMutationBatch",
    value: function lookupMutationBatch(t, e) {
      return yi.resolve(this.ki(e));
    }
  }, {
    key: "getNextMutationBatchAfterBatchId",
    value: function getNextMutationBatchAfterBatchId(t, e) {
      var n = e + 1,
          s = this.Mi(n),
          i = s < 0 ? 0 : s; // The requested batchId may still be out of range so normalize it to the
      // start of the queue.

      return yi.resolve(this.Bs.length > i ? this.Bs[i] : null);
    }
  }, {
    key: "getHighestUnacknowledgedBatchId",
    value: function getHighestUnacknowledgedBatchId() {
      return yi.resolve(0 === this.Bs.length ? -1 : this.xi - 1);
    }
  }, {
    key: "getAllMutationBatches",
    value: function getAllMutationBatches(t) {
      return yi.resolve(this.Bs.slice());
    }
  }, {
    key: "getAllMutationBatchesAffectingDocumentKey",
    value: function getAllMutationBatchesAffectingDocumentKey(t, e) {
      var _this121 = this;

      var n = new To(e, 0),
          s = new To(e, Number.POSITIVE_INFINITY),
          i = [];
      return this.Ni.forEachInRange([n, s], function (t) {
        var e = _this121.ki(t.Ci);

        i.push(e);
      }), yi.resolve(i);
    }
  }, {
    key: "getAllMutationBatchesAffectingDocumentKeys",
    value: function getAllMutationBatchesAffectingDocumentKeys(t, e) {
      var _this122 = this;

      var n = new index_esm2017_we(index_esm2017_rt);
      return e.forEach(function (t) {
        var e = new To(t, 0),
            s = new To(t, Number.POSITIVE_INFINITY);

        _this122.Ni.forEachInRange([e, s], function (t) {
          n = n.add(t.Ci);
        });
      }), yi.resolve(this.Oi(n));
    }
  }, {
    key: "getAllMutationBatchesAffectingQuery",
    value: function getAllMutationBatchesAffectingQuery(t, e) {
      // Use the query path as a prefix for testing if a document matches the
      // query.
      var n = e.path,
          s = n.length + 1; // Construct a document reference for actually scanning the index. Unlike
      // the prefix the document key in this reference must have an even number of
      // segments. The empty segment can be used a suffix of the query path
      // because it precedes all other segments in an ordered traversal.

      var i = n;
      index_esm2017_xt.isDocumentKey(i) || (i = i.child(""));
      var r = new To(new index_esm2017_xt(i), 0); // Find unique batchIDs referenced by all documents potentially matching the
      // query.

      var o = new index_esm2017_we(index_esm2017_rt);
      return this.Ni.forEachWhile(function (t) {
        var e = t.key.path;
        return !!n.isPrefixOf(e) && ( // Rows with document keys more than one segment longer than the query
        // path can't be matches. For example, a query on 'rooms' can't match
        // the document /rooms/abc/messages/xyx.
        // TODO(mcg): we'll need a different scanner when we implement
        // ancestor queries.
        e.length === s && (o = o.add(t.Ci)), !0);
      }, r), yi.resolve(this.Oi(o));
    }
  }, {
    key: "Oi",
    value: function Oi(t) {
      var _this123 = this;

      // Construct an array of matching batches, sorted by batchID to ensure that
      // multiple mutations affecting the same document key are applied in order.
      var e = [];
      return t.forEach(function (t) {
        var n = _this123.ki(t);

        null !== n && e.push(n);
      }), e;
    }
  }, {
    key: "removeMutationBatch",
    value: function removeMutationBatch(t, e) {
      var _this124 = this;

      dist_index_esm2017_U(0 === this.Fi(e.batchId, "removed")), this.Bs.shift();
      var n = this.Ni;
      return yi.forEach(e.mutations, function (s) {
        var i = new To(s.key, e.batchId);
        return n = n["delete"](i), _this124.referenceDelegate.markPotentiallyOrphaned(t, s.key);
      }).next(function () {
        _this124.Ni = n;
      });
    }
  }, {
    key: "_n",
    value: function _n(t) {// No-op since the memory mutation queue does not maintain a separate cache.
    }
  }, {
    key: "containsKey",
    value: function containsKey(t, e) {
      var n = new To(e, 0),
          s = this.Ni.firstAfterOrEqual(n);
      return yi.resolve(e.isEqual(s && s.key));
    }
  }, {
    key: "performConsistencyCheck",
    value: function performConsistencyCheck(t) {
      return this.Bs.length, yi.resolve();
    }
    /**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId - The batchId to search for
     * @param action - A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */

  }, {
    key: "Fi",
    value: function Fi(t, e) {
      return this.Mi(t);
    }
    /**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @returns The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */

  }, {
    key: "Mi",
    value: function Mi(t) {
      if (0 === this.Bs.length) // As an index this is past the end of the queue
        return 0; // Examine the front of the queue to figure out the difference between the
      // batchId and indexes in the array. Note that since the queue is ordered
      // by batchId, if the first batch has a larger batchId then the requested
      // batchId doesn't exist in the queue.

      return t - this.Bs[0].batchId;
    }
    /**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */

  }, {
    key: "ki",
    value: function ki(t) {
      var e = this.Mi(t);
      if (e < 0 || e >= this.Bs.length) return null;
      return this.Bs[e];
    }
  }]);

  return Eo;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newMemoryRemoteDocumentCache()`.
 */


var Ao = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * @param sizer - Used to assess the size of a document. For eager GC, this is
   * expected to just return 0 to avoid unnecessarily doing the work of
   * calculating the size.
   */
  function Ao(t) {
    firestore_dist_index_esm2017_classCallCheck(this, Ao);

    this.$i = t,
    /** Underlying cache of documents and their read times. */
    this.docs = new index_esm2017_fe(index_esm2017_xt.comparator),
    /** Size of all cached documents. */
    this.size = 0;
  }

  firestore_dist_index_esm2017_createClass(Ao, [{
    key: "setIndexManager",
    value: function setIndexManager(t) {
      this.indexManager = t;
    }
    /**
     * Adds the supplied entry to the cache and updates the cache size as appropriate.
     *
     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */

  }, {
    key: "addEntry",
    value: function addEntry(t, e) {
      var n = e.key,
          s = this.docs.get(n),
          i = s ? s.size : 0,
          r = this.$i(e);
      return this.docs = this.docs.insert(n, {
        document: e.mutableCopy(),
        size: r
      }), this.size += r - i, this.indexManager.addToCollectionParentIndex(t, n.path.popLast());
    }
    /**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */

  }, {
    key: "removeEntry",
    value: function removeEntry(t) {
      var e = this.docs.get(t);
      e && (this.docs = this.docs.remove(t), this.size -= e.size);
    }
  }, {
    key: "getEntry",
    value: function getEntry(t, e) {
      var n = this.docs.get(e);
      return yi.resolve(n ? n.document.mutableCopy() : index_esm2017_ne.newInvalidDocument(e));
    }
  }, {
    key: "getEntries",
    value: function getEntries(t, e) {
      var _this125 = this;

      var n = index_esm2017_Qn();
      return e.forEach(function (t) {
        var e = _this125.docs.get(t);

        n = n.insert(t, e ? e.document.mutableCopy() : index_esm2017_ne.newInvalidDocument(t));
      }), yi.resolve(n);
    }
  }, {
    key: "getAllFromCollection",
    value: function getAllFromCollection(t, e, n) {
      var s = index_esm2017_Qn(); // Documents are ordered by key, so we can use a prefix scan to narrow down
      // the documents we need to match the query against.

      var i = new index_esm2017_xt(e.child("")),
          r = this.docs.getIteratorFrom(i);

      for (; r.hasNext();) {
        var _r$getNext = r.getNext(),
            _t76 = _r$getNext.key,
            _i14 = _r$getNext.value.document;

        if (!e.isPrefixOf(_t76.path)) break;
        _t76.path.length > e.length + 1 || index_esm2017_le(index_esm2017_ce(_i14), n) <= 0 || (s = s.insert(_i14.key, _i14.mutableCopy()));
      }

      return yi.resolve(s);
    }
  }, {
    key: "getAllFromCollectionGroup",
    value: function getAllFromCollectionGroup(t, e, n, s) {
      // This method should only be called from the IndexBackfiller if persistence
      // is enabled.
      dist_index_esm2017_L();
    }
  }, {
    key: "Bi",
    value: function Bi(t, e) {
      return yi.forEach(this.docs, function (t) {
        return e(t);
      });
    }
  }, {
    key: "newChangeBuffer",
    value: function newChangeBuffer(t) {
      // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
      // a separate changelog and does not need special handling for removals.
      return new Ro(this);
    }
  }, {
    key: "getSize",
    value: function getSize(t) {
      return yi.resolve(this.size);
    }
  }]);

  return Ao;
}()));
/**
 * Creates a new memory-only RemoteDocumentCache.
 *
 * @param sizer - Used to assess the size of a document. For eager GC, this is
 * expected to just return 0 to avoid unnecessarily doing the work of
 * calculating the size.
 */

/**
 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
 */


var Ro = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Fr2) {
  firestore_dist_index_esm2017_inherits(Ro, _Fr2);

  var _super23 = firestore_dist_index_esm2017_createSuper(Ro);

  function Ro(t) {
    var _this126;

    firestore_dist_index_esm2017_classCallCheck(this, Ro);

    _this126 = _super23.call(this), _this126.Kn = t;
    return _this126;
  }

  firestore_dist_index_esm2017_createClass(Ro, [{
    key: "applyChanges",
    value: function applyChanges(t) {
      var _this127 = this;

      var e = [];
      return this.changes.forEach(function (n, s) {
        s.isValidDocument() ? e.push(_this127.Kn.addEntry(t, s)) : _this127.Kn.removeEntry(n);
      }), yi.waitFor(e);
    }
  }, {
    key: "getFromCache",
    value: function getFromCache(t, e) {
      return this.Kn.getEntry(t, e);
    }
  }, {
    key: "getAllFromCache",
    value: function getAllFromCache(t, e) {
      return this.Kn.getEntries(t, e);
    }
  }]);

  return Ro;
}(index_esm2017_Fr)));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var bo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function bo(t) {
    firestore_dist_index_esm2017_classCallCheck(this, bo);

    this.persistence = t,
    /**
     * Maps a target to the data about that target
     */
    this.Li = new index_esm2017_Kn(function (t) {
      return index_esm2017_Ie(t);
    }, index_esm2017_Ee),
    /** The last received snapshot version. */
    this.lastRemoteSnapshotVersion = index_esm2017_ct.min(),
    /** The highest numbered target ID encountered. */
    this.highestTargetId = 0,
    /** The highest sequence number encountered. */
    this.Ui = 0,
    /**
     * A ordered bidirectional mapping between documents and the remote target
     * IDs.
     */
    this.qi = new Io(), this.targetCount = 0, this.Ki = index_esm2017_br.gn();
  }

  firestore_dist_index_esm2017_createClass(bo, [{
    key: "forEachTarget",
    value: function forEachTarget(t, e) {
      return this.Li.forEach(function (t, n) {
        return e(n);
      }), yi.resolve();
    }
  }, {
    key: "getLastRemoteSnapshotVersion",
    value: function getLastRemoteSnapshotVersion(t) {
      return yi.resolve(this.lastRemoteSnapshotVersion);
    }
  }, {
    key: "getHighestSequenceNumber",
    value: function getHighestSequenceNumber(t) {
      return yi.resolve(this.Ui);
    }
  }, {
    key: "allocateTargetId",
    value: function allocateTargetId(t) {
      return this.highestTargetId = this.Ki.next(), yi.resolve(this.highestTargetId);
    }
  }, {
    key: "setTargetsMetadata",
    value: function setTargetsMetadata(t, e, n) {
      return n && (this.lastRemoteSnapshotVersion = n), e > this.Ui && (this.Ui = e), yi.resolve();
    }
  }, {
    key: "Tn",
    value: function Tn(t) {
      this.Li.set(t.target, t);
      var e = t.targetId;
      e > this.highestTargetId && (this.Ki = new index_esm2017_br(e), this.highestTargetId = e), t.sequenceNumber > this.Ui && (this.Ui = t.sequenceNumber);
    }
  }, {
    key: "addTargetData",
    value: function addTargetData(t, e) {
      return this.Tn(e), this.targetCount += 1, yi.resolve();
    }
  }, {
    key: "updateTargetData",
    value: function updateTargetData(t, e) {
      return this.Tn(e), yi.resolve();
    }
  }, {
    key: "removeTargetData",
    value: function removeTargetData(t, e) {
      return this.Li["delete"](e.target), this.qi.vi(e.targetId), this.targetCount -= 1, yi.resolve();
    }
  }, {
    key: "removeTargets",
    value: function removeTargets(t, e, n) {
      var _this128 = this;

      var s = 0;
      var i = [];
      return this.Li.forEach(function (r, o) {
        o.sequenceNumber <= e && null === n.get(o.targetId) && (_this128.Li["delete"](r), i.push(_this128.removeMatchingKeysForTargetId(t, o.targetId)), s++);
      }), yi.waitFor(i).next(function () {
        return s;
      });
    }
  }, {
    key: "getTargetCount",
    value: function getTargetCount(t) {
      return yi.resolve(this.targetCount);
    }
  }, {
    key: "getTargetData",
    value: function getTargetData(t, e) {
      var n = this.Li.get(e) || null;
      return yi.resolve(n);
    }
  }, {
    key: "addMatchingKeys",
    value: function addMatchingKeys(t, e, n) {
      return this.qi.bi(e, n), yi.resolve();
    }
  }, {
    key: "removeMatchingKeys",
    value: function removeMatchingKeys(t, e, n) {
      this.qi.Vi(e, n);
      var s = this.persistence.referenceDelegate,
          i = [];
      return s && e.forEach(function (e) {
        i.push(s.markPotentiallyOrphaned(t, e));
      }), yi.waitFor(i);
    }
  }, {
    key: "removeMatchingKeysForTargetId",
    value: function removeMatchingKeysForTargetId(t, e) {
      return this.qi.vi(e), yi.resolve();
    }
  }, {
    key: "getMatchingKeysForTargetId",
    value: function getMatchingKeysForTargetId(t, e) {
      var n = this.qi.Di(e);
      return yi.resolve(n);
    }
  }, {
    key: "containsKey",
    value: function containsKey(t, e) {
      return yi.resolve(this.qi.containsKey(e));
    }
  }]);

  return bo;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A memory-backed instance of Persistence. Data is stored only in RAM and
 * not persisted across sessions.
 */


var Po = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * The constructor accepts a factory for creating a reference delegate. This
   * allows both the delegate and this instance to have strong references to
   * each other without having nullable fields that would then need to be
   * checked or asserted on every access.
   */
  function Po(t, e) {
    var _this129 = this;

    firestore_dist_index_esm2017_classCallCheck(this, Po);

    this.Gi = {}, this.overlays = {}, this.es = new index_esm2017_nt(0), this.ns = !1, this.ns = !0, this.referenceDelegate = t(this), this.fs = new bo(this);
    this.indexManager = new index_esm2017_ar(), this.ds = function (t) {
      return new Ao(t);
    }(function (t) {
      return _this129.referenceDelegate.Qi(t);
    }), this.M = new ki(e), this._s = new yo(this.M);
  }

  firestore_dist_index_esm2017_createClass(Po, [{
    key: "start",
    value: function start() {
      return Promise.resolve();
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      // No durable state to ensure is closed on shutdown.
      return this.ns = !1, Promise.resolve();
    }
  }, {
    key: "started",
    get: function get() {
      return this.ns;
    }
  }, {
    key: "setDatabaseDeletedListener",
    value: function setDatabaseDeletedListener() {// No op.
    }
  }, {
    key: "setNetworkEnabled",
    value: function setNetworkEnabled() {// No op.
    }
  }, {
    key: "getIndexManager",
    value: function getIndexManager(t) {
      // We do not currently support indices for memory persistence, so we can
      // return the same shared instance of the memory index manager.
      return this.indexManager;
    }
  }, {
    key: "getDocumentOverlayCache",
    value: function getDocumentOverlayCache(t) {
      var e = this.overlays[t.toKey()];
      return e || (e = new po(), this.overlays[t.toKey()] = e), e;
    }
  }, {
    key: "getMutationQueue",
    value: function getMutationQueue(t, e) {
      var n = this.Gi[t.toKey()];
      return n || (n = new Eo(e, this.referenceDelegate), this.Gi[t.toKey()] = n), n;
    }
  }, {
    key: "getTargetCache",
    value: function getTargetCache() {
      return this.fs;
    }
  }, {
    key: "getRemoteDocumentCache",
    value: function getRemoteDocumentCache() {
      return this.ds;
    }
  }, {
    key: "getBundleCache",
    value: function getBundleCache() {
      return this._s;
    }
  }, {
    key: "runTransaction",
    value: function runTransaction(t, e, n) {
      var _this130 = this;

      dist_index_esm2017_O("MemoryPersistence", "Starting transaction:", t);
      var s = new Vo(this.es.next());
      return this.referenceDelegate.ji(), n(s).next(function (t) {
        return _this130.referenceDelegate.Wi(s).next(function () {
          return t;
        });
      }).toPromise().then(function (t) {
        return s.raiseOnCommittedEvent(), t;
      });
    }
  }, {
    key: "zi",
    value: function zi(t, e) {
      return yi.or(Object.values(this.Gi).map(function (n) {
        return function () {
          return n.containsKey(t, e);
        };
      }));
    }
  }]);

  return Po;
}()));
/**
 * Memory persistence is not actually transactional, but future implementations
 * may have transaction-scoped state.
 */


var Vo = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_gi2) {
  firestore_dist_index_esm2017_inherits(Vo, _gi2);

  var _super24 = firestore_dist_index_esm2017_createSuper(Vo);

  function Vo(t) {
    var _this131;

    firestore_dist_index_esm2017_classCallCheck(this, Vo);

    _this131 = _super24.call(this), _this131.currentSequenceNumber = t;
    return _this131;
  }

  return firestore_dist_index_esm2017_createClass(Vo);
}(gi)));

var vo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function vo(t) {
    firestore_dist_index_esm2017_classCallCheck(this, vo);

    this.persistence = t,
    /** Tracks all documents that are active in Query views. */
    this.Hi = new Io(),
    /** The list of documents that are potentially GCed after each transaction. */
    this.Ji = null;
  }

  firestore_dist_index_esm2017_createClass(vo, [{
    key: "Xi",
    get: function get() {
      if (this.Ji) return this.Ji;
      throw dist_index_esm2017_L();
    }
  }, {
    key: "addReference",
    value: function addReference(t, e, n) {
      return this.Hi.addReference(n, e), this.Xi["delete"](n.toString()), yi.resolve();
    }
  }, {
    key: "removeReference",
    value: function removeReference(t, e, n) {
      return this.Hi.removeReference(n, e), this.Xi.add(n.toString()), yi.resolve();
    }
  }, {
    key: "markPotentiallyOrphaned",
    value: function markPotentiallyOrphaned(t, e) {
      return this.Xi.add(e.toString()), yi.resolve();
    }
  }, {
    key: "removeTarget",
    value: function removeTarget(t, e) {
      var _this132 = this;

      this.Hi.vi(e.targetId).forEach(function (t) {
        return _this132.Xi.add(t.toString());
      });
      var n = this.persistence.getTargetCache();
      return n.getMatchingKeysForTargetId(t, e.targetId).next(function (t) {
        t.forEach(function (t) {
          return _this132.Xi.add(t.toString());
        });
      }).next(function () {
        return n.removeTargetData(t, e);
      });
    }
  }, {
    key: "ji",
    value: function ji() {
      this.Ji = new Set();
    }
  }, {
    key: "Wi",
    value: function Wi(t) {
      var _this133 = this;

      // Remove newly orphaned documents.
      var e = this.persistence.getRemoteDocumentCache().newChangeBuffer();
      return yi.forEach(this.Xi, function (n) {
        var s = index_esm2017_xt.fromPath(n);
        return _this133.Zi(t, s).next(function (t) {
          t || e.removeEntry(s, index_esm2017_ct.min());
        });
      }).next(function () {
        return _this133.Ji = null, e.apply(t);
      });
    }
  }, {
    key: "updateLimboDocument",
    value: function updateLimboDocument(t, e) {
      var _this134 = this;

      return this.Zi(t, e).next(function (t) {
        t ? _this134.Xi["delete"](e.toString()) : _this134.Xi.add(e.toString());
      });
    }
  }, {
    key: "Qi",
    value: function Qi(t) {
      // For eager GC, we don't care about the document size, there are no size thresholds.
      return 0;
    }
  }, {
    key: "Zi",
    value: function Zi(t, e) {
      var _this135 = this;

      return yi.or([function () {
        return yi.resolve(_this135.Hi.containsKey(e));
      }, function () {
        return _this135.persistence.getTargetCache().containsKey(t, e);
      }, function () {
        return _this135.persistence.zi(t, e);
      }]);
    }
  }], [{
    key: "Yi",
    value: function Yi(t) {
      return new vo(t);
    }
  }]);

  return vo;
}()));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The format of the LocalStorage key that stores the client state is:
//     firestore_clients_<persistence_prefix>_<instance_key>

/** Assembles the key for a client state in WebStorage */


function So(t, e) {
  return "firestore_clients_".concat(t, "_").concat(e);
} // The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.

/** Assembles the key for a mutation batch in WebStorage */


function Do(t, e, n) {
  var s = "firestore_mutations_".concat(t, "_").concat(n);
  return e.isAuthenticated() && (s += "_".concat(e.uid)), s;
} // The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>

/** Assembles the key for a query state in WebStorage */


function Co(t, e) {
  return "firestore_targets_".concat(t, "_").concat(e);
} // The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>

/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */
// Visible for testing


var xo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function xo(t, e, n, s) {
    firestore_dist_index_esm2017_classCallCheck(this, xo);

    this.user = t, this.batchId = e, this.state = n, this.error = s;
  }
  /**
   * Parses a MutationMetadata from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  firestore_dist_index_esm2017_createClass(xo, [{
    key: "er",
    value: function er() {
      var t = {
        state: this.state,
        updateTimeMs: Date.now()
      };
      return this.error && (t.error = {
        code: this.error.code,
        message: this.error.message
      }), JSON.stringify(t);
    }
  }], [{
    key: "tr",
    value: function tr(t, e, n) {
      var s = JSON.parse(n);

      var i,
          r = "object" == firestore_dist_index_esm2017_typeof(s) && -1 !== ["pending", "acknowledged", "rejected"].indexOf(s.state) && (void 0 === s.error || "object" == firestore_dist_index_esm2017_typeof(s.error));

      return r && s.error && (r = "string" == typeof s.error.message && "string" == typeof s.error.code, r && (i = new dist_index_esm2017_Q(s.error.code, s.error.message))), r ? new xo(t, e, s.state, i) : (dist_index_esm2017_F("SharedClientState", "Failed to parse mutation state for ID '".concat(e, "': ").concat(n)), null);
    }
  }]);

  return xo;
}()));
/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */
// Visible for testing


var No = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function No(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, No);

    this.targetId = t, this.state = e, this.error = n;
  }
  /**
   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  firestore_dist_index_esm2017_createClass(No, [{
    key: "er",
    value: function er() {
      var t = {
        state: this.state,
        updateTimeMs: Date.now()
      };
      return this.error && (t.error = {
        code: this.error.code,
        message: this.error.message
      }), JSON.stringify(t);
    }
  }], [{
    key: "tr",
    value: function tr(t, e) {
      var n = JSON.parse(e);

      var s,
          i = "object" == firestore_dist_index_esm2017_typeof(n) && -1 !== ["not-current", "current", "rejected"].indexOf(n.state) && (void 0 === n.error || "object" == firestore_dist_index_esm2017_typeof(n.error));

      return i && n.error && (i = "string" == typeof n.error.message && "string" == typeof n.error.code, i && (s = new dist_index_esm2017_Q(n.error.code, n.error.message))), i ? new No(t, n.state, s) : (dist_index_esm2017_F("SharedClientState", "Failed to parse target state for ID '".concat(t, "': ").concat(e)), null);
    }
  }]);

  return No;
}()));
/**
 * This class represents the immutable ClientState for a client read from
 * WebStorage, containing the list of active query targets.
 */


var ko = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ko(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, ko);

    this.clientId = t, this.activeTargetIds = e;
  }
  /**
   * Parses a RemoteClientState from the JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  firestore_dist_index_esm2017_createClass(ko, null, [{
    key: "tr",
    value: function tr(t, e) {
      var n = JSON.parse(e);
      var s = "object" == firestore_dist_index_esm2017_typeof(n) && n.activeTargetIds instanceof Array,
          i = index_esm2017_Zn();

      for (var _t77 = 0; s && _t77 < n.activeTargetIds.length; ++_t77) {
        s = index_esm2017_Ct(n.activeTargetIds[_t77]), i = i.add(n.activeTargetIds[_t77]);
      }

      return s ? new ko(t, i) : (dist_index_esm2017_F("SharedClientState", "Failed to parse client data for instance '".concat(t, "': ").concat(e)), null);
    }
  }]);

  return ko;
}()));
/**
 * This class represents the online state for all clients participating in
 * multi-tab. The online state is only written to by the primary client, and
 * used in secondary clients to update their query views.
 */


var Mo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Mo(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Mo);

    this.clientId = t, this.onlineState = e;
  }
  /**
   * Parses a SharedOnlineState from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  firestore_dist_index_esm2017_createClass(Mo, null, [{
    key: "tr",
    value: function tr(t) {
      var e = JSON.parse(t);
      return "object" == firestore_dist_index_esm2017_typeof(e) && -1 !== ["Unknown", "Online", "Offline"].indexOf(e.onlineState) && "string" == typeof e.clientId ? new Mo(e.clientId, e.onlineState) : (dist_index_esm2017_F("SharedClientState", "Failed to parse online state: ".concat(t)), null);
    }
  }]);

  return Mo;
}()));
/**
 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
 * mutable and keeps track of all pending mutations, which allows us to
 * update the range of pending mutation batch IDs as new mutations are added or
 * removed.
 *
 * The data in `LocalClientState` is not read from WebStorage and instead
 * updated via its instance methods. The updated state can be serialized via
 * `toWebStorageJSON()`.
 */
// Visible for testing.


var Oo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Oo() {
    firestore_dist_index_esm2017_classCallCheck(this, Oo);

    this.activeTargetIds = index_esm2017_Zn();
  }

  firestore_dist_index_esm2017_createClass(Oo, [{
    key: "nr",
    value: function nr(t) {
      this.activeTargetIds = this.activeTargetIds.add(t);
    }
  }, {
    key: "sr",
    value: function sr(t) {
      this.activeTargetIds = this.activeTargetIds["delete"](t);
    }
    /**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */

  }, {
    key: "er",
    value: function er() {
      var t = {
        activeTargetIds: this.activeTargetIds.toArray(),
        updateTimeMs: Date.now()
      };
      return JSON.stringify(t);
    }
  }]);

  return Oo;
}()));
/**
 * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
 * backing store for the SharedClientState. It keeps track of all active
 * clients and supports modifications of the local client's data.
 */


var Fo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Fo(t, e, n, s, i) {
    firestore_dist_index_esm2017_classCallCheck(this, Fo);

    this.window = t, this.Yn = e, this.persistenceKey = n, this.ir = s, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.rr = this.ur.bind(this), this.ar = new index_esm2017_fe(index_esm2017_rt), this.started = !1,
    /**
     * Captures WebStorage events that occur before `start()` is called. These
     * events are replayed once `WebStorageSharedClientState` is started.
     */
    this.cr = []; // Escape the special characters mentioned here:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions

    var r = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    this.storage = this.window.localStorage, this.currentUser = i, this.hr = So(this.persistenceKey, this.ir), this.lr =
    /** Assembles the key for the current sequence number. */
    function (t) {
      return "firestore_sequence_number_".concat(t);
    }
    /**
    * @license
    * Copyright 2018 Google LLC
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    (this.persistenceKey), this.ar = this.ar.insert(this.ir, new Oo()), this.dr = new RegExp("^firestore_clients_".concat(r, "_([^_]*)$")), this._r = new RegExp("^firestore_mutations_".concat(r, "_(\\d+)(?:_(.*))?$")), this.wr = new RegExp("^firestore_targets_".concat(r, "_(\\d+)$")), this.mr =
    /** Assembles the key for the online state of the primary tab. */
    function (t) {
      return "firestore_online_state_".concat(t);
    } // The WebStorage prefix that plays as a event to indicate the remote documents
    // might have changed due to some secondary tabs loading a bundle.
    // format of the key is:
    //     firestore_bundle_loaded_v2_<persistenceKey>
    // The version ending with "v2" stores the list of modified collection groups.
    (this.persistenceKey), this.gr = function (t) {
      return "firestore_bundle_loaded_v2_".concat(t);
    } // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
    // looks like 'firestore_sequence_number_<persistence_prefix>'.
    (this.persistenceKey), // Rather than adding the storage observer during start(), we add the
    // storage observer during initialization. This ensures that we collect
    // events before other components populate their initial state (during their
    // respective start() calls). Otherwise, we might for example miss a
    // mutation that is added after LocalStore's start() processed the existing
    // mutations but before we observe WebStorage events.
    this.window.addEventListener("storage", this.rr);
  }
  /** Returns 'true' if WebStorage is available in the current environment. */


  firestore_dist_index_esm2017_createClass(Fo, [{
    key: "start",
    value: function () {
      var _start = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
        var _this136 = this;

        var t, _iterator57, _step57, _e41, _t79, n, e, _t78, _iterator58, _step58, _t80;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.syncEngine.Fs();

              case 2:
                t = _context11.sent;
                _iterator57 = firestore_dist_index_esm2017_createForOfIteratorHelper(t);
                _context11.prev = 4;

                _iterator57.s();

              case 6:
                if ((_step57 = _iterator57.n()).done) {
                  _context11.next = 14;
                  break;
                }

                _e41 = _step57.value;

                if (!(_e41 === this.ir)) {
                  _context11.next = 10;
                  break;
                }

                return _context11.abrupt("continue", 12);

              case 10:
                _t79 = this.getItem(So(this.persistenceKey, _e41));

                if (_t79) {
                  n = ko.tr(_e41, _t79);
                  n && (this.ar = this.ar.insert(n.clientId, n));
                }

              case 12:
                _context11.next = 6;
                break;

              case 14:
                _context11.next = 19;
                break;

              case 16:
                _context11.prev = 16;
                _context11.t0 = _context11["catch"](4);

                _iterator57.e(_context11.t0);

              case 19:
                _context11.prev = 19;

                _iterator57.f();

                return _context11.finish(19);

              case 22:
                this.yr(); // Check if there is an existing online state and call the callback handler
                // if applicable.

                e = this.storage.getItem(this.mr);

                if (e) {
                  _t78 = this.pr(e);
                  _t78 && this.Ir(_t78);
                }

                _iterator58 = firestore_dist_index_esm2017_createForOfIteratorHelper(this.cr);

                try {
                  for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
                    _t80 = _step58.value;
                    this.ur(_t80);
                  }
                } catch (err) {
                  _iterator58.e(err);
                } finally {
                  _iterator58.f();
                }

                this.cr = [], // Register a window unload hook to remove the client metadata entry from
                // WebStorage even if `shutdown()` was not called.
                this.window.addEventListener("pagehide", function () {
                  return _this136.shutdown();
                }), this.started = !0;

              case 28:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this, [[4, 16, 19, 22]]);
      }));

      function start() {
        return _start.apply(this, arguments);
      }

      return start;
    }()
  }, {
    key: "writeSequenceNumber",
    value: function writeSequenceNumber(t) {
      this.setItem(this.lr, JSON.stringify(t));
    }
  }, {
    key: "getAllActiveQueryTargets",
    value: function getAllActiveQueryTargets() {
      return this.Tr(this.ar);
    }
  }, {
    key: "isActiveQueryTarget",
    value: function isActiveQueryTarget(t) {
      var e = !1;
      return this.ar.forEach(function (n, s) {
        s.activeTargetIds.has(t) && (e = !0);
      }), e;
    }
  }, {
    key: "addPendingMutation",
    value: function addPendingMutation(t) {
      this.Er(t, "pending");
    }
  }, {
    key: "updateMutationState",
    value: function updateMutationState(t, e, n) {
      this.Er(t, e, n), // Once a final mutation result is observed by other clients, they no longer
      // access the mutation's metadata entry. Since WebStorage replays events
      // in order, it is safe to delete the entry right after updating it.
      this.Ar(t);
    }
  }, {
    key: "addLocalQueryTarget",
    value: function addLocalQueryTarget(t) {
      var e = "not-current"; // Lookup an existing query state if the target ID was already registered
      // by another tab

      if (this.isActiveQueryTarget(t)) {
        var n = this.storage.getItem(Co(this.persistenceKey, t));

        if (n) {
          var s = No.tr(t, n);
          s && (e = s.state);
        }
      }

      return this.Rr.nr(t), this.yr(), e;
    }
  }, {
    key: "removeLocalQueryTarget",
    value: function removeLocalQueryTarget(t) {
      this.Rr.sr(t), this.yr();
    }
  }, {
    key: "isLocalQueryTarget",
    value: function isLocalQueryTarget(t) {
      return this.Rr.activeTargetIds.has(t);
    }
  }, {
    key: "clearQueryState",
    value: function clearQueryState(t) {
      this.removeItem(Co(this.persistenceKey, t));
    }
  }, {
    key: "updateQueryState",
    value: function updateQueryState(t, e, n) {
      this.br(t, e, n);
    }
  }, {
    key: "handleUserChange",
    value: function handleUserChange(t, e, n) {
      var _this137 = this;

      e.forEach(function (t) {
        _this137.Ar(t);
      }), this.currentUser = t, n.forEach(function (t) {
        _this137.addPendingMutation(t);
      });
    }
  }, {
    key: "setOnlineState",
    value: function setOnlineState(t) {
      this.Pr(t);
    }
  }, {
    key: "notifyBundleLoaded",
    value: function notifyBundleLoaded(t) {
      this.Vr(t);
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      this.started && (this.window.removeEventListener("storage", this.rr), this.removeItem(this.hr), this.started = !1);
    }
  }, {
    key: "getItem",
    value: function getItem(t) {
      var e = this.storage.getItem(t);
      return dist_index_esm2017_O("SharedClientState", "READ", t, e), e;
    }
  }, {
    key: "setItem",
    value: function setItem(t, e) {
      dist_index_esm2017_O("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
    }
  }, {
    key: "removeItem",
    value: function removeItem(t) {
      dist_index_esm2017_O("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
    }
  }, {
    key: "ur",
    value: function ur(t) {
      var _this138 = this;

      // Note: The function is typed to take Event to be interface-compatible with
      // `Window.addEventListener`.
      var e = t;

      if (e.storageArea === this.storage) {
        if (dist_index_esm2017_O("SharedClientState", "EVENT", e.key, e.newValue), e.key === this.hr) return void dist_index_esm2017_F("Received WebStorage notification for local change. Another client might have garbage-collected our state");
        this.Yn.enqueueRetryable( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
          var _t81, _t82, _t83, _t84, _t85, _t86, _t87;

          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  if (!_this138.started) {
                    _context12.next = 43;
                    break;
                  }

                  if (!(null !== e.key)) {
                    _context12.next = 41;
                    break;
                  }

                  if (!_this138.dr.test(e.key)) {
                    _context12.next = 11;
                    break;
                  }

                  if (!(null == e.newValue)) {
                    _context12.next = 6;
                    break;
                  }

                  _t81 = _this138.vr(e.key);
                  return _context12.abrupt("return", _this138.Sr(_t81, null));

                case 6:
                  _t82 = _this138.Dr(e.key, e.newValue);

                  if (!_t82) {
                    _context12.next = 9;
                    break;
                  }

                  return _context12.abrupt("return", _this138.Sr(_t82.clientId, _t82));

                case 9:
                  _context12.next = 41;
                  break;

                case 11:
                  if (!_this138._r.test(e.key)) {
                    _context12.next = 18;
                    break;
                  }

                  if (!(null !== e.newValue)) {
                    _context12.next = 16;
                    break;
                  }

                  _t83 = _this138.Cr(e.key, e.newValue);

                  if (!_t83) {
                    _context12.next = 16;
                    break;
                  }

                  return _context12.abrupt("return", _this138.Nr(_t83));

                case 16:
                  _context12.next = 41;
                  break;

                case 18:
                  if (!_this138.wr.test(e.key)) {
                    _context12.next = 25;
                    break;
                  }

                  if (!(null !== e.newValue)) {
                    _context12.next = 23;
                    break;
                  }

                  _t84 = _this138.kr(e.key, e.newValue);

                  if (!_t84) {
                    _context12.next = 23;
                    break;
                  }

                  return _context12.abrupt("return", _this138.Mr(_t84));

                case 23:
                  _context12.next = 41;
                  break;

                case 25:
                  if (!(e.key === _this138.mr)) {
                    _context12.next = 32;
                    break;
                  }

                  if (!(null !== e.newValue)) {
                    _context12.next = 30;
                    break;
                  }

                  _t85 = _this138.pr(e.newValue);

                  if (!_t85) {
                    _context12.next = 30;
                    break;
                  }

                  return _context12.abrupt("return", _this138.Ir(_t85));

                case 30:
                  _context12.next = 41;
                  break;

                case 32:
                  if (!(e.key === _this138.lr)) {
                    _context12.next = 37;
                    break;
                  }

                  _t86 = function (t) {
                    var e = index_esm2017_nt.A;
                    if (null != t) try {
                      var n = JSON.parse(t);
                      dist_index_esm2017_U("number" == typeof n), e = n;
                    } catch (t) {
                      dist_index_esm2017_F("SharedClientState", "Failed to read sequence number from WebStorage", t);
                    }
                    return e;
                  }
                  /**
                  * `MemorySharedClientState` is a simple implementation of SharedClientState for
                  * clients using memory persistence. The state in this class remains fully
                  * isolated and no synchronization is performed.
                  */
                  (e.newValue);

                  _t86 !== index_esm2017_nt.A && _this138.sequenceNumberHandler(_t86);
                  _context12.next = 41;
                  break;

                case 37:
                  if (!(e.key === _this138.gr)) {
                    _context12.next = 41;
                    break;
                  }

                  _t87 = _this138.Or(e.newValue);
                  _context12.next = 41;
                  return Promise.all(_t87.map(function (t) {
                    return _this138.syncEngine.Fr(t);
                  }));

                case 41:
                  _context12.next = 44;
                  break;

                case 43:
                  _this138.cr.push(e);

                case 44:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        })));
      }
    }
  }, {
    key: "Rr",
    get: function get() {
      return this.ar.get(this.ir);
    }
  }, {
    key: "yr",
    value: function yr() {
      this.setItem(this.hr, this.Rr.er());
    }
  }, {
    key: "Er",
    value: function Er(t, e, n) {
      var s = new xo(this.currentUser, t, e, n),
          i = Do(this.persistenceKey, this.currentUser, t);
      this.setItem(i, s.er());
    }
  }, {
    key: "Ar",
    value: function Ar(t) {
      var e = Do(this.persistenceKey, this.currentUser, t);
      this.removeItem(e);
    }
  }, {
    key: "Pr",
    value: function Pr(t) {
      var e = {
        clientId: this.ir,
        onlineState: t
      };
      this.storage.setItem(this.mr, JSON.stringify(e));
    }
  }, {
    key: "br",
    value: function br(t, e, n) {
      var s = Co(this.persistenceKey, t),
          i = new No(t, e, n);
      this.setItem(s, i.er());
    }
  }, {
    key: "Vr",
    value: function Vr(t) {
      var e = JSON.stringify(Array.from(t));
      this.setItem(this.gr, e);
    }
    /**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */

  }, {
    key: "vr",
    value: function vr(t) {
      var e = this.dr.exec(t);
      return e ? e[1] : null;
    }
    /**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */

  }, {
    key: "Dr",
    value: function Dr(t, e) {
      var n = this.vr(t);
      return ko.tr(n, e);
    }
    /**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */

  }, {
    key: "Cr",
    value: function Cr(t, e) {
      var n = this._r.exec(t),
          s = Number(n[1]),
          i = void 0 !== n[2] ? n[2] : null;

      return xo.tr(new dist_index_esm2017_C(i), s, e);
    }
    /**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */

  }, {
    key: "kr",
    value: function kr(t, e) {
      var n = this.wr.exec(t),
          s = Number(n[1]);
      return No.tr(s, e);
    }
    /**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */

  }, {
    key: "pr",
    value: function pr(t) {
      return Mo.tr(t);
    }
  }, {
    key: "Or",
    value: function Or(t) {
      return JSON.parse(t);
    }
  }, {
    key: "Nr",
    value: function () {
      var _Nr = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(t) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                if (!(t.user.uid === this.currentUser.uid)) {
                  _context13.next = 2;
                  break;
                }

                return _context13.abrupt("return", this.syncEngine.$r(t.batchId, t.state, t.error));

              case 2:
                dist_index_esm2017_O("SharedClientState", "Ignoring mutation for non-active user ".concat(t.user.uid));

              case 3:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function Nr(_x20) {
        return _Nr.apply(this, arguments);
      }

      return Nr;
    }()
  }, {
    key: "Mr",
    value: function Mr(t) {
      return this.syncEngine.Br(t.targetId, t.state, t.error);
    }
  }, {
    key: "Sr",
    value: function Sr(t, e) {
      var _this139 = this;

      var n = e ? this.ar.insert(t, e) : this.ar.remove(t),
          s = this.Tr(this.ar),
          i = this.Tr(n),
          r = [],
          o = [];
      return i.forEach(function (t) {
        s.has(t) || r.push(t);
      }), s.forEach(function (t) {
        i.has(t) || o.push(t);
      }), this.syncEngine.Lr(r, o).then(function () {
        _this139.ar = n;
      });
    }
  }, {
    key: "Ir",
    value: function Ir(t) {
      // We check whether the client that wrote this online state is still active
      // by comparing its client ID to the list of clients kept active in
      // IndexedDb. If a client does not update their IndexedDb client state
      // within 5 seconds, it is considered inactive and we don't emit an online
      // state event.
      this.ar.get(t.clientId) && this.onlineStateHandler(t.onlineState);
    }
  }, {
    key: "Tr",
    value: function Tr(t) {
      var e = index_esm2017_Zn();
      return t.forEach(function (t, n) {
        e = e.unionWith(n.activeTargetIds);
      }), e;
    }
  }], [{
    key: "vt",
    value: function vt(t) {
      return !(!t || !t.localStorage);
    }
  }]);

  return Fo;
}()));

var $o = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function $o() {
    firestore_dist_index_esm2017_classCallCheck(this, $o);

    this.Ur = new Oo(), this.qr = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
  }

  firestore_dist_index_esm2017_createClass($o, [{
    key: "addPendingMutation",
    value: function addPendingMutation(t) {// No op.
    }
  }, {
    key: "updateMutationState",
    value: function updateMutationState(t, e, n) {// No op.
    }
  }, {
    key: "addLocalQueryTarget",
    value: function addLocalQueryTarget(t) {
      return this.Ur.nr(t), this.qr[t] || "not-current";
    }
  }, {
    key: "updateQueryState",
    value: function updateQueryState(t, e, n) {
      this.qr[t] = e;
    }
  }, {
    key: "removeLocalQueryTarget",
    value: function removeLocalQueryTarget(t) {
      this.Ur.sr(t);
    }
  }, {
    key: "isLocalQueryTarget",
    value: function isLocalQueryTarget(t) {
      return this.Ur.activeTargetIds.has(t);
    }
  }, {
    key: "clearQueryState",
    value: function clearQueryState(t) {
      delete this.qr[t];
    }
  }, {
    key: "getAllActiveQueryTargets",
    value: function getAllActiveQueryTargets() {
      return this.Ur.activeTargetIds;
    }
  }, {
    key: "isActiveQueryTarget",
    value: function isActiveQueryTarget(t) {
      return this.Ur.activeTargetIds.has(t);
    }
  }, {
    key: "start",
    value: function start() {
      return this.Ur = new Oo(), Promise.resolve();
    }
  }, {
    key: "handleUserChange",
    value: function handleUserChange(t, e, n) {// No op.
    }
  }, {
    key: "setOnlineState",
    value: function setOnlineState(t) {// No op.
    }
  }, {
    key: "shutdown",
    value: function shutdown() {}
  }, {
    key: "writeSequenceNumber",
    value: function writeSequenceNumber(t) {}
  }, {
    key: "notifyBundleLoaded",
    value: function notifyBundleLoaded(t) {// No op.
    }
  }]);

  return $o;
}()));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Bo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Bo() {
    firestore_dist_index_esm2017_classCallCheck(this, Bo);
  }

  firestore_dist_index_esm2017_createClass(Bo, [{
    key: "Kr",
    value: function Kr(t) {// No-op.
    }
  }, {
    key: "shutdown",
    value: function shutdown() {// No-op.
    }
  }]);

  return Bo;
}()));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()

/* eslint-disable no-restricted-globals */

/**
 * Browser implementation of ConnectivityMonitor.
 */


var Lo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Lo() {
    var _this140 = this;

    firestore_dist_index_esm2017_classCallCheck(this, Lo);

    this.Gr = function () {
      return _this140.Qr();
    }, this.jr = function () {
      return _this140.Wr();
    }, this.zr = [], this.Hr();
  }

  firestore_dist_index_esm2017_createClass(Lo, [{
    key: "Kr",
    value: function Kr(t) {
      this.zr.push(t);
    }
  }, {
    key: "shutdown",
    value: function shutdown() {
      window.removeEventListener("online", this.Gr), window.removeEventListener("offline", this.jr);
    }
  }, {
    key: "Hr",
    value: function Hr() {
      window.addEventListener("online", this.Gr), window.addEventListener("offline", this.jr);
    }
  }, {
    key: "Qr",
    value: function Qr() {
      dist_index_esm2017_O("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");

      var _iterator59 = firestore_dist_index_esm2017_createForOfIteratorHelper(this.zr),
          _step59;

      try {
        for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
          var t = _step59.value;
          t(0
          /* AVAILABLE */
          );
        }
      } catch (err) {
        _iterator59.e(err);
      } finally {
        _iterator59.f();
      }
    }
  }, {
    key: "Wr",
    value: function Wr() {
      dist_index_esm2017_O("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");

      var _iterator60 = firestore_dist_index_esm2017_createForOfIteratorHelper(this.zr),
          _step60;

      try {
        for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
          var t = _step60.value;
          t(1
          /* UNAVAILABLE */
          );
        }
      } catch (err) {
        _iterator60.e(err);
      } finally {
        _iterator60.f();
      }
    } // TODO(chenbrian): Consider passing in window either into this component or
    // here for testing via FakeWindow.

    /** Checks that all used attributes of window are available. */

  }], [{
    key: "vt",
    value: function vt() {
      return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
    }
  }]);

  return Lo;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Uo = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery"
};
/**
 * Maps RPC names to the corresponding REST endpoint name.
 *
 * We use array notation to avoid mangling.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a simple helper class that implements the Stream interface to
 * bridge to other implementations that are streams but do not implement the
 * interface. The stream callbacks are invoked with the callOn... methods.
 */

var qo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function qo(t) {
    firestore_dist_index_esm2017_classCallCheck(this, qo);

    this.Jr = t.Jr, this.Yr = t.Yr;
  }

  firestore_dist_index_esm2017_createClass(qo, [{
    key: "Xr",
    value: function Xr(t) {
      this.Zr = t;
    }
  }, {
    key: "eo",
    value: function eo(t) {
      this.no = t;
    }
  }, {
    key: "onMessage",
    value: function onMessage(t) {
      this.so = t;
    }
  }, {
    key: "close",
    value: function close() {
      this.Yr();
    }
  }, {
    key: "send",
    value: function send(t) {
      this.Jr(t);
    }
  }, {
    key: "io",
    value: function io() {
      this.Zr();
    }
  }, {
    key: "ro",
    value: function ro(t) {
      this.no(t);
    }
  }, {
    key: "oo",
    value: function oo(t) {
      this.so(t);
    }
  }]);

  return qo;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Ko = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_ref22) {
  firestore_dist_index_esm2017_inherits(Ko, _ref22);

  var _super25 = firestore_dist_index_esm2017_createSuper(Ko);

  function Ko(t) {
    var _this141;

    firestore_dist_index_esm2017_classCallCheck(this, Ko);

    _this141 = _super25.call(this, t), _this141.forceLongPolling = t.forceLongPolling, _this141.autoDetectLongPolling = t.autoDetectLongPolling, _this141.useFetchStreams = t.useFetchStreams;
    return _this141;
  }

  firestore_dist_index_esm2017_createClass(Ko, [{
    key: "fo",
    value: function fo(t, e, n, s) {
      return new Promise(function (i, r) {
        var o = new XhrIo();
        o.listenOnce(EventType.COMPLETE, function () {
          try {
            switch (o.getLastErrorCode()) {
              case ErrorCode.NO_ERROR:
                var _e42 = o.getResponseJson();

                dist_index_esm2017_O("Connection", "XHR received:", JSON.stringify(_e42)), i(_e42);
                break;

              case ErrorCode.TIMEOUT:
                dist_index_esm2017_O("Connection", 'RPC "' + t + '" timed out'), r(new dist_index_esm2017_Q(index_esm2017_G.DEADLINE_EXCEEDED, "Request time out"));
                break;

              case ErrorCode.HTTP_ERROR:
                var _n24 = o.getStatus();

                if (dist_index_esm2017_O("Connection", 'RPC "' + t + '" failed with status:', _n24, "response text:", o.getResponseText()), _n24 > 0) {
                  var _t88 = o.getResponseJson().error;

                  if (_t88 && _t88.status && _t88.message) {
                    var _e43 = function (t) {
                      var e = t.toLowerCase().replace(/_/g, "-");
                      return Object.values(index_esm2017_G).indexOf(e) >= 0 ? e : index_esm2017_G.UNKNOWN;
                    }(_t88.status);

                    r(new dist_index_esm2017_Q(_e43, _t88.message));
                  } else r(new dist_index_esm2017_Q(index_esm2017_G.UNKNOWN, "Server responded with status " + o.getStatus()));
                } else // If we received an HTTP_ERROR but there's no status code,
                  // it's most probably a connection issue
                  r(new dist_index_esm2017_Q(index_esm2017_G.UNAVAILABLE, "Connection failed."));

                break;

              default:
                dist_index_esm2017_L();
            }
          } finally {
            dist_index_esm2017_O("Connection", 'RPC "' + t + '" completed.');
          }
        });
        var u = JSON.stringify(s);
        o.send(e, "POST", u, n, 15);
      });
    }
  }, {
    key: "wo",
    value: function wo(t, e, n) {
      var s = [this.uo, "/", "google.firestore.v1.Firestore", "/", t, "/channel"],
          i = createWebChannelTransport(),
          r = getStatEventTarget(),
          o = {
        // Required for backend stickiness, routing behavior is based on this
        // parameter.
        httpSessionIdParam: "gsessionid",
        initMessageHeaders: {},
        messageUrlParams: {
          // This param is used to improve routing and project isolation by the
          // backend and must be included in every request.
          database: "projects/".concat(this.databaseId.projectId, "/databases/").concat(this.databaseId.database)
        },
        sendRawJson: !0,
        supportsCrossDomainXhr: !0,
        internalChannelParams: {
          // Override the default timeout (randomized between 10-20 seconds) since
          // a large write batch on a slow internet connection may take a long
          // time to send to the backend. Rather than have WebChannel impose a
          // tight timeout which could lead to infinite timeouts and retries, we
          // set it very large (5-10 minutes) and rely on the browser's builtin
          // timeouts to kick in if the request isn't working.
          forwardChannelRequestTimeoutMs: 6e5
        },
        forceLongPolling: this.forceLongPolling,
        detectBufferingProxy: this.autoDetectLongPolling
      };
      this.useFetchStreams && (o.xmlHttpFactory = new FetchXmlHttpFactory({})), this.lo(o.initMessageHeaders, e, n), // Sending the custom headers we just added to request.initMessageHeaders
      // (Authorization, etc.) will trigger the browser to make a CORS preflight
      // request because the XHR will no longer meet the criteria for a "simple"
      // CORS request:
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
      // Therefore to avoid the CORS preflight request (an extra network
      // roundtrip), we use the httpHeadersOverwriteParam option to specify that
      // the headers should instead be encoded into a special "$httpHeaders" query
      // parameter, which is recognized by the webchannel backend. This is
      // formally defined here:
      // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
      // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
      // doesn't have an Origin header. So we have to exclude a few browser environments that are
      // known to (sometimes) not include an Origin. See
      // https://github.com/firebase/firebase-js-sdk/issues/1491.
      isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (o.httpHeadersOverwriteParam = "$httpHeaders");
      var u = s.join("");
      dist_index_esm2017_O("Connection", "Creating WebChannel: " + u, o);
      var a = i.createWebChannel(u, o); // WebChannel supports sending the first message with the handshake - saving
      // a network round trip. However, it will have to call send in the same
      // JS event loop as open. In order to enforce this, we delay actually
      // opening the WebChannel until send is called. Whether we have called
      // open is tracked with this variable.

      var c = !1,
          h = !1; // A flag to determine whether the stream was closed (by us or through an
      // error/close event) to avoid delivering multiple close events or sending
      // on a closed stream

      var l = new qo({
        Jr: function Jr(t) {
          h ? dist_index_esm2017_O("Connection", "Not sending because WebChannel is closed:", t) : (c || (dist_index_esm2017_O("Connection", "Opening WebChannel transport."), a.open(), c = !0), dist_index_esm2017_O("Connection", "WebChannel sending:", t), a.send(t));
        },
        Yr: function Yr() {
          return a.close();
        }
      }),
          y = function y(t, e, n) {
        // TODO(dimond): closure typing seems broken because WebChannel does
        // not implement goog.events.Listenable
        t.listen(e, function (t) {
          try {
            n(t);
          } catch (t) {
            setTimeout(function () {
              throw t;
            }, 0);
          }
        });
      }; // Closure events are guarded and exceptions are swallowed, so catch any
      // exception and rethrow using a setTimeout so they become visible again.
      // Note that eventually this function could go away if we are confident
      // enough the code is exception free.


      return y(a, WebChannel.EventType.OPEN, function () {
        h || dist_index_esm2017_O("Connection", "WebChannel transport opened.");
      }), y(a, WebChannel.EventType.CLOSE, function () {
        h || (h = !0, dist_index_esm2017_O("Connection", "WebChannel transport closed"), l.ro());
      }), y(a, WebChannel.EventType.ERROR, function (t) {
        h || (h = !0, index_esm2017_$("Connection", "WebChannel transport errored:", t), l.ro(new dist_index_esm2017_Q(index_esm2017_G.UNAVAILABLE, "The operation could not be completed")));
      }), y(a, WebChannel.EventType.MESSAGE, function (t) {
        var e;

        if (!h) {
          var _n25 = t.data[0];
          dist_index_esm2017_U(!!_n25); // TODO(b/35143891): There is a bug in One Platform that caused errors
          // (and only errors) to be wrapped in an extra array. To be forward
          // compatible with the bug we need to check either condition. The latter
          // can be removed once the fix has been rolled out.
          // Use any because msgData.error is not typed.

          var _s19 = _n25,
              _i15 = _s19.error || (null === (e = _s19[0]) || void 0 === e ? void 0 : e.error);

          if (_i15) {
            dist_index_esm2017_O("Connection", "WebChannel received error:", _i15); // error.status will be a string like 'OK' or 'NOT_FOUND'.

            var _t89 = _i15.status;

            var _e44 =
            /**
            * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
            *
            * @returns The Code equivalent to the given status string or undefined if
            *     there is no match.
            */
            function (t) {
              // lookup by string
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              var e = index_esm2017_Bn[t];
              if (void 0 !== e) return index_esm2017_qn(e);
            }(_t89),
                _n26 = _i15.message;

            void 0 === _e44 && (_e44 = index_esm2017_G.INTERNAL, _n26 = "Unknown error status: " + _t89 + " with message " + _i15.message), // Mark closed so no further events are propagated
            h = !0, l.ro(new dist_index_esm2017_Q(_e44, _n26)), a.close();
          } else dist_index_esm2017_O("Connection", "WebChannel received:", _n25), l.oo(_n25);
        }
      }), y(r, Event.STAT_EVENT, function (t) {
        t.stat === Stat.PROXY ? dist_index_esm2017_O("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && dist_index_esm2017_O("Connection", "Detected no buffering proxy");
      }), setTimeout(function () {
        // Technically we could/should wait for the WebChannel opened event,
        // but because we want to send the first message with the WebChannel
        // handshake we pretend the channel opened here (asynchronously), and
        // then delay the actual open until the first message is sent.
        l.io();
      }, 0), l;
    }
  }]);

  return Ko;
}(
/*#__PURE__*/

/**
 * Base class for all Rest-based connections to the backend (WebChannel and
 * HTTP).
 */
function () {
  function _class3(t) {
    firestore_dist_index_esm2017_classCallCheck(this, _class3);

    this.databaseInfo = t, this.databaseId = t.databaseId;
    var e = t.ssl ? "https" : "http";
    this.uo = e + "://" + t.host, this.ao = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
  }

  firestore_dist_index_esm2017_createClass(_class3, [{
    key: "co",
    value: function co(t, e, n, s, i) {
      var r = this.ho(t, e);
      dist_index_esm2017_O("RestConnection", "Sending: ", r, n);
      var o = {};
      return this.lo(o, s, i), this.fo(t, r, o, n).then(function (t) {
        return dist_index_esm2017_O("RestConnection", "Received: ", t), t;
      }, function (e) {
        throw index_esm2017_$("RestConnection", "".concat(t, " failed with error: "), e, "url: ", r, "request:", n), e;
      });
    }
  }, {
    key: "_o",
    value: function _o(t, e, n, s, i) {
      // The REST API automatically aggregates all of the streamed results, so we
      // can just use the normal invoke() method.
      return this.co(t, e, n, s, i);
    }
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */

  }, {
    key: "lo",
    value:
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */
    function lo(t, e, n) {
      t["X-Goog-Api-Client"] = "gl-js/ fire/" + dist_index_esm2017_x, // Content-Type: text/plain will avoid preflight requests which might
      // mess with CORS and redirects by proxies. If we add custom headers
      // we will need to change this code to potentially use the $httpOverwrite
      // parameter supported by ESF to avoid triggering preflight requests.
      t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), e && e.headers.forEach(function (e, n) {
        return t[n] = e;
      }), n && n.headers.forEach(function (e, n) {
        return t[n] = e;
      });
    }
  }, {
    key: "ho",
    value: function ho(t, e) {
      var n = Uo[t];
      return "".concat(this.uo, "/v1/").concat(e, ":").concat(n);
    }
  }]);

  return _class3;
}())));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Initializes the WebChannelConnection for the browser. */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The Platform's 'window' implementation or null if not available. */


function Go() {
  // `window` is not always available, e.g. in ReactNative and WebWorkers.
  // eslint-disable-next-line no-restricted-globals
  return "undefined" != typeof window ? window : null;
}
/** The Platform's 'document' implementation or null if not available. */


function Qo() {
  // `document` is not always available, e.g. in ReactNative and WebWorkers.
  // eslint-disable-next-line no-restricted-globals
  return "undefined" != typeof document ? document : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function jo(t) {
  return new ls(t,
  /* useProto3Json= */
  !0);
}
/**
 * An instance of the Platform's 'TextEncoder' implementation.
 */

/**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */


var Wo = /*#__PURE__*/function () {
  function Wo(
  /**
   * The AsyncQueue to run backoff operations on.
   */
  t,
  /**
   * The ID to use when scheduling backoff operations on the AsyncQueue.
   */
  e) {
    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;
    var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.5;
    var i = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 6e4;

    firestore_dist_index_esm2017_classCallCheck(this, Wo);

    this.Yn = t, this.timerId = e, this.mo = n, this.yo = s, this.po = i, this.Io = 0, this.To = null,
    /** The last backoff attempt, as epoch milliseconds. */
    this.Eo = Date.now(), this.reset();
  }
  /**
   * Resets the backoff delay.
   *
   * The very next backoffAndWait() will have no delay. If it is called again
   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
   * subsequent ones will increase according to the backoffFactor.
   */


  firestore_dist_index_esm2017_createClass(Wo, [{
    key: "reset",
    value: function reset() {
      this.Io = 0;
    }
    /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */

  }, {
    key: "Ao",
    value: function Ao() {
      this.Io = this.po;
    }
    /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */

  }, {
    key: "Ro",
    value: function Ro(t) {
      var _this142 = this;

      // Cancel any pending backoff operation.
      this.cancel(); // First schedule using the current base (which may be 0 and should be
      // honored as such).

      var e = Math.floor(this.Io + this.bo()),
          n = Math.max(0, Date.now() - this.Eo),
          s = Math.max(0, e - n); // Guard against lastAttemptTime being in the future due to a clock change.

      s > 0 && dist_index_esm2017_O("ExponentialBackoff", "Backing off for ".concat(s, " ms (base delay: ").concat(this.Io, " ms, delay with jitter: ").concat(e, " ms, last attempt: ").concat(n, " ms ago)")), this.To = this.Yn.enqueueAfterDelay(this.timerId, s, function () {
        return _this142.Eo = Date.now(), t();
      }), // Apply backoff factor to determine next delay and ensure it is within
      // bounds.
      this.Io *= this.yo, this.Io < this.mo && (this.Io = this.mo), this.Io > this.po && (this.Io = this.po);
    }
  }, {
    key: "Po",
    value: function Po() {
      null !== this.To && (this.To.skipDelay(), this.To = null);
    }
  }, {
    key: "cancel",
    value: function cancel() {
      null !== this.To && (this.To.cancel(), this.To = null);
    }
    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */

  }, {
    key: "bo",
    value: function bo() {
      return (Math.random() - .5) * this.Io;
    }
  }]);

  return Wo;
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */


var zo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function zo(t, e, n, s, i, r, o, u) {
    firestore_dist_index_esm2017_classCallCheck(this, zo);

    this.Yn = t, this.Vo = n, this.vo = s, this.So = i, this.authCredentialsProvider = r, this.appCheckCredentialsProvider = o, this.listener = u, this.state = 0
    /* Initial */
    ,
    /**
     * A close count that's incremented every time the stream is closed; used by
     * getCloseGuardedDispatcher() to invalidate callbacks that happen after
     * close.
     */
    this.Do = 0, this.Co = null, this.xo = null, this.stream = null, this.No = new Wo(t, e);
  }
  /**
   * Returns true if start() has been called and no error has occurred. True
   * indicates the stream is open or in the process of opening (which
   * encompasses respecting backoff, getting auth tokens, and starting the
   * actual RPC). Use isOpen() to determine if the stream is open and ready for
   * outbound requests.
   */


  firestore_dist_index_esm2017_createClass(zo, [{
    key: "ko",
    value: function ko() {
      return 1
      /* Starting */
      === this.state || 5
      /* Backoff */
      === this.state || this.Mo();
    }
    /**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */

  }, {
    key: "Mo",
    value: function Mo() {
      return 2
      /* Open */
      === this.state || 3
      /* Healthy */
      === this.state;
    }
    /**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */

  }, {
    key: "start",
    value: function start() {
      4
      /* Error */
      !== this.state ? this.auth() : this.Oo();
    }
    /**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */

  }, {
    key: "stop",
    value: function () {
      var _stop = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.t0 = this.ko();

                if (!_context14.t0) {
                  _context14.next = 4;
                  break;
                }

                _context14.next = 4;
                return this.close(0
                /* Initial */
                );

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function stop() {
        return _stop.apply(this, arguments);
      }

      return stop;
    }()
    /**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */

  }, {
    key: "Fo",
    value: function Fo() {
      this.state = 0
      /* Initial */
      , this.No.reset();
    }
    /**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */

  }, {
    key: "$o",
    value: function $o() {
      var _this143 = this;

      // Starts the idle time if we are in state 'Open' and are not yet already
      // running a timer (in which case the previous idle timeout still applies).
      this.Mo() && null === this.Co && (this.Co = this.Yn.enqueueAfterDelay(this.Vo, 6e4, function () {
        return _this143.Bo();
      }));
    }
    /** Sends a message to the underlying stream. */

  }, {
    key: "Lo",
    value: function Lo(t) {
      this.Uo(), this.stream.send(t);
    }
    /** Called by the idle timer when the stream should close due to inactivity. */

  }, {
    key: "Bo",
    value: function () {
      var _Bo = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                if (!this.Mo()) {
                  _context15.next = 2;
                  break;
                }

                return _context15.abrupt("return", this.close(0
                /* Initial */
                ));

              case 2:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function Bo() {
        return _Bo.apply(this, arguments);
      }

      return Bo;
    }()
    /** Marks the stream as active again. */

  }, {
    key: "Uo",
    value: function Uo() {
      this.Co && (this.Co.cancel(), this.Co = null);
    }
    /** Cancels the health check delayed operation. */

  }, {
    key: "qo",
    value: function qo() {
      this.xo && (this.xo.cancel(), this.xo = null);
    }
    /**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState - the intended state of the stream after closing.
     * @param error - the error the connection was closed with.
     */

  }, {
    key: "close",
    value: function () {
      var _close = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(t, e) {
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                this.Uo();
                this.qo();
                this.No.cancel();
                // Invalidates any stream-related callbacks (e.g. from auth or the
                // underlying stream), guaranteeing they won't execute.
                this.Do++;
                4
                /* Error */
                !== t ? // If this is an intentional close ensure we don't delay our next connection attempt.
                this.No.reset() : e && e.code === index_esm2017_G.RESOURCE_EXHAUSTED ? ( // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                dist_index_esm2017_F(e.toString()), dist_index_esm2017_F("Using maximum backoff delay to prevent overloading the backend."), this.No.Ao()) : e && e.code === index_esm2017_G.UNAUTHENTICATED && 3
                /* Healthy */
                !== this.state && ( // "unauthenticated" error means the token was rejected. This should rarely
                // happen since both Auth and AppCheck ensure a sufficient TTL when we
                // request a token. If a user manually resets their system clock this can
                // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
                // before we received the first message and we need to invalidate the token
                // to ensure that we fetch a new token.
                this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken());
                // Clean up the underlying stream because we are no longer interested in events.
                null !== this.stream && (this.Ko(), this.stream.close(), this.stream = null);
                // This state must be assigned before calling onClose() to allow the callback to
                // inhibit backoff or otherwise manipulate the state in its non-started state.
                this.state = t;
                _context16.next = 9;
                return this.listener.eo(e);

              case 9:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function close(_x21, _x22) {
        return _close.apply(this, arguments);
      }

      return close;
    }()
    /**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */

  }, {
    key: "Ko",
    value: function Ko() {}
  }, {
    key: "auth",
    value: function auth() {
      var _this144 = this;

      this.state = 1
      /* Starting */
      ;
      var t = this.Go(this.Do),
          e = this.Do; // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.

      Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(function (_ref23) {
        var _ref24 = dist_index_esm2017_slicedToArray(_ref23, 2),
            t = _ref24[0],
            n = _ref24[1];

        // Stream can be stopped while waiting for authentication.
        // TODO(mikelehen): We really should just use dispatchIfNotClosed
        // and let this dispatch onto the queue, but that opened a spec test can
        // of worms that I don't want to deal with in this PR.
        _this144.Do === e && // Normally we'd have to schedule the callback on the AsyncQueue.
        // However, the following calls are safe to be called outside the
        // AsyncQueue since they don't chain asynchronous calls
        _this144.Qo(t, n);
      }, function (e) {
        t(function () {
          var t = new dist_index_esm2017_Q(index_esm2017_G.UNKNOWN, "Fetching auth token failed: " + e.message);
          return _this144.jo(t);
        });
      });
    }
  }, {
    key: "Qo",
    value: function Qo(t, e) {
      var _this145 = this;

      var n = this.Go(this.Do);
      this.stream = this.Wo(t, e), this.stream.Xr(function () {
        n(function () {
          return _this145.state = 2
          /* Open */
          , _this145.xo = _this145.Yn.enqueueAfterDelay(_this145.vo, 1e4, function () {
            return _this145.Mo() && (_this145.state = 3
            /* Healthy */
            ), Promise.resolve();
          }), _this145.listener.Xr();
        });
      }), this.stream.eo(function (t) {
        n(function () {
          return _this145.jo(t);
        });
      }), this.stream.onMessage(function (t) {
        n(function () {
          return _this145.onMessage(t);
        });
      });
    }
  }, {
    key: "Oo",
    value: function Oo() {
      var _this146 = this;

      this.state = 5
      /* Backoff */
      , this.No.Ro( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _this146.state = 0
                /* Initial */
                , _this146.start();

              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      })));
    } // Visible for tests

  }, {
    key: "jo",
    value: function jo(t) {
      // In theory the stream could close cleanly, however, in our current model
      // we never expect this to happen because if we stop a stream ourselves,
      // this callback will never be called. To prevent cases where we retry
      // without a backoff accidentally, we set the stream to error in all cases.
      return dist_index_esm2017_O("PersistentStream", "close with error: ".concat(t)), this.stream = null, this.close(4
      /* Error */
      , t);
    }
    /**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */

  }, {
    key: "Go",
    value: function Go(t) {
      var _this147 = this;

      return function (e) {
        _this147.Yn.enqueueAndForget(function () {
          return _this147.Do === t ? e() : (dist_index_esm2017_O("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve());
        });
      };
    }
  }]);

  return zo;
}()));
/**
 * A PersistentStream that implements the Listen RPC.
 *
 * Once the Listen stream has called the onOpen() listener, any number of
 * listen() and unlisten() calls can be made to control what changes will be
 * sent from the server for ListenResponses.
 */


var Ho = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_zo) {
  firestore_dist_index_esm2017_inherits(Ho, _zo);

  var _super26 = firestore_dist_index_esm2017_createSuper(Ho);

  function Ho(t, e, n, s, i, r) {
    var _this148;

    firestore_dist_index_esm2017_classCallCheck(this, Ho);

    _this148 = _super26.call(this, t, "listen_stream_connection_backoff"
    /* ListenStreamConnectionBackoff */
    , "listen_stream_idle"
    /* ListenStreamIdle */
    , "health_check_timeout"
    /* HealthCheckTimeout */
    , e, n, s, r), _this148.M = i;
    return _this148;
  }

  firestore_dist_index_esm2017_createClass(Ho, [{
    key: "Wo",
    value: function Wo(t, e) {
      return this.So.wo("Listen", t, e);
    }
  }, {
    key: "onMessage",
    value: function onMessage(t) {
      // A successful response means the stream is healthy
      this.No.reset();

      var e = Vs(this.M, t),
          n = function (t) {
        // We have only reached a consistent snapshot for the entire stream if there
        // is a read_time set and it applies to all targets (i.e. the list of
        // targets is empty). The backend is guaranteed to send such responses.
        if (!("targetChange" in t)) return index_esm2017_ct.min();
        var e = t.targetChange;
        return e.targetIds && e.targetIds.length ? index_esm2017_ct.min() : e.readTime ? ws(e.readTime) : index_esm2017_ct.min();
      }(t);

      return this.listener.zo(e, n);
    }
    /**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */

  }, {
    key: "Ho",
    value: function Ho(t) {
      var e = {};
      e.database = Es(this.M), e.addTarget = function (t, e) {
        var n;
        var s = e.target;
        return n = index_esm2017_Ae(s) ? {
          documents: Cs(t, s)
        } : {
          query: xs(t, s)
        }, n.targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = ds(t, e.resumeToken) : e.snapshotVersion.compareTo(index_esm2017_ct.min()) > 0 && ( // TODO(wuandy): Consider removing above check because it is most likely true.
        // Right now, many tests depend on this behaviour though (leaving min() out
        // of serialization).
        n.readTime = fs(t, e.snapshotVersion.toTimestamp())), n;
      }(this.M, t);
      var n = ks(this.M, t);
      n && (e.labels = n), this.Lo(e);
    }
    /**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */

  }, {
    key: "Jo",
    value: function Jo(t) {
      var e = {};
      e.database = Es(this.M), e.removeTarget = t, this.Lo(e);
    }
  }]);

  return Ho;
}(zo)));
/**
 * A Stream that implements the Write RPC.
 *
 * The Write RPC requires the caller to maintain special streamToken
 * state in between calls, to help the server understand which responses the
 * client has processed by the time the next request is made. Every response
 * will contain a streamToken; this value must be passed to the next
 * request.
 *
 * After calling start() on this stream, the next request must be a handshake,
 * containing whatever streamToken is on hand. Once a response to this
 * request is received, all pending mutations may be submitted. When
 * submitting multiple batches of mutations at the same time, it's
 * okay to use the same streamToken for the calls to writeMutations.
 *
 * TODO(b/33271235): Use proto types
 */


var Jo = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_zo2) {
  firestore_dist_index_esm2017_inherits(Jo, _zo2);

  var _super27 = firestore_dist_index_esm2017_createSuper(Jo);

  function Jo(t, e, n, s, i, r) {
    var _this149;

    firestore_dist_index_esm2017_classCallCheck(this, Jo);

    _this149 = _super27.call(this, t, "write_stream_connection_backoff"
    /* WriteStreamConnectionBackoff */
    , "write_stream_idle"
    /* WriteStreamIdle */
    , "health_check_timeout"
    /* HealthCheckTimeout */
    , e, n, s, r), _this149.M = i, _this149.Yo = !1;
    return _this149;
  }
  /**
   * Tracks whether or not a handshake has been successfully exchanged and
   * the stream is ready to accept mutations.
   */


  firestore_dist_index_esm2017_createClass(Jo, [{
    key: "Xo",
    get: function get() {
      return this.Yo;
    } // Override of PersistentStream.start

  }, {
    key: "start",
    value: function start() {
      this.Yo = !1, this.lastStreamToken = void 0, dist_index_esm2017_get(firestore_dist_index_esm2017_getPrototypeOf(Jo.prototype), "start", this).call(this);
    }
  }, {
    key: "Ko",
    value: function Ko() {
      this.Yo && this.Zo([]);
    }
  }, {
    key: "Wo",
    value: function Wo(t, e) {
      return this.So.wo("Write", t, e);
    }
  }, {
    key: "onMessage",
    value: function onMessage(t) {
      if ( // Always capture the last stream token.
      dist_index_esm2017_U(!!t.streamToken), this.lastStreamToken = t.streamToken, this.Yo) {
        // A successful first write response means the stream is healthy,
        // Note, that we could consider a successful handshake healthy, however,
        // the write itself might be causing an error we want to back off from.
        this.No.reset();
        var e = Ds(t.writeResults, t.commitTime),
            n = ws(t.commitTime);
        return this.listener.tu(n, e);
      } // The first response is always the handshake response


      return dist_index_esm2017_U(!t.writeResults || 0 === t.writeResults.length), this.Yo = !0, this.listener.eu();
    }
    /**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */

  }, {
    key: "nu",
    value: function nu() {
      // TODO(dimond): Support stream resumption. We intentionally do not set the
      // stream token on the handshake, ignoring any stream token we might have.
      var t = {};
      t.database = Es(this.M), this.Lo(t);
    }
    /** Sends a group of mutations to the Firestore backend to apply. */

  }, {
    key: "Zo",
    value: function Zo(t) {
      var _this150 = this;

      var e = {
        streamToken: this.lastStreamToken,
        writes: t.map(function (t) {
          return vs(_this150.M, t);
        })
      };
      this.Lo(e);
    }
  }]);

  return Jo;
}(zo)));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Datastore and its related methods are a wrapper around the external Google
 * Cloud Datastore grpc API, which provides an interface that is more convenient
 * for the rest of the client SDK architecture to consume.
 */

/**
 * An implementation of Datastore that exposes additional state for internal
 * consumption.
 */


var Yo = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_ref26) {
  firestore_dist_index_esm2017_inherits(Yo, _ref26);

  var _super28 = firestore_dist_index_esm2017_createSuper(Yo);

  function Yo(t, e, n, s) {
    var _this151;

    firestore_dist_index_esm2017_classCallCheck(this, Yo);

    _this151 = _super28.call(this), _this151.authCredentials = t, _this151.appCheckCredentials = e, _this151.So = n, _this151.M = s, _this151.su = !1;
    return _this151;
  }

  firestore_dist_index_esm2017_createClass(Yo, [{
    key: "iu",
    value: function iu() {
      if (this.su) throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "The client has already been terminated.");
    }
    /** Invokes the provided RPC with auth and AppCheck tokens. */

  }, {
    key: "co",
    value: function co(t, e, n) {
      var _this152 = this;

      return this.iu(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(function (_ref27) {
        var _ref28 = dist_index_esm2017_slicedToArray(_ref27, 2),
            s = _ref28[0],
            i = _ref28[1];

        return _this152.So.co(t, e, n, s, i);
      })["catch"](function (t) {
        throw "FirebaseError" === t.name ? (t.code === index_esm2017_G.UNAUTHENTICATED && (_this152.authCredentials.invalidateToken(), _this152.appCheckCredentials.invalidateToken()), t) : new dist_index_esm2017_Q(index_esm2017_G.UNKNOWN, t.toString());
      });
    }
    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */

  }, {
    key: "_o",
    value: function _o(t, e, n) {
      var _this153 = this;

      return this.iu(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(function (_ref29) {
        var _ref30 = dist_index_esm2017_slicedToArray(_ref29, 2),
            s = _ref30[0],
            i = _ref30[1];

        return _this153.So._o(t, e, n, s, i);
      })["catch"](function (t) {
        throw "FirebaseError" === t.name ? (t.code === index_esm2017_G.UNAUTHENTICATED && (_this153.authCredentials.invalidateToken(), _this153.appCheckCredentials.invalidateToken()), t) : new dist_index_esm2017_Q(index_esm2017_G.UNKNOWN, t.toString());
      });
    }
  }, {
    key: "terminate",
    value: function terminate() {
      this.su = !0;
    }
  }]);

  return Yo;
}( /*#__PURE__*/function () {
  function _class4() {
    firestore_dist_index_esm2017_classCallCheck(this, _class4);
  }

  return firestore_dist_index_esm2017_createClass(_class4);
}()))); // TODO(firestorexp): Make sure there is only one Datastore instance per
// firestore-exp client.

/**
 * A component used by the RemoteStore to track the OnlineState (that is,
 * whether or not the client as a whole should be considered to be online or
 * offline), implementing the appropriate heuristics.
 *
 * In particular, when the client is trying to connect to the backend, we
 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
 * a connection to succeed. If we have too many failures or the timeout elapses,
 * then we set the OnlineState to Offline, and the client will behave as if
 * it is offline (get()s will return cached data, etc.).
 */


var Xo = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Xo(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Xo);

    this.asyncQueue = t, this.onlineStateHandler = e,
    /** The current OnlineState. */
    this.state = "Unknown"
    /* Unknown */
    ,
    /**
     * A count of consecutive failures to open the stream. If it reaches the
     * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
     * Offline.
     */
    this.ru = 0,
    /**
     * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
     * transition from OnlineState.Unknown to OnlineState.Offline without waiting
     * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
     */
    this.ou = null,
    /**
     * Whether the client should log a warning message if it fails to connect to
     * the backend (initially true, cleared after a successful stream, or if we've
     * logged the message already).
     */
    this.uu = !0;
  }
  /**
   * Called by RemoteStore when a watch stream is started (including on each
   * backoff attempt).
   *
   * If this is the first attempt, it sets the OnlineState to Unknown and starts
   * the onlineStateTimer.
   */


  firestore_dist_index_esm2017_createClass(Xo, [{
    key: "au",
    value: function au() {
      var _this154 = this;

      0 === this.ru && (this.cu("Unknown"
      /* Unknown */
      ), this.ou = this.asyncQueue.enqueueAfterDelay("online_state_timeout"
      /* OnlineStateTimeout */
      , 1e4, function () {
        return _this154.ou = null, _this154.hu("Backend didn't respond within 10 seconds."), _this154.cu("Offline"
        /* Offline */
        ), Promise.resolve();
      }));
    }
    /**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */

  }, {
    key: "lu",
    value: function lu(t) {
      "Online"
      /* Online */
      === this.state ? this.cu("Unknown"
      /* Unknown */
      ) : (this.ru++, this.ru >= 1 && (this.fu(), this.hu("Connection failed 1 times. Most recent error: ".concat(t.toString())), this.cu("Offline"
      /* Offline */
      )));
    }
    /**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */

  }, {
    key: "set",
    value: function set(t) {
      this.fu(), this.ru = 0, "Online"
      /* Online */
      === t && ( // We've connected to watch at least once. Don't warn the developer
      // about being offline going forward.
      this.uu = !1), this.cu(t);
    }
  }, {
    key: "cu",
    value: function cu(t) {
      t !== this.state && (this.state = t, this.onlineStateHandler(t));
    }
  }, {
    key: "hu",
    value: function hu(t) {
      var e = "Could not reach Cloud Firestore backend. ".concat(t, "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.");
      this.uu ? (dist_index_esm2017_F(e), this.uu = !1) : dist_index_esm2017_O("OnlineStateTracker", e);
    }
  }, {
    key: "fu",
    value: function fu() {
      null !== this.ou && (this.ou.cancel(), this.ou = null);
    }
  }]);

  return Xo;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Zo = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function Zo(
/**
 * The local store, used to fill the write pipeline with outbound mutations.
 */
t,
/** The client-side proxy for interacting with the backend. */
e, n, s, i) {
  var _this155 = this;

  firestore_dist_index_esm2017_classCallCheck(this, Zo);

  this.localStore = t, this.datastore = e, this.asyncQueue = n, this.remoteSyncer = {},
  /**
   * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
   * LocalStore via fillWritePipeline() and have or will send to the write
   * stream.
   *
   * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
   * restart the write stream. When the stream is established the writes in the
   * pipeline will be sent in order.
   *
   * Writes remain in writePipeline until they are acknowledged by the backend
   * and thus will automatically be re-sent if the stream is interrupted /
   * restarted before they're acknowledged.
   *
   * Write responses from the backend are linked to their originating request
   * purely based on order, and so we can just shift() writes from the front of
   * the writePipeline as we receive responses.
   */
  this.du = [],
  /**
   * A mapping of watched targets that the client cares about tracking and the
   * user has explicitly called a 'listen' for this target.
   *
   * These targets may or may not have been sent to or acknowledged by the
   * server. On re-establishing the listen stream, these targets should be sent
   * to the server. The targets removed with unlistens are removed eagerly
   * without waiting for confirmation from the listen stream.
   */
  this._u = new Map(),
  /**
   * A set of reasons for why the RemoteStore may be offline. If empty, the
   * RemoteStore may start its network connections.
   */
  this.wu = new Set(),
  /**
   * Event handlers that get called when the network is disabled or enabled.
   *
   * PORTING NOTE: These functions are used on the Web client to create the
   * underlying streams (to support tree-shakeable streams). On Android and iOS,
   * the streams are created during construction of RemoteStore.
   */
  this.mu = [], this.gu = i, this.gu.Kr(function (t) {
    n.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
      return regeneratorRuntime.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.t0 = au(_this155);

              if (!_context19.t0) {
                _context19.next = 5;
                break;
              }

              dist_index_esm2017_O("RemoteStore", "Restarting streams for network reachability change.");
              _context19.next = 5;
              return function () {
                var _ref32 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(t) {
                  var e;
                  return regeneratorRuntime.wrap(function _callee18$(_context18) {
                    while (1) {
                      switch (_context18.prev = _context18.next) {
                        case 0:
                          e = dist_index_esm2017_K(t);
                          e.wu.add(4
                          /* ConnectivityChange */
                          );
                          _context18.next = 4;
                          return eu(e);

                        case 4:
                          e.yu.set("Unknown"
                          /* Unknown */
                          );
                          e.wu["delete"](4
                          /* ConnectivityChange */
                          );
                          _context18.next = 8;
                          return tu(e);

                        case 8:
                        case "end":
                          return _context18.stop();
                      }
                    }
                  }, _callee18);
                }));

                return function (_x23) {
                  return _ref32.apply(this, arguments);
                };
              }()(_this155);

            case 5:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19);
    })));
  }), this.yu = new Xo(n, s);
})));

function tu(_x24) {
  return _tu.apply(this, arguments);
}
/**
 * Temporarily disables the network. The network can be re-enabled using
 * enableNetwork().
 */


function _tu() {
  _tu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee75(t) {
    var _iterator87, _step87, e;

    return regeneratorRuntime.wrap(function _callee75$(_context75) {
      while (1) {
        switch (_context75.prev = _context75.next) {
          case 0:
            if (!au(t)) {
              _context75.next = 18;
              break;
            }

            _iterator87 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.mu);
            _context75.prev = 2;

            _iterator87.s();

          case 4:
            if ((_step87 = _iterator87.n()).done) {
              _context75.next = 10;
              break;
            }

            e = _step87.value;
            _context75.next = 8;
            return e(
            /* enabled= */
            !0);

          case 8:
            _context75.next = 4;
            break;

          case 10:
            _context75.next = 15;
            break;

          case 12:
            _context75.prev = 12;
            _context75.t0 = _context75["catch"](2);

            _iterator87.e(_context75.t0);

          case 15:
            _context75.prev = 15;

            _iterator87.f();

            return _context75.finish(15);

          case 18:
          case "end":
            return _context75.stop();
        }
      }
    }, _callee75, null, [[2, 12, 15, 18]]);
  }));
  return _tu.apply(this, arguments);
}

function eu(_x25) {
  return _eu.apply(this, arguments);
}
/**
 * Starts new listen for the given target. Uses resume token if provided. It
 * is a no-op if the target of given `TargetData` is already being listened to.
 */


function _eu() {
  _eu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee76(t) {
    var _iterator88, _step88, e;

    return regeneratorRuntime.wrap(function _callee76$(_context76) {
      while (1) {
        switch (_context76.prev = _context76.next) {
          case 0:
            _iterator88 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.mu);
            _context76.prev = 1;

            _iterator88.s();

          case 3:
            if ((_step88 = _iterator88.n()).done) {
              _context76.next = 9;
              break;
            }

            e = _step88.value;
            _context76.next = 7;
            return e(
            /* enabled= */
            !1);

          case 7:
            _context76.next = 3;
            break;

          case 9:
            _context76.next = 14;
            break;

          case 11:
            _context76.prev = 11;
            _context76.t0 = _context76["catch"](1);

            _iterator88.e(_context76.t0);

          case 14:
            _context76.prev = 14;

            _iterator88.f();

            return _context76.finish(14);

          case 17:
          case "end":
            return _context76.stop();
        }
      }
    }, _callee76, null, [[1, 11, 14, 17]]);
  }));
  return _eu.apply(this, arguments);
}

function nu(t, e) {
  var n = dist_index_esm2017_K(t);
  n._u.has(e.targetId) || ( // Mark this as something the client is currently listening for.
  n._u.set(e.targetId, e), uu(n) ? // The listen will be sent in onWatchStreamOpen
  ou(n) : Pu(n).Mo() && iu(n, e));
}
/**
 * Removes the listen from server. It is a no-op if the given target id is
 * not being listened to.
 */


function su(t, e) {
  var n = dist_index_esm2017_K(t),
      s = Pu(n);
  n._u["delete"](e), s.Mo() && ru(n, e), 0 === n._u.size && (s.Mo() ? s.$o() : au(n) && // Revert to OnlineState.Unknown if the watch stream is not open and we
  // have no listeners, since without any listens to send we cannot
  // confirm if the stream is healthy and upgrade to OnlineState.Online.
  n.yu.set("Unknown"
  /* Unknown */
  ));
}
/**
 * We need to increment the the expected number of pending responses we're due
 * from watch so we wait for the ack to process any messages from this target.
 */


function iu(t, e) {
  t.pu.Z(e.targetId), Pu(t).Ho(e);
}
/**
 * We need to increment the expected number of pending responses we're due
 * from watch so we wait for the removal on the server before we process any
 * messages from this target.
 */


function ru(t, e) {
  t.pu.Z(e), Pu(t).Jo(e);
}

function ou(t) {
  t.pu = new os({
    getRemoteKeysForTarget: function getRemoteKeysForTarget(e) {
      return t.remoteSyncer.getRemoteKeysForTarget(e);
    },
    Et: function Et(e) {
      return t._u.get(e) || null;
    }
  }), Pu(t).start(), t.yu.au();
}
/**
 * Returns whether the watch stream should be started because it's necessary
 * and has not yet been started.
 */


function uu(t) {
  return au(t) && !Pu(t).ko() && t._u.size > 0;
}

function au(t) {
  return 0 === dist_index_esm2017_K(t).wu.size;
}

function cu(t) {
  t.pu = void 0;
}

function hu(_x26) {
  return _hu.apply(this, arguments);
}

function _hu() {
  _hu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee77(t) {
    return regeneratorRuntime.wrap(function _callee77$(_context77) {
      while (1) {
        switch (_context77.prev = _context77.next) {
          case 0:
            t._u.forEach(function (e, n) {
              iu(t, e);
            });

          case 1:
          case "end":
            return _context77.stop();
        }
      }
    }, _callee77);
  }));
  return _hu.apply(this, arguments);
}

function lu(_x27, _x28) {
  return _lu.apply(this, arguments);
}

function _lu() {
  _lu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee78(t, e) {
    return regeneratorRuntime.wrap(function _callee78$(_context78) {
      while (1) {
        switch (_context78.prev = _context78.next) {
          case 0:
            cu(t), // If we still need the watch stream, retry the connection.
            uu(t) ? (t.yu.lu(e), ou(t)) : // No need to restart watch stream because there are no active targets.
            // The online state is set to unknown because there is no active attempt
            // at establishing a connection
            t.yu.set("Unknown"
            /* Unknown */
            );

          case 1:
          case "end":
            return _context78.stop();
        }
      }
    }, _callee78);
  }));
  return _lu.apply(this, arguments);
}

function fu(_x29, _x30, _x31) {
  return _fu.apply(this, arguments);
}
/**
 * Recovery logic for IndexedDB errors that takes the network offline until
 * `op` succeeds. Retries are scheduled with backoff using
 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
 * validated via a generic operation.
 *
 * The returned Promise is resolved once the network is disabled and before
 * any retry attempt.
 */


function _fu() {
  _fu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee80(t, e, n) {
    var _e58;

    return regeneratorRuntime.wrap(function _callee80$(_context80) {
      while (1) {
        switch (_context80.prev = _context80.next) {
          case 0:
            if (!( // Mark the client as online since we got a message from the server
            t.yu.set("Online"
            /* Online */
            ), e instanceof is && 2
            /* Removed */
            === e.state && e.cause)) {
              _context80.next = 13;
              break;
            }

            _context80.prev = 1;
            _context80.next = 4;
            return (
              /** Handles an error on a target */
              function () {
                var _ref66 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee79(t, e) {
                  var n, _iterator89, _step89, s;

                  return regeneratorRuntime.wrap(function _callee79$(_context79) {
                    while (1) {
                      switch (_context79.prev = _context79.next) {
                        case 0:
                          n = e.cause;
                          _iterator89 = firestore_dist_index_esm2017_createForOfIteratorHelper(e.targetIds);
                          _context79.prev = 2;

                          _iterator89.s();

                        case 4:
                          if ((_step89 = _iterator89.n()).done) {
                            _context79.next = 14;
                            break;
                          }

                          s = _step89.value;
                          _context79.t0 = t._u.has(s);

                          if (!_context79.t0) {
                            _context79.next = 12;
                            break;
                          }

                          _context79.next = 10;
                          return t.remoteSyncer.rejectListen(s, n);

                        case 10:
                          t._u["delete"](s);

                          t.pu.removeTarget(s);

                        case 12:
                          _context79.next = 4;
                          break;

                        case 14:
                          _context79.next = 19;
                          break;

                        case 16:
                          _context79.prev = 16;
                          _context79.t1 = _context79["catch"](2);

                          _iterator89.e(_context79.t1);

                        case 19:
                          _context79.prev = 19;

                          _iterator89.f();

                          return _context79.finish(19);

                        case 22:
                        case "end":
                          return _context79.stop();
                      }
                    }
                  }, _callee79, null, [[2, 16, 19, 22]]);
                }));

                return function (_x133, _x134) {
                  return _ref66.apply(this, arguments);
                };
              }()
              /**
              * Attempts to fill our write pipeline with writes from the LocalStore.
              *
              * Called internally to bootstrap or refill the write pipeline and by
              * SyncEngine whenever there are new mutations to process.
              *
              * Starts the write stream if necessary.
              */
              (t, e)
            );

          case 4:
            _context80.next = 11;
            break;

          case 6:
            _context80.prev = 6;
            _context80.t0 = _context80["catch"](1);
            dist_index_esm2017_O("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), _context80.t0);
            _context80.next = 11;
            return du(t, _context80.t0);

          case 11:
            _context80.next = 29;
            break;

          case 13:
            if (!(e instanceof ns ? t.pu.ut(e) : e instanceof ss ? t.pu._t(e) : t.pu.ht(e), !n.isEqual(index_esm2017_ct.min()))) {
              _context80.next = 29;
              break;
            }

            _context80.prev = 14;
            _context80.next = 17;
            return ro(t.localStore);

          case 17:
            _e58 = _context80.sent;
            _context80.t1 = n.compareTo(_e58) >= 0;

            if (!_context80.t1) {
              _context80.next = 22;
              break;
            }

            _context80.next = 22;
            return (
              /**
              * Takes a batch of changes from the Datastore, repackages them as a
              * RemoteEvent, and passes that on to the listener, which is typically the
              * SyncEngine.
              */
              function (t, e) {
                var n = t.pu.yt(e); // Update in-memory resume tokens. LocalStore will update the
                // persistent view of these when applying the completed RemoteEvent.

                // Update in-memory resume tokens. LocalStore will update the
                // persistent view of these when applying the completed RemoteEvent.
                return n.targetChanges.forEach(function (n, s) {
                  if (n.resumeToken.approximateByteSize() > 0) {
                    var i = t._u.get(s); // A watched target might have been removed already.


                    // A watched target might have been removed already.
                    i && t._u.set(s, i.withResumeToken(n.resumeToken, e));
                  }
                }), // Re-establish listens for the targets that have been invalidated by
                // existence filter mismatches.
                n.targetMismatches.forEach(function (e) {
                  var n = t._u.get(e);

                  if (!n) // A watched target might have been removed already.
                    return; // Clear the resume token for the target, since we're in a known mismatch
                  // state.

                  // Clear the resume token for the target, since we're in a known mismatch
                  // state.
                  t._u.set(e, n.withResumeToken(index_esm2017_pt.EMPTY_BYTE_STRING, n.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
                  // deliberately don't send a resume token so that we get a full update.
                  ru(t, e); // Mark the target we send as being on behalf of an existence filter
                  // mismatch, but don't actually retain that in listenTargets. This ensures
                  // that we flag the first re-listen this way without impacting future
                  // listens of this target (that might happen e.g. on reconnect).

                  // Mark the target we send as being on behalf of an existence filter
                  // mismatch, but don't actually retain that in listenTargets. This ensures
                  // that we flag the first re-listen this way without impacting future
                  // listens of this target (that might happen e.g. on reconnect).
                  var s = new Ni(n.target, e, 1
                  /* ExistenceFilterMismatch */
                  , n.sequenceNumber);
                  iu(t, s);
                }), t.remoteSyncer.applyRemoteEvent(n);
              }(t, n)
            );

          case 22:
            _context80.next = 29;
            break;

          case 24:
            _context80.prev = 24;
            _context80.t2 = _context80["catch"](14);
            dist_index_esm2017_O("RemoteStore", "Failed to raise snapshot:", _context80.t2);
            _context80.next = 29;
            return du(t, _context80.t2);

          case 29:
          case "end":
            return _context80.stop();
        }
      }
    }, _callee80, null, [[1, 6], [14, 24]]);
  }));
  return _fu.apply(this, arguments);
}

function du(_x32, _x33, _x34) {
  return _du.apply(this, arguments);
}
/**
 * Executes `op`. If `op` fails, takes the network offline until `op`
 * succeeds. Returns after the first attempt.
 */


function _du() {
  _du = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee82(t, e, n) {
    return regeneratorRuntime.wrap(function _callee82$(_context82) {
      while (1) {
        switch (_context82.prev = _context82.next) {
          case 0:
            if (Ai(e)) {
              _context82.next = 2;
              break;
            }

            throw e;

          case 2:
            t.wu.add(1
            /* IndexedDbFailed */
            );
            _context82.next = 5;
            return eu(t);

          case 5:
            t.yu.set("Offline"
            /* Offline */
            );
            n || ( // Use a simple read operation to determine if IndexedDB recovered.
            // Ideally, we would expose a health check directly on SimpleDb, but
            // RemoteStore only has access to persistence through LocalStore.
            n = function n() {
              return ro(t.localStore);
            });
            // Probe IndexedDB periodically and re-enable network
            t.asyncQueue.enqueueRetryable( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee81() {
              return regeneratorRuntime.wrap(function _callee81$(_context81) {
                while (1) {
                  switch (_context81.prev = _context81.next) {
                    case 0:
                      dist_index_esm2017_O("RemoteStore", "Retrying IndexedDB access");
                      _context81.next = 3;
                      return n();

                    case 3:
                      t.wu["delete"](1
                      /* IndexedDbFailed */
                      );
                      _context81.next = 6;
                      return tu(t);

                    case 6:
                    case "end":
                      return _context81.stop();
                  }
                }
              }, _callee81);
            })));

          case 8:
          case "end":
            return _context82.stop();
        }
      }
    }, _callee82);
  }));
  return _du.apply(this, arguments);
}

function _u(t, e) {
  return e()["catch"](function (n) {
    return du(t, n, e);
  });
}

function wu(_x35) {
  return _wu.apply(this, arguments);
}
/**
 * Returns true if we can add to the write pipeline (i.e. the network is
 * enabled and the write pipeline is not full).
 */


function _wu() {
  _wu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee83(t) {
    var e, n, s, _t119;

    return regeneratorRuntime.wrap(function _callee83$(_context83) {
      while (1) {
        switch (_context83.prev = _context83.next) {
          case 0:
            e = dist_index_esm2017_K(t), n = Vu(e);
            s = e.du.length > 0 ? e.du[e.du.length - 1].batchId : -1;

          case 2:
            if (!mu(e)) {
              _context83.next = 19;
              break;
            }

            _context83.prev = 3;
            _context83.next = 6;
            return ao(e.localStore, s);

          case 6:
            _t119 = _context83.sent;

            if (!(null === _t119)) {
              _context83.next = 10;
              break;
            }

            0 === e.du.length && n.$o();
            return _context83.abrupt("break", 19);

          case 10:
            s = _t119.batchId, gu(e, _t119);
            _context83.next = 17;
            break;

          case 13:
            _context83.prev = 13;
            _context83.t0 = _context83["catch"](3);
            _context83.next = 17;
            return du(e, _context83.t0);

          case 17:
            _context83.next = 2;
            break;

          case 19:
            yu(e) && pu(e);

          case 20:
          case "end":
            return _context83.stop();
        }
      }
    }, _callee83, null, [[3, 13]]);
  }));
  return _wu.apply(this, arguments);
}

function mu(t) {
  return au(t) && t.du.length < 10;
}
/**
 * Queues additional writes to be sent to the write stream, sending them
 * immediately if the write stream is established.
 */


function gu(t, e) {
  t.du.push(e);
  var n = Vu(t);
  n.Mo() && n.Xo && n.Zo(e.mutations);
}

function yu(t) {
  return au(t) && !Vu(t).ko() && t.du.length > 0;
}

function pu(t) {
  Vu(t).start();
}

function Iu(_x36) {
  return _Iu.apply(this, arguments);
}

function _Iu() {
  _Iu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee84(t) {
    return regeneratorRuntime.wrap(function _callee84$(_context84) {
      while (1) {
        switch (_context84.prev = _context84.next) {
          case 0:
            Vu(t).nu();

          case 1:
          case "end":
            return _context84.stop();
        }
      }
    }, _callee84);
  }));
  return _Iu.apply(this, arguments);
}

function Tu(_x37) {
  return _Tu.apply(this, arguments);
}

function _Tu() {
  _Tu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee85(t) {
    var e, _iterator90, _step90, n;

    return regeneratorRuntime.wrap(function _callee85$(_context85) {
      while (1) {
        switch (_context85.prev = _context85.next) {
          case 0:
            e = Vu(t); // Send the write pipeline now that the stream is established.

            _iterator90 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.du);

            try {
              for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
                n = _step90.value;
                e.Zo(n.mutations);
              }
            } catch (err) {
              _iterator90.e(err);
            } finally {
              _iterator90.f();
            }

          case 3:
          case "end":
            return _context85.stop();
        }
      }
    }, _callee85);
  }));
  return _Tu.apply(this, arguments);
}

function Eu(_x38, _x39, _x40) {
  return _Eu.apply(this, arguments);
}

function _Eu() {
  _Eu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee86(t, e, n) {
    var s, i;
    return regeneratorRuntime.wrap(function _callee86$(_context86) {
      while (1) {
        switch (_context86.prev = _context86.next) {
          case 0:
            s = t.du.shift(), i = Ci.from(s, e, n);
            _context86.next = 3;
            return _u(t, function () {
              return t.remoteSyncer.applySuccessfulWrite(i);
            });

          case 3:
            _context86.next = 5;
            return wu(t);

          case 5:
          case "end":
            return _context86.stop();
        }
      }
    }, _callee86);
  }));
  return _Eu.apply(this, arguments);
}

function Au(_x41, _x42) {
  return _Au.apply(this, arguments);
}

function _Au() {
  _Au = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee88(t, e) {
    return regeneratorRuntime.wrap(function _callee88$(_context88) {
      while (1) {
        switch (_context88.prev = _context88.next) {
          case 0:
            _context88.t0 = e && Vu(t).Xo;

            if (!_context88.t0) {
              _context88.next = 4;
              break;
            }

            _context88.next = 4;
            return function () {
              var _ref68 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee87(t, e) {
                var _n41, n;

                return regeneratorRuntime.wrap(function _callee87$(_context87) {
                  while (1) {
                    switch (_context87.prev = _context87.next) {
                      case 0:
                        if (!(n = e.code, index_esm2017_Un(n) && n !== index_esm2017_G.ABORTED)) {
                          _context87.next = 7;
                          break;
                        }

                        // This was a permanent error, the request itself was the problem
                        // so it's not going to succeed if we resend it.
                        _n41 = t.du.shift(); // In this case it's also unlikely that the server itself is melting
                        // down -- this was just a bad request so inhibit backoff on the next
                        // restart.

                        Vu(t).Fo();
                        _context87.next = 5;
                        return _u(t, function () {
                          return t.remoteSyncer.rejectFailedWrite(_n41.batchId, e);
                        });

                      case 5:
                        _context87.next = 7;
                        return wu(t);

                      case 7:
                      case "end":
                        return _context87.stop();
                    }
                  }
                }, _callee87);
              }));

              return function (_x135, _x136) {
                return _ref68.apply(this, arguments);
              };
            }()(t, e);

          case 4:
            // The write stream might have been started by refilling the write
            // pipeline for failed writes
            yu(t) && pu(t);

          case 5:
          case "end":
            return _context88.stop();
        }
      }
    }, _callee88);
  }));
  return _Au.apply(this, arguments);
}

function Ru(_x43, _x44) {
  return _Ru.apply(this, arguments);
}
/**
 * Toggles the network state when the client gains or loses its primary lease.
 */


function _Ru() {
  _Ru = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee89(t, e) {
    var n, s;
    return regeneratorRuntime.wrap(function _callee89$(_context89) {
      while (1) {
        switch (_context89.prev = _context89.next) {
          case 0:
            n = dist_index_esm2017_K(t);
            n.asyncQueue.verifyOperationInProgress(), dist_index_esm2017_O("RemoteStore", "RemoteStore received new credentials");
            s = au(n); // Tear down and re-create our network streams. This will ensure we get a
            // fresh auth token for the new user and re-fill the write pipeline with
            // new mutations from the LocalStore (since mutations are per-user).

            n.wu.add(3
            /* CredentialChange */
            );
            _context89.next = 6;
            return eu(n);

          case 6:
            s && // Don't set the network status to Unknown if we are offline.
            n.yu.set("Unknown"
            /* Unknown */
            );
            _context89.next = 9;
            return n.remoteSyncer.handleCredentialChange(e);

          case 9:
            n.wu["delete"](3
            /* CredentialChange */
            );
            _context89.next = 12;
            return tu(n);

          case 12:
          case "end":
            return _context89.stop();
        }
      }
    }, _callee89);
  }));
  return _Ru.apply(this, arguments);
}

function bu(_x45, _x46) {
  return _bu.apply(this, arguments);
}
/**
 * If not yet initialized, registers the WatchStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */


function _bu() {
  _bu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee90(t, e) {
    var n;
    return regeneratorRuntime.wrap(function _callee90$(_context90) {
      while (1) {
        switch (_context90.prev = _context90.next) {
          case 0:
            n = dist_index_esm2017_K(t);

            if (!e) {
              _context90.next = 7;
              break;
            }

            n.wu["delete"](2
            /* IsSecondary */
            );
            _context90.next = 5;
            return tu(n);

          case 5:
            _context90.next = 13;
            break;

          case 7:
            _context90.t0 = e;

            if (_context90.t0) {
              _context90.next = 13;
              break;
            }

            n.wu.add(2
            /* IsSecondary */
            );
            _context90.next = 12;
            return eu(n);

          case 12:
            n.yu.set("Unknown"
            /* Unknown */
            );

          case 13:
          case "end":
            return _context90.stop();
        }
      }
    }, _callee90);
  }));
  return _bu.apply(this, arguments);
}

function Pu(t) {
  return t.Iu || ( // Create stream (but note that it is not started yet).
  t.Iu = function (t, e, n) {
    var s = dist_index_esm2017_K(t);
    return s.iu(), new Ho(e, s.So, s.authCredentials, s.appCheckCredentials, s.M, n);
  }
  /**
  * @license
  * Copyright 2018 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  (t.datastore, t.asyncQueue, {
    Xr: hu.bind(null, t),
    eo: lu.bind(null, t),
    zo: fu.bind(null, t)
  }), t.mu.push( /*#__PURE__*/function () {
    var _ref33 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(e) {
      return regeneratorRuntime.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              if (!e) {
                _context20.next = 4;
                break;
              }

              t.Iu.Fo(), uu(t) ? ou(t) : t.yu.set("Unknown"
              /* Unknown */
              );
              _context20.next = 7;
              break;

            case 4:
              _context20.next = 6;
              return t.Iu.stop();

            case 6:
              cu(t);

            case 7:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    return function (_x47) {
      return _ref33.apply(this, arguments);
    };
  }())), t.Iu;
}
/**
 * If not yet initialized, registers the WriteStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */


function Vu(t) {
  return t.Tu || ( // Create stream (but note that it is not started yet).
  t.Tu = function (t, e, n) {
    var s = dist_index_esm2017_K(t);
    return s.iu(), new Jo(e, s.So, s.authCredentials, s.appCheckCredentials, s.M, n);
  }(t.datastore, t.asyncQueue, {
    Xr: Iu.bind(null, t),
    eo: Au.bind(null, t),
    eu: Tu.bind(null, t),
    tu: Eu.bind(null, t)
  }), t.mu.push( /*#__PURE__*/function () {
    var _ref34 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(e) {
      return regeneratorRuntime.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              if (!e) {
                _context21.next = 6;
                break;
              }

              t.Tu.Fo();
              _context21.next = 4;
              return wu(t);

            case 4:
              _context21.next = 9;
              break;

            case 6:
              _context21.next = 8;
              return t.Tu.stop();

            case 8:
              t.du.length > 0 && (dist_index_esm2017_O("RemoteStore", "Stopping write stream with ".concat(t.du.length, " pending writes")), t.du = []);

            case 9:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }));

    return function (_x48) {
      return _ref34.apply(this, arguments);
    };
  }())), t.Tu;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 *
 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
 * in newer versions of TypeScript defines `finally`, which is not available in
 * IE.
 */


var vu = /*#__PURE__*/function () {
  function vu(t, e, n, s, i) {
    firestore_dist_index_esm2017_classCallCheck(this, vu);

    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = s, this.removalCallback = i, this.deferred = new index_esm2017_j(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.
    this.deferred.promise["catch"](function (t) {});
  }
  /**
   * Creates and returns a DelayedOperation that has been scheduled to be
   * executed on the provided asyncQueue after the provided delayMs.
   *
   * @param asyncQueue - The queue to schedule the operation on.
   * @param id - A Timer ID identifying the type of operation this is.
   * @param delayMs - The delay (ms) before the operation should be scheduled.
   * @param op - The operation to run.
   * @param removalCallback - A callback to be called synchronously once the
   *   operation is executed or canceled, notifying the AsyncQueue to remove it
   *   from its delayedOperations list.
   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
   *   the DelayedOperation class public.
   */


  firestore_dist_index_esm2017_createClass(vu, [{
    key: "start",
    value:
    /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */
    function start(t) {
      var _this156 = this;

      this.timerHandle = setTimeout(function () {
        return _this156.handleDelayElapsed();
      }, t);
    }
    /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */

  }, {
    key: "skipDelay",
    value: function skipDelay() {
      return this.handleDelayElapsed();
    }
    /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */

  }, {
    key: "cancel",
    value: function cancel(t) {
      null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new dist_index_esm2017_Q(index_esm2017_G.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
    }
  }, {
    key: "handleDelayElapsed",
    value: function handleDelayElapsed() {
      var _this157 = this;

      this.asyncQueue.enqueueAndForget(function () {
        return null !== _this157.timerHandle ? (_this157.clearTimeout(), _this157.op().then(function (t) {
          return _this157.deferred.resolve(t);
        })) : Promise.resolve();
      });
    }
  }, {
    key: "clearTimeout",
    value: function (_clearTimeout) {
      function clearTimeout() {
        return _clearTimeout.apply(this, arguments);
      }

      clearTimeout.toString = function () {
        return _clearTimeout.toString();
      };

      return clearTimeout;
    }(function () {
      null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
    })
  }], [{
    key: "createAndSchedule",
    value: function createAndSchedule(t, e, n, s, i) {
      var r = Date.now() + n,
          o = new vu(t, e, r, s, i);
      return o.start(n), o;
    }
  }]);

  return vu;
}();
/**
 * Returns a FirestoreError that can be surfaced to the user if the provided
 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
 */


function Su(t, e) {
  if (dist_index_esm2017_F("AsyncQueue", "".concat(e, ": ").concat(t)), Ai(t)) return new dist_index_esm2017_Q(index_esm2017_G.UNAVAILABLE, "".concat(e, ": ").concat(t));
  throw t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */


var Du = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /** The default ordering is by key if the comparator is omitted */
  function Du(t) {
    firestore_dist_index_esm2017_classCallCheck(this, Du);

    // We are adding document key comparator to the end as it's the only
    // guaranteed unique property of a document.
    this.comparator = t ? function (e, n) {
      return t(e, n) || index_esm2017_xt.comparator(e.key, n.key);
    } : function (t, e) {
      return index_esm2017_xt.comparator(t.key, e.key);
    }, this.keyedMap = index_esm2017_Wn(), this.sortedSet = new index_esm2017_fe(this.comparator);
  }
  /**
   * Returns an empty copy of the existing DocumentSet, using the same
   * comparator.
   */


  firestore_dist_index_esm2017_createClass(Du, [{
    key: "has",
    value: function has(t) {
      return null != this.keyedMap.get(t);
    }
  }, {
    key: "get",
    value: function get(t) {
      return this.keyedMap.get(t);
    }
  }, {
    key: "first",
    value: function first() {
      return this.sortedSet.minKey();
    }
  }, {
    key: "last",
    value: function last() {
      return this.sortedSet.maxKey();
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.sortedSet.isEmpty();
    }
    /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */

  }, {
    key: "indexOf",
    value: function indexOf(t) {
      var e = this.keyedMap.get(t);
      return e ? this.sortedSet.indexOf(e) : -1;
    }
  }, {
    key: "size",
    get: function get() {
      return this.sortedSet.size;
    }
    /** Iterates documents in order defined by "comparator" */

  }, {
    key: "forEach",
    value: function forEach(t) {
      this.sortedSet.inorderTraversal(function (e, n) {
        return t(e), !1;
      });
    }
    /** Inserts or updates a document with the same key */

  }, {
    key: "add",
    value: function add(t) {
      // First remove the element if we have it.
      var e = this["delete"](t.key);
      return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
    }
    /** Deletes a document with a given key */

  }, {
    key: "delete",
    value: function _delete(t) {
      var e = this.get(t);
      return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      if (!(t instanceof Du)) return !1;
      if (this.size !== t.size) return !1;
      var e = this.sortedSet.getIterator(),
          n = t.sortedSet.getIterator();

      for (; e.hasNext();) {
        var _t90 = e.getNext().key,
            s = n.getNext().key;
        if (!_t90.isEqual(s)) return !1;
      }

      return !0;
    }
  }, {
    key: "toString",
    value: function toString() {
      var t = [];
      return this.forEach(function (e) {
        t.push(e.toString());
      }), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
    }
  }, {
    key: "copy",
    value: function copy(t, e) {
      var n = new Du();
      return n.comparator = this.comparator, n.keyedMap = t, n.sortedSet = e, n;
    }
  }], [{
    key: "emptySet",
    value: function emptySet(t) {
      return new Du(t.comparator);
    }
  }]);

  return Du;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */


var Cu = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Cu() {
    firestore_dist_index_esm2017_classCallCheck(this, Cu);

    this.Eu = new index_esm2017_fe(index_esm2017_xt.comparator);
  }

  firestore_dist_index_esm2017_createClass(Cu, [{
    key: "track",
    value: function track(t) {
      var e = t.doc.key,
          n = this.Eu.get(e);
      n ? // Merge the new change with the existing change.
      0
      /* Added */
      !== t.type && 3
      /* Metadata */
      === n.type ? this.Eu = this.Eu.insert(e, t) : 3
      /* Metadata */
      === t.type && 1
      /* Removed */
      !== n.type ? this.Eu = this.Eu.insert(e, {
        type: n.type,
        doc: t.doc
      }) : 2
      /* Modified */
      === t.type && 2
      /* Modified */
      === n.type ? this.Eu = this.Eu.insert(e, {
        type: 2
        /* Modified */
        ,
        doc: t.doc
      }) : 2
      /* Modified */
      === t.type && 0
      /* Added */
      === n.type ? this.Eu = this.Eu.insert(e, {
        type: 0
        /* Added */
        ,
        doc: t.doc
      }) : 1
      /* Removed */
      === t.type && 0
      /* Added */
      === n.type ? this.Eu = this.Eu.remove(e) : 1
      /* Removed */
      === t.type && 2
      /* Modified */
      === n.type ? this.Eu = this.Eu.insert(e, {
        type: 1
        /* Removed */
        ,
        doc: n.doc
      }) : 0
      /* Added */
      === t.type && 1
      /* Removed */
      === n.type ? this.Eu = this.Eu.insert(e, {
        type: 2
        /* Modified */
        ,
        doc: t.doc
      }) : // This includes these cases, which don't make sense:
      // Added->Added
      // Removed->Removed
      // Modified->Added
      // Removed->Modified
      // Metadata->Added
      // Removed->Metadata
      dist_index_esm2017_L() : this.Eu = this.Eu.insert(e, t);
    }
  }, {
    key: "Au",
    value: function Au() {
      var t = [];
      return this.Eu.inorderTraversal(function (e, n) {
        t.push(n);
      }), t;
    }
  }]);

  return Cu;
}()));

var xu = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function xu(t, e, n, s, i, r, o, u) {
    firestore_dist_index_esm2017_classCallCheck(this, xu);

    this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = s, this.mutatedKeys = i, this.fromCache = r, this.syncStateChanged = o, this.excludesMetadataChanges = u;
  }
  /** Returns a view snapshot as if all documents in the snapshot were added. */


  firestore_dist_index_esm2017_createClass(xu, [{
    key: "hasPendingWrites",
    get: function get() {
      return !this.mutatedKeys.isEmpty();
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && index_esm2017_Ye(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
      var e = this.docChanges,
          n = t.docChanges;
      if (e.length !== n.length) return !1;

      for (var _t91 = 0; _t91 < e.length; _t91++) {
        if (e[_t91].type !== n[_t91].type || !e[_t91].doc.isEqual(n[_t91].doc)) return !1;
      }

      return !0;
    }
  }], [{
    key: "fromInitialDocuments",
    value: function fromInitialDocuments(t, e, n, s) {
      var i = [];
      return e.forEach(function (t) {
        i.push({
          type: 0
          /* Added */
          ,
          doc: t
        });
      }), new xu(t, e, Du.emptySet(e), i, n, s,
      /* syncStateChanged= */
      !0,
      /* excludesMetadataChanges= */
      !1);
    }
  }]);

  return xu;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Holds the listeners and the last received ViewSnapshot for a query being
 * tracked by EventManager.
 */


var Nu = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function Nu() {
  firestore_dist_index_esm2017_classCallCheck(this, Nu);

  this.Ru = void 0, this.listeners = [];
})));

var ku = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function ku() {
  firestore_dist_index_esm2017_classCallCheck(this, ku);

  this.queries = new index_esm2017_Kn(function (t) {
    return index_esm2017_Xe(t);
  }, index_esm2017_Ye), this.onlineState = "Unknown"
  /* Unknown */
  , this.bu = new Set();
})));

function Mu(_x49, _x50) {
  return _Mu.apply(this, arguments);
}

function _Mu() {
  _Mu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee91(t, e) {
    var n, s, i, r, _n42;

    return regeneratorRuntime.wrap(function _callee91$(_context91) {
      while (1) {
        switch (_context91.prev = _context91.next) {
          case 0:
            n = dist_index_esm2017_K(t), s = e.query;
            i = !1, r = n.queries.get(s);

            if (!(r || (i = !0, r = new Nu()), i)) {
              _context91.next = 13;
              break;
            }

            _context91.prev = 3;
            _context91.next = 6;
            return n.onListen(s);

          case 6:
            r.Ru = _context91.sent;
            _context91.next = 13;
            break;

          case 9:
            _context91.prev = 9;
            _context91.t0 = _context91["catch"](3);
            _n42 = Su(_context91.t0, "Initialization of query '".concat(index_esm2017_Ze(e.query), "' failed"));
            return _context91.abrupt("return", void e.onError(_n42));

          case 13:
            if (n.queries.set(s, r), r.listeners.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
            e.Pu(n.onlineState), r.Ru) {
              e.Vu(r.Ru) && Bu(n);
            }

          case 14:
          case "end":
            return _context91.stop();
        }
      }
    }, _callee91, null, [[3, 9]]);
  }));
  return _Mu.apply(this, arguments);
}

function Ou(_x51, _x52) {
  return _Ou.apply(this, arguments);
}

function _Ou() {
  _Ou = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee92(t, e) {
    var n, s, i, r, _t120;

    return regeneratorRuntime.wrap(function _callee92$(_context92) {
      while (1) {
        switch (_context92.prev = _context92.next) {
          case 0:
            n = dist_index_esm2017_K(t), s = e.query;
            i = !1;
            r = n.queries.get(s);

            if (r) {
              _t120 = r.listeners.indexOf(e);
              _t120 >= 0 && (r.listeners.splice(_t120, 1), i = 0 === r.listeners.length);
            }

            if (!i) {
              _context92.next = 6;
              break;
            }

            return _context92.abrupt("return", (n.queries["delete"](s), n.onUnlisten(s)));

          case 6:
          case "end":
            return _context92.stop();
        }
      }
    }, _callee92);
  }));
  return _Ou.apply(this, arguments);
}

function Fu(t, e) {
  var n = dist_index_esm2017_K(t);
  var s = !1;

  var _iterator61 = firestore_dist_index_esm2017_createForOfIteratorHelper(e),
      _step61;

  try {
    for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
      var _t92 = _step61.value;
      var _e45 = _t92.query,
          i = n.queries.get(_e45);

      if (i) {
        var _iterator62 = firestore_dist_index_esm2017_createForOfIteratorHelper(i.listeners),
            _step62;

        try {
          for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
            var _e46 = _step62.value;
            _e46.Vu(_t92) && (s = !0);
          }
        } catch (err) {
          _iterator62.e(err);
        } finally {
          _iterator62.f();
        }

        i.Ru = _t92;
      }
    }
  } catch (err) {
    _iterator61.e(err);
  } finally {
    _iterator61.f();
  }

  s && Bu(n);
}

function $u(t, e, n) {
  var s = dist_index_esm2017_K(t),
      i = s.queries.get(e);

  if (i) {
    var _iterator63 = firestore_dist_index_esm2017_createForOfIteratorHelper(i.listeners),
        _step63;

    try {
      for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
        var _t93 = _step63.value;

        _t93.onError(n);
      }
    } catch (err) {
      _iterator63.e(err);
    } finally {
      _iterator63.f();
    }
  } // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
  // after an error.


  s.queries["delete"](e);
} // Call all global snapshot listeners that have been set.


function Bu(t) {
  t.bu.forEach(function (t) {
    t.next();
  });
}
/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */


var Lu = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Lu(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, Lu);

    this.query = t, this.vu = e,
    /**
     * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
     * observer. This flag is set to true once we've actually raised an event.
     */
    this.Su = !1, this.Du = null, this.onlineState = "Unknown"
    /* Unknown */
    , this.options = n || {};
  }
  /**
   * Applies the new ViewSnapshot to this listener, raising a user-facing event
   * if applicable (depending on what changed, whether the user has opted into
   * metadata-only changes, etc.). Returns true if a user-facing event was
   * indeed raised.
   */


  firestore_dist_index_esm2017_createClass(Lu, [{
    key: "Vu",
    value: function Vu(t) {
      if (!this.options.includeMetadataChanges) {
        // Remove the metadata only changes.
        var _e47 = [];

        var _iterator64 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.docChanges),
            _step64;

        try {
          for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
            var n = _step64.value;
            3
            /* Metadata */
            !== n.type && _e47.push(n);
          }
        } catch (err) {
          _iterator64.e(err);
        } finally {
          _iterator64.f();
        }

        t = new xu(t.query, t.docs, t.oldDocs, _e47, t.mutatedKeys, t.fromCache, t.syncStateChanged,
        /* excludesMetadataChanges= */
        !0);
      }

      var e = !1;
      return this.Su ? this.Cu(t) && (this.vu.next(t), e = !0) : this.xu(t, this.onlineState) && (this.Nu(t), e = !0), this.Du = t, e;
    }
  }, {
    key: "onError",
    value: function onError(t) {
      this.vu.error(t);
    }
    /** Returns whether a snapshot was raised. */

  }, {
    key: "Pu",
    value: function Pu(t) {
      this.onlineState = t;
      var e = !1;
      return this.Du && !this.Su && this.xu(this.Du, t) && (this.Nu(this.Du), e = !0), e;
    }
  }, {
    key: "xu",
    value: function xu(t, e) {
      // Always raise the first event when we're synced
      if (!t.fromCache) return !0; // NOTE: We consider OnlineState.Unknown as online (it should become Offline
      // or Online if we wait long enough).

      var n = "Offline"
      /* Offline */
      !== e; // Don't raise the event if we're online, aren't synced yet (checked
      // above) and are waiting for a sync.

      return (!this.options.ku || !n) && (!t.docs.isEmpty() || "Offline"
      /* Offline */
      === e); // Raise data from cache if we have any documents or we are offline
    }
  }, {
    key: "Cu",
    value: function Cu(t) {
      // We don't need to handle includeDocumentMetadataChanges here because
      // the Metadata only changes have already been stripped out if needed.
      // At this point the only changes we will see are the ones we should
      // propagate.
      if (t.docChanges.length > 0) return !0;
      var e = this.Du && this.Du.hasPendingWrites !== t.hasPendingWrites;
      return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges; // Generally we should have hit one of the cases above, but it's possible
      // to get here if there were only metadata docChanges and they got
      // stripped out.
    }
  }, {
    key: "Nu",
    value: function Nu(t) {
      t = xu.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.Su = !0, this.vu.next(t);
    }
  }]);

  return Lu;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A complete element in the bundle stream, together with the byte length it
 * occupies in the stream.
 */


var Uu = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Uu(t, // How many bytes this element takes to store in the bundle.
  e) {
    firestore_dist_index_esm2017_classCallCheck(this, Uu);

    this.payload = t, this.byteLength = e;
  }

  firestore_dist_index_esm2017_createClass(Uu, [{
    key: "Mu",
    value: function Mu() {
      return "metadata" in this.payload;
    }
  }]);

  return Uu;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Helper to convert objects from bundles to model objects in the SDK.
 */


var qu = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function qu(t) {
    firestore_dist_index_esm2017_classCallCheck(this, qu);

    this.M = t;
  }

  firestore_dist_index_esm2017_createClass(qu, [{
    key: "wi",
    value: function wi(t) {
      return ps(this.M, t);
    }
    /**
     * Converts a BundleDocument to a MutableDocument.
     */

  }, {
    key: "mi",
    value: function mi(t) {
      return t.metadata.exists ? bs(this.M, t.document, !1) : index_esm2017_ne.newNoDocument(this.wi(t.metadata.name), this.gi(t.metadata.readTime));
    }
  }, {
    key: "gi",
    value: function gi(t) {
      return ws(t);
    }
  }]);

  return qu;
}()));
/**
 * A class to process the elements from a bundle, load them into local
 * storage and provide progress update while loading.
 */


var Ku = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ku(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, Ku);

    this.Ou = t, this.localStore = e, this.M = n,
    /** Batched queries to be saved into storage */
    this.queries = [],
    /** Batched documents to be saved into storage */
    this.documents = [],
    /** The collection groups affected by this bundle. */
    this.collectionGroups = new Set(), this.progress = Gu(t);
  }
  /**
   * Adds an element from the bundle to the loader.
   *
   * Returns a new progress if adding the element leads to a new progress,
   * otherwise returns null.
   */


  firestore_dist_index_esm2017_createClass(Ku, [{
    key: "Fu",
    value: function Fu(t) {
      this.progress.bytesLoaded += t.byteLength;
      var e = this.progress.documentsLoaded;
      if (t.payload.namedQuery) this.queries.push(t.payload.namedQuery);else if (t.payload.documentMetadata) {
        this.documents.push({
          metadata: t.payload.documentMetadata
        }), t.payload.documentMetadata.exists || ++e;

        var n = index_esm2017_t.fromString(t.payload.documentMetadata.name);

        this.collectionGroups.add(n.get(n.length - 2));
      } else t.payload.document && (this.documents[this.documents.length - 1].document = t.payload.document, ++e);
      return e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null;
    }
  }, {
    key: "$u",
    value: function $u(t) {
      var e = new Map(),
          n = new qu(this.M);

      var _iterator65 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
          _step65;

      try {
        for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
          var s = _step65.value;

          if (s.metadata.queries) {
            var _t94 = n.wi(s.metadata.name);

            var _iterator66 = firestore_dist_index_esm2017_createForOfIteratorHelper(s.metadata.queries),
                _step66;

            try {
              for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
                var _n27 = _step66.value;

                var _s20 = (e.get(_n27) || index_esm2017_Yn()).add(_t94);

                e.set(_n27, _s20);
              }
            } catch (err) {
              _iterator66.e(err);
            } finally {
              _iterator66.f();
            }
          }
        }
      } catch (err) {
        _iterator65.e(err);
      } finally {
        _iterator65.f();
      }

      return e;
    }
    /**
     * Update the progress to 'Success' and return the updated progress.
     */

  }, {
    key: "complete",
    value: function () {
      var _complete = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
        var t, e, _iterator67, _step67, _t95;

        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return mo(this.localStore, new qu(this.M), this.documents, this.Ou.id);

              case 2:
                t = _context22.sent;
                e = this.$u(this.documents);
                _iterator67 = firestore_dist_index_esm2017_createForOfIteratorHelper(this.queries);
                _context22.prev = 5;

                _iterator67.s();

              case 7:
                if ((_step67 = _iterator67.n()).done) {
                  _context22.next = 13;
                  break;
                }

                _t95 = _step67.value;
                _context22.next = 11;
                return go(this.localStore, _t95, e.get(_t95.name));

              case 11:
                _context22.next = 7;
                break;

              case 13:
                _context22.next = 18;
                break;

              case 15:
                _context22.prev = 15;
                _context22.t0 = _context22["catch"](5);

                _iterator67.e(_context22.t0);

              case 18:
                _context22.prev = 18;

                _iterator67.f();

                return _context22.finish(18);

              case 21:
                return _context22.abrupt("return", (this.progress.taskState = "Success", {
                  progress: this.progress,
                  Bu: this.collectionGroups,
                  Lu: t
                }));

              case 22:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this, [[5, 15, 18, 21]]);
      }));

      function complete() {
        return _complete.apply(this, arguments);
      }

      return complete;
    }()
  }]);

  return Ku;
}()));
/**
 * Returns a `LoadBundleTaskProgress` representing the initial progress of
 * loading a bundle.
 */


function Gu(t) {
  return {
    taskState: "Running",
    documentsLoaded: 0,
    bytesLoaded: 0,
    totalDocuments: t.totalDocuments,
    totalBytes: t.totalBytes
  };
}
/**
 * Returns a `LoadBundleTaskProgress` representing the progress that the loading
 * has succeeded.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Qu = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function Qu(t) {
  firestore_dist_index_esm2017_classCallCheck(this, Qu);

  this.key = t;
})));

var ju = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function ju(t) {
  firestore_dist_index_esm2017_classCallCheck(this, ju);

  this.key = t;
})));
/**
 * View is responsible for computing the final merged truth of what docs are in
 * a query. It gets notified of local and remote changes to docs, and applies
 * the query filters and limits to determine the most correct possible results.
 */


var Wu = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Wu(t,
  /** Documents included in the remote target */
  e) {
    firestore_dist_index_esm2017_classCallCheck(this, Wu);

    this.query = t, this.Uu = e, this.qu = null,
    /**
     * A flag whether the view is current with the backend. A view is considered
     * current after it has seen the current flag from the backend and did not
     * lose consistency within the watch stream (e.g. because of an existence
     * filter mismatch).
     */
    this.current = !1,
    /** Documents in the view but not in the remote target */
    this.Ku = index_esm2017_Yn(),
    /** Document Keys that have local changes */
    this.mutatedKeys = index_esm2017_Yn(), this.Gu = index_esm2017_nn(t), this.Qu = new Du(this.Gu);
  }
  /**
   * The set of remote documents that the server has told us belongs to the target associated with
   * this view.
   */


  firestore_dist_index_esm2017_createClass(Wu, [{
    key: "ju",
    get: function get() {
      return this.Uu;
    }
    /**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges - The doc changes to apply to this view.
     * @param previousChanges - If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @returns a new set of docs, changes, and refill flag.
     */

  }, {
    key: "Wu",
    value: function Wu(t, e) {
      var _this158 = this;

      var n = e ? e.zu : new Cu(),
          s = e ? e.Qu : this.Qu;
      var i = e ? e.mutatedKeys : this.mutatedKeys,
          r = s,
          o = !1; // Track the last doc in a (full) limit. This is necessary, because some
      // update (a delete, or an update moving a doc past the old limit) might
      // mean there is some other document in the local cache that either should
      // come (1) between the old last limit doc and the new last document, in the
      // case of updates, or (2) after the new last document, in the case of
      // deletes. So we keep this doc at the old limit to compare the updates to.
      // Note that this should never get used in a refill (when previousChanges is
      // set), because there will only be adds -- no deletes or updates.

      var u = "F"
      /* First */
      === this.query.limitType && s.size === this.query.limit ? s.last() : null,
          a = "L"
      /* Last */
      === this.query.limitType && s.size === this.query.limit ? s.first() : null; // Drop documents out to meet limit/limitToLast requirement.

      if (t.inorderTraversal(function (t, e) {
        var c = s.get(t),
            h = index_esm2017_tn(_this158.query, e) ? e : null,
            l = !!c && _this158.mutatedKeys.has(c.key),
            f = !!h && (h.hasLocalMutations || // We only consider committed mutations for documents that were
        // mutated during the lifetime of the view.
        _this158.mutatedKeys.has(h.key) && h.hasCommittedMutations);

        var d = !1; // Calculate change

        if (c && h) {
          c.data.isEqual(h.data) ? l !== f && (n.track({
            type: 3
            /* Metadata */
            ,
            doc: h
          }), d = !0) : _this158.Hu(c, h) || (n.track({
            type: 2
            /* Modified */
            ,
            doc: h
          }), d = !0, (u && _this158.Gu(h, u) > 0 || a && _this158.Gu(h, a) < 0) && ( // This doc moved from inside the limit to outside the limit.
          // That means there may be some other doc in the local cache
          // that should be included instead.
          o = !0));
        } else !c && h ? (n.track({
          type: 0
          /* Added */
          ,
          doc: h
        }), d = !0) : c && !h && (n.track({
          type: 1
          /* Removed */
          ,
          doc: c
        }), d = !0, (u || a) && ( // A doc was removed from a full limit query. We'll need to
        // requery from the local cache to see if we know about some other
        // doc that should be in the results.
        o = !0));

        d && (h ? (r = r.add(h), i = f ? i.add(t) : i["delete"](t)) : (r = r["delete"](t), i = i["delete"](t)));
      }), null !== this.query.limit) for (; r.size > this.query.limit;) {
        var _t96 = "F"
        /* First */
        === this.query.limitType ? r.last() : r.first();

        r = r["delete"](_t96.key), i = i["delete"](_t96.key), n.track({
          type: 1
          /* Removed */
          ,
          doc: _t96
        });
      }
      return {
        Qu: r,
        zu: n,
        ii: o,
        mutatedKeys: i
      };
    }
  }, {
    key: "Hu",
    value: function Hu(t, e) {
      // We suppress the initial change event for documents that were modified as
      // part of a write acknowledgment (e.g. when the value of a server transform
      // is applied) as Watch will send us the same document again.
      // By suppressing the event, we only raise two user visible events (one with
      // `hasPendingWrites` and the final state of the document) instead of three
      // (one with `hasPendingWrites`, the modified document with
      // `hasPendingWrites` and the final state of the document).
      return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
    }
    /**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges - The set of changes to make to the view's docs.
     * @param updateLimboDocuments - Whether to update limbo documents based on
     *        this change.
     * @param targetChange - A target change to apply for computing limbo docs and
     *        sync state.
     * @returns A new ViewChange with the given docs, changes, and sync state.
     */
    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.

  }, {
    key: "applyChanges",
    value: function applyChanges(t, e, n) {
      var _this159 = this;

      var s = this.Qu;
      this.Qu = t.Qu, this.mutatedKeys = t.mutatedKeys; // Sort changes based on type and query comparator

      var i = t.zu.Au();
      i.sort(function (t, e) {
        return function (t, e) {
          var n = function n(t) {
            switch (t) {
              case 0
              /* Added */
              :
                return 1;

              case 2
              /* Modified */
              :
              case 3
              /* Metadata */
              :
                // A metadata change is converted to a modified change at the public
                // api layer.  Since we sort by document key and then change type,
                // metadata and modified changes must be sorted equivalently.
                return 2;

              case 1
              /* Removed */
              :
                return 0;

              default:
                return dist_index_esm2017_L();
            }
          };

          return n(t) - n(e);
        }
        /**
        * @license
        * Copyright 2020 Google LLC
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *   http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
        (t.type, e.type) || _this159.Gu(t.doc, e.doc);
      }), this.Ju(n);
      var r = e ? this.Yu() : [],
          o = 0 === this.Ku.size && this.current ? 1
      /* Synced */
      : 0
      /* Local */
      ,
          u = o !== this.qu;

      if (this.qu = o, 0 !== i.length || u) {
        return {
          snapshot: new xu(this.query, t.Qu, s, i, t.mutatedKeys, 0
          /* Local */
          === o, u,
          /* excludesMetadataChanges= */
          !1),
          Xu: r
        };
      } // no changes


      return {
        Xu: r
      };
    }
    /**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */

  }, {
    key: "Pu",
    value: function Pu(t) {
      return this.current && "Offline"
      /* Offline */
      === t ? ( // If we're offline, set `current` to false and then call applyChanges()
      // to refresh our syncState and generate a ViewChange as appropriate. We
      // are guaranteed to get a new TargetChange that sets `current` back to
      // true once the client is back online.
      this.current = !1, this.applyChanges({
        Qu: this.Qu,
        zu: new Cu(),
        mutatedKeys: this.mutatedKeys,
        ii: !1
      },
      /* updateLimboDocuments= */
      !1)) : {
        Xu: []
      };
    }
    /**
     * Returns whether the doc for the given key should be in limbo.
     */

  }, {
    key: "Zu",
    value: function Zu(t) {
      // If the remote end says it's part of this query, it's not in limbo.
      return !this.Uu.has(t) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
      !!this.Qu.has(t) && !this.Qu.get(t).hasLocalMutations;
    }
    /**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */

  }, {
    key: "Ju",
    value: function Ju(t) {
      var _this160 = this;

      t && (t.addedDocuments.forEach(function (t) {
        return _this160.Uu = _this160.Uu.add(t);
      }), t.modifiedDocuments.forEach(function (t) {}), t.removedDocuments.forEach(function (t) {
        return _this160.Uu = _this160.Uu["delete"](t);
      }), this.current = t.current);
    }
  }, {
    key: "Yu",
    value: function Yu() {
      var _this161 = this;

      // We can only determine limbo documents when we're in-sync with the server.
      if (!this.current) return []; // TODO(klimt): Do this incrementally so that it's not quadratic when
      // updating many documents.

      var t = this.Ku;
      this.Ku = index_esm2017_Yn(), this.Qu.forEach(function (t) {
        _this161.Zu(t.key) && (_this161.Ku = _this161.Ku.add(t.key));
      }); // Diff the new limbo docs with the old limbo docs.

      var e = [];
      return t.forEach(function (t) {
        _this161.Ku.has(t) || e.push(new ju(t));
      }), this.Ku.forEach(function (n) {
        t.has(n) || e.push(new Qu(n));
      }), e;
    }
    /**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @returns The ViewChange that resulted from this synchronization.
     */
    // PORTING NOTE: Multi-tab only.

  }, {
    key: "ta",
    value: function ta(t) {
      this.Uu = t._i, this.Ku = index_esm2017_Yn();
      var e = this.Wu(t.documents);
      return this.applyChanges(e,
      /*updateLimboDocuments=*/
      !0);
    }
    /**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */
    // PORTING NOTE: Multi-tab only.

  }, {
    key: "ea",
    value: function ea() {
      return xu.fromInitialDocuments(this.query, this.Qu, this.mutatedKeys, 0
      /* Local */
      === this.qu);
    }
  }]);

  return Wu;
}()));
/**
 * QueryView contains all of the data that SyncEngine needs to keep track of for
 * a particular query.
 */


var zu = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function zu(
/**
 * The query itself.
 */
t,
/**
 * The target number created by the client that is used in the watch
 * stream to identify this query.
 */
e,
/**
 * The view is responsible for computing the final merged truth of what
 * docs are in the query. It gets notified of local and remote changes,
 * and applies the query filters and limits to determine the most correct
 * possible results.
 */
n) {
  firestore_dist_index_esm2017_classCallCheck(this, zu);

  this.query = t, this.targetId = e, this.view = n;
})));
/** Tracks a limbo resolution. */


var Hu = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function Hu(t) {
  firestore_dist_index_esm2017_classCallCheck(this, Hu);

  this.key = t,
  /**
   * Set to true once we've received a document. This is used in
   * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
   * decide whether it needs to manufacture a delete event for the target once
   * the target is CURRENT.
   */
  this.na = !1;
})));
/**
 * An implementation of `SyncEngine` coordinating with other parts of SDK.
 *
 * The parts of SyncEngine that act as a callback to RemoteStore need to be
 * registered individually. This is done in `syncEngineWrite()` and
 * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
 * serve as entry points to RemoteStore's functionality.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */


var Ju = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ju(t, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
  s, i, r) {
    firestore_dist_index_esm2017_classCallCheck(this, Ju);

    this.localStore = t, this.remoteStore = e, this.eventManager = n, this.sharedClientState = s, this.currentUser = i, this.maxConcurrentLimboResolutions = r, this.sa = {}, this.ia = new index_esm2017_Kn(function (t) {
      return index_esm2017_Xe(t);
    }, index_esm2017_Ye), this.ra = new Map(),
    /**
     * The keys of documents that are in limbo for which we haven't yet started a
     * limbo resolution query. The strings in this set are the result of calling
     * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
     *
     * The `Set` type was chosen because it provides efficient lookup and removal
     * of arbitrary elements and it also maintains insertion order, providing the
     * desired queue-like FIFO semantics.
     */
    this.oa = new Set(),
    /**
     * Keeps track of the target ID for each document that is in limbo with an
     * active target.
     */
    this.ua = new index_esm2017_fe(index_esm2017_xt.comparator),
    /**
     * Keeps track of the information about an active limbo resolution for each
     * active target ID that was started for the purpose of limbo resolution.
     */
    this.aa = new Map(), this.ca = new Io(),
    /** Stores user completion handlers, indexed by User and BatchId. */
    this.ha = {},
    /** Stores user callbacks waiting for all pending writes to be acknowledged. */
    this.la = new Map(), this.fa = index_esm2017_br.yn(), this.onlineState = "Unknown"
    /* Unknown */
    , // The primary state is set to `true` or `false` immediately after Firestore
    // startup. In the interim, a client should only be considered primary if
    // `isPrimary` is true.
    this.da = void 0;
  }

  firestore_dist_index_esm2017_createClass(Ju, [{
    key: "isPrimaryClient",
    get: function get() {
      return !0 === this.da;
    }
  }]);

  return Ju;
}()));
/**
 * Initiates the new listen, resolves promise when listen enqueued to the
 * server. All the subsequent view snapshots or errors are sent to the
 * subscribed handlers. Returns the initial snapshot.
 */


function Yu(_x53, _x54) {
  return _Yu.apply(this, arguments);
}
/**
 * Registers a view for a previously unknown query and computes its initial
 * snapshot.
 */


function _Yu() {
  _Yu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee93(t, e) {
    var n, s, i, r, _t121, _r9;

    return regeneratorRuntime.wrap(function _callee93$(_context93) {
      while (1) {
        switch (_context93.prev = _context93.next) {
          case 0:
            n = index_esm2017_Pa(t);
            r = n.ia.get(e);

            if (!r) {
              _context93.next = 6;
              break;
            }

            // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
            // already exists when EventManager calls us for the first time. This
            // happens when the primary tab is already listening to this query on
            // behalf of another tab and the user of the primary also starts listening
            // to the query. EventManager will not have an assigned target ID in this
            // case and calls `listen` to obtain this ID.
            s = r.targetId, n.sharedClientState.addLocalQueryTarget(s), i = r.view.ea();
            _context93.next = 15;
            break;

          case 6:
            _context93.next = 8;
            return co(n.localStore, index_esm2017_He(e));

          case 8:
            _t121 = _context93.sent;
            n.isPrimaryClient && nu(n.remoteStore, _t121);
            _r9 = n.sharedClientState.addLocalQueryTarget(_t121.targetId);
            s = _t121.targetId;
            _context93.next = 14;
            return Xu(n, e, s, "current" === _r9);

          case 14:
            i = _context93.sent;

          case 15:
            return _context93.abrupt("return", i);

          case 16:
          case "end":
            return _context93.stop();
        }
      }
    }, _callee93);
  }));
  return _Yu.apply(this, arguments);
}

function Xu(_x55, _x56, _x57, _x58) {
  return _Xu.apply(this, arguments);
}
/** Stops listening to the query. */


function _Xu() {
  _Xu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee95(t, e, n, s) {
    var i, r, o, u, a, c;
    return regeneratorRuntime.wrap(function _callee95$(_context95) {
      while (1) {
        switch (_context95.prev = _context95.next) {
          case 0:
            // PORTING NOTE: On Web only, we inject the code that registers new Limbo
            // targets based on view changes. This allows us to only depend on Limbo
            // changes when user code includes queries.
            t._a = function (e, n, s) {
              return function () {
                var _ref69 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee94(t, e, n, s) {
                  var i, r, o;
                  return regeneratorRuntime.wrap(function _callee94$(_context94) {
                    while (1) {
                      switch (_context94.prev = _context94.next) {
                        case 0:
                          i = e.view.Wu(n);
                          _context94.t0 = i.ii;

                          if (!_context94.t0) {
                            _context94.next = 6;
                            break;
                          }

                          _context94.next = 5;
                          return lo(t.localStore, e.query,
                          /* usePreviousResults= */
                          !1).then(function (_ref70) {
                            var t = _ref70.documents;
                            return e.view.Wu(t, i);
                          });

                        case 5:
                          i = _context94.sent;

                        case 6:
                          r = s && s.targetChanges.get(e.targetId), o = e.view.applyChanges(i,
                          /* updateLimboDocuments= */
                          t.isPrimaryClient, r);
                          return _context94.abrupt("return", (index_esm2017_la(t, e.targetId, o.Xu), o.snapshot));

                        case 8:
                        case "end":
                          return _context94.stop();
                      }
                    }
                  }, _callee94);
                }));

                return function (_x137, _x138, _x139, _x140) {
                  return _ref69.apply(this, arguments);
                };
              }()(t, e, n, s);
            };

            _context95.next = 3;
            return lo(t.localStore, e,
            /* usePreviousResults= */
            !0);

          case 3:
            i = _context95.sent;
            r = new Wu(e, i._i);
            o = r.Wu(i.documents);
            u = es.createSynthesizedTargetChangeForCurrentChange(n, s && "Offline"
            /* Offline */
            !== t.onlineState);
            a = r.applyChanges(o,
            /* updateLimboDocuments= */
            t.isPrimaryClient, u);
            index_esm2017_la(t, n, a.Xu);
            c = new zu(e, n, r);
            return _context95.abrupt("return", (t.ia.set(e, c), t.ra.has(n) ? t.ra.get(n).push(e) : t.ra.set(n, [e]), a.snapshot));

          case 11:
          case "end":
            return _context95.stop();
        }
      }
    }, _callee95);
  }));
  return _Xu.apply(this, arguments);
}

function Zu(_x59, _x60) {
  return _Zu.apply(this, arguments);
}
/**
 * Initiates the write of local mutation batch which involves adding the
 * writes to the mutation queue, notifying the remote store about new
 * mutations and raising events for any changes this write caused.
 *
 * The promise returned by this call is resolved when the above steps
 * have completed, *not* when the write was acked by the backend. The
 * userCallback is resolved once the write was acked/rejected by the
 * backend (or failed locally for any other reason).
 */


function _Zu() {
  _Zu = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee96(t, e) {
    var n, s, i;
    return regeneratorRuntime.wrap(function _callee96$(_context96) {
      while (1) {
        switch (_context96.prev = _context96.next) {
          case 0:
            n = dist_index_esm2017_K(t), s = n.ia.get(e), i = n.ra.get(s.targetId);

            if (!(i.length > 1)) {
              _context96.next = 3;
              break;
            }

            return _context96.abrupt("return", (n.ra.set(s.targetId, i.filter(function (t) {
              return !index_esm2017_Ye(t, e);
            })), void n.ia["delete"](e)));

          case 3:
            if (!n.isPrimaryClient) {
              _context96.next = 11;
              break;
            }

            // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.
            n.sharedClientState.removeLocalQueryTarget(s.targetId);
            _context96.t0 = n.sharedClientState.isActiveQueryTarget(s.targetId);

            if (_context96.t0) {
              _context96.next = 9;
              break;
            }

            _context96.next = 9;
            return ho(n.localStore, s.targetId,
            /*keepPersistedTargetData=*/
            !1).then(function () {
              n.sharedClientState.clearQueryState(s.targetId), su(n.remoteStore, s.targetId), ca(n, s.targetId);
            })["catch"](index_esm2017_Dr);

          case 9:
            _context96.next = 14;
            break;

          case 11:
            ca(n, s.targetId);
            _context96.next = 14;
            return ho(n.localStore, s.targetId,
            /*keepPersistedTargetData=*/
            !0);

          case 14:
          case "end":
            return _context96.stop();
        }
      }
    }, _callee96);
  }));
  return _Zu.apply(this, arguments);
}

function index_esm2017_ta(_x61, _x62, _x63) {
  return _ta.apply(this, arguments);
}
/**
 * Applies one remote event to the sync engine, notifying any views of the
 * changes, and releasing any pending mutation batches that would become
 * visible because of the snapshot version the remote event contains.
 */


function _ta() {
  _ta = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee97(t, e, n) {
    var s, _t122, _e60;

    return regeneratorRuntime.wrap(function _callee97$(_context97) {
      while (1) {
        switch (_context97.prev = _context97.next) {
          case 0:
            s = index_esm2017_Va(t);
            _context97.prev = 1;
            _context97.next = 4;
            return function (t, e) {
              var n = dist_index_esm2017_K(t),
                  s = index_esm2017_at.now(),
                  i = e.reduce(function (t, e) {
                return t.add(e.key);
              }, index_esm2017_Yn());
              var r;
              return n.persistence.runTransaction("Locally write mutations", "readwrite", function (t) {
                return n.fi.Ks(t, i).next(function (i) {
                  r = i; // For non-idempotent mutations (such as `FieldValue.increment()`),
                  // we record the base state in a separate patch mutation. This is
                  // later used to guarantee consistent values and prevents flicker
                  // even if the backend sends us an update that already includes our
                  // transform.

                  // For non-idempotent mutations (such as `FieldValue.increment()`),
                  // we record the base state in a separate patch mutation. This is
                  // later used to guarantee consistent values and prevents flicker
                  // even if the backend sends us an update that already includes our
                  // transform.
                  var o = [];

                  var _iterator91 = firestore_dist_index_esm2017_createForOfIteratorHelper(e),
                      _step91;

                  try {
                    for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
                      var _t123 = _step91.value;

                      var _e59 = index_esm2017_vn(_t123, r.get(_t123.key));

                      null != _e59 && // NOTE: The base state should only be applied if there's some
                      // existing document to override, so use a Precondition of
                      // exists=true
                      o.push(new index_esm2017_xn(_t123.key, _e59, index_esm2017_ee(_e59.value.mapValue), index_esm2017_An.exists(!0)));
                    }
                  } catch (err) {
                    _iterator91.e(err);
                  } finally {
                    _iterator91.f();
                  }

                  return n.Bs.addMutationBatch(t, s, o, e);
                });
              }).then(function (t) {
                return t.applyToLocalDocumentSet(r), {
                  batchId: t.batchId,
                  changes: r
                };
              });
            }(s.localStore, e);

          case 4:
            _t122 = _context97.sent;
            s.sharedClientState.addPendingMutation(_t122.batchId);

            (function (t, e, n) {
              var s = t.ha[t.currentUser.toKey()];
              s || (s = new index_esm2017_fe(index_esm2017_rt));
              s = s.insert(e, n), t.ha[t.currentUser.toKey()] = s;
            }
            /**
            * Resolves or rejects the user callback for the given batch and then discards
            * it.
            */
            )(s, _t122.batchId, n);

            _context97.next = 9;
            return _a(s, _t122.changes);

          case 9:
            _context97.next = 11;
            return wu(s.remoteStore);

          case 11:
            _context97.next = 17;
            break;

          case 13:
            _context97.prev = 13;
            _context97.t0 = _context97["catch"](1);
            // If we can't persist the mutation, we reject the user callback and
            // don't send the mutation. The user can then retry the write.
            _e60 = Su(_context97.t0, "Failed to persist write");
            n.reject(_e60);

          case 17:
          case "end":
            return _context97.stop();
        }
      }
    }, _callee97, null, [[1, 13]]);
  }));
  return _ta.apply(this, arguments);
}

function index_esm2017_ea(_x64, _x65) {
  return _ea.apply(this, arguments);
}
/**
 * Applies an OnlineState change to the sync engine and notifies any views of
 * the change.
 */


function _ea() {
  _ea = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee98(t, e) {
    var n, _t124;

    return regeneratorRuntime.wrap(function _callee98$(_context98) {
      while (1) {
        switch (_context98.prev = _context98.next) {
          case 0:
            n = dist_index_esm2017_K(t);
            _context98.prev = 1;
            _context98.next = 4;
            return oo(n.localStore, e);

          case 4:
            _t124 = _context98.sent;
            e.targetChanges.forEach(function (t, e) {
              var s = n.aa.get(e);
              s && ( // Since this is a limbo resolution lookup, it's for a single document
              // and it could be added, modified, or removed, but not a combination.
              dist_index_esm2017_U(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), t.addedDocuments.size > 0 ? s.na = !0 : t.modifiedDocuments.size > 0 ? dist_index_esm2017_U(s.na) : t.removedDocuments.size > 0 && (dist_index_esm2017_U(s.na), s.na = !1));
            });
            _context98.next = 8;
            return _a(n, _t124, e);

          case 8:
            _context98.next = 14;
            break;

          case 10:
            _context98.prev = 10;
            _context98.t0 = _context98["catch"](1);
            _context98.next = 14;
            return index_esm2017_Dr(_context98.t0);

          case 14:
          case "end":
            return _context98.stop();
        }
      }
    }, _callee98, null, [[1, 10]]);
  }));
  return _ea.apply(this, arguments);
}

function index_esm2017_na(t, e, n) {
  var s = dist_index_esm2017_K(t); // If we are the secondary client, we explicitly ignore the remote store's
  // online state (the local client may go offline, even though the primary
  // tab remains online) and only apply the primary tab's online state from
  // SharedClientState.

  if (s.isPrimaryClient && 0
  /* RemoteStore */
  === n || !s.isPrimaryClient && 1
  /* SharedClientState */
  === n) {
    var _t97 = [];
    s.ia.forEach(function (n, s) {
      var i = s.view.Pu(e);
      i.snapshot && _t97.push(i.snapshot);
    }), function (t, e) {
      var n = dist_index_esm2017_K(t);
      n.onlineState = e;
      var s = !1;
      n.queries.forEach(function (t, n) {
        var _iterator68 = firestore_dist_index_esm2017_createForOfIteratorHelper(n.listeners),
            _step68;

        try {
          for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
            var _t98 = _step68.value;
            // Run global snapshot listeners if a consistent snapshot has been emitted.
            _t98.Pu(e) && (s = !0);
          }
        } catch (err) {
          _iterator68.e(err);
        } finally {
          _iterator68.f();
        }
      }), s && Bu(n);
    }(s.eventManager, e), _t97.length && s.sa.zo(_t97), s.onlineState = e, s.isPrimaryClient && s.sharedClientState.setOnlineState(e);
  }
}
/**
 * Rejects the listen for the given targetID. This can be triggered by the
 * backend for any active target.
 *
 * @param syncEngine - The sync engine implementation.
 * @param targetId - The targetID corresponds to one previously initiated by the
 * user as part of TargetData passed to listen() on RemoteStore.
 * @param err - A description of the condition that has forced the rejection.
 * Nearly always this will be an indication that the user is no longer
 * authorized to see the data matching the target.
 */


function index_esm2017_sa(_x66, _x67, _x68) {
  return _sa.apply(this, arguments);
}

function _sa() {
  _sa = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee99(t, e, n) {
    var s, i, r, _t125, _n43, _i19;

    return regeneratorRuntime.wrap(function _callee99$(_context99) {
      while (1) {
        switch (_context99.prev = _context99.next) {
          case 0:
            s = dist_index_esm2017_K(t); // PORTING NOTE: Multi-tab only.

            s.sharedClientState.updateQueryState(e, "rejected", n);
            i = s.aa.get(e), r = i && i.key;

            if (!r) {
              _context99.next = 14;
              break;
            }

            // TODO(klimt): We really only should do the following on permission
            // denied errors, but we don't have the cause code here.
            // It's a limbo doc. Create a synthetic event saying it was deleted.
            // This is kind of a hack. Ideally, we would have a method in the local
            // store to purge a document. However, it would be tricky to keep all of
            // the local store's invariants with another method.
            _t125 = new index_esm2017_fe(index_esm2017_xt.comparator); // TODO(b/217189216): This limbo document should ideally have a read time,
            // so that it is picked up by any read-time based scans. The backend,
            // however, does not send a read time for target removals.

            _t125 = _t125.insert(r, index_esm2017_ne.newNoDocument(r, index_esm2017_ct.min()));
            _n43 = index_esm2017_Yn().add(r), _i19 = new ts(index_esm2017_ct.min(),
            /* targetChanges= */
            new Map(),
            /* targetMismatches= */
            new index_esm2017_we(index_esm2017_rt), _t125, _n43);
            _context99.next = 9;
            return index_esm2017_ea(s, _i19);

          case 9:
            // Since this query failed, we won't want to manually unlisten to it.
            // We only remove it from bookkeeping after we successfully applied the
            // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
            // this query when the RemoteStore restarts the Watch stream, which should
            // re-trigger the target failure.
            s.ua = s.ua.remove(r);
            s.aa["delete"](e);
            index_esm2017_da(s);
            _context99.next = 16;
            break;

          case 14:
            _context99.next = 16;
            return ho(s.localStore, e,
            /* keepPersistedTargetData */
            !1).then(function () {
              return ca(s, e, n);
            })["catch"](index_esm2017_Dr);

          case 16:
          case "end":
            return _context99.stop();
        }
      }
    }, _callee99);
  }));
  return _sa.apply(this, arguments);
}

function index_esm2017_ia(_x69, _x70) {
  return _ia.apply(this, arguments);
}

function _ia() {
  _ia = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee100(t, e) {
    var n, s, _t126;

    return regeneratorRuntime.wrap(function _callee100$(_context100) {
      while (1) {
        switch (_context100.prev = _context100.next) {
          case 0:
            n = dist_index_esm2017_K(t), s = e.batch.batchId;
            _context100.prev = 1;
            _context100.next = 4;
            return io(n.localStore, e);

          case 4:
            _t126 = _context100.sent;
            index_esm2017_aa(n, s,
            /*error=*/
            null);
            index_esm2017_ua(n, s);
            n.sharedClientState.updateMutationState(s, "acknowledged");
            _context100.next = 10;
            return _a(n, _t126);

          case 10:
            _context100.next = 16;
            break;

          case 12:
            _context100.prev = 12;
            _context100.t0 = _context100["catch"](1);
            _context100.next = 16;
            return index_esm2017_Dr(_context100.t0);

          case 16:
          case "end":
            return _context100.stop();
        }
      }
    }, _callee100, null, [[1, 12]]);
  }));
  return _ia.apply(this, arguments);
}

function index_esm2017_ra(_x71, _x72, _x73) {
  return _ra.apply(this, arguments);
}
/**
 * Registers a user callback that resolves when all pending mutations at the moment of calling
 * are acknowledged .
 */


function _ra() {
  _ra = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee101(t, e, n) {
    var s, _t127;

    return regeneratorRuntime.wrap(function _callee101$(_context101) {
      while (1) {
        switch (_context101.prev = _context101.next) {
          case 0:
            s = dist_index_esm2017_K(t);
            _context101.prev = 1;
            _context101.next = 4;
            return function (t, e) {
              var n = dist_index_esm2017_K(t);
              return n.persistence.runTransaction("Reject batch", "readwrite-primary", function (t) {
                var s;
                return n.Bs.lookupMutationBatch(t, e).next(function (e) {
                  return dist_index_esm2017_U(null !== e), s = e.keys(), n.Bs.removeMutationBatch(t, e);
                }).next(function () {
                  return n.Bs.performConsistencyCheck(t);
                }).next(function () {
                  return n.fi.Ks(t, s);
                });
              });
            }
            /**
            * Returns the largest (latest) batch id in mutation queue that is pending
            * server response.
            *
            * Returns `BATCHID_UNKNOWN` if the queue is empty.
            */
            (s.localStore, e);

          case 4:
            _t127 = _context101.sent;
            index_esm2017_aa(s, e, n);
            index_esm2017_ua(s, e);
            s.sharedClientState.updateMutationState(e, "rejected", n);
            _context101.next = 10;
            return _a(s, _t127);

          case 10:
            _context101.next = 16;
            break;

          case 12:
            _context101.prev = 12;
            _context101.t0 = _context101["catch"](1);
            _context101.next = 16;
            return index_esm2017_Dr(_context101.t0);

          case 16:
          case "end":
            return _context101.stop();
        }
      }
    }, _callee101, null, [[1, 12]]);
  }));
  return _ra.apply(this, arguments);
}

function index_esm2017_oa(_x74, _x75) {
  return _oa.apply(this, arguments);
}
/**
 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
 * if there are any.
 */


function _oa() {
  _oa = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee102(t, e) {
    var n, _t128, s, _n44;

    return regeneratorRuntime.wrap(function _callee102$(_context102) {
      while (1) {
        switch (_context102.prev = _context102.next) {
          case 0:
            n = dist_index_esm2017_K(t);
            au(n.remoteStore) || dist_index_esm2017_O("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
            _context102.prev = 2;
            _context102.next = 5;
            return function (t) {
              var e = dist_index_esm2017_K(t);
              return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function (t) {
                return e.Bs.getHighestUnacknowledgedBatchId(t);
              });
            }(n.localStore);

          case 5:
            _t128 = _context102.sent;

            if (!(-1 === _t128)) {
              _context102.next = 8;
              break;
            }

            return _context102.abrupt("return", void e.resolve());

          case 8:
            s = n.la.get(_t128) || [];
            s.push(e), n.la.set(_t128, s);
            _context102.next = 16;
            break;

          case 12:
            _context102.prev = 12;
            _context102.t0 = _context102["catch"](2);
            _n44 = Su(_context102.t0, "Initialization of waitForPendingWrites() operation failed");
            e.reject(_n44);

          case 16:
          case "end":
            return _context102.stop();
        }
      }
    }, _callee102, null, [[2, 12]]);
  }));
  return _oa.apply(this, arguments);
}

function index_esm2017_ua(t, e) {
  (t.la.get(e) || []).forEach(function (t) {
    t.resolve();
  }), t.la["delete"](e);
}
/** Reject all outstanding callbacks waiting for pending writes to complete. */


function index_esm2017_aa(t, e, n) {
  var s = dist_index_esm2017_K(t);
  var i = s.ha[s.currentUser.toKey()]; // NOTE: Mutations restored from persistence won't have callbacks, so it's
  // okay for there to be no callback for this ID.

  if (i) {
    var _t99 = i.get(e);

    _t99 && (n ? _t99.reject(n) : _t99.resolve(), i = i.remove(e)), s.ha[s.currentUser.toKey()] = i;
  }
}

function ca(t, e) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  t.sharedClientState.removeLocalQueryTarget(e);

  var _iterator69 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.ra.get(e)),
      _step69;

  try {
    for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
      var s = _step69.value;
      t.ia["delete"](s), n && t.sa.wa(s, n);
    }
  } catch (err) {
    _iterator69.e(err);
  } finally {
    _iterator69.f();
  }

  if (t.ra["delete"](e), t.isPrimaryClient) {
    t.ca.vi(e).forEach(function (e) {
      t.ca.containsKey(e) || // We removed the last reference for this key
      index_esm2017_ha(t, e);
    });
  }
}

function index_esm2017_ha(t, e) {
  t.oa["delete"](e.path.canonicalString()); // It's possible that the target already got removed because the query failed. In that case,
  // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.

  var n = t.ua.get(e);
  null !== n && (su(t.remoteStore, n), t.ua = t.ua.remove(e), t.aa["delete"](n), index_esm2017_da(t));
}

function index_esm2017_la(t, e, n) {
  var _iterator70 = firestore_dist_index_esm2017_createForOfIteratorHelper(n),
      _step70;

  try {
    for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
      var s = _step70.value;
      if (s instanceof Qu) t.ca.addReference(s.key, e), index_esm2017_fa(t, s);else if (s instanceof ju) {
        dist_index_esm2017_O("SyncEngine", "Document no longer in limbo: " + s.key), t.ca.removeReference(s.key, e);
        t.ca.containsKey(s.key) || // We removed the last reference for this key
        index_esm2017_ha(t, s.key);
      } else dist_index_esm2017_L();
    }
  } catch (err) {
    _iterator70.e(err);
  } finally {
    _iterator70.f();
  }
}

function index_esm2017_fa(t, e) {
  var n = e.key,
      s = n.path.canonicalString();
  t.ua.get(n) || t.oa.has(s) || (dist_index_esm2017_O("SyncEngine", "New document in limbo: " + n), t.oa.add(s), index_esm2017_da(t));
}
/**
 * Starts listens for documents in limbo that are enqueued for resolution,
 * subject to a maximum number of concurrent resolutions.
 *
 * Without bounding the number of concurrent resolutions, the server can fail
 * with "resource exhausted" errors which can lead to pathological client
 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
 */


function index_esm2017_da(t) {
  for (; t.oa.size > 0 && t.ua.size < t.maxConcurrentLimboResolutions;) {
    var e = t.oa.values().next().value;
    t.oa["delete"](e);
    var n = new index_esm2017_xt(index_esm2017_t.fromString(e)),
        s = t.fa.next();
    t.aa.set(s, new Hu(n)), t.ua = t.ua.insert(n, s), nu(t.remoteStore, new Ni(index_esm2017_He(index_esm2017_Ke(n.path)), s, 2
    /* LimboResolution */
    , index_esm2017_nt.A));
  }
}

function _a(_x76, _x77, _x78) {
  return _a2.apply(this, arguments);
}

function _a2() {
  _a2 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee104(t, e, n) {
    var s, i, r, o;
    return regeneratorRuntime.wrap(function _callee104$(_context104) {
      while (1) {
        switch (_context104.prev = _context104.next) {
          case 0:
            s = dist_index_esm2017_K(t), i = [], r = [], o = [];
            _context104.t0 = s.ia.isEmpty();

            if (_context104.t0) {
              _context104.next = 9;
              break;
            }

            s.ia.forEach(function (t, u) {
              o.push(s._a(u, e, n).then(function (t) {
                if (t) {
                  s.isPrimaryClient && s.sharedClientState.updateQueryState(u.targetId, t.fromCache ? "not-current" : "current"), i.push(t);

                  var _e61 = Zr.Ys(u.targetId, t);

                  r.push(_e61);
                }
              }));
            });
            _context104.next = 6;
            return Promise.all(o);

          case 6:
            s.sa.zo(i);
            _context104.next = 9;
            return function () {
              var _ref71 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee103(t, e) {
                var n, _iterator92, _step92, _t129, _e62, _t130, _s33, _i20;

                return regeneratorRuntime.wrap(function _callee103$(_context103) {
                  while (1) {
                    switch (_context103.prev = _context103.next) {
                      case 0:
                        n = dist_index_esm2017_K(t);
                        _context103.prev = 1;
                        _context103.next = 4;
                        return n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function (t) {
                          return yi.forEach(e, function (e) {
                            return yi.forEach(e.Hs, function (s) {
                              return n.persistence.referenceDelegate.addReference(t, e.targetId, s);
                            }).next(function () {
                              return yi.forEach(e.Js, function (s) {
                                return n.persistence.referenceDelegate.removeReference(t, e.targetId, s);
                              });
                            });
                          });
                        });

                      case 4:
                        _context103.next = 11;
                        break;

                      case 6:
                        _context103.prev = 6;
                        _context103.t0 = _context103["catch"](1);

                        if (Ai(_context103.t0)) {
                          _context103.next = 10;
                          break;
                        }

                        throw _context103.t0;

                      case 10:
                        // If `notifyLocalViewChanges` fails, we did not advance the sequence
                        // number for the documents that were included in this transaction.
                        // This might trigger them to be deleted earlier than they otherwise
                        // would have, but it should not invalidate the integrity of the data.
                        dist_index_esm2017_O("LocalStore", "Failed to update sequence numbers: " + _context103.t0);

                      case 11:
                        _iterator92 = firestore_dist_index_esm2017_createForOfIteratorHelper(e);

                        try {
                          for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
                            _t129 = _step92.value;
                            _e62 = _t129.targetId;

                            if (!_t129.fromCache) {
                              _t130 = n.ui.get(_e62), _s33 = _t130.snapshotVersion, _i20 = _t130.withLastLimboFreeSnapshotVersion(_s33); // Advance the last limbo free snapshot version

                              // Advance the last limbo free snapshot version
                              n.ui = n.ui.insert(_e62, _i20);
                            }
                          }
                        } catch (err) {
                          _iterator92.e(err);
                        } finally {
                          _iterator92.f();
                        }

                      case 13:
                      case "end":
                        return _context103.stop();
                    }
                  }
                }, _callee103, null, [[1, 6]]);
              }));

              return function (_x141, _x142) {
                return _ref71.apply(this, arguments);
              };
            }()(s.localStore, r);

          case 9:
          case "end":
            return _context104.stop();
        }
      }
    }, _callee104);
  }));
  return _a2.apply(this, arguments);
}

function index_esm2017_wa(_x79, _x80) {
  return _wa.apply(this, arguments);
}

function _wa() {
  _wa = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee105(t, e) {
    var n, _t131;

    return regeneratorRuntime.wrap(function _callee105$(_context105) {
      while (1) {
        switch (_context105.prev = _context105.next) {
          case 0:
            n = dist_index_esm2017_K(t);

            if (n.currentUser.isEqual(e)) {
              _context105.next = 11;
              break;
            }

            dist_index_esm2017_O("SyncEngine", "User change. New user:", e.toKey());
            _context105.next = 5;
            return so(n.localStore, e);

          case 5:
            _t131 = _context105.sent;
            n.currentUser = e;

            // Fails tasks waiting for pending writes requested by previous user.
            (function (t, e) {
              t.la.forEach(function (t) {
                t.forEach(function (t) {
                  t.reject(new dist_index_esm2017_Q(index_esm2017_G.CANCELLED, e));
                });
              }), t.la.clear();
            })(n, "'waitForPendingWrites' promise is rejected due to a user change.");

            // TODO(b/114226417): Consider calling this only in the primary tab.
            n.sharedClientState.handleUserChange(e, _t131.removedBatchIds, _t131.addedBatchIds);
            _context105.next = 11;
            return _a(n, _t131.di);

          case 11:
          case "end":
            return _context105.stop();
        }
      }
    }, _callee105);
  }));
  return _wa.apply(this, arguments);
}

function index_esm2017_ma(t, e) {
  var n = dist_index_esm2017_K(t),
      s = n.aa.get(e);
  if (s && s.na) return index_esm2017_Yn().add(s.key);
  {
    var _t100 = index_esm2017_Yn();

    var _s21 = n.ra.get(e);

    if (!_s21) return _t100;

    var _iterator71 = firestore_dist_index_esm2017_createForOfIteratorHelper(_s21),
        _step71;

    try {
      for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
        var _e48 = _step71.value;

        var _s22 = n.ia.get(_e48);

        _t100 = _t100.unionWith(_s22.view.ju);
      }
    } catch (err) {
      _iterator71.e(err);
    } finally {
      _iterator71.f();
    }

    return _t100;
  }
}
/**
 * Reconcile the list of synced documents in an existing view with those
 * from persistence.
 */


function ga(_x81, _x82) {
  return _ga.apply(this, arguments);
}
/**
 * Retrieves newly changed documents from remote document cache and raises
 * snapshots if needed.
 */
// PORTING NOTE: Multi-Tab only.


function _ga() {
  _ga = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee106(t, e) {
    var n, s, i;
    return regeneratorRuntime.wrap(function _callee106$(_context106) {
      while (1) {
        switch (_context106.prev = _context106.next) {
          case 0:
            n = dist_index_esm2017_K(t);
            _context106.next = 3;
            return lo(n.localStore, e.query,
            /* usePreviousResults= */
            !0);

          case 3:
            s = _context106.sent;
            i = e.view.ta(s);
            return _context106.abrupt("return", (n.isPrimaryClient && index_esm2017_la(n, e.targetId, i.Xu), i));

          case 6:
          case "end":
            return _context106.stop();
        }
      }
    }, _callee106);
  }));
  return _ga.apply(this, arguments);
}

function index_esm2017_ya(_x83, _x84) {
  return _ya.apply(this, arguments);
}
/** Applies a mutation state to an existing batch.  */
// PORTING NOTE: Multi-Tab only.


function _ya() {
  _ya = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee107(t, e) {
    var n;
    return regeneratorRuntime.wrap(function _callee107$(_context107) {
      while (1) {
        switch (_context107.prev = _context107.next) {
          case 0:
            n = dist_index_esm2017_K(t);
            return _context107.abrupt("return", _o(n.localStore, e).then(function (t) {
              return _a(n, t);
            }));

          case 2:
          case "end":
            return _context107.stop();
        }
      }
    }, _callee107);
  }));
  return _ya.apply(this, arguments);
}

function index_esm2017_pa(_x85, _x86, _x87, _x88) {
  return _pa.apply(this, arguments);
}
/** Applies a query target change from a different tab. */
// PORTING NOTE: Multi-Tab only.


function _pa() {
  _pa = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee108(t, e, n, s) {
    var i, r;
    return regeneratorRuntime.wrap(function _callee108$(_context108) {
      while (1) {
        switch (_context108.prev = _context108.next) {
          case 0:
            i = dist_index_esm2017_K(t);
            _context108.next = 3;
            return function (t, e) {
              var n = dist_index_esm2017_K(t),
                  s = dist_index_esm2017_K(n.Bs);
              return n.persistence.runTransaction("Lookup mutation documents", "readonly", function (t) {
                return s.fn(t, e).next(function (e) {
                  return e ? n.fi.Ks(t, e) : yi.resolve(null);
                });
              });
            } // PORTING NOTE: Multi-Tab only.
            (i.localStore, e);

          case 3:
            r = _context108.sent;

            if (!(null !== r)) {
              _context108.next = 15;
              break;
            }

            if (!("pending" === n)) {
              _context108.next = 10;
              break;
            }

            _context108.next = 8;
            return wu(i.remoteStore);

          case 8:
            _context108.next = 11;
            break;

          case 10:
            "acknowledged" === n || "rejected" === n ? ( // NOTE: Both these methods are no-ops for batches that originated from
            // other clients.
            index_esm2017_aa(i, e, s || null), index_esm2017_ua(i, e), function (t, e) {
              dist_index_esm2017_K(dist_index_esm2017_K(t).Bs)._n(e);
            } // PORTING NOTE: Multi-Tab only.
            (i.localStore, e)) : dist_index_esm2017_L();

          case 11:
            _context108.next = 13;
            return _a(i, r);

          case 13:
            _context108.next = 16;
            break;

          case 15:
            // A throttled tab may not have seen the mutation before it was completed
            // and removed from the mutation queue, in which case we won't have cached
            // the affected documents. In this case we can safely ignore the update
            // since that means we didn't apply the mutation locally at all (if we
            // had, we would have cached the affected documents), and so we will just
            // see any resulting document changes via normal remote document updates
            // as applicable.
            dist_index_esm2017_O("SyncEngine", "Cannot apply mutation batch with id: " + e);

          case 16:
          case "end":
            return _context108.stop();
        }
      }
    }, _callee108);
  }));
  return _pa.apply(this, arguments);
}

function index_esm2017_Ia(_x89, _x90) {
  return _Ia.apply(this, arguments);
}

function _Ia() {
  _Ia = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee109(t, e) {
    var n, _t132, _e63, _iterator93, _step93, _t133, _t134, _e64;

    return regeneratorRuntime.wrap(function _callee109$(_context109) {
      while (1) {
        switch (_context109.prev = _context109.next) {
          case 0:
            n = dist_index_esm2017_K(t);

            if (!(index_esm2017_Pa(n), index_esm2017_Va(n), !0 === e && !0 !== n.da)) {
              _context109.next = 13;
              break;
            }

            _t132 = n.sharedClientState.getAllActiveQueryTargets();
            _context109.next = 5;
            return index_esm2017_Ta(n, _t132.toArray());

          case 5:
            _e63 = _context109.sent;
            n.da = !0;
            _context109.next = 9;
            return bu(n.remoteStore, !0);

          case 9:
            _iterator93 = firestore_dist_index_esm2017_createForOfIteratorHelper(_e63);

            try {
              for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
                _t133 = _step93.value;
                nu(n.remoteStore, _t133);
              }
            } catch (err) {
              _iterator93.e(err);
            } finally {
              _iterator93.f();
            }

            _context109.next = 25;
            break;

          case 13:
            if (!(!1 === e && !1 !== n.da)) {
              _context109.next = 25;
              break;
            }

            _t134 = [];
            _e64 = Promise.resolve();
            n.ra.forEach(function (s, i) {
              n.sharedClientState.isLocalQueryTarget(i) ? _t134.push(i) : _e64 = _e64.then(function () {
                return ca(n, i), ho(n.localStore, i,
                /*keepPersistedTargetData=*/
                !0);
              }), su(n.remoteStore, i);
            });
            _context109.next = 19;
            return _e64;

          case 19:
            _context109.next = 21;
            return index_esm2017_Ta(n, _t134);

          case 21:
            // PORTING NOTE: Multi-Tab only.
            (function (t) {
              var e = dist_index_esm2017_K(t);
              e.aa.forEach(function (t, n) {
                su(e.remoteStore, n);
              }), e.ca.Si(), e.aa = new Map(), e.ua = new index_esm2017_fe(index_esm2017_xt.comparator);
            }
            /**
            * Reconcile the query views of the provided query targets with the state from
            * persistence. Raises snapshots for any changes that affect the local
            * client and returns the updated state of all target's query data.
            *
            * @param syncEngine - The sync engine implementation
            * @param targets - the list of targets with views that need to be recomputed
            * @param transitionToPrimary - `true` iff the tab transitions from a secondary
            * tab to a primary tab
            */
            // PORTING NOTE: Multi-Tab only.
            )(n);

            n.da = !1;
            _context109.next = 25;
            return bu(n.remoteStore, !1);

          case 25:
          case "end":
            return _context109.stop();
        }
      }
    }, _callee109);
  }));
  return _Ia.apply(this, arguments);
}

function index_esm2017_Ta(_x91, _x92, _x93) {
  return _Ta.apply(this, arguments);
}
/**
 * Creates a `Query` object from the specified `Target`. There is no way to
 * obtain the original `Query`, so we synthesize a `Query` from the `Target`
 * object.
 *
 * The synthesized result might be different from the original `Query`, but
 * since the synthesized `Query` should return the same results as the
 * original one (only the presentation of results might differ), the potential
 * difference will not cause issues.
 */
// PORTING NOTE: Multi-Tab only.


function _Ta() {
  _Ta = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee110(t, e, n) {
    var s, i, r, _iterator94, _step94, _t135, _e65, _n45, _iterator95, _step95, _t136, _e66, _n46, _n47;

    return regeneratorRuntime.wrap(function _callee110$(_context110) {
      while (1) {
        switch (_context110.prev = _context110.next) {
          case 0:
            s = dist_index_esm2017_K(t), i = [], r = [];
            _iterator94 = firestore_dist_index_esm2017_createForOfIteratorHelper(e);
            _context110.prev = 2;

            _iterator94.s();

          case 4:
            if ((_step94 = _iterator94.n()).done) {
              _context110.next = 45;
              break;
            }

            _t135 = _step94.value;
            _e65 = void 0;
            _n45 = s.ra.get(_t135);

            if (!(_n45 && 0 !== _n45.length)) {
              _context110.next = 34;
              break;
            }

            _context110.next = 11;
            return co(s.localStore, index_esm2017_He(_n45[0]));

          case 11:
            _e65 = _context110.sent;
            _iterator95 = firestore_dist_index_esm2017_createForOfIteratorHelper(_n45);
            _context110.prev = 13;

            _iterator95.s();

          case 15:
            if ((_step95 = _iterator95.n()).done) {
              _context110.next = 24;
              break;
            }

            _t136 = _step95.value;
            _e66 = s.ia.get(_t136);
            _context110.next = 20;
            return ga(s, _e66);

          case 20:
            _n46 = _context110.sent;
            _n46.snapshot && r.push(_n46.snapshot);

          case 22:
            _context110.next = 15;
            break;

          case 24:
            _context110.next = 29;
            break;

          case 26:
            _context110.prev = 26;
            _context110.t0 = _context110["catch"](13);

            _iterator95.e(_context110.t0);

          case 29:
            _context110.prev = 29;

            _iterator95.f();

            return _context110.finish(29);

          case 32:
            _context110.next = 42;
            break;

          case 34:
            _context110.next = 36;
            return fo(s.localStore, _t135);

          case 36:
            _n47 = _context110.sent;
            _context110.next = 39;
            return co(s.localStore, _n47);

          case 39:
            _e65 = _context110.sent;
            _context110.next = 42;
            return Xu(s, Ea(_n47), _t135,
            /*current=*/
            !1);

          case 42:
            i.push(_e65);

          case 43:
            _context110.next = 4;
            break;

          case 45:
            _context110.next = 50;
            break;

          case 47:
            _context110.prev = 47;
            _context110.t1 = _context110["catch"](2);

            _iterator94.e(_context110.t1);

          case 50:
            _context110.prev = 50;

            _iterator94.f();

            return _context110.finish(50);

          case 53:
            return _context110.abrupt("return", (s.sa.zo(r), i));

          case 54:
          case "end":
            return _context110.stop();
        }
      }
    }, _callee110, null, [[2, 47, 50, 53], [13, 26, 29, 32]]);
  }));
  return _Ta.apply(this, arguments);
}

function Ea(t) {
  return index_esm2017_qe(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F"
  /* First */
  , t.startAt, t.endAt);
}
/** Returns the IDs of the clients that are currently active. */
// PORTING NOTE: Multi-Tab only.


function index_esm2017_Aa(t) {
  var e = dist_index_esm2017_K(t);
  return dist_index_esm2017_K(dist_index_esm2017_K(e.localStore).persistence).Fs();
}
/** Applies a query target change from a different tab. */
// PORTING NOTE: Multi-Tab only.


function index_esm2017_Ra(_x94, _x95, _x96, _x97) {
  return _Ra.apply(this, arguments);
}
/** Adds or removes Watch targets for queries from different tabs. */


function _Ra() {
  _Ra = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee111(t, e, n, s) {
    var i, r, _t137, _s34;

    return regeneratorRuntime.wrap(function _callee111$(_context111) {
      while (1) {
        switch (_context111.prev = _context111.next) {
          case 0:
            i = dist_index_esm2017_K(t);

            if (!i.da) {
              _context111.next = 3;
              break;
            }

            return _context111.abrupt("return", void dist_index_esm2017_O("SyncEngine", "Ignoring unexpected query state notification."));

          case 3:
            r = i.ra.get(e);

            if (!(r && r.length > 0)) {
              _context111.next = 20;
              break;
            }

            _context111.t0 = n;
            _context111.next = _context111.t0 === "current" ? 8 : _context111.t0 === "not-current" ? 8 : _context111.t0 === "rejected" ? 15 : 19;
            break;

          case 8:
            _context111.next = 10;
            return _o(i.localStore, index_esm2017_en(r[0]));

          case 10:
            _t137 = _context111.sent;
            _s34 = ts.createSynthesizedRemoteEventForCurrentChange(e, "current" === n);
            _context111.next = 14;
            return _a(i, _t137, _s34);

          case 14:
            return _context111.abrupt("break", 20);

          case 15:
            _context111.next = 17;
            return ho(i.localStore, e,
            /* keepPersistedTargetData */
            !0);

          case 17:
            ca(i, e, s);
            return _context111.abrupt("break", 20);

          case 19:
            dist_index_esm2017_L();

          case 20:
          case "end":
            return _context111.stop();
        }
      }
    }, _callee111);
  }));
  return _Ra.apply(this, arguments);
}

function index_esm2017_ba(_x98, _x99, _x100) {
  return _ba.apply(this, arguments);
}

function _ba() {
  _ba = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee112(t, e, n) {
    var s, _iterator96, _step96, _t138, _e67, _n48, _iterator97, _step97, _loop5;

    return regeneratorRuntime.wrap(function _callee112$(_context113) {
      while (1) {
        switch (_context113.prev = _context113.next) {
          case 0:
            s = index_esm2017_Pa(t);

            if (!s.da) {
              _context113.next = 45;
              break;
            }

            _iterator96 = firestore_dist_index_esm2017_createForOfIteratorHelper(e);
            _context113.prev = 3;

            _iterator96.s();

          case 5:
            if ((_step96 = _iterator96.n()).done) {
              _context113.next = 21;
              break;
            }

            _t138 = _step96.value;

            if (!s.ra.has(_t138)) {
              _context113.next = 10;
              break;
            }

            // A target might have been added in a previous attempt
            dist_index_esm2017_O("SyncEngine", "Adding an already active target " + _t138);
            return _context113.abrupt("continue", 19);

          case 10:
            _context113.next = 12;
            return fo(s.localStore, _t138);

          case 12:
            _e67 = _context113.sent;
            _context113.next = 15;
            return co(s.localStore, _e67);

          case 15:
            _n48 = _context113.sent;
            _context113.next = 18;
            return Xu(s, Ea(_e67), _n48.targetId,
            /*current=*/
            !1);

          case 18:
            nu(s.remoteStore, _n48);

          case 19:
            _context113.next = 5;
            break;

          case 21:
            _context113.next = 26;
            break;

          case 23:
            _context113.prev = 23;
            _context113.t0 = _context113["catch"](3);

            _iterator96.e(_context113.t0);

          case 26:
            _context113.prev = 26;

            _iterator96.f();

            return _context113.finish(26);

          case 29:
            _iterator97 = firestore_dist_index_esm2017_createForOfIteratorHelper(n);
            _context113.prev = 30;
            _loop5 = /*#__PURE__*/regeneratorRuntime.mark(function _loop5() {
              var t;
              return regeneratorRuntime.wrap(function _loop5$(_context112) {
                while (1) {
                  switch (_context112.prev = _context112.next) {
                    case 0:
                      t = _step97.value;
                      _context112.t0 = s.ra.has(t);

                      if (!_context112.t0) {
                        _context112.next = 5;
                        break;
                      }

                      _context112.next = 5;
                      return ho(s.localStore, t,
                      /* keepPersistedTargetData */
                      !1).then(function () {
                        su(s.remoteStore, t), ca(s, t);
                      })["catch"](index_esm2017_Dr);

                    case 5:
                    case "end":
                      return _context112.stop();
                  }
                }
              }, _loop5);
            });

            _iterator97.s();

          case 33:
            if ((_step97 = _iterator97.n()).done) {
              _context113.next = 37;
              break;
            }

            return _context113.delegateYield(_loop5(), "t1", 35);

          case 35:
            _context113.next = 33;
            break;

          case 37:
            _context113.next = 42;
            break;

          case 39:
            _context113.prev = 39;
            _context113.t2 = _context113["catch"](30);

            _iterator97.e(_context113.t2);

          case 42:
            _context113.prev = 42;

            _iterator97.f();

            return _context113.finish(42);

          case 45:
          case "end":
            return _context113.stop();
        }
      }
    }, _callee112, null, [[3, 23, 26, 29], [30, 39, 42, 45]]);
  }));
  return _ba.apply(this, arguments);
}

function index_esm2017_Pa(t) {
  var e = dist_index_esm2017_K(t);
  return e.remoteStore.remoteSyncer.applyRemoteEvent = index_esm2017_ea.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = index_esm2017_ma.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = index_esm2017_sa.bind(null, e), e.sa.zo = Fu.bind(null, e.eventManager), e.sa.wa = $u.bind(null, e.eventManager), e;
}

function index_esm2017_Va(t) {
  var e = dist_index_esm2017_K(t);
  return e.remoteStore.remoteSyncer.applySuccessfulWrite = index_esm2017_ia.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = index_esm2017_ra.bind(null, e), e;
}
/**
 * Loads a Firestore bundle into the SDK. The returned promise resolves when
 * the bundle finished loading.
 *
 * @param syncEngine - SyncEngine to use.
 * @param bundleReader - Bundle to load into the SDK.
 * @param task - LoadBundleTask used to update the loading progress to public API.
 */


function index_esm2017_va(t, e, n) {
  var s = dist_index_esm2017_K(t); // eslint-disable-next-line @typescript-eslint/no-floating-promises

  /** Loads a bundle and returns the list of affected collection groups. */
  (function () {
    var _ref35 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(t, e, n) {
      var _s23, i, r, _t101, o;

      return regeneratorRuntime.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.prev = 0;
              _context23.next = 3;
              return e.getMetadata();

            case 3:
              _s23 = _context23.sent;
              _context23.next = 6;
              return function (t, e) {
                var n = dist_index_esm2017_K(t),
                    s = ws(e.createTime);
                return n.persistence.runTransaction("hasNewerBundle", "readonly", function (t) {
                  return n._s.getBundleMetadata(t, e.id);
                }).then(function (t) {
                  return !!t && t.createTime.compareTo(s) >= 0;
                });
              }
              /**
              * Saves the given `BundleMetadata` to local persistence.
              */
              (t.localStore, _s23);

            case 6:
              if (!_context23.sent) {
                _context23.next = 11;
                break;
              }

              _context23.next = 9;
              return e.close();

            case 9:
              n._completeWith(function (t) {
                return {
                  taskState: "Success",
                  documentsLoaded: t.totalDocuments,
                  bytesLoaded: t.totalBytes,
                  totalDocuments: t.totalDocuments,
                  totalBytes: t.totalBytes
                };
              }(_s23));

              return _context23.abrupt("return", Promise.resolve(new Set()));

            case 11:
              n._updateProgress(Gu(_s23));

              i = new Ku(_s23, t.localStore, e.M);
              _context23.next = 15;
              return e.ma();

            case 15:
              r = _context23.sent;

            case 16:
              if (!r) {
                _context23.next = 26;
                break;
              }

              _context23.next = 19;
              return i.Fu(r);

            case 19:
              _t101 = _context23.sent;
              _t101 && n._updateProgress(_t101);
              _context23.next = 23;
              return e.ma();

            case 23:
              r = _context23.sent;

            case 24:
              _context23.next = 16;
              break;

            case 26:
              _context23.next = 28;
              return i.complete();

            case 28:
              o = _context23.sent;
              _context23.next = 31;
              return _a(t, o.Lu,
              /* remoteEvent */
              void 0);

            case 31:
              _context23.next = 33;
              return function (t, e) {
                var n = dist_index_esm2017_K(t);
                return n.persistence.runTransaction("Save bundle", "readwrite", function (t) {
                  return n._s.saveBundleMetadata(t, e);
                });
              }
              /**
              * Returns a promise of a `NamedQuery` associated with given query name. Promise
              * resolves to undefined if no persisted data can be found.
              */
              (t.localStore, _s23);

            case 33:
              n._completeWith(o.progress);

              return _context23.abrupt("return", Promise.resolve(o.Bu));

            case 37:
              _context23.prev = 37;
              _context23.t0 = _context23["catch"](0);
              return _context23.abrupt("return", (index_esm2017_$("SyncEngine", "Loading bundle failed with ".concat(_context23.t0)), n._failWith(_context23.t0), Promise.resolve(new Set())));

            case 40:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, null, [[0, 37]]);
    }));

    return function (_x101, _x102, _x103) {
      return _ref35.apply(this, arguments);
    };
  })()
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /**
  * Provides all components needed for Firestore with in-memory persistence.
  * Uses EagerGC garbage collection.
  */
  (s, e, n).then(function (t) {
    s.sharedClientState.notifyBundleLoaded(t);
  });
}

var index_esm2017_Sa = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Sa() {
    firestore_dist_index_esm2017_classCallCheck(this, Sa);

    this.synchronizeTabs = !1;
  }

  firestore_dist_index_esm2017_createClass(Sa, [{
    key: "initialize",
    value: function () {
      var _initialize = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(t) {
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                this.M = jo(t.databaseInfo.databaseId);
                this.sharedClientState = this.ga(t);
                this.persistence = this.ya(t);
                _context24.next = 5;
                return this.persistence.start();

              case 5:
                this.gcScheduler = this.pa(t);
                this.localStore = this.Ia(t);

              case 7:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function initialize(_x104) {
        return _initialize.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "pa",
    value: function pa(t) {
      return null;
    }
  }, {
    key: "Ia",
    value: function Ia(t) {
      return no(this.persistence, new to(), t.initialUser, this.M);
    }
  }, {
    key: "ya",
    value: function ya(t) {
      return new Po(vo.Yi, this.M);
    }
  }, {
    key: "ga",
    value: function ga(t) {
      return new $o();
    }
  }, {
    key: "terminate",
    value: function () {
      var _terminate = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                this.gcScheduler && this.gcScheduler.stop();
                _context25.next = 3;
                return this.sharedClientState.shutdown();

              case 3:
                _context25.next = 5;
                return this.persistence.shutdown();

              case 5:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function terminate() {
        return _terminate.apply(this, arguments);
      }

      return terminate;
    }()
  }]);

  return Sa;
}()));
/**
 * Provides all components needed for Firestore with IndexedDB persistence.
 */


var Da = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Sa) {
  firestore_dist_index_esm2017_inherits(Da, _Sa);

  var _super29 = firestore_dist_index_esm2017_createSuper(Da);

  function Da(t, e, n) {
    var _this162;

    firestore_dist_index_esm2017_classCallCheck(this, Da);

    _this162 = _super29.call(this), _this162.Ta = t, _this162.cacheSizeBytes = e, _this162.forceOwnership = n, _this162.synchronizeTabs = !1;
    return _this162;
  }

  firestore_dist_index_esm2017_createClass(Da, [{
    key: "initialize",
    value: function () {
      var _initialize2 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(t) {
        var _this163 = this;

        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.next = 2;
                return dist_index_esm2017_get(firestore_dist_index_esm2017_getPrototypeOf(Da.prototype), "initialize", this).call(this, t);

              case 2:
                _context26.next = 4;
                return this.Ta.initialize(this, t);

              case 4:
                _context26.next = 6;
                return index_esm2017_Va(this.Ta.syncEngine);

              case 6:
                _context26.next = 8;
                return wu(this.Ta.remoteStore);

              case 8:
                _context26.next = 10;
                return this.persistence.Ts(function () {
                  return _this163.gcScheduler && !_this163.gcScheduler.started && _this163.gcScheduler.start(_this163.localStore), Promise.resolve();
                });

              case 10:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function initialize(_x105) {
        return _initialize2.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "Ia",
    value: function Ia(t) {
      return no(this.persistence, new to(), t.initialUser, this.M);
    }
  }, {
    key: "pa",
    value: function pa(t) {
      var e = this.persistence.referenceDelegate.garbageCollector;
      return new index_esm2017_Nr(e, t.asyncQueue);
    }
  }, {
    key: "ya",
    value: function ya(t) {
      var e = Yr(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey),
          n = void 0 !== this.cacheSizeBytes ? index_esm2017_gr.withCacheSize(this.cacheSizeBytes) : index_esm2017_gr.DEFAULT;
      return new zr(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, Go(), Qo(), this.M, this.sharedClientState, !!this.forceOwnership);
    }
  }, {
    key: "ga",
    value: function ga(t) {
      return new $o();
    }
  }]);

  return Da;
}(index_esm2017_Sa)));
/**
 * Provides all components needed for Firestore with multi-tab IndexedDB
 * persistence.
 *
 * In the legacy client, this provider is used to provide both multi-tab and
 * non-multi-tab persistence since we cannot tell at build time whether
 * `synchronizeTabs` will be enabled.
 */


var index_esm2017_Ca = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Da) {
  firestore_dist_index_esm2017_inherits(Ca, _Da);

  var _super30 = firestore_dist_index_esm2017_createSuper(Ca);

  function Ca(t, e) {
    var _this164;

    firestore_dist_index_esm2017_classCallCheck(this, Ca);

    _this164 = _super30.call(this, t, e,
    /* forceOwnership= */
    !1), _this164.Ta = t, _this164.cacheSizeBytes = e, _this164.synchronizeTabs = !0;
    return _this164;
  }

  firestore_dist_index_esm2017_createClass(Ca, [{
    key: "initialize",
    value: function () {
      var _initialize3 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(t) {
        var _this165 = this;

        var e;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return dist_index_esm2017_get(firestore_dist_index_esm2017_getPrototypeOf(Ca.prototype), "initialize", this).call(this, t);

              case 2:
                e = this.Ta.syncEngine;
                _context28.t0 = this.sharedClientState instanceof Fo;

                if (!_context28.t0) {
                  _context28.next = 8;
                  break;
                }

                this.sharedClientState.syncEngine = {
                  $r: index_esm2017_pa.bind(null, e),
                  Br: index_esm2017_Ra.bind(null, e),
                  Lr: index_esm2017_ba.bind(null, e),
                  Fs: index_esm2017_Aa.bind(null, e),
                  Fr: index_esm2017_ya.bind(null, e)
                };
                _context28.next = 8;
                return this.sharedClientState.start();

              case 8:
                _context28.next = 10;
                return this.persistence.Ts( /*#__PURE__*/function () {
                  var _ref36 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(t) {
                    return regeneratorRuntime.wrap(function _callee27$(_context27) {
                      while (1) {
                        switch (_context27.prev = _context27.next) {
                          case 0:
                            _context27.next = 2;
                            return index_esm2017_Ia(_this165.Ta.syncEngine, t);

                          case 2:
                            _this165.gcScheduler && (t && !_this165.gcScheduler.started ? _this165.gcScheduler.start(_this165.localStore) : t || _this165.gcScheduler.stop());

                          case 3:
                          case "end":
                            return _context27.stop();
                        }
                      }
                    }, _callee27);
                  }));

                  return function (_x107) {
                    return _ref36.apply(this, arguments);
                  };
                }());

              case 10:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function initialize(_x106) {
        return _initialize3.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "ga",
    value: function ga(t) {
      var e = Go();
      if (!Fo.vt(e)) throw new dist_index_esm2017_Q(index_esm2017_G.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
      var n = Yr(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
      return new Fo(e, t.asyncQueue, n, t.clientId, t.initialUser);
    }
  }]);

  return Ca;
}(Da)));
/**
 * Initializes and wires the components that are needed to interface with the
 * network.
 */


var index_esm2017_xa = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function xa() {
    firestore_dist_index_esm2017_classCallCheck(this, xa);
  }

  firestore_dist_index_esm2017_createClass(xa, [{
    key: "initialize",
    value: function () {
      var _initialize4 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(t, e) {
        var _this166 = this;

        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.t0 = this.localStore;

                if (_context29.t0) {
                  _context29.next = 12;
                  break;
                }

                this.localStore = t.localStore;
                this.sharedClientState = t.sharedClientState;
                this.datastore = this.createDatastore(e);
                this.remoteStore = this.createRemoteStore(e);
                this.eventManager = this.createEventManager(e);
                this.syncEngine = this.createSyncEngine(e,
                /* startAsPrimary=*/
                !t.synchronizeTabs);

                this.sharedClientState.onlineStateHandler = function (t) {
                  return index_esm2017_na(_this166.syncEngine, t, 1
                  /* SharedClientState */
                  );
                };

                this.remoteStore.remoteSyncer.handleCredentialChange = index_esm2017_wa.bind(null, this.syncEngine);
                _context29.next = 12;
                return bu(this.remoteStore, this.syncEngine.isPrimaryClient);

              case 12:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function initialize(_x108, _x109) {
        return _initialize4.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: "createEventManager",
    value: function createEventManager(t) {
      return new ku();
    }
  }, {
    key: "createDatastore",
    value: function createDatastore(t) {
      var e = jo(t.databaseInfo.databaseId),
          n = (s = t.databaseInfo, new Ko(s));
      var s;
      /** Return the Platform-specific connectivity monitor. */

      return function (t, e, n, s) {
        return new Yo(t, e, n, s);
      }(t.authCredentials, t.appCheckCredentials, n, e);
    }
  }, {
    key: "createRemoteStore",
    value: function createRemoteStore(t) {
      var _this167 = this;

      return e = this.localStore, n = this.datastore, s = t.asyncQueue, i = function i(t) {
        return index_esm2017_na(_this167.syncEngine, t, 0
        /* RemoteStore */
        );
      }, r = Lo.vt() ? new Lo() : new Bo(), new Zo(e, n, s, i, r);
      var e, n, s, i, r;
      /** Re-enables the network. Idempotent. */
    }
  }, {
    key: "createSyncEngine",
    value: function createSyncEngine(t, e) {
      return function (t, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
      s, i, r, o) {
        var u = new Ju(t, e, n, s, i, r);
        return o && (u.da = !0), u;
      }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t.initialUser, t.maxConcurrentLimboResolutions, e);
    }
  }, {
    key: "terminate",
    value: function terminate() {
      return function () {
        var _ref37 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(t) {
          var e;
          return regeneratorRuntime.wrap(function _callee30$(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  e = dist_index_esm2017_K(t);
                  dist_index_esm2017_O("RemoteStore", "RemoteStore shutting down.");
                  e.wu.add(5
                  /* Shutdown */
                  );
                  _context30.next = 5;
                  return eu(e);

                case 5:
                  e.gu.shutdown();
                  // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                  // triggering spurious listener events with cached data, etc.
                  e.yu.set("Unknown"
                  /* Unknown */
                  );

                case 7:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee30);
        }));

        return function (_x110) {
          return _ref37.apply(this, arguments);
        };
      }()(this.remoteStore);
    }
  }]);

  return xa;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * How many bytes to read each time when `ReadableStreamReader.read()` is
 * called. Only applicable for byte streams that we control (e.g. those backed
 * by an UInt8Array).
 */

/**
 * Builds a `ByteStreamReader` from a UInt8Array.
 * @param source - The data source to use.
 * @param bytesPerRead - How many bytes each `read()` from the returned reader
 *        will read.
 */


function index_esm2017_Na(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10240;
  var n = 0; // The TypeScript definition for ReadableStreamReader changed. We use
  // `any` here to allow this code to compile with different versions.
  // See https://github.com/microsoft/TypeScript/issues/42970
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  return {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    read: function read() {
      return dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
        var s;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                if (!(n < t.byteLength)) {
                  _context31.next = 3;
                  break;
                }

                s = {
                  value: t.slice(n, n + e),
                  done: !1
                };
                return _context31.abrupt("return", (n += e, s));

              case 3:
                return _context31.abrupt("return", {
                  done: !0
                });

              case 4:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31);
      }))();
    },
    cancel: function cancel() {
      return dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32);
      }))();
    },
    releaseLock: function releaseLock() {},
    closed: Promise.reject("unimplemented")
  };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * A wrapper implementation of Observer<T> that will dispatch events
 * asynchronously. To allow immediate silencing, a mute call is added which
 * causes events scheduled to no longer be raised.
 */


var index_esm2017_ka = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function ka(t) {
    firestore_dist_index_esm2017_classCallCheck(this, ka);

    this.observer = t,
    /**
     * When set to true, will not raise future events. Necessary to deal with
     * async detachment of listener.
     */
    this.muted = !1;
  }

  firestore_dist_index_esm2017_createClass(ka, [{
    key: "next",
    value: function next(t) {
      this.observer.next && this.Ea(this.observer.next, t);
    }
  }, {
    key: "error",
    value: function error(t) {
      this.observer.error ? this.Ea(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
    }
  }, {
    key: "Aa",
    value: function Aa() {
      this.muted = !0;
    }
  }, {
    key: "Ea",
    value: function Ea(t, e) {
      var _this168 = this;

      this.muted || setTimeout(function () {
        _this168.muted || t(e);
      }, 0);
    }
  }]);

  return ka;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A class representing a bundle.
 *
 * Takes a bundle stream or buffer, and presents abstractions to read bundled
 * elements out of the underlying content.
 */


var index_esm2017_Ma = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Ma(
  /** The reader to read from underlying binary bundle data source. */
  t, e) {
    var _this169 = this;

    firestore_dist_index_esm2017_classCallCheck(this, Ma);

    this.Ra = t, this.M = e,
    /** Cached bundle metadata. */
    this.metadata = new index_esm2017_j(),
    /**
     * Internal buffer to hold bundle content, accumulating incomplete element
     * content.
     */
    this.buffer = new Uint8Array(), this.ba = new TextDecoder("utf-8"), // Read the metadata (which is the first element).
    this.Pa().then(function (t) {
      t && t.Mu() ? _this169.metadata.resolve(t.payload.metadata) : _this169.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             ".concat(JSON.stringify(null == t ? void 0 : t.payload))));
    }, function (t) {
      return _this169.metadata.reject(t);
    });
  }

  firestore_dist_index_esm2017_createClass(Ma, [{
    key: "close",
    value: function close() {
      return this.Ra.cancel();
    }
  }, {
    key: "getMetadata",
    value: function () {
      var _getMetadata = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33() {
        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                return _context33.abrupt("return", this.metadata.promise);

              case 1:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function getMetadata() {
        return _getMetadata.apply(this, arguments);
      }

      return getMetadata;
    }()
  }, {
    key: "ma",
    value: function () {
      var _ma = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
        return regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return this.getMetadata();

              case 2:
                return _context34.abrupt("return", this.Pa());

              case 3:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function ma() {
        return _ma.apply(this, arguments);
      }

      return ma;
    }()
    /**
     * Reads from the head of internal buffer, and pulling more data from
     * underlying stream if a complete element cannot be found, until an
     * element(including the prefixed length and the JSON string) is found.
     *
     * Once a complete element is read, it is dropped from internal buffer.
     *
     * Returns either the bundled element, or null if we have reached the end of
     * the stream.
     */

  }, {
    key: "Pa",
    value: function () {
      var _Pa = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {
        var t, e, n, s;
        return regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                _context35.next = 2;
                return this.Va();

              case 2:
                t = _context35.sent;

                if (!(null === t)) {
                  _context35.next = 5;
                  break;
                }

                return _context35.abrupt("return", null);

              case 5:
                e = this.ba.decode(t), n = Number(e);
                isNaN(n) && this.va("length string (".concat(e, ") is not valid number"));
                _context35.next = 9;
                return this.Sa(n);

              case 9:
                s = _context35.sent;
                return _context35.abrupt("return", new Uu(JSON.parse(s), t.length + n));

              case 11:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      function Pa() {
        return _Pa.apply(this, arguments);
      }

      return Pa;
    }()
    /** First index of '{' from the underlying buffer. */

  }, {
    key: "Da",
    value: function Da() {
      return this.buffer.findIndex(function (t) {
        return t === "{".charCodeAt(0);
      });
    }
    /**
     * Reads from the beginning of the internal buffer, until the first '{', and
     * return the content.
     *
     * If reached end of the stream, returns a null.
     */

  }, {
    key: "Va",
    value: function () {
      var _Va = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {
        var t, e;
        return regeneratorRuntime.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                if (!(this.Da() < 0)) {
                  _context36.next = 7;
                  break;
                }

                _context36.next = 3;
                return this.Ca();

              case 3:
                if (!_context36.sent) {
                  _context36.next = 5;
                  break;
                }

                return _context36.abrupt("break", 7);

              case 5:
                _context36.next = 0;
                break;

              case 7:
                if (!(0 === this.buffer.length)) {
                  _context36.next = 9;
                  break;
                }

                return _context36.abrupt("return", null);

              case 9:
                t = this.Da(); // Broke out of the loop because underlying stream is closed, but still
                // cannot find an open bracket.

                t < 0 && this.va("Reached the end of bundle when a length string is expected.");
                e = this.buffer.slice(0, t); // Update the internal buffer to drop the read length.

                return _context36.abrupt("return", (this.buffer = this.buffer.slice(t), e));

              case 13:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function Va() {
        return _Va.apply(this, arguments);
      }

      return Va;
    }()
    /**
     * Reads from a specified position from the internal buffer, for a specified
     * number of bytes, pulling more data from the underlying stream if needed.
     *
     * Returns a string decoded from the read bytes.
     */

  }, {
    key: "Sa",
    value: function () {
      var _Sa2 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(t) {
        var e;
        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                if (!(this.buffer.length < t)) {
                  _context37.next = 8;
                  break;
                }

                _context37.next = 3;
                return this.Ca();

              case 3:
                _context37.t0 = _context37.sent;

                if (!_context37.t0) {
                  _context37.next = 6;
                  break;
                }

                this.va("Reached the end of bundle when more is expected.");

              case 6:
                _context37.next = 0;
                break;

              case 8:
                e = this.ba.decode(this.buffer.slice(0, t)); // Update the internal buffer to drop the read json string.

                return _context37.abrupt("return", (this.buffer = this.buffer.slice(t), e));

              case 10:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function Sa(_x111) {
        return _Sa2.apply(this, arguments);
      }

      return Sa;
    }()
  }, {
    key: "va",
    value: function va(t) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      throw this.Ra.cancel(), new Error("Invalid bundle format: ".concat(t));
    }
    /**
     * Pulls more data from underlying stream to internal buffer.
     * Returns a boolean indicating whether the stream is finished.
     */

  }, {
    key: "Ca",
    value: function () {
      var _Ca = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {
        var t, e;
        return regeneratorRuntime.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return this.Ra.read();

              case 2:
                t = _context38.sent;

                if (!t.done) {
                  e = new Uint8Array(this.buffer.length + t.value.length);
                  e.set(this.buffer), e.set(t.value, this.buffer.length), this.buffer = e;
                }

                return _context38.abrupt("return", t.done);

              case 5:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function Ca() {
        return _Ca.apply(this, arguments);
      }

      return Ca;
    }()
  }]);

  return Ma;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */


var index_esm2017_Oa = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Oa(t) {
    firestore_dist_index_esm2017_classCallCheck(this, Oa);

    this.datastore = t, // The version of each document that was read during this transaction.
    this.readVersions = new Map(), this.mutations = [], this.committed = !1,
    /**
     * A deferred usage error that occurred previously in this transaction that
     * will cause the transaction to fail once it actually commits.
     */
    this.lastWriteError = null,
    /**
     * Set of documents that have been written in the transaction.
     *
     * When there's more than one write to the same key in a transaction, any
     * writes after the first are handled differently.
     */
    this.writtenDocs = new Set();
  }

  firestore_dist_index_esm2017_createClass(Oa, [{
    key: "lookup",
    value: function () {
      var _lookup = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40(t) {
        var _this170 = this;

        var e;
        return regeneratorRuntime.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                if (!(this.ensureCommitNotCalled(), this.mutations.length > 0)) {
                  _context40.next = 2;
                  break;
                }

                throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");

              case 2:
                _context40.next = 4;
                return function () {
                  var _ref38 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39(t, e) {
                    var n, s, i, r, o, u;
                    return regeneratorRuntime.wrap(function _callee39$(_context39) {
                      while (1) {
                        switch (_context39.prev = _context39.next) {
                          case 0:
                            n = dist_index_esm2017_K(t);
                            s = Es(n.M) + "/documents";
                            i = {
                              documents: e.map(function (t) {
                                return ys(n.M, t);
                              })
                            };
                            _context39.next = 5;
                            return n._o("BatchGetDocuments", s, i);

                          case 5:
                            r = _context39.sent;
                            o = new Map();
                            r.forEach(function (t) {
                              var e = Ps(n.M, t);
                              o.set(e.key.toString(), e);
                            });
                            u = [];
                            return _context39.abrupt("return", (e.forEach(function (t) {
                              var e = o.get(t.toString());
                              dist_index_esm2017_U(!!e), u.push(e);
                            }), u));

                          case 10:
                          case "end":
                            return _context39.stop();
                        }
                      }
                    }, _callee39);
                  }));

                  return function (_x113, _x114) {
                    return _ref38.apply(this, arguments);
                  };
                }()(this.datastore, t);

              case 4:
                e = _context40.sent;
                return _context40.abrupt("return", (e.forEach(function (t) {
                  return _this170.recordVersion(t);
                }), e));

              case 6:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));

      function lookup(_x112) {
        return _lookup.apply(this, arguments);
      }

      return lookup;
    }()
  }, {
    key: "set",
    value: function set(t, e) {
      this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
  }, {
    key: "update",
    value: function update(t, e) {
      try {
        this.write(e.toMutation(t, this.preconditionForUpdate(t)));
      } catch (t) {
        this.lastWriteError = t;
      }

      this.writtenDocs.add(t.toString());
    }
  }, {
    key: "delete",
    value: function _delete(t) {
      this.write(new index_esm2017_On(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
  }, {
    key: "commit",
    value: function () {
      var _commit = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42() {
        var _this171 = this;

        var t;
        return regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                if (!(this.ensureCommitNotCalled(), this.lastWriteError)) {
                  _context42.next = 2;
                  break;
                }

                throw this.lastWriteError;

              case 2:
                t = this.readVersions; // For each mutation, note that the doc was written.

                this.mutations.forEach(function (e) {
                  t["delete"](e.key.toString());
                });
                // For each document that was read but not written to, we want to perform
                // a `verify` operation.
                t.forEach(function (t, e) {
                  var n = index_esm2017_xt.fromPath(e);

                  _this171.mutations.push(new index_esm2017_Fn(n, _this171.precondition(n)));
                });
                _context42.next = 7;
                return function () {
                  var _ref39 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(t, e) {
                    var n, s, i;
                    return regeneratorRuntime.wrap(function _callee41$(_context41) {
                      while (1) {
                        switch (_context41.prev = _context41.next) {
                          case 0:
                            n = dist_index_esm2017_K(t), s = Es(n.M) + "/documents", i = {
                              writes: e.map(function (t) {
                                return vs(n.M, t);
                              })
                            };
                            _context41.next = 3;
                            return n.co("Commit", s, i);

                          case 3:
                          case "end":
                            return _context41.stop();
                        }
                      }
                    }, _callee41);
                  }));

                  return function (_x115, _x116) {
                    return _ref39.apply(this, arguments);
                  };
                }()(this.datastore, this.mutations);

              case 7:
                this.committed = !0;

              case 8:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));

      function commit() {
        return _commit.apply(this, arguments);
      }

      return commit;
    }()
  }, {
    key: "recordVersion",
    value: function recordVersion(t) {
      var e;
      if (t.isFoundDocument()) e = t.version;else {
        if (!t.isNoDocument()) throw dist_index_esm2017_L(); // For deleted docs, we must use baseVersion 0 when we overwrite them.

        e = index_esm2017_ct.min();
      }
      var n = this.readVersions.get(t.key.toString());

      if (n) {
        if (!e.isEqual(n)) // This transaction will fail no matter what.
          throw new dist_index_esm2017_Q(index_esm2017_G.ABORTED, "Document version changed between two reads.");
      } else this.readVersions.set(t.key.toString(), e);
    }
    /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */

  }, {
    key: "precondition",
    value: function precondition(t) {
      var e = this.readVersions.get(t.toString());
      return !this.writtenDocs.has(t.toString()) && e ? index_esm2017_An.updateTime(e) : index_esm2017_An.none();
    }
    /**
     * Returns the precondition for a document if the operation is an update.
     */

  }, {
    key: "preconditionForUpdate",
    value: function preconditionForUpdate(t) {
      var e = this.readVersions.get(t.toString()); // The first time a document is written, we want to take into account the
      // read time and existence

      if (!this.writtenDocs.has(t.toString()) && e) {
        if (e.isEqual(index_esm2017_ct.min())) // The document doesn't exist, so fail the transaction.
          // This has to be validated locally because you can't send a
          // precondition that a document does not exist without changing the
          // semantics of the backend write to be an insert. This is the reverse
          // of what we want, since we want to assert that the document doesn't
          // exist but then send the update and have it fail. Since we can't
          // express that to the backend, we have to validate locally.
          // Note: this can change once we can send separate verify writes in the
          // transaction.
          throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Can't update a document that doesn't exist."); // Document exists, base precondition on document update time.

        return index_esm2017_An.updateTime(e);
      } // Document was not read, so we just use the preconditions for a blind
      // update.


      return index_esm2017_An.exists(!0);
    }
  }, {
    key: "write",
    value: function write(t) {
      this.ensureCommitNotCalled(), this.mutations.push(t);
    }
  }, {
    key: "ensureCommitNotCalled",
    value: function ensureCommitNotCalled() {}
  }]);

  return Oa;
}()));
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */


var index_esm2017_Fa = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Fa(t, e, n, s, i) {
    firestore_dist_index_esm2017_classCallCheck(this, Fa);

    this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = s, this.deferred = i, this.xa = n.maxAttempts, this.No = new Wo(this.asyncQueue, "transaction_retry"
    /* TransactionRetry */
    );
  }
  /** Runs the transaction and sets the result on deferred. */


  firestore_dist_index_esm2017_createClass(Fa, [{
    key: "run",
    value: function run() {
      this.xa -= 1, this.Na();
    }
  }, {
    key: "Na",
    value: function Na() {
      var _this172 = this;

      this.No.Ro( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43() {
        var t, e;
        return regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                t = new index_esm2017_Oa(_this172.datastore), e = _this172.ka(t);
                e && e.then(function (e) {
                  _this172.asyncQueue.enqueueAndForget(function () {
                    return t.commit().then(function () {
                      _this172.deferred.resolve(e);
                    })["catch"](function (t) {
                      _this172.Ma(t);
                    });
                  });
                })["catch"](function (t) {
                  _this172.Ma(t);
                });

              case 2:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43);
      })));
    }
  }, {
    key: "ka",
    value: function ka(t) {
      try {
        var e = this.updateFunction(t);
        return !index_esm2017_St(e) && e["catch"] && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
      } catch (t) {
        // Do not retry errors thrown by user provided updateFunction.
        return this.deferred.reject(t), null;
      }
    }
  }, {
    key: "Ma",
    value: function Ma(t) {
      var _this173 = this;

      this.xa > 0 && this.Oa(t) ? (this.xa -= 1, this.asyncQueue.enqueueAndForget(function () {
        return _this173.Na(), Promise.resolve();
      })) : this.deferred.reject(t);
    }
  }, {
    key: "Oa",
    value: function Oa(t) {
      if ("FirebaseError" === t.name) {
        // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
        // non-matching document versions with ABORTED. These errors should be retried.
        var e = t.code;
        return "aborted" === e || "failed-precondition" === e || !index_esm2017_Un(e);
      }

      return !1;
    }
  }]);

  return Fa;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * FirestoreClient is a top-level class that constructs and owns all of the
 * pieces of the client SDK architecture. It is responsible for creating the
 * async queue that is shared by all of the other components in the system.
 */


var index_esm2017_$a = /*#__PURE__*/function () {
  function $a(t, e,
  /**
   * Asynchronous queue responsible for all of our internal processing. When
   * we get incoming work from the user (via public API) or the network
   * (incoming GRPC messages), we should always schedule onto this queue.
   * This ensures all of our work is properly serialized (e.g. we don't
   * start processing a new operation while the previous one is waiting for
   * an async I/O to complete).
   */
  n, s) {
    var _this174 = this;

    firestore_dist_index_esm2017_classCallCheck(this, $a);

    this.authCredentials = t, this.appCheckCredentials = e, this.asyncQueue = n, this.databaseInfo = s, this.user = dist_index_esm2017_C.UNAUTHENTICATED, this.clientId = index_esm2017_it.R(), this.authCredentialListener = function () {
      return Promise.resolve();
    }, this.appCheckCredentialListener = function () {
      return Promise.resolve();
    }, this.authCredentials.start(n, /*#__PURE__*/function () {
      var _ref41 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44(t) {
        return regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                dist_index_esm2017_O("FirestoreClient", "Received user=", t.uid);
                _context44.next = 3;
                return _this174.authCredentialListener(t);

              case 3:
                _this174.user = t;

              case 4:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44);
      }));

      return function (_x117) {
        return _ref41.apply(this, arguments);
      };
    }()), this.appCheckCredentials.start(n, function (t) {
      return dist_index_esm2017_O("FirestoreClient", "Received new app check token=", t), _this174.appCheckCredentialListener(t, _this174.user);
    });
  }

  firestore_dist_index_esm2017_createClass($a, [{
    key: "getConfiguration",
    value: function () {
      var _getConfiguration = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45() {
        return regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                return _context45.abrupt("return", {
                  asyncQueue: this.asyncQueue,
                  databaseInfo: this.databaseInfo,
                  clientId: this.clientId,
                  authCredentials: this.authCredentials,
                  appCheckCredentials: this.appCheckCredentials,
                  initialUser: this.user,
                  maxConcurrentLimboResolutions: 100
                });

              case 1:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      function getConfiguration() {
        return _getConfiguration.apply(this, arguments);
      }

      return getConfiguration;
    }()
  }, {
    key: "setCredentialChangeListener",
    value: function setCredentialChangeListener(t) {
      this.authCredentialListener = t;
    }
  }, {
    key: "setAppCheckTokenChangeListener",
    value: function setAppCheckTokenChangeListener(t) {
      this.appCheckCredentialListener = t;
    }
    /**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */

  }, {
    key: "verifyNotTerminated",
    value: function verifyNotTerminated() {
      if (this.asyncQueue.isShuttingDown) throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "The client has already been terminated.");
    }
  }, {
    key: "terminate",
    value: function terminate() {
      var _this175 = this;

      this.asyncQueue.enterRestrictedMode();
      var t = new index_esm2017_j();
      return this.asyncQueue.enqueueAndForgetEvenWhileRestricted( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46() {
        var n;
        return regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                _context46.prev = 0;
                _context46.t0 = _this175.onlineComponents;

                if (!_context46.t0) {
                  _context46.next = 5;
                  break;
                }

                _context46.next = 5;
                return _this175.onlineComponents.terminate();

              case 5:
                _context46.t1 = _this175.offlineComponents;

                if (!_context46.t1) {
                  _context46.next = 9;
                  break;
                }

                _context46.next = 9;
                return _this175.offlineComponents.terminate();

              case 9:
                // The credentials provider must be terminated after shutting down the
                // RemoteStore as it will prevent the RemoteStore from retrieving auth
                // tokens.
                _this175.authCredentials.shutdown();

                _this175.appCheckCredentials.shutdown();

                t.resolve();
                _context46.next = 18;
                break;

              case 14:
                _context46.prev = 14;
                _context46.t2 = _context46["catch"](0);
                n = Su(_context46.t2, "Failed to shutdown persistence");
                t.reject(n);

              case 18:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, null, [[0, 14]]);
      }))), t.promise;
    }
  }]);

  return $a;
}();

function Ba(_x118, _x119) {
  return _Ba.apply(this, arguments);
}

function _Ba() {
  _Ba = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee114(t, e) {
    var n, s;
    return regeneratorRuntime.wrap(function _callee114$(_context115) {
      while (1) {
        switch (_context115.prev = _context115.next) {
          case 0:
            t.asyncQueue.verifyOperationInProgress(), dist_index_esm2017_O("FirestoreClient", "Initializing OfflineComponentProvider");
            _context115.next = 3;
            return t.getConfiguration();

          case 3:
            n = _context115.sent;
            _context115.next = 6;
            return e.initialize(n);

          case 6:
            s = n.initialUser;
            t.setCredentialChangeListener( /*#__PURE__*/function () {
              var _ref72 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee113(t) {
                return regeneratorRuntime.wrap(function _callee113$(_context114) {
                  while (1) {
                    switch (_context114.prev = _context114.next) {
                      case 0:
                        _context114.t0 = s.isEqual(t);

                        if (_context114.t0) {
                          _context114.next = 5;
                          break;
                        }

                        _context114.next = 4;
                        return so(e.localStore, t);

                      case 4:
                        s = t;

                      case 5:
                      case "end":
                        return _context114.stop();
                    }
                  }
                }, _callee113);
              }));

              return function (_x143) {
                return _ref72.apply(this, arguments);
              };
            }()), // When a user calls clearPersistence() in one client, all other clients
            // need to be terminated to allow the delete to succeed.
            e.persistence.setDatabaseDeletedListener(function () {
              return t.terminate();
            }), t.offlineComponents = e;

          case 8:
          case "end":
            return _context115.stop();
        }
      }
    }, _callee114);
  }));
  return _Ba.apply(this, arguments);
}

function index_esm2017_La(_x120, _x121) {
  return _La.apply(this, arguments);
}

function _La() {
  _La = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee115(t, e) {
    var n, s;
    return regeneratorRuntime.wrap(function _callee115$(_context116) {
      while (1) {
        switch (_context116.prev = _context116.next) {
          case 0:
            t.asyncQueue.verifyOperationInProgress();
            _context116.next = 3;
            return index_esm2017_Ua(t);

          case 3:
            n = _context116.sent;
            dist_index_esm2017_O("FirestoreClient", "Initializing OnlineComponentProvider");
            _context116.next = 7;
            return t.getConfiguration();

          case 7:
            s = _context116.sent;
            _context116.next = 10;
            return e.initialize(n, s);

          case 10:
            // The CredentialChangeListener of the online component provider takes
            // precedence over the offline component provider.
            t.setCredentialChangeListener(function (t) {
              return Ru(e.remoteStore, t);
            });
            t.setAppCheckTokenChangeListener(function (t, n) {
              return Ru(e.remoteStore, n);
            });
            t.onlineComponents = e;

          case 13:
          case "end":
            return _context116.stop();
        }
      }
    }, _callee115);
  }));
  return _La.apply(this, arguments);
}

function index_esm2017_Ua(_x122) {
  return _Ua.apply(this, arguments);
}

function _Ua() {
  _Ua = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee116(t) {
    return regeneratorRuntime.wrap(function _callee116$(_context117) {
      while (1) {
        switch (_context117.prev = _context117.next) {
          case 0:
            _context117.t0 = t.offlineComponents;

            if (_context117.t0) {
              _context117.next = 5;
              break;
            }

            dist_index_esm2017_O("FirestoreClient", "Using default OfflineComponentProvider");
            _context117.next = 5;
            return Ba(t, new index_esm2017_Sa());

          case 5:
            return _context117.abrupt("return", t.offlineComponents);

          case 6:
          case "end":
            return _context117.stop();
        }
      }
    }, _callee116);
  }));
  return _Ua.apply(this, arguments);
}

function index_esm2017_qa(_x123) {
  return _qa.apply(this, arguments);
}

function _qa() {
  _qa = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee117(t) {
    return regeneratorRuntime.wrap(function _callee117$(_context118) {
      while (1) {
        switch (_context118.prev = _context118.next) {
          case 0:
            _context118.t0 = t.onlineComponents;

            if (_context118.t0) {
              _context118.next = 5;
              break;
            }

            dist_index_esm2017_O("FirestoreClient", "Using default OnlineComponentProvider");
            _context118.next = 5;
            return index_esm2017_La(t, new index_esm2017_xa());

          case 5:
            return _context118.abrupt("return", t.onlineComponents);

          case 6:
          case "end":
            return _context118.stop();
        }
      }
    }, _callee117);
  }));
  return _qa.apply(this, arguments);
}

function index_esm2017_Ka(t) {
  return index_esm2017_Ua(t).then(function (t) {
    return t.persistence;
  });
}

function index_esm2017_Ga(t) {
  return index_esm2017_Ua(t).then(function (t) {
    return t.localStore;
  });
}

function index_esm2017_Qa(t) {
  return index_esm2017_qa(t).then(function (t) {
    return t.remoteStore;
  });
}

function index_esm2017_ja(t) {
  return index_esm2017_qa(t).then(function (t) {
    return t.syncEngine;
  });
}

function index_esm2017_Wa(_x124) {
  return _Wa.apply(this, arguments);
}
/** Enables the network connection and re-enqueues all pending operations. */


function _Wa() {
  _Wa = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee118(t) {
    var e, n;
    return regeneratorRuntime.wrap(function _callee118$(_context119) {
      while (1) {
        switch (_context119.prev = _context119.next) {
          case 0:
            _context119.next = 2;
            return index_esm2017_qa(t);

          case 2:
            e = _context119.sent;
            n = e.eventManager;
            return _context119.abrupt("return", (n.onListen = Yu.bind(null, e.syncEngine), n.onUnlisten = Zu.bind(null, e.syncEngine), n));

          case 5:
          case "end":
            return _context119.stop();
        }
      }
    }, _callee118);
  }));
  return _Wa.apply(this, arguments);
}

function index_esm2017_za(t) {
  return t.asyncQueue.enqueue( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {
    var e, n;
    return regeneratorRuntime.wrap(function _callee47$(_context47) {
      while (1) {
        switch (_context47.prev = _context47.next) {
          case 0:
            _context47.next = 2;
            return index_esm2017_Ka(t);

          case 2:
            e = _context47.sent;
            _context47.next = 5;
            return index_esm2017_Qa(t);

          case 5:
            n = _context47.sent;
            return _context47.abrupt("return", (e.setNetworkEnabled(!0), function (t) {
              var e = dist_index_esm2017_K(t);
              return e.wu["delete"](0
              /* UserDisabled */
              ), tu(e);
            }(n)));

          case 7:
          case "end":
            return _context47.stop();
        }
      }
    }, _callee47);
  })));
}
/** Disables the network connection. Pending operations will not complete. */


function index_esm2017_Ha(t) {
  return t.asyncQueue.enqueue( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49() {
    var e, n;
    return regeneratorRuntime.wrap(function _callee49$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            _context49.next = 2;
            return index_esm2017_Ka(t);

          case 2:
            e = _context49.sent;
            _context49.next = 5;
            return index_esm2017_Qa(t);

          case 5:
            n = _context49.sent;
            return _context49.abrupt("return", (e.setNetworkEnabled(!1), function () {
              var _ref45 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48(t) {
                var e;
                return regeneratorRuntime.wrap(function _callee48$(_context48) {
                  while (1) {
                    switch (_context48.prev = _context48.next) {
                      case 0:
                        e = dist_index_esm2017_K(t);
                        e.wu.add(0
                        /* UserDisabled */
                        );
                        _context48.next = 4;
                        return eu(e);

                      case 4:
                        // Set the OnlineState to Offline so get()s return from cache, etc.
                        e.yu.set("Offline"
                        /* Offline */
                        );

                      case 5:
                      case "end":
                        return _context48.stop();
                    }
                  }
                }, _callee48);
              }));

              return function (_x125) {
                return _ref45.apply(this, arguments);
              };
            }()(n)));

          case 7:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee49);
  })));
}
/**
 * Returns a Promise that resolves when all writes that were pending at the time
 * this method was called received server acknowledgement. An acknowledgement
 * can be either acceptance or rejection.
 */


function index_esm2017_Ja(t, e) {
  var n = new index_esm2017_j();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51() {
    return regeneratorRuntime.wrap(function _callee51$(_context51) {
      while (1) {
        switch (_context51.prev = _context51.next) {
          case 0:
            _context51.t0 = function () {
              var _ref47 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50(t, e, n) {
                var s, _s24;

                return regeneratorRuntime.wrap(function _callee50$(_context50) {
                  while (1) {
                    switch (_context50.prev = _context50.next) {
                      case 0:
                        _context50.prev = 0;
                        _context50.next = 3;
                        return function (t, e) {
                          var n = dist_index_esm2017_K(t);
                          return n.persistence.runTransaction("read document", "readonly", function (t) {
                            return n.fi.Ls(t, e);
                          });
                        }(t, e);

                      case 3:
                        s = _context50.sent;
                        s.isFoundDocument() ? n.resolve(s) : s.isNoDocument() ? n.resolve(null) : n.reject(new dist_index_esm2017_Q(index_esm2017_G.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
                        _context50.next = 11;
                        break;

                      case 7:
                        _context50.prev = 7;
                        _context50.t0 = _context50["catch"](0);
                        _s24 = Su(_context50.t0, "Failed to get document '".concat(e, " from cache"));
                        n.reject(_s24);

                      case 11:
                      case "end":
                        return _context50.stop();
                    }
                  }
                }, _callee50, null, [[0, 7]]);
              }));

              return function (_x126, _x127, _x128) {
                return _ref47.apply(this, arguments);
              };
            }()
            /**
            * Retrieves a latency-compensated document from the backend via a
            * SnapshotListener.
            */
            ;

            _context51.next = 3;
            return index_esm2017_Ga(t);

          case 3:
            _context51.t1 = _context51.sent;
            _context51.t2 = e;
            _context51.t3 = n;
            return _context51.abrupt("return", (0, _context51.t0)(_context51.t1, _context51.t2, _context51.t3));

          case 7:
          case "end":
            return _context51.stop();
        }
      }
    }, _callee51);
  }))), n.promise;
}

function index_esm2017_Ya(t, e) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var s = new index_esm2017_j();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52() {
    return regeneratorRuntime.wrap(function _callee52$(_context52) {
      while (1) {
        switch (_context52.prev = _context52.next) {
          case 0:
            _context52.t0 = function (t, e, n, s, i) {
              var r = new index_esm2017_ka({
                next: function next(r) {
                  // Remove query first before passing event to user to avoid
                  // user actions affecting the now stale query.
                  e.enqueueAndForget(function () {
                    return Ou(t, o);
                  });
                  var u = r.docs.has(n);
                  !u && r.fromCache ? // TODO(dimond): If we're online and the document doesn't
                  // exist then we resolve with a doc.exists set to false. If
                  // we're offline however, we reject the Promise in this
                  // case. Two options: 1) Cache the negative response from
                  // the server so we can deliver that even when you're
                  // offline 2) Actually reject the Promise in the online case
                  // if the document doesn't exist.
                  i.reject(new dist_index_esm2017_Q(index_esm2017_G.UNAVAILABLE, "Failed to get document because the client is offline.")) : u && r.fromCache && s && "server" === s.source ? i.reject(new dist_index_esm2017_Q(index_esm2017_G.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(r);
                },
                error: function error(t) {
                  return i.reject(t);
                }
              }),
                  o = new Lu(index_esm2017_Ke(n.path), r, {
                includeMetadataChanges: !0,
                ku: !0
              });
              return Mu(t, o);
            };

            _context52.next = 3;
            return index_esm2017_Wa(t);

          case 3:
            _context52.t1 = _context52.sent;
            _context52.t2 = t.asyncQueue;
            _context52.t3 = e;
            _context52.t4 = n;
            _context52.t5 = s;
            return _context52.abrupt("return", (0, _context52.t0)(_context52.t1, _context52.t2, _context52.t3, _context52.t4, _context52.t5));

          case 9:
          case "end":
            return _context52.stop();
        }
      }
    }, _callee52);
  }))), s.promise;
}

function index_esm2017_Xa(t, e) {
  var n = new index_esm2017_j();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54() {
    return regeneratorRuntime.wrap(function _callee54$(_context54) {
      while (1) {
        switch (_context54.prev = _context54.next) {
          case 0:
            _context54.t0 = function () {
              var _ref50 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53(t, e, n) {
                var s, i, r, o, _s25;

                return regeneratorRuntime.wrap(function _callee53$(_context53) {
                  while (1) {
                    switch (_context53.prev = _context53.next) {
                      case 0:
                        _context53.prev = 0;
                        _context53.next = 3;
                        return lo(t, e,
                        /* usePreviousResults= */
                        !0);

                      case 3:
                        s = _context53.sent;
                        i = new Wu(e, s._i);
                        r = i.Wu(s.documents);
                        o = i.applyChanges(r,
                        /* updateLimboDocuments= */
                        !1);
                        n.resolve(o.snapshot);
                        _context53.next = 14;
                        break;

                      case 10:
                        _context53.prev = 10;
                        _context53.t0 = _context53["catch"](0);
                        _s25 = Su(_context53.t0, "Failed to execute query '".concat(e, " against cache"));
                        n.reject(_s25);

                      case 14:
                      case "end":
                        return _context53.stop();
                    }
                  }
                }, _callee53, null, [[0, 10]]);
              }));

              return function (_x129, _x130, _x131) {
                return _ref50.apply(this, arguments);
              };
            }()
            /**
            * Retrieves a latency-compensated query snapshot from the backend via a
            * SnapshotListener.
            */
            ;

            _context54.next = 3;
            return index_esm2017_Ga(t);

          case 3:
            _context54.t1 = _context54.sent;
            _context54.t2 = e;
            _context54.t3 = n;
            return _context54.abrupt("return", (0, _context54.t0)(_context54.t1, _context54.t2, _context54.t3));

          case 7:
          case "end":
            return _context54.stop();
        }
      }
    }, _callee54);
  }))), n.promise;
}

function index_esm2017_Za(t, e) {
  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var s = new index_esm2017_j();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55() {
    return regeneratorRuntime.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            _context55.t0 = function (t, e, n, s, i) {
              var r = new index_esm2017_ka({
                next: function next(n) {
                  // Remove query first before passing event to user to avoid
                  // user actions affecting the now stale query.
                  e.enqueueAndForget(function () {
                    return Ou(t, o);
                  }), n.fromCache && "server" === s.source ? i.reject(new dist_index_esm2017_Q(index_esm2017_G.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                },
                error: function error(t) {
                  return i.reject(t);
                }
              }),
                  o = new Lu(n, r, {
                includeMetadataChanges: !0,
                ku: !0
              });
              return Mu(t, o);
            };

            _context55.next = 3;
            return index_esm2017_Wa(t);

          case 3:
            _context55.t1 = _context55.sent;
            _context55.t2 = t.asyncQueue;
            _context55.t3 = e;
            _context55.t4 = n;
            _context55.t5 = s;
            return _context55.abrupt("return", (0, _context55.t0)(_context55.t1, _context55.t2, _context55.t3, _context55.t4, _context55.t5));

          case 9:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }))), s.promise;
}

function index_esm2017_tc(t, e) {
  var n = new index_esm2017_ka(e);
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56() {
    return regeneratorRuntime.wrap(function _callee56$(_context56) {
      while (1) {
        switch (_context56.prev = _context56.next) {
          case 0:
            _context56.t0 = function (t, e) {
              dist_index_esm2017_K(t).bu.add(e), // Immediately fire an initial event, indicating all existing listeners
              // are in-sync.
              e.next();
            };

            _context56.next = 3;
            return index_esm2017_Wa(t);

          case 3:
            _context56.t1 = _context56.sent;
            _context56.t2 = n;
            return _context56.abrupt("return", (0, _context56.t0)(_context56.t1, _context56.t2));

          case 6:
          case "end":
            return _context56.stop();
        }
      }
    }, _callee56);
  }))), function () {
    n.Aa(), t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57() {
      return regeneratorRuntime.wrap(function _callee57$(_context57) {
        while (1) {
          switch (_context57.prev = _context57.next) {
            case 0:
              _context57.t0 = function (t, e) {
                dist_index_esm2017_K(t).bu["delete"](e);
              };

              _context57.next = 3;
              return index_esm2017_Wa(t);

            case 3:
              _context57.t1 = _context57.sent;
              _context57.t2 = n;
              return _context57.abrupt("return", (0, _context57.t0)(_context57.t1, _context57.t2));

            case 6:
            case "end":
              return _context57.stop();
          }
        }
      }, _callee57);
    })));
  };
}
/**
 * Takes an updateFunction in which a set of reads and writes can be performed
 * atomically. In the updateFunction, the client can read and write values
 * using the supplied transaction object. After the updateFunction, all
 * changes will be committed. If a retryable error occurs (ex: some other
 * client has changed any of the data referenced), then the updateFunction
 * will be called again after a backoff. If the updateFunction still fails
 * after all retries, then the transaction will be rejected.
 *
 * The transaction object passed to the updateFunction contains methods for
 * accessing documents and collections. Unlike other datastore access, data
 * accessed with the transaction will not reflect local changes that have not
 * been committed. For this reason, it is required that all reads are
 * performed before any writes. Transactions must be performed while online.
 */


function index_esm2017_ec(t, e, n) {
  var s = new index_esm2017_j();
  return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee58() {
    var i;
    return regeneratorRuntime.wrap(function _callee58$(_context58) {
      while (1) {
        switch (_context58.prev = _context58.next) {
          case 0:
            _context58.next = 2;
            return function (t) {
              return index_esm2017_qa(t).then(function (t) {
                return t.datastore;
              });
            }(t);

          case 2:
            i = _context58.sent;
            new index_esm2017_Fa(t.asyncQueue, i, n, e, s).run();

          case 4:
          case "end":
            return _context58.stop();
        }
      }
    }, _callee58);
  }))), s.promise;
}

function index_esm2017_nc(t, e, n, s) {
  var i = function (t, e) {
    var n;
    n = "string" == typeof t ? new TextEncoder().encode(t) : t;
    return function (t, e) {
      return new index_esm2017_Ma(t, e);
    }(function (t, e) {
      if (t instanceof Uint8Array) return index_esm2017_Na(t, e);
      if (t instanceof ArrayBuffer) return index_esm2017_Na(new Uint8Array(t), e);
      if (t instanceof ReadableStream) return t.getReader();
      throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
    }(n), e);
  }
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
  (n, jo(e));

  t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee59() {
    return regeneratorRuntime.wrap(function _callee59$(_context59) {
      while (1) {
        switch (_context59.prev = _context59.next) {
          case 0:
            _context59.t0 = index_esm2017_va;
            _context59.next = 3;
            return index_esm2017_ja(t);

          case 3:
            _context59.t1 = _context59.sent;
            _context59.t2 = i;
            _context59.t3 = s;
            (0, _context59.t0)(_context59.t1, _context59.t2, _context59.t3);

          case 7:
          case "end":
            return _context59.stop();
        }
      }
    }, _callee59);
  })));
}

function index_esm2017_sc(t, e) {
  return t.asyncQueue.enqueue( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee60() {
    return regeneratorRuntime.wrap(function _callee60$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            _context60.t0 = function (t, e) {
              var n = dist_index_esm2017_K(t);
              return n.persistence.runTransaction("Get named query", "readonly", function (t) {
                return n._s.getNamedQuery(t, e);
              });
            };

            _context60.next = 3;
            return index_esm2017_Ga(t);

          case 3:
            _context60.t1 = _context60.sent;
            _context60.t2 = e;
            return _context60.abrupt("return", (0, _context60.t0)(_context60.t1, _context60.t2));

          case 6:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee60);
  })));
}

var index_esm2017_ic = new Map();
/**
 * An instance map that ensures only one Datastore exists per Firestore
 * instance.
 */

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function index_esm2017_rc(t, e, n) {
  if (!n) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Function ".concat(t, "() cannot be called with an empty ").concat(e, "."));
}
/**
 * Validates that two boolean options are not set at the same time.
 * @internal
 */


function index_esm2017_oc(t, e, n, s) {
  if (!0 === e && !0 === s) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "".concat(t, " and ").concat(n, " cannot be used together."));
}
/**
 * Validates that `path` refers to a document (indicated by the fact it contains
 * an even numbers of segments).
 */


function index_esm2017_uc(t) {
  if (!index_esm2017_xt.isDocumentKey(t)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but ".concat(t, " has ").concat(t.length, "."));
}
/**
 * Validates that `path` refers to a collection (indicated by the fact it
 * contains an odd numbers of segments).
 */


function index_esm2017_ac(t) {
  if (index_esm2017_xt.isDocumentKey(t)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but ".concat(t, " has ").concat(t.length, "."));
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */

/** Returns a string describing the type / value of the provided input. */


function index_esm2017_cc(t) {
  if (void 0 === t) return "undefined";
  if (null === t) return "null";
  if ("string" == typeof t) return t.length > 20 && (t = "".concat(t.substring(0, 20), "...")), JSON.stringify(t);
  if ("number" == typeof t || "boolean" == typeof t) return "" + t;

  if ("object" == firestore_dist_index_esm2017_typeof(t)) {
    if (t instanceof Array) return "an array";
    {
      var e =
      /** try to get the constructor name for an object. */
      function (t) {
        if (t.constructor) return t.constructor.name;
        return null;
      }
      /**
      * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
      * underlying instance. Throws if  `obj` is not an instance of `T`.
      *
      * This cast is used in the Lite and Full SDK to verify instance types for
      * arguments passed to the public API.
      * @internal
      */
      (t);

      return e ? "a custom ".concat(e, " object") : "an object";
    }
  }

  return "function" == typeof t ? "a function" : dist_index_esm2017_L();
}

function index_esm2017_hc(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
  if ("_delegate" in t && ( // Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  t = t._delegate), !(t instanceof e)) {
    if (e.name === t.constructor.name) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    {
      var n = index_esm2017_cc(t);
      throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Expected type '".concat(e.name, "', but it was: ").concat(n));
    }
  }

  return t;
}

function index_esm2017_lc(t, e) {
  if (e <= 0) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Function ".concat(t, "() requires a positive number, but it was: ").concat(e, "."));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// settings() defaults:

/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied `FirestoreSettings` object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */


var index_esm2017_fc = /*#__PURE__*/function () {
  function fc(t) {
    firestore_dist_index_esm2017_classCallCheck(this, fc);

    var e;

    if (void 0 === t.host) {
      if (void 0 !== t.ssl) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      this.host = "firestore.googleapis.com", this.ssl = true;
    } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;

    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {
      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = t.cacheSizeBytes;
    }
    this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t.useFetchStreams, index_esm2017_oc("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
  }

  firestore_dist_index_esm2017_createClass(fc, [{
    key: "isEqual",
    value: function isEqual(t) {
      return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
    }
  }]);

  return fc;
}();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */


var index_esm2017_dc = /*#__PURE__*/function () {
  /** @hideconstructor */
  function dc(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, dc);

    this._authCredentials = e, this._appCheckCredentials = n,
    /**
     * Whether it's a Firestore or Firestore Lite instance.
     */
    this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new index_esm2017_fc({}), this._settingsFrozen = !1, t instanceof index_esm2017_vt ? this._databaseId = t : (this._app = t, this._databaseId = function (t) {
      if (!Object.prototype.hasOwnProperty.apply(t.options, ["projectId"])) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
      return new index_esm2017_vt(t.options.projectId);
    }
    /**
    * Modify this instance to communicate with the Cloud Firestore emulator.
    *
    * Note: This must be called before this instance has been used to do any
    * operations.
    *
    * @param firestore - The `Firestore` instance to configure to connect to the
    * emulator.
    * @param host - the emulator host (ex: localhost).
    * @param port - the emulator port (ex: 9000).
    * @param options.mockUserToken - the mock auth token to use for unit testing
    * Security Rules.
    */
    (t));
  }
  /**
   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
   * instance.
   */


  firestore_dist_index_esm2017_createClass(dc, [{
    key: "app",
    get: function get() {
      if (!this._app) throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
      return this._app;
    }
  }, {
    key: "_initialized",
    get: function get() {
      return this._settingsFrozen;
    }
  }, {
    key: "_terminated",
    get: function get() {
      return void 0 !== this._terminateTask;
    }
  }, {
    key: "_setSettings",
    value: function _setSettings(t) {
      if (this._settingsFrozen) throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
      this._settings = new index_esm2017_fc(t), void 0 !== t.credentials && (this._authCredentials = function (t) {
        if (!t) return new dist_index_esm2017_z();

        switch (t.type) {
          case "gapi":
            var e = t.client; // Make sure this really is a Gapi client.

            return dist_index_esm2017_U(!("object" != firestore_dist_index_esm2017_typeof(e) || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new dist_index_esm2017_X(e, t.sessionIndex || "0", t.iamToken || null);

          case "provider":
            return t.client;

          default:
            throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
        }
      }(t.credentials));
    }
  }, {
    key: "_getSettings",
    value: function _getSettings() {
      return this._settings;
    }
  }, {
    key: "_freezeSettings",
    value: function _freezeSettings() {
      return this._settingsFrozen = !0, this._settings;
    }
  }, {
    key: "_delete",
    value: function _delete() {
      return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
    }
    /** Returns a JSON-serializable representation of this `Firestore` instance. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        app: this._app,
        databaseId: this._databaseId,
        settings: this._settings
      };
    }
    /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */

  }, {
    key: "_terminate",
    value: function _terminate() {
      /**
      * Removes all components associated with the provided instance. Must be called
      * when the `Firestore` instance is terminated.
      */
      return function (t) {
        var e = index_esm2017_ic.get(t);
        e && (dist_index_esm2017_O("ComponentProvider", "Removing Datastore"), index_esm2017_ic["delete"](t), e.terminate());
      }(this), Promise.resolve();
    }
  }]);

  return dc;
}();

function _c(t, e, n) {
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var i;

  var r = (t = index_esm2017_hc(t, index_esm2017_dc))._getSettings();

  if ("firestore.googleapis.com" !== r.host && r.host !== e && index_esm2017_$("Host has been set in both settings() and useEmulator(), emulator host will be used"), t._setSettings(Object.assign(Object.assign({}, r), {
    host: "".concat(e, ":").concat(n),
    ssl: !1
  })), s.mockUserToken) {
    var _e49, _n28;

    if ("string" == typeof s.mockUserToken) _e49 = s.mockUserToken, _n28 = dist_index_esm2017_C.MOCK_USER;else {
      // Let createMockUserToken validate first (catches common mistakes like
      // invalid field "uid" and missing field "sub" / "user_id".)
      _e49 = createMockUserToken(s.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);

      var _r7 = s.mockUserToken.sub || s.mockUserToken.user_id;

      if (!_r7) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
      _n28 = new dist_index_esm2017_C(_r7);
    }
    t._authCredentials = new dist_index_esm2017_H(new dist_index_esm2017_W(_e49, _n28));
  }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `DocumentReference` refers to a document location in a Firestore database
 * and can be used to write, read, or listen to the location. The document at
 * the referenced location may or may not exist.
 */


var index_esm2017_wc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /** @hideconstructor */
  function wc(t,
  /**
   * If provided, the `FirestoreDataConverter` associated with this instance.
   */
  e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, wc);

    this.converter = e, this._key = n,
    /** The type of this Firestore reference. */
    this.type = "document", this.firestore = t;
  }

  firestore_dist_index_esm2017_createClass(wc, [{
    key: "_path",
    get: function get() {
      return this._key.path;
    }
    /**
     * The document's identifier within its collection.
     */

  }, {
    key: "id",
    get: function get() {
      return this._key.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced document (relative
     * to the root of the database).
     */

  }, {
    key: "path",
    get: function get() {
      return this._key.path.canonicalString();
    }
    /**
     * The collection this `DocumentReference` belongs to.
     */

  }, {
    key: "parent",
    get: function get() {
      return new index_esm2017_gc(this.firestore, this.converter, this._key.path.popLast());
    }
  }, {
    key: "withConverter",
    value: function withConverter(t) {
      return new wc(this.firestore, t, this._key);
    }
  }]);

  return wc;
}()));
/**
 * A `Query` refers to a query which you can read or listen to. You can also
 * construct refined `Query` objects by adding filters and ordering.
 */


var index_esm2017_mc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  // This is the lite version of the Query class in the main SDK.

  /** @hideconstructor protected */
  function mc(t,
  /**
   * If provided, the `FirestoreDataConverter` associated with this instance.
   */
  e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, mc);

    this.converter = e, this._query = n,
    /** The type of this Firestore reference. */
    this.type = "query", this.firestore = t;
  }

  firestore_dist_index_esm2017_createClass(mc, [{
    key: "withConverter",
    value: function withConverter(t) {
      return new mc(this.firestore, t, this._query);
    }
  }]);

  return mc;
}()));
/**
 * A `CollectionReference` object can be used for adding documents, getting
 * document references, and querying for documents (using {@link query}).
 */


var index_esm2017_gc = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_mc) {
  firestore_dist_index_esm2017_inherits(gc, _mc);

  var _super31 = firestore_dist_index_esm2017_createSuper(gc);

  /** @hideconstructor */
  function gc(t, e, n) {
    var _this176;

    firestore_dist_index_esm2017_classCallCheck(this, gc);

    _this176 = _super31.call(this, t, e, index_esm2017_Ke(n)), _this176._path = n,
    /** The type of this Firestore reference. */
    _this176.type = "collection";
    return _this176;
  }
  /** The collection's identifier. */


  firestore_dist_index_esm2017_createClass(gc, [{
    key: "id",
    get: function get() {
      return this._query.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced collection (relative
     * to the root of the database).
     */

  }, {
    key: "path",
    get: function get() {
      return this._query.path.canonicalString();
    }
    /**
     * A reference to the containing `DocumentReference` if this is a
     * subcollection. If this isn't a subcollection, the reference is null.
     */

  }, {
    key: "parent",
    get: function get() {
      var t = this._path.popLast();

      return t.isEmpty() ? null : new index_esm2017_wc(this.firestore,
      /* converter= */
      null, new index_esm2017_xt(t));
    }
  }, {
    key: "withConverter",
    value: function withConverter(t) {
      return new gc(this.firestore, t, this._path);
    }
  }]);

  return gc;
}(index_esm2017_mc)));

function index_esm2017_yc(t, e) {
  for (var _len7 = arguments.length, n = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
    n[_key7 - 2] = arguments[_key7];
  }

  if (t = getModularInstance(t), index_esm2017_rc("collection", "path", e), t instanceof index_esm2017_dc) {
    var s = index_esm2017_t.fromString.apply(index_esm2017_t, [e].concat(n));

    return index_esm2017_ac(s), new index_esm2017_gc(t,
    /* converter= */
    null, s);
  }

  {
    if (!(t instanceof index_esm2017_wc || t instanceof index_esm2017_gc)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");

    var _s26 = t._path.child(index_esm2017_t.fromString.apply(index_esm2017_t, [e].concat(n)));

    return index_esm2017_ac(_s26), new index_esm2017_gc(t.firestore,
    /* converter= */
    null, _s26);
  }
} // TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106

/**
 * Creates and returns a new `Query` instance that includes all documents in the
 * database that are contained in a collection or subcollection with the
 * given `collectionId`.
 *
 * @param firestore - A reference to the root `Firestore` instance.
 * @param collectionId - Identifies the collections to query over. Every
 * collection or subcollection with this ID as the last segment of its path
 * will be included. Cannot contain a slash.
 * @returns The created `Query`.
 */


function index_esm2017_pc(t, e) {
  if (t = index_esm2017_hc(t, index_esm2017_dc), index_esm2017_rc("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid collection ID '".concat(e, "' passed to function collectionGroup(). Collection IDs must not contain '/'."));
  return new index_esm2017_mc(t,
  /* converter= */
  null,
  /**
  * Creates a new Query for a collection group query that matches all documents
  * within the provided collection group.
  */
  function (t) {
    return new index_esm2017_Ue(index_esm2017_t.emptyPath(), t);
  }(e));
}

function index_esm2017_Ic(t, e) {
  for (var _len8 = arguments.length, n = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {
    n[_key8 - 2] = arguments[_key8];
  }

  if (t = getModularInstance(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
  // 'undefined' and 'null'.
  1 === arguments.length && (e = index_esm2017_it.R()), index_esm2017_rc("doc", "path", e), t instanceof index_esm2017_dc) {
    var s = index_esm2017_t.fromString.apply(index_esm2017_t, [e].concat(n));

    return index_esm2017_uc(s), new index_esm2017_wc(t,
    /* converter= */
    null, new index_esm2017_xt(s));
  }

  {
    if (!(t instanceof index_esm2017_wc || t instanceof index_esm2017_gc)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");

    var _s27 = t._path.child(index_esm2017_t.fromString.apply(index_esm2017_t, [e].concat(n)));

    return index_esm2017_uc(_s27), new index_esm2017_wc(t.firestore, t instanceof index_esm2017_gc ? t.converter : null, new index_esm2017_xt(_s27));
  }
}
/**
 * Returns true if the provided references are equal.
 *
 * @param left - A reference to compare.
 * @param right - A reference to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */


function index_esm2017_Tc(t, e) {
  return t = getModularInstance(t), e = getModularInstance(e), (t instanceof index_esm2017_wc || t instanceof index_esm2017_gc) && (e instanceof index_esm2017_wc || e instanceof index_esm2017_gc) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;
}
/**
 * Returns true if the provided queries point to the same collection and apply
 * the same constraints.
 *
 * @param left - A `Query` to compare.
 * @param right - A `Query` to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */


function index_esm2017_Ec(t, e) {
  return t = getModularInstance(t), e = getModularInstance(e), t instanceof index_esm2017_mc && e instanceof index_esm2017_mc && t.firestore === e.firestore && index_esm2017_Ye(t._query, e._query) && t.converter === e.converter;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_Ac = /*#__PURE__*/function () {
  function Ac() {
    var _this177 = this;

    firestore_dist_index_esm2017_classCallCheck(this, Ac);

    // The last promise in the queue.
    this.Fa = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
    // retried with backoff.
    this.$a = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
    // be changed again.
    this.Ba = !1, // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.
    this.La = [], // visible for testing
    this.Ua = null, // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.
    this.qa = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
    this.Ka = !1, // List of TimerIds to fast-forward delays for.
    this.Ga = [], // Backoff timer used to schedule retries for retryable operations
    this.No = new Wo(this, "async_queue_retry"
    /* AsyncQueueRetry */
    ), // Visibility handler that triggers an immediate retry of all retryable
    // operations. Meant to speed up recovery when we regain file system access
    // after page comes into foreground.
    this.Qa = function () {
      var t = Qo();
      t && dist_index_esm2017_O("AsyncQueue", "Visibility state changed to " + t.visibilityState), _this177.No.Po();
    };
    var t = Qo();
    t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Qa);
  }

  firestore_dist_index_esm2017_createClass(Ac, [{
    key: "isShuttingDown",
    get: function get() {
      return this.Ba;
    }
    /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */

  }, {
    key: "enqueueAndForget",
    value: function enqueueAndForget(t) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.enqueue(t);
    }
  }, {
    key: "enqueueAndForgetEvenWhileRestricted",
    value: function enqueueAndForgetEvenWhileRestricted(t) {
      this.ja(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.Wa(t);
    }
  }, {
    key: "enterRestrictedMode",
    value: function enterRestrictedMode(t) {
      if (!this.Ba) {
        this.Ba = !0, this.Ka = t || !1;
        var e = Qo();
        e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.Qa);
      }
    }
  }, {
    key: "enqueue",
    value: function enqueue(t) {
      var _this178 = this;

      if (this.ja(), this.Ba) // Return a Promise which never resolves.
        return new Promise(function () {}); // Create a deferred Promise that we can return to the callee. This
      // allows us to return a "hanging Promise" only to the callee and still
      // advance the queue even when the operation is not run.

      var e = new index_esm2017_j();
      return this.Wa(function () {
        return _this178.Ba && _this178.Ka ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise);
      }).then(function () {
        return e.promise;
      });
    }
  }, {
    key: "enqueueRetryable",
    value: function enqueueRetryable(t) {
      var _this179 = this;

      this.enqueueAndForget(function () {
        return _this179.$a.push(t), _this179.za();
      });
    }
    /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */

  }, {
    key: "za",
    value: function () {
      var _za = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee61() {
        var _this180 = this;

        return regeneratorRuntime.wrap(function _callee61$(_context61) {
          while (1) {
            switch (_context61.prev = _context61.next) {
              case 0:
                if (!(0 !== this.$a.length)) {
                  _context61.next = 14;
                  break;
                }

                _context61.prev = 1;
                _context61.next = 4;
                return this.$a[0]();

              case 4:
                this.$a.shift();
                this.No.reset();
                _context61.next = 13;
                break;

              case 8:
                _context61.prev = 8;
                _context61.t0 = _context61["catch"](1);

                if (Ai(_context61.t0)) {
                  _context61.next = 12;
                  break;
                }

                throw _context61.t0;

              case 12:
                // Failure will be handled by AsyncQueue
                dist_index_esm2017_O("AsyncQueue", "Operation failed with retryable error: " + _context61.t0);

              case 13:
                this.$a.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.No.Ro(function () {
                  return _this180.za();
                });

              case 14:
              case "end":
                return _context61.stop();
            }
          }
        }, _callee61, this, [[1, 8]]);
      }));

      function za() {
        return _za.apply(this, arguments);
      }

      return za;
    }()
  }, {
    key: "Wa",
    value: function Wa(t) {
      var _this181 = this;

      var e = this.Fa.then(function () {
        return _this181.qa = !0, t()["catch"](function (t) {
          _this181.Ua = t, _this181.qa = !1;

          var e =
          /**
          * Chrome includes Error.message in Error.stack. Other browsers do not.
          * This returns expected output of message + stack when available.
          * @param error - Error or FirestoreError
          */
          function (t) {
            var e = t.message || "";
            t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
            return e;
          }
          /**
          * @license
          * Copyright 2017 Google LLC
          *
          * Licensed under the Apache License, Version 2.0 (the "License");
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *   http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an "AS IS" BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */
          (t); // Re-throw the error so that this.tail becomes a rejected Promise and
          // all further attempts to chain (via .then) will just short-circuit
          // and return the rejected Promise.


          throw dist_index_esm2017_F("INTERNAL UNHANDLED ERROR: ", e), t;
        }).then(function (t) {
          return _this181.qa = !1, t;
        });
      });
      return this.Fa = e, e;
    }
  }, {
    key: "enqueueAfterDelay",
    value: function enqueueAfterDelay(t, e, n) {
      var _this182 = this;

      this.ja(), // Fast-forward delays for timerIds that have been overriden.
      this.Ga.indexOf(t) > -1 && (e = 0);
      var s = vu.createAndSchedule(this, t, e, n, function (t) {
        return _this182.Ha(t);
      });
      return this.La.push(s), s;
    }
  }, {
    key: "ja",
    value: function ja() {
      this.Ua && dist_index_esm2017_L();
    }
  }, {
    key: "verifyOperationInProgress",
    value: function verifyOperationInProgress() {}
    /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */

  }, {
    key: "Ja",
    value: function () {
      var _Ja = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee62() {
        var t;
        return regeneratorRuntime.wrap(function _callee62$(_context62) {
          while (1) {
            switch (_context62.prev = _context62.next) {
              case 0:
                t = this.Fa;
                _context62.next = 3;
                return t;

              case 3:
                if (t !== this.Fa) {
                  _context62.next = 0;
                  break;
                }

              case 4:
              case "end":
                return _context62.stop();
            }
          }
        }, _callee62, this);
      }));

      function Ja() {
        return _Ja.apply(this, arguments);
      }

      return Ja;
    }()
    /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */

  }, {
    key: "Ya",
    value: function Ya(t) {
      var _iterator72 = firestore_dist_index_esm2017_createForOfIteratorHelper(this.La),
          _step72;

      try {
        for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
          var e = _step72.value;
          if (e.timerId === t) return !0;
        }
      } catch (err) {
        _iterator72.e(err);
      } finally {
        _iterator72.f();
      }

      return !1;
    }
    /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId - Delayed operations up to and including this TimerId
     * will be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */

  }, {
    key: "Xa",
    value: function Xa(t) {
      var _this183 = this;

      // Note that draining may generate more delayed ops, so we do that first.
      return this.Ja().then(function () {
        // Run ops in the same order they'd run if they ran naturally.
        _this183.La.sort(function (t, e) {
          return t.targetTimeMs - e.targetTimeMs;
        });

        var _iterator73 = firestore_dist_index_esm2017_createForOfIteratorHelper(_this183.La),
            _step73;

        try {
          for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
            var e = _step73.value;
            if (e.skipDelay(), "all"
            /* All */
            !== t && e.timerId === t) break;
          }
        } catch (err) {
          _iterator73.e(err);
        } finally {
          _iterator73.f();
        }

        return _this183.Ja();
      });
    }
    /**
     * For Tests: Skip all subsequent delays for a timer id.
     */

  }, {
    key: "Za",
    value: function Za(t) {
      this.Ga.push(t);
    }
    /** Called once a DelayedOperation is run or canceled. */

  }, {
    key: "Ha",
    value: function Ha(t) {
      // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
      var e = this.La.indexOf(t);
      this.La.splice(e, 1);
    }
  }]);

  return Ac;
}();

function index_esm2017_Rc(t) {
  /**
  * Returns true if obj is an object and contains at least one of the specified
  * methods.
  */
  return function (t, e) {
    if ("object" != firestore_dist_index_esm2017_typeof(t) || null === t) return !1;
    var n = t;

    var _iterator74 = firestore_dist_index_esm2017_createForOfIteratorHelper(e),
        _step74;

    try {
      for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
        var _t102 = _step74.value;
        if (_t102 in n && "function" == typeof n[_t102]) return !0;
      }
    } catch (err) {
      _iterator74.e(err);
    } finally {
      _iterator74.f();
    }

    return !1;
  }
  /**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */

  /**
  * Represents the task of loading a Firestore bundle. It provides progress of bundle
  * loading, as well as task completion and error events.
  *
  * The API is compatible with `Promise<LoadBundleTaskProgress>`.
  */
  (t, ["next", "error", "complete"]);
}

var index_esm2017_bc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function bc() {
    firestore_dist_index_esm2017_classCallCheck(this, bc);

    this._progressObserver = {}, this._taskCompletionResolver = new index_esm2017_j(), this._lastProgress = {
      taskState: "Running",
      totalBytes: 0,
      totalDocuments: 0,
      bytesLoaded: 0,
      documentsLoaded: 0
    };
  }
  /**
   * Registers functions to listen to bundle loading progress events.
   * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
   *   each time a Firestore document is loaded from the bundle.
   * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
   *   error, and there should be no more updates after this.
   * @param complete - Called when the loading task is complete.
   */


  firestore_dist_index_esm2017_createClass(bc, [{
    key: "onProgress",
    value: function onProgress(t, e, n) {
      this._progressObserver = {
        next: t,
        error: e,
        complete: n
      };
    }
    /**
     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
     *
     * @param onRejected - Called when an error occurs during bundle loading.
     */

  }, {
    key: "catch",
    value: function _catch(t) {
      return this._taskCompletionResolver.promise["catch"](t);
    }
    /**
     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
     *
     * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
     *   The update will always have its `taskState` set to `"Success"`.
     * @param onRejected - Called when an error occurs during bundle loading.
     */

  }, {
    key: "then",
    value: function then(t, e) {
      return this._taskCompletionResolver.promise.then(t, e);
    }
    /**
     * Notifies all observers that bundle loading has completed, with a provided
     * `LoadBundleTaskProgress` object.
     *
     * @private
     */

  }, {
    key: "_completeWith",
    value: function _completeWith(t) {
      this._updateProgress(t), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(t);
    }
    /**
     * Notifies all observers that bundle loading has failed, with a provided
     * `Error` as the reason.
     *
     * @private
     */

  }, {
    key: "_failWith",
    value: function _failWith(t) {
      this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(t), this._taskCompletionResolver.reject(t);
    }
    /**
     * Notifies a progress update of loading a bundle.
     * @param progress - The new progress.
     *
     * @private
     */

  }, {
    key: "_updateProgress",
    value: function _updateProgress(t) {
      this._lastProgress = t, this._progressObserver.next && this._progressObserver.next(t);
    }
  }]);

  return bc;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** DOMException error code constants. */


var index_esm2017_Pc = (/* unused pure expression or super */ null && (-1));
/**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */

var index_esm2017_Vc = /*#__PURE__*/function (_dc) {
  firestore_dist_index_esm2017_inherits(Vc, _dc);

  var _super32 = firestore_dist_index_esm2017_createSuper(Vc);

  /** @hideconstructor */
  function Vc(t, e, n) {
    var _this184;

    firestore_dist_index_esm2017_classCallCheck(this, Vc);

    _this184 = _super32.call(this, t, e, n),
    /**
     * Whether it's a {@link Firestore} or Firestore Lite instance.
     */
    _this184.type = "firestore", _this184._queue = new index_esm2017_Ac(), _this184._persistenceKey = "name" in t ? t.name : "[DEFAULT]";
    return _this184;
  }

  firestore_dist_index_esm2017_createClass(Vc, [{
    key: "_terminate",
    value: function _terminate() {
      return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
      // usage throws an exception.
      index_esm2017_Cc(this), this._firestoreClient.terminate();
    }
  }]);

  return Vc;
}(index_esm2017_dc);
/**
 * Initializes a new instance of {@link Firestore} with the provided settings.
 * Can only be called before any other function, including
 * {@link getFirestore}. If the custom settings are empty, this function is
 * equivalent to calling {@link getFirestore}.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} with which the {@link Firestore} instance will
 * be associated.
 * @param settings - A settings object to configure the {@link Firestore} instance.
 * @returns A newly initialized {@link Firestore} instance.
 */


function index_esm2017_vc(t, e) {
  var n = _getProvider(t, "firestore");

  if (n.isInitialized()) {
    var _t103 = n.getImmediate(),
        s = n.getOptions();

    if (deepEqual(s, e)) return _t103;
    throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.");
  }

  if (void 0 !== e.cacheSizeBytes && -1 !== e.cacheSizeBytes && e.cacheSizeBytes < 1048576) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
  return n.initialize({
    options: e
  });
}
/**
 * Returns the existing {@link Firestore} instance that is associated with the
 * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new
 * instance with default settings.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned {@link Firestore}
 * instance is associated with.
 * @returns The {@link Firestore} instance of the provided app.
 */


function index_esm2017_Sc() {
  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();
  return _getProvider(e, "firestore").getImmediate();
}
/**
 * @internal
 */


function index_esm2017_Dc(t) {
  return t._firestoreClient || index_esm2017_Cc(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
}

function index_esm2017_Cc(t) {
  var e;

  var n = t._freezeSettings(),
      s = function (t, e, n, s) {
    return new index_esm2017_Vt(t, e, n, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams);
  }(t._databaseId, (null === (e = t._app) || void 0 === e ? void 0 : e.options.appId) || "", t._persistenceKey, n);

  t._firestoreClient = new index_esm2017_$a(t._authCredentials, t._appCheckCredentials, t._queue, s);
}
/**
 * Attempts to enable persistent storage, if possible.
 *
 * Must be called before any other functions (other than
 * {@link initializeFirestore}, {@link getFirestore} or
 * {@link clearIndexedDbPersistence}.
 *
 * If this fails, `enableIndexedDbPersistence()` will reject the promise it
 * returns. Note that even after this failure, the {@link Firestore} instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The {@link Firestore} instance to enable persistence for.
 * @param persistenceSettings - Optional settings object to configure
 * persistence.
 * @returns A `Promise` that represents successfully enabling persistent storage.
 */


function index_esm2017_xc(t, e) {
  index_esm2017_qc(t = index_esm2017_hc(t, index_esm2017_Vc));

  var n = index_esm2017_Dc(t),
      s = t._freezeSettings(),
      i = new index_esm2017_xa();

  return index_esm2017_kc(n, i, new Da(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
}
/**
 * Attempts to enable multi-tab persistent storage, if possible. If enabled
 * across all tabs, all operations share access to local persistence, including
 * shared execution of queries and latency-compensated local document updates
 * across all connected instances.
 *
 * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise
 * it returns. Note that even after this failure, the {@link Firestore} instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab and
 *     multi-tab is not enabled.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The {@link Firestore} instance to enable persistence for.
 * @returns A `Promise` that represents successfully enabling persistent
 * storage.
 */


function index_esm2017_Nc(t) {
  index_esm2017_qc(t = index_esm2017_hc(t, index_esm2017_Vc));

  var e = index_esm2017_Dc(t),
      n = t._freezeSettings(),
      s = new index_esm2017_xa();

  return index_esm2017_kc(e, s, new index_esm2017_Ca(s, n.cacheSizeBytes));
}
/**
 * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
 * If the operation fails with a recoverable error (see
 * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
 * but the client remains usable.
 */


function index_esm2017_kc(t, e, n) {
  var s = new index_esm2017_j();
  return t.asyncQueue.enqueue( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee63() {
    return regeneratorRuntime.wrap(function _callee63$(_context63) {
      while (1) {
        switch (_context63.prev = _context63.next) {
          case 0:
            _context63.prev = 0;
            _context63.next = 3;
            return Ba(t, n);

          case 3:
            _context63.next = 5;
            return index_esm2017_La(t, e);

          case 5:
            s.resolve();
            _context63.next = 13;
            break;

          case 8:
            _context63.prev = 8;
            _context63.t0 = _context63["catch"](0);

            if (
            /**
            * Decides whether the provided error allows us to gracefully disable
            * persistence (as opposed to crashing the client).
            */
            function (t) {
              if ("FirebaseError" === t.name) return t.code === index_esm2017_G.FAILED_PRECONDITION || t.code === index_esm2017_G.UNIMPLEMENTED;
              if ("undefined" != typeof DOMException && t instanceof DOMException) // There are a few known circumstances where we can open IndexedDb but
                // trying to read/write will fail (e.g. quota exceeded). For
                // well-understood cases, we attempt to detect these and then gracefully
                // fall back to memory persistence.
                // NOTE: Rather than continue to add to this list, we could decide to
                // always fall back, with the risk that we might accidentally hide errors
                // representing actual SDK bugs.
                // When the browser is out of quota we could get either quota exceeded
                // or an aborted error depending on whether the error happened during
                // schema migration.
                return 22 === t.code || 20 === t.code || // Firefox Private Browsing mode disables IndexedDb and returns
                // INVALID_STATE for any usage.
                11 === t.code;
              return !0;
            }
            /**
            * Clears the persistent storage. This includes pending writes and cached
            * documents.
            *
            * Must be called while the {@link Firestore} instance is not started (after the app is
            * terminated or when the app is first initialized). On startup, this function
            * must be called before other functions (other than {@link
            * initializeFirestore} or {@link getFirestore})). If the {@link Firestore}
            * instance is still running, the promise will be rejected with the error code
            * of `failed-precondition`.
            *
            * Note: `clearIndexedDbPersistence()` is primarily intended to help write
            * reliable tests that use Cloud Firestore. It uses an efficient mechanism for
            * dropping existing data but does not attempt to securely overwrite or
            * otherwise make cached data unrecoverable. For applications that are sensitive
            * to the disclosure of cached data in between user sessions, we strongly
            * recommend not enabling persistence at all.
            *
            * @param firestore - The {@link Firestore} instance to clear persistence for.
            * @returns A `Promise` that is resolved when the persistent storage is
            * cleared. Otherwise, the promise is rejected with an error.
            */
            (_context63.t0)) {
              _context63.next = 12;
              break;
            }

            throw _context63.t0;

          case 12:
            console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + _context63.t0), s.reject(_context63.t0);

          case 13:
          case "end":
            return _context63.stop();
        }
      }
    }, _callee63, null, [[0, 8]]);
  }))).then(function () {
    return s.promise;
  });
}

function index_esm2017_Mc(t) {
  if (t._initialized && !t._terminated) throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
  var e = new index_esm2017_j();
  return t._queue.enqueueAndForgetEvenWhileRestricted( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee65() {
    return regeneratorRuntime.wrap(function _callee65$(_context65) {
      while (1) {
        switch (_context65.prev = _context65.next) {
          case 0:
            _context65.prev = 0;
            _context65.next = 3;
            return function () {
              var _ref59 = dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee64(t) {
                var e;
                return regeneratorRuntime.wrap(function _callee64$(_context64) {
                  while (1) {
                    switch (_context64.prev = _context64.next) {
                      case 0:
                        if (Ii.vt()) {
                          _context64.next = 2;
                          break;
                        }

                        return _context64.abrupt("return", Promise.resolve());

                      case 2:
                        e = t + "main";
                        _context64.next = 5;
                        return Ii["delete"](e);

                      case 5:
                      case "end":
                        return _context64.stop();
                    }
                  }
                }, _callee64);
              }));

              return function (_x132) {
                return _ref59.apply(this, arguments);
              };
            }()(Yr(t._databaseId, t._persistenceKey));

          case 3:
            e.resolve();
            _context65.next = 9;
            break;

          case 6:
            _context65.prev = 6;
            _context65.t0 = _context65["catch"](0);
            e.reject(_context65.t0);

          case 9:
          case "end":
            return _context65.stop();
        }
      }
    }, _callee65, null, [[0, 6]]);
  }))), e.promise;
}
/**
 * Waits until all currently pending writes for the active user have been
 * acknowledged by the backend.
 *
 * The returned promise resolves immediately if there are no outstanding writes.
 * Otherwise, the promise waits for all previously issued writes (including
 * those written in a previous app session), but it does not wait for writes
 * that were added after the function is called. If you want to wait for
 * additional writes, call `waitForPendingWrites()` again.
 *
 * Any outstanding `waitForPendingWrites()` promises are rejected during user
 * changes.
 *
 * @returns A `Promise` which resolves when all currently pending writes have been
 * acknowledged by the backend.
 */


function index_esm2017_Oc(t) {
  return function (t) {
    var e = new index_esm2017_j();
    return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee66() {
      return regeneratorRuntime.wrap(function _callee66$(_context66) {
        while (1) {
          switch (_context66.prev = _context66.next) {
            case 0:
              _context66.t0 = index_esm2017_oa;
              _context66.next = 3;
              return index_esm2017_ja(t);

            case 3:
              _context66.t1 = _context66.sent;
              _context66.t2 = e;
              return _context66.abrupt("return", (0, _context66.t0)(_context66.t1, _context66.t2));

            case 6:
            case "end":
              return _context66.stop();
          }
        }
      }, _callee66);
    }))), e.promise;
  }(index_esm2017_Dc(t = index_esm2017_hc(t, index_esm2017_Vc)));
}
/**
 * Re-enables use of the network for this {@link Firestore} instance after a prior
 * call to {@link disableNetwork}.
 *
 * @returns A `Promise` that is resolved once the network has been enabled.
 */


function index_esm2017_Fc(t) {
  return index_esm2017_za(index_esm2017_Dc(t = index_esm2017_hc(t, index_esm2017_Vc)));
}
/**
 * Disables network usage for this instance. It can be re-enabled via {@link
 * enableNetwork}. While the network is disabled, any snapshot listeners,
 * `getDoc()` or `getDocs()` calls will return results from cache, and any write
 * operations will be queued until the network is restored.
 *
 * @returns A `Promise` that is resolved once the network has been disabled.
 */


function index_esm2017_$c(t) {
  return index_esm2017_Ha(index_esm2017_Dc(t = index_esm2017_hc(t, index_esm2017_Vc)));
}
/**
 * Terminates the provided {@link Firestore} instance.
 *
 * After calling `terminate()` only the `clearIndexedDbPersistence()` function
 * may be used. Any other function will throw a `FirestoreError`.
 *
 * To restart after termination, create a new instance of FirebaseFirestore with
 * {@link getFirestore}.
 *
 * Termination does not cancel any pending writes, and any promises that are
 * awaiting a response from the server will not be resolved. If you have
 * persistence enabled, the next time you start this instance, it will resume
 * sending these writes to the server.
 *
 * Note: Under normal circumstances, calling `terminate()` is not required. This
 * function is useful only when you want to force this instance to release all
 * of its resources or in combination with `clearIndexedDbPersistence()` to
 * ensure that all local state is destroyed between test runs.
 *
 * @returns A `Promise` that is resolved when the instance has been successfully
 * terminated.
 */


function index_esm2017_Bc(t) {
  return _removeServiceInstance(t.app, "firestore"), t._delete();
}
/**
 * Loads a Firestore bundle into the local cache.
 *
 * @param firestore - The {@link Firestore} instance to load bundles for.
 * @param bundleData - An object representing the bundle to be loaded. Valid
 * objects are `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
 *
 * @returns A `LoadBundleTask` object, which notifies callers with progress
 * updates, and completion or error events. It can be used as a
 * `Promise<LoadBundleTaskProgress>`.
 */


function index_esm2017_Lc(t, e) {
  var n = index_esm2017_Dc(t = index_esm2017_hc(t, index_esm2017_Vc)),
      s = new index_esm2017_bc();
  return index_esm2017_nc(n, t._databaseId, e, s), s;
}
/**
 * Reads a Firestore {@link Query} from local cache, identified by the given
 * name.
 *
 * The named queries are packaged  into bundles on the server side (along
 * with resulting documents), and loaded to local cache using `loadBundle`. Once
 * in local cache, use this method to extract a {@link Query} by name.
 *
 * @param firestore - The {@link Firestore} instance to read the query from.
 * @param name - The name of the query.
 * @returns A `Promise` that is resolved with the Query or `null`.
 */


function index_esm2017_Uc(t, e) {
  return index_esm2017_sc(index_esm2017_Dc(t = index_esm2017_hc(t, index_esm2017_Vc)), e).then(function (e) {
    return e ? new index_esm2017_mc(t, null, e.query) : null;
  });
}

function index_esm2017_qc(t) {
  if (t._initialized || t._terminated) throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a
 * list of field names (referring to a nested field in the document).
 *
 * Create a `FieldPath` by providing field names. If more than one field
 * name is provided, the path will point to a nested field in a document.
 */


var index_esm2017_Kc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Creates a `FieldPath` from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames - A list of field names.
   */
  function Kc() {
    firestore_dist_index_esm2017_classCallCheck(this, Kc);

    for (var _len9 = arguments.length, t = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      t[_key9] = arguments[_key9];
    }

    for (var e = 0; e < t.length; ++e) {
      if (0 === t[e].length) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    }

    this._internalPath = new index_esm2017_mt(t);
  }
  /**
   * Returns true if this `FieldPath` is equal to the provided one.
   *
   * @param other - The `FieldPath` to compare against.
   * @returns true if this `FieldPath` is equal to the provided one.
   */


  firestore_dist_index_esm2017_createClass(Kc, [{
    key: "isEqual",
    value: function isEqual(t) {
      return this._internalPath.isEqual(t._internalPath);
    }
  }]);

  return Kc;
}()));
/**
 * Returns a special sentinel `FieldPath` to refer to the ID of a document.
 * It can be used in queries to sort or filter by the document ID.
 */


function index_esm2017_Gc() {
  return new index_esm2017_Kc("__name__");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable object representing an array of bytes.
 */


var index_esm2017_Qc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /** @hideconstructor */
  function Qc(t) {
    firestore_dist_index_esm2017_classCallCheck(this, Qc);

    this._byteString = t;
  }
  /**
   * Creates a new `Bytes` object from the given Base64 string, converting it to
   * bytes.
   *
   * @param base64 - The Base64 string used to create the `Bytes` object.
   */


  firestore_dist_index_esm2017_createClass(Qc, [{
    key: "toBase64",
    value:
    /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @returns The Base64-encoded string created from the `Bytes` object.
     */
    function toBase64() {
      return this._byteString.toBase64();
    }
    /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @returns The Uint8Array created from the `Bytes` object.
     */

  }, {
    key: "toUint8Array",
    value: function toUint8Array() {
      return this._byteString.toUint8Array();
    }
    /**
     * Returns a string representation of the `Bytes` object.
     *
     * @returns A string representation of the `Bytes` object.
     */

  }, {
    key: "toString",
    value: function toString() {
      return "Bytes(base64: " + this.toBase64() + ")";
    }
    /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other - The `Bytes` object to compare against.
     * @returns true if this `Bytes` object is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this._byteString.isEqual(t._byteString);
    }
  }], [{
    key: "fromBase64String",
    value: function fromBase64String(t) {
      try {
        return new Qc(index_esm2017_pt.fromBase64String(t));
      } catch (t) {
        throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t);
      }
    }
    /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array - The Uint8Array used to create the `Bytes` object.
     */

  }, {
    key: "fromUint8Array",
    value: function fromUint8Array(t) {
      return new Qc(index_esm2017_pt.fromUint8Array(t));
    }
  }]);

  return Qc;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sentinel values that can be used when writing document fields with `set()`
 * or `update()`.
 */


var index_esm2017_jc = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(
/**
 * @param _methodName - The public API endpoint that returns this class.
 * @hideconstructor
 */
function jc(t) {
  firestore_dist_index_esm2017_classCallCheck(this, jc);

  this._methodName = t;
})));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An immutable object representing a geographic location in Firestore. The
 * location is represented as latitude/longitude pair.
 *
 * Latitude values are in the range of [-90, 90].
 * Longitude values are in the range of [-180, 180].
 */


var index_esm2017_Wc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Creates a new immutable `GeoPoint` object with the provided latitude and
   * longitude values.
   * @param latitude - The latitude as number between -90 and 90.
   * @param longitude - The longitude as number between -180 and 180.
   */
  function Wc(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Wc);

    if (!isFinite(t) || t < -90 || t > 90) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
    if (!isFinite(e) || e < -180 || e > 180) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
    this._lat = t, this._long = e;
  }
  /**
   * The latitude of this `GeoPoint` instance.
   */


  firestore_dist_index_esm2017_createClass(Wc, [{
    key: "latitude",
    get: function get() {
      return this._lat;
    }
    /**
     * The longitude of this `GeoPoint` instance.
     */

  }, {
    key: "longitude",
    get: function get() {
      return this._long;
    }
    /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other - The `GeoPoint` to compare against.
     * @returns true if this `GeoPoint` is equal to the provided one.
     */

  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return this._lat === t._lat && this._long === t._long;
    }
    /** Returns a JSON-serializable representation of this GeoPoint. */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        latitude: this._lat,
        longitude: this._long
      };
    }
    /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */

  }, {
    key: "_compareTo",
    value: function _compareTo(t) {
      return index_esm2017_rt(this._lat, t._lat) || index_esm2017_rt(this._long, t._long);
    }
  }]);

  return Wc;
}()));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var index_esm2017_zc = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */

var index_esm2017_Hc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Hc(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, Hc);

    this.data = t, this.fieldMask = e, this.fieldTransforms = n;
  }

  firestore_dist_index_esm2017_createClass(Hc, [{
    key: "toMutation",
    value: function toMutation(t, e) {
      return null !== this.fieldMask ? new index_esm2017_xn(t, this.data, this.fieldMask, e, this.fieldTransforms) : new index_esm2017_Cn(t, this.data, e, this.fieldTransforms);
    }
  }]);

  return Hc;
}()));
/** The result of parsing "update" data (i.e. for an updateData call). */


var index_esm2017_Jc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Jc(t, // The fieldMask does not include document transforms.
  e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, Jc);

    this.data = t, this.fieldMask = e, this.fieldTransforms = n;
  }

  firestore_dist_index_esm2017_createClass(Jc, [{
    key: "toMutation",
    value: function toMutation(t, e) {
      return new index_esm2017_xn(t, this.data, this.fieldMask, e, this.fieldTransforms);
    }
  }]);

  return Jc;
}()));

function index_esm2017_Yc(t) {
  switch (t) {
    case 0
    /* Set */
    : // fall through

    case 2
    /* MergeSet */
    : // fall through

    case 1
    /* Update */
    :
      return !0;

    case 3
    /* Argument */
    :
    case 4
    /* ArrayArgument */
    :
      return !1;

    default:
      throw dist_index_esm2017_L();
  }
}
/** A "context" object passed around while parsing user data. */


var index_esm2017_Xc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Initializes a ParseContext with the given source and path.
   *
   * @param settings - The settings for the parser.
   * @param databaseId - The database ID of the Firestore instance.
   * @param serializer - The serializer to use to generate the Value proto.
   * @param ignoreUndefinedProperties - Whether to ignore undefined properties
   * rather than throw.
   * @param fieldTransforms - A mutable list of field transforms encountered
   * while parsing the data.
   * @param fieldMask - A mutable list of field paths encountered while parsing
   * the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */
  function Xc(t, e, n, s, i, r) {
    firestore_dist_index_esm2017_classCallCheck(this, Xc);

    this.settings = t, this.databaseId = e, this.M = n, this.ignoreUndefinedProperties = s, // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.
    void 0 === i && this.tc(), this.fieldTransforms = i || [], this.fieldMask = r || [];
  }

  firestore_dist_index_esm2017_createClass(Xc, [{
    key: "path",
    get: function get() {
      return this.settings.path;
    }
  }, {
    key: "ec",
    get: function get() {
      return this.settings.ec;
    }
    /** Returns a new context with the specified settings overwritten. */

  }, {
    key: "nc",
    value: function nc(t) {
      return new Xc(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.M, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
    }
  }, {
    key: "sc",
    value: function sc(t) {
      var e;
      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),
          s = this.nc({
        path: n,
        ic: !1
      });
      return s.rc(t), s;
    }
  }, {
    key: "oc",
    value: function oc(t) {
      var e;
      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),
          s = this.nc({
        path: n,
        ic: !1
      });
      return s.tc(), s;
    }
  }, {
    key: "uc",
    value: function uc(t) {
      // TODO(b/34871131): We don't support array paths right now; so make path
      // undefined.
      return this.nc({
        path: void 0,
        ic: !0
      });
    }
  }, {
    key: "ac",
    value: function ac(t) {
      return yh(t, this.settings.methodName, this.settings.cc || !1, this.path, this.settings.hc);
    }
    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */

  }, {
    key: "contains",
    value: function contains(t) {
      return void 0 !== this.fieldMask.find(function (e) {
        return t.isPrefixOf(e);
      }) || void 0 !== this.fieldTransforms.find(function (e) {
        return t.isPrefixOf(e.field);
      });
    }
  }, {
    key: "tc",
    value: function tc() {
      // TODO(b/34871131): Remove null check once we have proper paths for fields
      // within arrays.
      if (this.path) for (var t = 0; t < this.path.length; t++) {
        this.rc(this.path.get(t));
      }
    }
  }, {
    key: "rc",
    value: function rc(t) {
      if (0 === t.length) throw this.ac("Document fields must not be empty");
      if (index_esm2017_Yc(this.ec) && index_esm2017_zc.test(t)) throw this.ac('Document fields cannot begin and end with "__"');
    }
  }]);

  return Xc;
}()));
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */


var index_esm2017_Zc = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Zc(t, e, n) {
    firestore_dist_index_esm2017_classCallCheck(this, Zc);

    this.databaseId = t, this.ignoreUndefinedProperties = e, this.M = n || jo(t);
  }
  /** Creates a new top-level parse context. */


  firestore_dist_index_esm2017_createClass(Zc, [{
    key: "lc",
    value: function lc(t, e, n) {
      var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
      return new index_esm2017_Xc({
        ec: t,
        methodName: e,
        hc: n,
        path: index_esm2017_mt.emptyPath(),
        ic: !1,
        cc: s
      }, this.databaseId, this.M, this.ignoreUndefinedProperties);
    }
  }]);

  return Zc;
}()));

function th(t) {
  var e = t._freezeSettings(),
      n = jo(t._databaseId);

  return new index_esm2017_Zc(t._databaseId, !!e.ignoreUndefinedProperties, n);
}
/** Parse document data from a set() call. */


function eh(t, e, n, s, i) {
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
  var o = t.lc(r.merge || r.mergeFields ? 2
  /* MergeSet */
  : 0
  /* Set */
  , e, n, i);

  _h("Data must be an object, but it was:", o, s);

  var u = fh(s, o);
  var a, c;
  if (r.merge) a = new index_esm2017_gt(o.fieldMask), c = o.fieldTransforms;else if (r.mergeFields) {
    var _t104 = [];

    var _iterator75 = firestore_dist_index_esm2017_createForOfIteratorHelper(r.mergeFields),
        _step75;

    try {
      for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
        var _s28 = _step75.value;

        var _i16 = wh(e, _s28, n);

        if (!o.contains(_i16)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Field '".concat(_i16, "' is specified in your field mask but missing from your input data."));
        ph(_t104, _i16) || _t104.push(_i16);
      }
    } catch (err) {
      _iterator75.e(err);
    } finally {
      _iterator75.f();
    }

    a = new index_esm2017_gt(_t104), c = o.fieldTransforms.filter(function (t) {
      return a.covers(t.field);
    });
  } else a = null, c = o.fieldTransforms;
  return new index_esm2017_Hc(new index_esm2017_te(u), a, c);
}

var nh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_jc) {
  firestore_dist_index_esm2017_inherits(nh, _jc);

  var _super33 = firestore_dist_index_esm2017_createSuper(nh);

  function nh() {
    firestore_dist_index_esm2017_classCallCheck(this, nh);

    return _super33.apply(this, arguments);
  }

  firestore_dist_index_esm2017_createClass(nh, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      if (2
      /* MergeSet */
      !== t.ec) throw 1
      /* Update */
      === t.ec ? t.ac("".concat(this._methodName, "() can only appear at the top level of your update data")) : t.ac("".concat(this._methodName, "() cannot be used with set() unless you pass {merge:true}")); // No transform to add for a delete, but we need to add it to our
      // fieldMask so it gets deleted.

      return t.fieldMask.push(t.path), null;
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof nh;
    }
  }]);

  return nh;
}(index_esm2017_jc)));
/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue - The sentinel FieldValue for which to create a child
 *     context.
 * @param context - The parent context.
 * @param arrayElement - Whether or not the FieldValue has an array.
 */


function sh(t, e, n) {
  return new index_esm2017_Xc({
    ec: 3
    /* Argument */
    ,
    hc: e.settings.hc,
    methodName: t._methodName,
    ic: n
  }, e.databaseId, e.M, e.ignoreUndefinedProperties);
}

var ih = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_jc2) {
  firestore_dist_index_esm2017_inherits(ih, _jc2);

  var _super34 = firestore_dist_index_esm2017_createSuper(ih);

  function ih() {
    firestore_dist_index_esm2017_classCallCheck(this, ih);

    return _super34.apply(this, arguments);
  }

  firestore_dist_index_esm2017_createClass(ih, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      return new index_esm2017_In(t.path, new index_esm2017_fn());
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      return t instanceof ih;
    }
  }]);

  return ih;
}(index_esm2017_jc)));

var rh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_jc3) {
  firestore_dist_index_esm2017_inherits(rh, _jc3);

  var _super35 = firestore_dist_index_esm2017_createSuper(rh);

  function rh(t, e) {
    var _this185;

    firestore_dist_index_esm2017_classCallCheck(this, rh);

    _this185 = _super35.call(this, t), _this185.fc = e;
    return _this185;
  }

  firestore_dist_index_esm2017_createClass(rh, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = sh(this, t,
      /*array=*/
      !0),
          n = this.fc.map(function (t) {
        return lh(t, e);
      }),
          s = new index_esm2017_dn(n);
      return new index_esm2017_In(t.path, s);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return rh;
}(index_esm2017_jc)));

var oh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_jc4) {
  firestore_dist_index_esm2017_inherits(oh, _jc4);

  var _super36 = firestore_dist_index_esm2017_createSuper(oh);

  function oh(t, e) {
    var _this186;

    firestore_dist_index_esm2017_classCallCheck(this, oh);

    _this186 = _super36.call(this, t), _this186.fc = e;
    return _this186;
  }

  firestore_dist_index_esm2017_createClass(oh, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = sh(this, t,
      /*array=*/
      !0),
          n = this.fc.map(function (t) {
        return lh(t, e);
      }),
          s = new index_esm2017_wn(n);
      return new index_esm2017_In(t.path, s);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return oh;
}(index_esm2017_jc)));

var uh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_jc5) {
  firestore_dist_index_esm2017_inherits(uh, _jc5);

  var _super37 = firestore_dist_index_esm2017_createSuper(uh);

  function uh(t, e) {
    var _this187;

    firestore_dist_index_esm2017_classCallCheck(this, uh);

    _this187 = _super37.call(this, t), _this187.dc = e;
    return _this187;
  }

  firestore_dist_index_esm2017_createClass(uh, [{
    key: "_toFieldTransform",
    value: function _toFieldTransform(t) {
      var e = new index_esm2017_gn(t.M, index_esm2017_un(t.M, this.dc));
      return new index_esm2017_In(t.path, e);
    }
  }, {
    key: "isEqual",
    value: function isEqual(t) {
      // TODO(mrschmidt): Implement isEquals
      return this === t;
    }
  }]);

  return uh;
}(index_esm2017_jc)));
/** Parse update data from an update() call. */


function ah(t, e, n, s) {
  var i = t.lc(1
  /* Update */
  , e, n);

  _h("Data must be an object, but it was:", i, s);

  var r = [],
      o = index_esm2017_te.empty();
  index_esm2017_lt(s, function (t, s) {
    var u = gh(e, t, n); // For Compat types, we have to "extract" the underlying types before
    // performing validation.

    s = getModularInstance(s);
    var a = i.oc(u);
    if (s instanceof nh) // Add it to the field mask, but don't add anything to updateData.
      r.push(u);else {
      var _t105 = lh(s, a);

      null != _t105 && (r.push(u), o.set(u, _t105));
    }
  });
  var u = new index_esm2017_gt(r);
  return new index_esm2017_Jc(o, u, i.fieldTransforms);
}
/** Parse update data from a list of field/value arguments. */


function ch(t, e, n, s, i, r) {
  var o = t.lc(1
  /* Update */
  , e, n),
      u = [wh(e, s, n)],
      a = [i];
  if (r.length % 2 != 0) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Function ".concat(e, "() needs to be called with an even number of arguments that alternate between field names and values."));

  for (var _t106 = 0; _t106 < r.length; _t106 += 2) {
    u.push(wh(e, r[_t106])), a.push(r[_t106 + 1]);
  }

  var c = [],
      h = index_esm2017_te.empty(); // We iterate in reverse order to pick the last value for a field if the
  // user specified the field multiple times.

  for (var _t107 = u.length - 1; _t107 >= 0; --_t107) {
    if (!ph(c, u[_t107])) {
      var _e50 = u[_t107];
      var _n29 = a[_t107]; // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      _n29 = getModularInstance(_n29);

      var _s29 = o.oc(_e50);

      if (_n29 instanceof nh) // Add it to the field mask, but don't add anything to updateData.
        c.push(_e50);else {
        var _t108 = lh(_n29, _s29);

        null != _t108 && (c.push(_e50), h.set(_e50, _t108));
      }
    }
  }

  var l = new index_esm2017_gt(c);
  return new index_esm2017_Jc(h, l, o.fieldTransforms);
}
/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays - Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */


function hh(t, e, n) {
  var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
  return lh(n, t.lc(s ? 4
  /* ArrayArgument */
  : 3
  /* Argument */
  , e));
}
/**
 * Parses user data to Protobuf Values.
 *
 * @param input - Data to be parsed.
 * @param context - A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @returns The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */


function lh(t, e) {
  if (dh( // Unwrap the API type from the Compat SDK. This will return the API type
  // from firestore-exp.
  t = getModularInstance(t))) return _h("Unsupported field value:", e, t), fh(t, e);
  if (t instanceof index_esm2017_jc) // FieldValues usually parse into transforms (except deleteField())
    // in which case we do not want to include this field in our parsed data
    // (as doing so will overwrite the field directly prior to the transform
    // trying to transform it). So we don't add this location to
    // context.fieldMask and we return null as our parsing result.

    /**
    * "Parses" the provided FieldValueImpl, adding any necessary transforms to
    * context.fieldTransforms.
    */
    return function (t, e) {
      // Sentinels are only supported with writes, and not within arrays.
      if (!index_esm2017_Yc(e.ec)) throw e.ac("".concat(t._methodName, "() can only be used with update() and set()"));
      if (!e.path) throw e.ac("".concat(t._methodName, "() is not currently supported inside arrays"));

      var n = t._toFieldTransform(e);

      n && e.fieldTransforms.push(n);
    }
    /**
    * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
    *
    * @returns The parsed value
    */
    (t, e), null;
  if (void 0 === t && e.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so
    // don't handle this below. If `ignoreUndefinedProperties` is false,
    // `parseScalarValue` will reject an undefined value.
    return null;

  if ( // If context.path is null we are inside an array and we don't support
  // field mask paths more granular than the top-level array.
  e.path && e.fieldMask.push(e.path), t instanceof Array) {
    // TODO(b/34871131): Include the path containing the array in the error
    // message.
    // In the case of IN queries, the parsed data is an array (representing
    // the set of values to be included for the IN query) that may directly
    // contain additional arrays (each representing an individual field
    // value), so we disable this validation.
    if (e.settings.ic && 4
    /* ArrayArgument */
    !== e.ec) throw e.ac("Nested arrays are not supported");
    return function (t, e) {
      var n = [];
      var s = 0;

      var _iterator76 = firestore_dist_index_esm2017_createForOfIteratorHelper(t),
          _step76;

      try {
        for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
          var i = _step76.value;

          var _t109 = lh(i, e.uc(s));

          null == _t109 && ( // Just include nulls in the array for fields being replaced with a
          // sentinel.
          _t109 = {
            nullValue: "NULL_VALUE"
          }), n.push(_t109), s++;
        }
      } catch (err) {
        _iterator76.e(err);
      } finally {
        _iterator76.f();
      }

      return {
        arrayValue: {
          values: n
        }
      };
    }(t, e);
  }

  return function (t, e) {
    if (null === (t = getModularInstance(t))) return {
      nullValue: "NULL_VALUE"
    };
    if ("number" == typeof t) return index_esm2017_un(e.M, t);
    if ("boolean" == typeof t) return {
      booleanValue: t
    };
    if ("string" == typeof t) return {
      stringValue: t
    };

    if (t instanceof Date) {
      var n = index_esm2017_at.fromDate(t);
      return {
        timestampValue: fs(e.M, n)
      };
    }

    if (t instanceof index_esm2017_at) {
      // Firestore backend truncates precision down to microseconds. To ensure
      // offline mode works the same with regards to truncation, perform the
      // truncation immediately without waiting for the backend to do that.
      var _n30 = new index_esm2017_at(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));

      return {
        timestampValue: fs(e.M, _n30)
      };
    }

    if (t instanceof index_esm2017_Wc) return {
      geoPointValue: {
        latitude: t.latitude,
        longitude: t.longitude
      }
    };
    if (t instanceof index_esm2017_Qc) return {
      bytesValue: ds(e.M, t._byteString)
    };

    if (t instanceof index_esm2017_wc) {
      var _n31 = e.databaseId,
          s = t.firestore._databaseId;
      if (!s.isEqual(_n31)) throw e.ac("Document reference is for database ".concat(s.projectId, "/").concat(s.database, " but should be for database ").concat(_n31.projectId, "/").concat(_n31.database));
      return {
        referenceValue: ms(t.firestore._databaseId || e.databaseId, t._key.path)
      };
    }

    throw e.ac("Unsupported field value: ".concat(index_esm2017_cc(t)));
  }
  /**
  * Checks whether an object looks like a JSON object that should be converted
  * into a struct. Normal class/prototype instances are considered to look like
  * JSON objects since they should be converted to a struct value. Arrays, Dates,
  * GeoPoints, etc. are not considered to look like JSON objects since they map
  * to specific FieldValue types other than ObjectValue.
  */
  (t, e);
}

function fh(t, e) {
  var n = {};
  return index_esm2017_ft(t) ? // If we encounter an empty object, we explicitly add it to the update
  // mask to ensure that the server creates a map entry.
  e.path && e.path.length > 0 && e.fieldMask.push(e.path) : index_esm2017_lt(t, function (t, s) {
    var i = lh(s, e.sc(t));
    null != i && (n[t] = i);
  }), {
    mapValue: {
      fields: n
    }
  };
}

function dh(t) {
  return !("object" != firestore_dist_index_esm2017_typeof(t) || null === t || t instanceof Array || t instanceof Date || t instanceof index_esm2017_at || t instanceof index_esm2017_Wc || t instanceof index_esm2017_Qc || t instanceof index_esm2017_wc || t instanceof index_esm2017_jc);
}

function _h(t, e, n) {
  if (!dh(n) || !function (t) {
    return "object" == firestore_dist_index_esm2017_typeof(t) && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
  }(n)) {
    var s = index_esm2017_cc(n);
    throw "an object" === s ? e.ac(t + " a custom object") : e.ac(t + " " + s);
  }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */


function wh(t, e, n) {
  if (( // If required, replace the FieldPath Compat class with with the firestore-exp
  // FieldPath.
  e = getModularInstance(e)) instanceof index_esm2017_Kc) return e._internalPath;
  if ("string" == typeof e) return gh(t, e);
  throw yh("Field path arguments must be of type string or ", t,
  /* hasConverter= */
  !1,
  /* path= */
  void 0, n);
}
/**
 * Matches any characters in a field path string that are reserved.
 */


var mh = (/* unused pure expression or super */ null && (new RegExp("[~\\*/\\[\\]]")));
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName - The publicly visible method name
 * @param path - The dot-separated string form of a field path which will be
 * split on dots.
 * @param targetDoc - The document against which the field path will be
 * evaluated.
 */

function gh(t, e, n) {
  if (e.search(mh) >= 0) throw yh("Invalid field path (".concat(e, "). Paths must not contain '~', '*', '/', '[', or ']'"), t,
  /* hasConverter= */
  !1,
  /* path= */
  void 0, n);

  try {
    return dist_index_esm2017_construct(index_esm2017_Kc, dist_index_esm2017_toConsumableArray(e.split(".")))._internalPath;
  } catch (s) {
    throw yh("Invalid field path (".concat(e, "). Paths must not be empty, begin with '.', end with '.', or contain '..'"), t,
    /* hasConverter= */
    !1,
    /* path= */
    void 0, n);
  }
}

function yh(t, e, n, s, i) {
  var r = s && !s.isEmpty(),
      o = void 0 !== i;
  var u = "Function ".concat(e, "() called with invalid data");
  n && (u += " (via `toFirestore()`)"), u += ". ";
  var a = "";
  return (r || o) && (a += " (found", r && (a += " in field ".concat(s)), o && (a += " in document ".concat(i)), a += ")"), new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, u + t + a);
}
/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */


function ph(t, e) {
  return t.some(function (t) {
    return t.isEqual(e);
  });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */


var Ih = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  // Note: This class is stripped down version of the DocumentSnapshot in
  // the legacy SDK. The changes are:
  // - No support for SnapshotMetadata.
  // - No support for SnapshotOptions.

  /** @hideconstructor protected */
  function Ih(t, e, n, s, i) {
    firestore_dist_index_esm2017_classCallCheck(this, Ih);

    this._firestore = t, this._userDataWriter = e, this._key = n, this._document = s, this._converter = i;
  }
  /** Property of the `DocumentSnapshot` that provides the document's ID. */


  firestore_dist_index_esm2017_createClass(Ih, [{
    key: "id",
    get: function get() {
      return this._key.path.lastSegment();
    }
    /**
     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
     */

  }, {
    key: "ref",
    get: function get() {
      return new index_esm2017_wc(this._firestore, this._converter, this._key);
    }
    /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @returns true if the document exists.
     */

  }, {
    key: "exists",
    value: function exists() {
      return null !== this._document;
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @returns An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */

  }, {
    key: "data",
    value: function data() {
      if (this._document) {
        if (this._converter) {
          // We only want to use the converter and create a new DocumentSnapshot
          // if a converter has been provided.
          var t = new Th(this._firestore, this._userDataWriter, this._key, this._document,
          /* converter= */
          null);
          return this._converter.fromFirestore(t);
        }

        return this._userDataWriter.convertValue(this._document.data.value);
      }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }, {
    key: "get",
    value: function get(t) {
      if (this._document) {
        var e = this._document.data.field(Eh("DocumentSnapshot.get", t));

        if (null !== e) return this._userDataWriter.convertValue(e);
      }
    }
  }]);

  return Ih;
}()));
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */


var Th = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ih) {
  firestore_dist_index_esm2017_inherits(Th, _Ih);

  var _super38 = firestore_dist_index_esm2017_createSuper(Th);

  function Th() {
    firestore_dist_index_esm2017_classCallCheck(this, Th);

    return _super38.apply(this, arguments);
  }

  firestore_dist_index_esm2017_createClass(Th, [{
    key: "data",
    value:
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * @override
     * @returns An `Object` containing all fields in the document.
     */
    function data() {
      return dist_index_esm2017_get(firestore_dist_index_esm2017_getPrototypeOf(Th.prototype), "data", this).call(this);
    }
  }]);

  return Th;
}(Ih)));
/**
 * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
 */


function Eh(t, e) {
  return "string" == typeof e ? gh(t, e) : e instanceof index_esm2017_Kc ? e._internalPath : e._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Metadata about a snapshot, describing the state of the snapshot.
 */


var Ah = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /** @hideconstructor */
  function Ah(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Ah);

    this.hasPendingWrites = t, this.fromCache = e;
  }
  /**
   * Returns true if this `SnapshotMetadata` is equal to the provided one.
   *
   * @param other - The `SnapshotMetadata` to compare against.
   * @returns true if this `SnapshotMetadata` is equal to the provided one.
   */


  firestore_dist_index_esm2017_createClass(Ah, [{
    key: "isEqual",
    value: function isEqual(t) {
      return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
    }
  }]);

  return Ah;
}()));
/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */


var Rh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Ih2) {
  firestore_dist_index_esm2017_inherits(Rh, _Ih2);

  var _super39 = firestore_dist_index_esm2017_createSuper(Rh);

  /** @hideconstructor protected */
  function Rh(t, e, n, s, i, r) {
    var _this188;

    firestore_dist_index_esm2017_classCallCheck(this, Rh);

    _this188 = _super39.call(this, t, e, n, s, r), _this188._firestore = t, _this188._firestoreImpl = t, _this188.metadata = i;
    return _this188;
  }
  /**
   * Returns whether or not the data exists. True if the document exists.
   */


  firestore_dist_index_esm2017_createClass(Rh, [{
    key: "exists",
    value: function exists() {
      return dist_index_esm2017_get(firestore_dist_index_esm2017_getPrototypeOf(Rh.prototype), "exists", this).call(this);
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * By default, `serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document or `undefined` if
     * the document doesn't exist.
     */

  }, {
    key: "data",
    value: function data() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this._document) {
        if (this._converter) {
          // We only want to use the converter and create a new DocumentSnapshot
          // if a converter has been provided.
          var e = new bh(this._firestore, this._userDataWriter, this._key, this._document, this.metadata,
          /* converter= */
          null);
          return this._converter.fromFirestore(e, t);
        }

        return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
      }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * By default, a `serverTimestamp()` that has not yet been set to
     * its final value will be returned as `null`. You can override this by
     * passing an options object.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @param options - An options object to configure how the field is retrieved
     * from the snapshot (for example the desired behavior for server timestamps
     * that have not yet been set to their final value).
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }, {
    key: "get",
    value: function get(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this._document) {
        var n = this._document.data.field(Eh("DocumentSnapshot.get", t));

        if (null !== n) return this._userDataWriter.convertValue(n, e.serverTimestamps);
      }
    }
  }]);

  return Rh;
}(Ih)));
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */


var bh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Rh) {
  firestore_dist_index_esm2017_inherits(bh, _Rh);

  var _super40 = firestore_dist_index_esm2017_createSuper(bh);

  function bh() {
    firestore_dist_index_esm2017_classCallCheck(this, bh);

    return _super40.apply(this, arguments);
  }

  firestore_dist_index_esm2017_createClass(bh, [{
    key: "data",
    value:
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * By default, `serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @override
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document.
     */
    function data() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return dist_index_esm2017_get(firestore_dist_index_esm2017_getPrototypeOf(bh.prototype), "data", this).call(this, t);
    }
  }]);

  return bh;
}(Rh)));
/**
 * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
 * representing the results of a query. The documents can be accessed as an
 * array via the `docs` property or enumerated using the `forEach` method. The
 * number of documents can be determined via the `empty` and `size`
 * properties.
 */


var Ph = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /** @hideconstructor */
  function Ph(t, e, n, s) {
    firestore_dist_index_esm2017_classCallCheck(this, Ph);

    this._firestore = t, this._userDataWriter = e, this._snapshot = s, this.metadata = new Ah(s.hasPendingWrites, s.fromCache), this.query = n;
  }
  /** An array of all the documents in the `QuerySnapshot`. */


  firestore_dist_index_esm2017_createClass(Ph, [{
    key: "docs",
    get: function get() {
      var t = [];
      return this.forEach(function (e) {
        return t.push(e);
      }), t;
    }
    /** The number of documents in the `QuerySnapshot`. */

  }, {
    key: "size",
    get: function get() {
      return this._snapshot.docs.size;
    }
    /** True if there are no documents in the `QuerySnapshot`. */

  }, {
    key: "empty",
    get: function get() {
      return 0 === this.size;
    }
    /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg - The `this` binding for the callback.
     */

  }, {
    key: "forEach",
    value: function forEach(t, e) {
      var _this189 = this;

      this._snapshot.docs.forEach(function (n) {
        t.call(e, new bh(_this189._firestore, _this189._userDataWriter, n.key, n, new Ah(_this189._snapshot.mutatedKeys.has(n.key), _this189._snapshot.fromCache), _this189.query.converter));
      });
    }
    /**
     * Returns an array of the documents changes since the last snapshot. If this
     * is the first snapshot, all documents will be in the list as 'added'
     * changes.
     *
     * @param options - `SnapshotListenOptions` that control whether metadata-only
     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
     * snapshot events.
     */

  }, {
    key: "docChanges",
    value: function docChanges() {
      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var e = !!t.includeMetadataChanges;
      if (e && this._snapshot.excludesMetadataChanges) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
      return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges =
      /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
      function (t, e) {
        if (t._snapshot.oldDocs.isEmpty()) {
          var _e51 = 0;
          return t._snapshot.docChanges.map(function (n) {
            return {
              type: "added",
              doc: new bh(t._firestore, t._userDataWriter, n.doc.key, n.doc, new Ah(t._snapshot.mutatedKeys.has(n.doc.key), t._snapshot.fromCache), t.query.converter),
              oldIndex: -1,
              newIndex: _e51++
            };
          });
        }

        {
          // A `DocumentSet` that is updated incrementally as changes are applied to use
          // to lookup the index of a document.
          var n = t._snapshot.oldDocs;
          return t._snapshot.docChanges.filter(function (t) {
            return e || 3
            /* Metadata */
            !== t.type;
          }).map(function (e) {
            var s = new bh(t._firestore, t._userDataWriter, e.doc.key, e.doc, new Ah(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter);
            var i = -1,
                r = -1;
            return 0
            /* Added */
            !== e.type && (i = n.indexOf(e.doc.key), n = n["delete"](e.doc.key)), 1
            /* Removed */
            !== e.type && (n = n.add(e.doc), r = n.indexOf(e.doc.key)), {
              type: Vh(e.type),
              doc: s,
              oldIndex: i,
              newIndex: r
            };
          });
        }
      }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
    }
  }]);

  return Ph;
}()));

function Vh(t) {
  switch (t) {
    case 0
    /* Added */
    :
      return "added";

    case 2
    /* Modified */
    :
    case 3
    /* Metadata */
    :
      return "modified";

    case 1
    /* Removed */
    :
      return "removed";

    default:
      return dist_index_esm2017_L();
  }
} // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
// metadata

/**
 * Returns true if the provided snapshots are equal.
 *
 * @param left - A snapshot to compare.
 * @param right - A snapshot to compare.
 * @returns true if the snapshots are equal.
 */


function vh(t, e) {
  return t instanceof Rh && e instanceof Rh ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Ph && e instanceof Ph && t._firestore === e._firestore && index_esm2017_Ec(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._snapshot.isEqual(e._snapshot);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function Sh(t) {
  if ("L"
  /* Last */
  === t.limitType && 0 === t.explicitOrderBy.length) throw new dist_index_esm2017_Q(index_esm2017_G.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Firestore query. `QueryConstraint`s are created by invoking {@link where},
 * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
 * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */


var Dh = /*#__PURE__*/(/* unused pure expression or super */ null && (firestore_dist_index_esm2017_createClass(function Dh() {
  firestore_dist_index_esm2017_classCallCheck(this, Dh);
})));
/**
 * Creates a new immutable instance of {@link Query} that is extended to also include
 * additional query constraints.
 *
 * @param query - The {@link Query} instance to use as a base for the new constraints.
 * @param queryConstraints - The list of {@link QueryConstraint}s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */


function Ch(t) {
  for (var _len10 = arguments.length, e = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
    e[_key10 - 1] = arguments[_key10];
  }

  for (var _i17 = 0, _e52 = e; _i17 < _e52.length; _i17++) {
    var n = _e52[_i17];
    t = n._apply(t);
  }

  return t;
}

var xh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Dh) {
  firestore_dist_index_esm2017_inherits(xh, _Dh);

  var _super41 = firestore_dist_index_esm2017_createSuper(xh);

  function xh(t, e, n) {
    var _this190;

    firestore_dist_index_esm2017_classCallCheck(this, xh);

    _this190 = _super41.call(this), _this190._c = t, _this190.wc = e, _this190.mc = n, _this190.type = "where";
    return _this190;
  }

  firestore_dist_index_esm2017_createClass(xh, [{
    key: "_apply",
    value: function _apply(t) {
      var e = th(t.firestore),
          n = function (t, e, n, s, i, r, o) {
        var u;

        if (i.isKeyField()) {
          if ("array-contains"
          /* ARRAY_CONTAINS */
          === r || "array-contains-any"
          /* ARRAY_CONTAINS_ANY */
          === r) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid Query. You can't perform '".concat(r, "' queries on documentId()."));

          if ("in"
          /* IN */
          === r || "not-in"
          /* NOT_IN */
          === r) {
            Wh(o, r);
            var _e53 = [];

            var _iterator77 = firestore_dist_index_esm2017_createForOfIteratorHelper(o),
                _step77;

            try {
              for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
                var _n32 = _step77.value;

                _e53.push(jh(s, t, _n32));
              }
            } catch (err) {
              _iterator77.e(err);
            } finally {
              _iterator77.f();
            }

            u = {
              arrayValue: {
                values: _e53
              }
            };
          } else u = jh(s, t, o);
        } else "in"
        /* IN */
        !== r && "not-in"
        /* NOT_IN */
        !== r && "array-contains-any"
        /* ARRAY_CONTAINS_ANY */
        !== r || Wh(o, r), u = hh(n, e, o,
        /* allowArrays= */
        "in"
        /* IN */
        === r || "not-in"
        /* NOT_IN */
        === r);

        var a = index_esm2017_Ve.create(i, r, u);
        return function (t, e) {
          if (e.S()) {
            var _n33 = index_esm2017_je(t);

            if (null !== _n33 && !_n33.isEqual(e.field)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '".concat(_n33.toString(), "' and '").concat(e.field.toString(), "'"));

            var _s30 = index_esm2017_Qe(t);

            null !== _s30 && zh(t, e.field, _s30);
          }

          var n = function (t, e) {
            var _iterator78 = firestore_dist_index_esm2017_createForOfIteratorHelper(t.filters),
                _step78;

            try {
              for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
                var _n34 = _step78.value;
                if (e.indexOf(_n34.op) >= 0) return _n34.op;
              }
            } catch (err) {
              _iterator78.e(err);
            } finally {
              _iterator78.f();
            }

            return null;
          }(t,
          /**
          * Given an operator, returns the set of operators that cannot be used with it.
          *
          * Operators in a query must adhere to the following set of rules:
          * 1. Only one array operator is allowed.
          * 2. Only one disjunctive operator is allowed.
          * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.
          * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
          *
          * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`
          * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`
          */
          function (t) {
            switch (t) {
              case "!="
              /* NOT_EQUAL */
              :
                return ["!="
                /* NOT_EQUAL */
                , "not-in"
                /* NOT_IN */
                ];

              case "array-contains"
              /* ARRAY_CONTAINS */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "not-in"
                /* NOT_IN */
                ];

              case "in"
              /* IN */
              :
                return ["array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                ];

              case "array-contains-any"
              /* ARRAY_CONTAINS_ANY */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                ];

              case "not-in"
              /* NOT_IN */
              :
                return ["array-contains"
                /* ARRAY_CONTAINS */
                , "array-contains-any"
                /* ARRAY_CONTAINS_ANY */
                , "in"
                /* IN */
                , "not-in"
                /* NOT_IN */
                , "!="
                /* NOT_EQUAL */
                ];

              default:
                return [];
            }
          }(e.op));

          if (null !== n) // Special case when it's a duplicate op to give a slightly clearer error message.
            throw n === e.op ? new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '".concat(e.op.toString(), "' filter.")) : new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. You cannot use '".concat(e.op.toString(), "' filters with '").concat(n.toString(), "' filters."));
        }(t, a), a;
      }(t._query, "where", e, t.firestore._databaseId, this._c, this.wc, this.mc);

      return new index_esm2017_mc(t.firestore, t.converter, function (t, e) {
        var n = t.filters.concat([e]);
        return new index_esm2017_Ue(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
      }(t._query, n));
    }
  }]);

  return xh;
}(Dh)));
/**
 * Creates a {@link QueryConstraint} that enforces that documents must contain the
 * specified field and that the value should satisfy the relation constraint
 * provided.
 *
 * @param fieldPath - The path to compare
 * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
 *   "&lt;=", "!=").
 * @param value - The value for comparison
 * @returns The created {@link Query}.
 */


function Nh(t, e, n) {
  var s = e,
      i = Eh("where", t);
  return new xh(i, s, n);
}

var kh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Dh2) {
  firestore_dist_index_esm2017_inherits(kh, _Dh2);

  var _super42 = firestore_dist_index_esm2017_createSuper(kh);

  function kh(t, e) {
    var _this191;

    firestore_dist_index_esm2017_classCallCheck(this, kh);

    _this191 = _super42.call(this), _this191._c = t, _this191.gc = e, _this191.type = "orderBy";
    return _this191;
  }

  firestore_dist_index_esm2017_createClass(kh, [{
    key: "_apply",
    value: function _apply(t) {
      var e = function (t, e, n) {
        if (null !== t.startAt) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
        if (null !== t.endAt) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
        var s = new index_esm2017_Fe(e, n);
        return function (t, e) {
          if (null === index_esm2017_Qe(t)) {
            // This is the first order by. It must match any inequality.
            var _n35 = index_esm2017_je(t);

            null !== _n35 && zh(t, _n35, e.field);
          }
        }(t, s), s;
      }
      /**
      * Create a `Bound` from a query and a document.
      *
      * Note that the `Bound` will always include the key of the document
      * and so only the provided document will compare equal to the returned
      * position.
      *
      * Will throw if the document does not contain all fields of the order by
      * of the query or if any of the fields in the order by are an uncommitted
      * server timestamp.
      */
      (t._query, this._c, this.gc);

      return new index_esm2017_mc(t.firestore, t.converter, function (t, e) {
        // TODO(dimond): validate that orderBy does not list the same key twice.
        var n = t.explicitOrderBy.concat([e]);
        return new index_esm2017_Ue(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
      }(t._query, e));
    }
  }]);

  return kh;
}(Dh)));
/**
 * Creates a {@link QueryConstraint} that sorts the query result by the
 * specified field, optionally in descending order instead of ascending.
 *
 * @param fieldPath - The field to sort by.
 * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
 * not specified, order will be ascending.
 * @returns The created {@link Query}.
 */


function Mh(t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "asc";
  var n = e,
      s = Eh("orderBy", t);
  return new kh(s, n);
}

var Oh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Dh3) {
  firestore_dist_index_esm2017_inherits(Oh, _Dh3);

  var _super43 = firestore_dist_index_esm2017_createSuper(Oh);

  function Oh(t, e, n) {
    var _this192;

    firestore_dist_index_esm2017_classCallCheck(this, Oh);

    _this192 = _super43.call(this), _this192.type = t, _this192.yc = e, _this192.Ic = n;
    return _this192;
  }

  firestore_dist_index_esm2017_createClass(Oh, [{
    key: "_apply",
    value: function _apply(t) {
      return new index_esm2017_mc(t.firestore, t.converter, index_esm2017_Je(t._query, this.yc, this.Ic));
    }
  }]);

  return Oh;
}(Dh)));
/**
 * Creates a {@link QueryConstraint} that only returns the first matching documents.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */


function Fh(t) {
  return index_esm2017_lc("limit", t), new Oh("limit", t, "F"
  /* First */
  );
}
/**
 * Creates a {@link QueryConstraint} that only returns the last matching documents.
 *
 * You must specify at least one `orderBy` clause for `limitToLast` queries,
 * otherwise an exception will be thrown during execution.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */


function $h(t) {
  return index_esm2017_lc("limitToLast", t), new Oh("limitToLast", t, "L"
  /* Last */
  );
}

var Bh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Dh4) {
  firestore_dist_index_esm2017_inherits(Bh, _Dh4);

  var _super44 = firestore_dist_index_esm2017_createSuper(Bh);

  function Bh(t, e, n) {
    var _this193;

    firestore_dist_index_esm2017_classCallCheck(this, Bh);

    _this193 = _super44.call(this), _this193.type = t, _this193.Tc = e, _this193.Ec = n;
    return _this193;
  }

  firestore_dist_index_esm2017_createClass(Bh, [{
    key: "_apply",
    value: function _apply(t) {
      var e = Qh(t, this.type, this.Tc, this.Ec);
      return new index_esm2017_mc(t.firestore, t.converter, function (t, e) {
        return new index_esm2017_Ue(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
      }(t._query, e));
    }
  }]);

  return Bh;
}(Dh)));

function Lh() {
  for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
    t[_key11] = arguments[_key11];
  }

  return new Bh("startAt", t,
  /*inclusive=*/
  !0);
}

function Uh() {
  for (var _len12 = arguments.length, t = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
    t[_key12] = arguments[_key12];
  }

  return new Bh("startAfter", t,
  /*inclusive=*/
  !1);
}

var qh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Dh5) {
  firestore_dist_index_esm2017_inherits(qh, _Dh5);

  var _super45 = firestore_dist_index_esm2017_createSuper(qh);

  function qh(t, e, n) {
    var _this194;

    firestore_dist_index_esm2017_classCallCheck(this, qh);

    _this194 = _super45.call(this), _this194.type = t, _this194.Tc = e, _this194.Ec = n;
    return _this194;
  }

  firestore_dist_index_esm2017_createClass(qh, [{
    key: "_apply",
    value: function _apply(t) {
      var e = Qh(t, this.type, this.Tc, this.Ec);
      return new index_esm2017_mc(t.firestore, t.converter, function (t, e) {
        return new index_esm2017_Ue(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
      }(t._query, e));
    }
  }]);

  return qh;
}(Dh)));

function Kh() {
  for (var _len13 = arguments.length, t = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
    t[_key13] = arguments[_key13];
  }

  return new qh("endBefore", t,
  /*inclusive=*/
  !1);
}

function Gh() {
  for (var _len14 = arguments.length, t = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
    t[_key14] = arguments[_key14];
  }

  return new qh("endAt", t,
  /*inclusive=*/
  !0);
}
/** Helper function to create a bound from a document or fields */


function Qh(t, e, n, s) {
  if (n[0] = getModularInstance(n[0]), n[0] instanceof Ih) return function (t, e, n, s, i) {
    if (!s) throw new dist_index_esm2017_Q(index_esm2017_G.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for ".concat(n, "()."));
    var r = []; // Because people expect to continue/end a query at the exact document
    // provided, we need to use the implicit sort order rather than the explicit
    // sort order, because it's guaranteed to contain the document key. That way
    // the position becomes unambiguous and the query continues/ends exactly at
    // the provided document. Without the key (by using the explicit sort
    // orders), multiple documents could match the position, yielding duplicate
    // results.

    var _iterator79 = firestore_dist_index_esm2017_createForOfIteratorHelper(index_esm2017_ze(t)),
        _step79;

    try {
      for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
        var _n36 = _step79.value;
        if (_n36.field.isKeyField()) r.push(index_esm2017_qt(e, s.key));else {
          var _t110 = s.data.field(_n36.field);

          if (index_esm2017_Rt(_t110)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + _n36.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');

          if (null === _t110) {
            var _t111 = _n36.field.canonicalString();

            throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '".concat(_t111, "' (used as the orderBy) does not exist."));
          }

          r.push(_t110);
        }
      }
    } catch (err) {
      _iterator79.e(err);
    } finally {
      _iterator79.f();
    }

    return new index_esm2017_Oe(r, i);
  }
  /**
  * Converts a list of field values to a `Bound` for the given query.
  */
  (t._query, t.firestore._databaseId, e, n[0]._document, s);
  {
    var i = th(t.firestore);
    return function (t, e, n, s, i, r) {
      // Use explicit order by's because it has to match the query the user made
      var o = t.explicitOrderBy;
      if (i.length > o.length) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Too many arguments provided to ".concat(s, "(). The number of arguments must be less than or equal to the number of orderBy() clauses"));
      var u = [];

      for (var _r8 = 0; _r8 < i.length; _r8++) {
        var a = i[_r8];

        if (o[_r8].field.isKeyField()) {
          if ("string" != typeof a) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in ".concat(s, "(), but got a ").concat(firestore_dist_index_esm2017_typeof(a)));
          if (!index_esm2017_We(t) && -1 !== a.indexOf("/")) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by documentId(), the value passed to ".concat(s, "() must be a plain document ID, but '").concat(a, "' contains a slash."));

          var _n37 = t.path.child(index_esm2017_t.fromString(a));

          if (!index_esm2017_xt.isDocumentKey(_n37)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by documentId(), the value passed to ".concat(s, "() must result in a valid document path, but '").concat(_n37, "' is not because it contains an odd number of segments."));

          var _i18 = new index_esm2017_xt(_n37);

          u.push(index_esm2017_qt(e, _i18));
        } else {
          var _t112 = hh(n, s, a);

          u.push(_t112);
        }
      }

      return new index_esm2017_Oe(u, r);
    }
    /**
    * Parses the given `documentIdValue` into a `ReferenceValue`, throwing
    * appropriate errors if the value is anything other than a `DocumentReference`
    * or `string`, or if the string is malformed.
    */
    (t._query, t.firestore._databaseId, i, e, n, s);
  }
}

function jh(t, e, n) {
  if ("string" == typeof (n = getModularInstance(n))) {
    if ("" === n) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!index_esm2017_We(e) && -1 !== n.indexOf("/")) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '".concat(n, "' contains a '/' character."));
    var s = e.path.child(index_esm2017_t.fromString(n));
    if (!index_esm2017_xt.isDocumentKey(s)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '".concat(s, "' is not because it has an odd number of segments (").concat(s.length, ")."));
    return index_esm2017_qt(t, new index_esm2017_xt(s));
  }

  if (n instanceof index_esm2017_wc) return index_esm2017_qt(t, n._key);
  throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ".concat(index_esm2017_cc(n), "."));
}
/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */


function Wh(t, e) {
  if (!Array.isArray(t) || 0 === t.length) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '".concat(e.toString(), "' filters."));
  if (t.length > 10) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid Query. '".concat(e.toString(), "' filters support a maximum of 10 elements in the value array."));
}

function zh(t, e, n) {
  if (!n.isEqual(e)) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '".concat(e.toString(), "' and so you must also use '").concat(e.toString(), "' as your first argument to orderBy(), but your first orderBy() is on field '").concat(n.toString(), "' instead."));
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Hh = {
  maxAttempts: 5
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 *
 * @internal
 */

var Jh = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function Jh() {
    firestore_dist_index_esm2017_classCallCheck(this, Jh);
  }

  firestore_dist_index_esm2017_createClass(Jh, [{
    key: "convertValue",
    value: function convertValue(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "none";

      switch (index_esm2017_Mt(t)) {
        case 0
        /* NullValue */
        :
          return null;

        case 1
        /* BooleanValue */
        :
          return t.booleanValue;

        case 2
        /* NumberValue */
        :
          return index_esm2017_Et(t.integerValue || t.doubleValue);

        case 3
        /* TimestampValue */
        :
          return this.convertTimestamp(t.timestampValue);

        case 4
        /* ServerTimestampValue */
        :
          return this.convertServerTimestamp(t, e);

        case 5
        /* StringValue */
        :
          return t.stringValue;

        case 6
        /* BlobValue */
        :
          return this.convertBytes(index_esm2017_At(t.bytesValue));

        case 7
        /* RefValue */
        :
          return this.convertReference(t.referenceValue);

        case 8
        /* GeoPointValue */
        :
          return this.convertGeoPoint(t.geoPointValue);

        case 9
        /* ArrayValue */
        :
          return this.convertArray(t.arrayValue, e);

        case 10
        /* ObjectValue */
        :
          return this.convertObject(t.mapValue, e);

        default:
          throw dist_index_esm2017_L();
      }
    }
  }, {
    key: "convertObject",
    value: function convertObject(t, e) {
      var _this195 = this;

      var n = {};
      return index_esm2017_lt(t.fields, function (t, s) {
        n[t] = _this195.convertValue(s, e);
      }), n;
    }
  }, {
    key: "convertGeoPoint",
    value: function convertGeoPoint(t) {
      return new index_esm2017_Wc(index_esm2017_Et(t.latitude), index_esm2017_Et(t.longitude));
    }
  }, {
    key: "convertArray",
    value: function convertArray(t, e) {
      var _this196 = this;

      return (t.values || []).map(function (t) {
        return _this196.convertValue(t, e);
      });
    }
  }, {
    key: "convertServerTimestamp",
    value: function convertServerTimestamp(t, e) {
      switch (e) {
        case "previous":
          var n = index_esm2017_bt(t);
          return null == n ? null : this.convertValue(n, e);

        case "estimate":
          return this.convertTimestamp(index_esm2017_Pt(t));

        default:
          return null;
      }
    }
  }, {
    key: "convertTimestamp",
    value: function convertTimestamp(t) {
      var e = index_esm2017_Tt(t);
      return new index_esm2017_at(e.seconds, e.nanos);
    }
  }, {
    key: "convertDocumentKey",
    value: function convertDocumentKey(t, e) {
      var n = index_esm2017_t.fromString(t);

      dist_index_esm2017_U(Ks(n));
      var s = new index_esm2017_vt(n.get(1), n.get(3)),
          i = new index_esm2017_xt(n.popFirst(5));
      return s.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.
      dist_index_esm2017_F("Document ".concat(i, " contains a document reference within a different database (").concat(s.projectId, "/").concat(s.database, ") which is not supported. It will be treated as a reference in the current database (").concat(e.projectId, "/").concat(e.database, ") instead.")), i;
    }
  }]);

  return Jh;
}()));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Converts custom model object of type T into `DocumentData` by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to `DocumentData`
 * because we want to provide the user with a more specific error message if
 * their `set()` or fails due to invalid data originating from a `toFirestore()`
 * call.
 */


function Yh(t, e, n) {
  var s; // Cast to `any` in order to satisfy the union type constraint on
  // toFirestore().
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, s;
}

var Xh = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Jh) {
  firestore_dist_index_esm2017_inherits(Xh, _Jh);

  var _super46 = firestore_dist_index_esm2017_createSuper(Xh);

  function Xh(t) {
    var _this197;

    firestore_dist_index_esm2017_classCallCheck(this, Xh);

    _this197 = _super46.call(this), _this197.firestore = t;
    return _this197;
  }

  firestore_dist_index_esm2017_createClass(Xh, [{
    key: "convertBytes",
    value: function convertBytes(t) {
      return new index_esm2017_Qc(t);
    }
  }, {
    key: "convertReference",
    value: function convertReference(t) {
      var e = this.convertDocumentKey(t, this.firestore._databaseId);
      return new index_esm2017_wc(this.firestore,
      /* converter= */
      null, e);
    }
  }]);

  return Xh;
}(Jh)));
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A write batch, used to perform multiple writes as a single atomic unit.
 *
 * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
 * provides methods for adding writes to the write batch. None of the writes
 * will be committed (or visible locally) until {@link WriteBatch.commit} is
 * called.
 */


var Zh = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /** @hideconstructor */
  function Zh(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, Zh);

    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = th(t);
  }

  firestore_dist_index_esm2017_createClass(Zh, [{
    key: "set",
    value: function set(t, e, n) {
      this._verifyNotCommitted();

      var s = tl(t, this._firestore),
          i = Yh(s.converter, e, n),
          r = eh(this._dataReader, "WriteBatch.set", s._key, i, null !== s.converter, n);
      return this._mutations.push(r.toMutation(s._key, index_esm2017_An.none())), this;
    }
  }, {
    key: "update",
    value: function update(t, e, n) {
      this._verifyNotCommitted();

      var i = tl(t, this._firestore); // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      var r;

      for (var _len15 = arguments.length, s = new Array(_len15 > 3 ? _len15 - 3 : 0), _key15 = 3; _key15 < _len15; _key15++) {
        s[_key15 - 3] = arguments[_key15];
      }

      return r = "string" == typeof (e = getModularInstance(e)) || e instanceof index_esm2017_Kc ? ch(this._dataReader, "WriteBatch.update", i._key, e, n, s) : ah(this._dataReader, "WriteBatch.update", i._key, e), this._mutations.push(r.toMutation(i._key, index_esm2017_An.exists(!0))), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `WriteBatch` instance. Used for chaining method calls.
     */

  }, {
    key: "delete",
    value: function _delete(t) {
      this._verifyNotCommitted();

      var e = tl(t, this._firestore);
      return this._mutations = this._mutations.concat(new index_esm2017_On(e._key, index_esm2017_An.none())), this;
    }
    /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A `Promise` resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */

  }, {
    key: "commit",
    value: function commit() {
      return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
    }
  }, {
    key: "_verifyNotCommitted",
    value: function _verifyNotCommitted() {
      if (this._committed) throw new dist_index_esm2017_Q(index_esm2017_G.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }
  }]);

  return Zh;
}()));

function tl(t, e) {
  if ((t = getModularInstance(t)).firestore !== e) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
// legacy SDK.

/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Reads the document referred to by this `DocumentReference`.
 *
 * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
 * for data from the server, but it may return cached data or fail if you are
 * offline and the server cannot be reached. To specify this behavior, invoke
 * {@link getDocFromCache} or {@link getDocFromServer}.
 *
 * @param reference - The reference of the document to fetch.
 * @returns A Promise resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */


function el(t) {
  t = index_esm2017_hc(t, index_esm2017_wc);
  var e = index_esm2017_hc(t.firestore, index_esm2017_Vc);
  return index_esm2017_Ya(index_esm2017_Dc(e), t._key).then(function (n) {
    return wl(e, t, n);
  });
}

var nl = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Jh2) {
  firestore_dist_index_esm2017_inherits(nl, _Jh2);

  var _super47 = firestore_dist_index_esm2017_createSuper(nl);

  function nl(t) {
    var _this198;

    firestore_dist_index_esm2017_classCallCheck(this, nl);

    _this198 = _super47.call(this), _this198.firestore = t;
    return _this198;
  }

  firestore_dist_index_esm2017_createClass(nl, [{
    key: "convertBytes",
    value: function convertBytes(t) {
      return new index_esm2017_Qc(t);
    }
  }, {
    key: "convertReference",
    value: function convertReference(t) {
      var e = this.convertDocumentKey(t, this.firestore._databaseId);
      return new index_esm2017_wc(this.firestore,
      /* converter= */
      null, e);
    }
  }]);

  return nl;
}(Jh)));
/**
 * Reads the document referred to by this `DocumentReference` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */


function sl(t) {
  t = index_esm2017_hc(t, index_esm2017_wc);
  var e = index_esm2017_hc(t.firestore, index_esm2017_Vc),
      n = index_esm2017_Dc(e),
      s = new nl(e);
  return index_esm2017_Ja(n, t._key).then(function (n) {
    return new Rh(e, s, t._key, n, new Ah(null !== n && n.hasLocalMutations,
    /* fromCache= */
    !0), t.converter);
  });
}
/**
 * Reads the document referred to by this `DocumentReference` from the server.
 * Returns an error if the network is not available.
 *
 * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */


function il(t) {
  t = index_esm2017_hc(t, index_esm2017_wc);
  var e = index_esm2017_hc(t.firestore, index_esm2017_Vc);
  return index_esm2017_Ya(index_esm2017_Dc(e), t._key, {
    source: "server"
  }).then(function (n) {
    return wl(e, t, n);
  });
}
/**
 * Executes the query and returns the results as a `QuerySnapshot`.
 *
 * Note: `getDocs()` attempts to provide up-to-date data when possible by
 * waiting for data from the server, but it may return cached data or fail if
 * you are offline and the server cannot be reached. To specify this behavior,
 * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */


function rl(t) {
  t = index_esm2017_hc(t, index_esm2017_mc);
  var e = index_esm2017_hc(t.firestore, index_esm2017_Vc),
      n = index_esm2017_Dc(e),
      s = new nl(e);
  return Sh(t._query), index_esm2017_Za(n, t._query).then(function (n) {
    return new Ph(e, s, t, n);
  });
}
/**
 * Executes the query and returns the results as a `QuerySnapshot` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */


function ol(t) {
  t = index_esm2017_hc(t, index_esm2017_mc);
  var e = index_esm2017_hc(t.firestore, index_esm2017_Vc),
      n = index_esm2017_Dc(e),
      s = new nl(e);
  return index_esm2017_Xa(n, t._query).then(function (n) {
    return new Ph(e, s, t, n);
  });
}
/**
 * Executes the query and returns the results as a `QuerySnapshot` from the
 * server. Returns an error if the network is not available.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */


function ul(t) {
  t = index_esm2017_hc(t, index_esm2017_mc);
  var e = index_esm2017_hc(t.firestore, index_esm2017_Vc),
      n = index_esm2017_Dc(e),
      s = new nl(e);
  return index_esm2017_Za(n, t._query, {
    source: "server"
  }).then(function (n) {
    return new Ph(e, s, t, n);
  });
}

function al(t, e, n) {
  t = index_esm2017_hc(t, index_esm2017_wc);
  var s = index_esm2017_hc(t.firestore, index_esm2017_Vc),
      i = Yh(t.converter, e, n);
  return _l(s, [eh(th(s), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, index_esm2017_An.none())]);
}

function cl(t, e, n) {
  t = index_esm2017_hc(t, index_esm2017_wc);
  var i = index_esm2017_hc(t.firestore, index_esm2017_Vc),
      r = th(i);
  var o;

  for (var _len16 = arguments.length, s = new Array(_len16 > 3 ? _len16 - 3 : 0), _key16 = 3; _key16 < _len16; _key16++) {
    s[_key16 - 3] = arguments[_key16];
  }

  o = "string" == typeof ( // For Compat types, we have to "extract" the underlying types before
  // performing validation.
  e = getModularInstance(e)) || e instanceof index_esm2017_Kc ? ch(r, "updateDoc", t._key, e, n, s) : ah(r, "updateDoc", t._key, e);
  return _l(i, [o.toMutation(t._key, index_esm2017_An.exists(!0))]);
}
/**
 * Deletes the document referred to by the specified `DocumentReference`.
 *
 * @param reference - A reference to the document to delete.
 * @returns A Promise resolved once the document has been successfully
 * deleted from the backend (note that it won't resolve while you're offline).
 */


function hl(t) {
  return _l(index_esm2017_hc(t.firestore, index_esm2017_Vc), [new index_esm2017_On(t._key, index_esm2017_An.none())]);
}
/**
 * Add a new document to specified `CollectionReference` with the given data,
 * assigning it a document ID automatically.
 *
 * @param reference - A reference to the collection to add this document to.
 * @param data - An Object containing the data for the new document.
 * @returns A `Promise` resolved with a `DocumentReference` pointing to the
 * newly created document after it has been written to the backend (Note that it
 * won't resolve while you're offline).
 */


function ll(t, e) {
  var n = index_esm2017_hc(t.firestore, index_esm2017_Vc),
      s = index_esm2017_Ic(t),
      i = Yh(t.converter, e);
  return _l(n, [eh(th(t.firestore), "addDoc", s._key, i, null !== t.converter, {}).toMutation(s._key, index_esm2017_An.exists(!1))]).then(function () {
    return s;
  });
}

function fl(t) {
  for (var _len17 = arguments.length, e = new Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {
    e[_key17 - 1] = arguments[_key17];
  }

  var n, s, i;
  t = getModularInstance(t);
  var r = {
    includeMetadataChanges: !1
  },
      o = 0;
  "object" != firestore_dist_index_esm2017_typeof(e[o]) || index_esm2017_Rc(e[o]) || (r = e[o], o++);
  var u = {
    includeMetadataChanges: r.includeMetadataChanges
  };

  if (index_esm2017_Rc(e[o])) {
    var _t113 = e[o];
    e[o] = null === (n = _t113.next) || void 0 === n ? void 0 : n.bind(_t113), e[o + 1] = null === (s = _t113.error) || void 0 === s ? void 0 : s.bind(_t113), e[o + 2] = null === (i = _t113.complete) || void 0 === i ? void 0 : i.bind(_t113);
  }

  var a, c, h;
  if (t instanceof index_esm2017_wc) c = index_esm2017_hc(t.firestore, index_esm2017_Vc), h = index_esm2017_Ke(t._key.path), a = {
    next: function next(n) {
      e[o] && e[o](wl(c, t, n));
    },
    error: e[o + 1],
    complete: e[o + 2]
  };else {
    var _n38 = index_esm2017_hc(t, index_esm2017_mc);

    c = index_esm2017_hc(_n38.firestore, index_esm2017_Vc), h = _n38._query;

    var _s31 = new nl(c);

    a = {
      next: function next(t) {
        e[o] && e[o](new Ph(c, _s31, _n38, t));
      },
      error: e[o + 1],
      complete: e[o + 2]
    }, Sh(t._query);
  }
  return function (t, e, n, s) {
    var i = new index_esm2017_ka(s),
        r = new Lu(e, i, n);
    return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee67() {
      return regeneratorRuntime.wrap(function _callee67$(_context67) {
        while (1) {
          switch (_context67.prev = _context67.next) {
            case 0:
              _context67.t0 = Mu;
              _context67.next = 3;
              return index_esm2017_Wa(t);

            case 3:
              _context67.t1 = _context67.sent;
              _context67.t2 = r;
              return _context67.abrupt("return", (0, _context67.t0)(_context67.t1, _context67.t2));

            case 6:
            case "end":
              return _context67.stop();
          }
        }
      }, _callee67);
    }))), function () {
      i.Aa(), t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee68() {
        return regeneratorRuntime.wrap(function _callee68$(_context68) {
          while (1) {
            switch (_context68.prev = _context68.next) {
              case 0:
                _context68.t0 = Ou;
                _context68.next = 3;
                return index_esm2017_Wa(t);

              case 3:
                _context68.t1 = _context68.sent;
                _context68.t2 = r;
                return _context68.abrupt("return", (0, _context68.t0)(_context68.t1, _context68.t2));

              case 6:
              case "end":
                return _context68.stop();
            }
          }
        }, _callee68);
      })));
    };
  }(index_esm2017_Dc(c), h, u, a);
}

function dl(t, e) {
  return index_esm2017_tc(index_esm2017_Dc(t = index_esm2017_hc(t, index_esm2017_Vc)), index_esm2017_Rc(e) ? e : {
    next: e
  });
}
/**
 * Locally writes `mutations` on the async queue.
 * @internal
 */


function _l(t, e) {
  return function (t, e) {
    var n = new index_esm2017_j();
    return t.asyncQueue.enqueueAndForget( /*#__PURE__*/dist_index_esm2017_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee69() {
      return regeneratorRuntime.wrap(function _callee69$(_context69) {
        while (1) {
          switch (_context69.prev = _context69.next) {
            case 0:
              _context69.t0 = index_esm2017_ta;
              _context69.next = 3;
              return index_esm2017_ja(t);

            case 3:
              _context69.t1 = _context69.sent;
              _context69.t2 = e;
              _context69.t3 = n;
              return _context69.abrupt("return", (0, _context69.t0)(_context69.t1, _context69.t2, _context69.t3));

            case 7:
            case "end":
              return _context69.stop();
          }
        }
      }, _callee69);
    }))), n.promise;
  }(index_esm2017_Dc(t), e);
}
/**
 * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`
 * to a {@link DocumentSnapshot}.
 */


function wl(t, e, n) {
  var s = n.docs.get(e._key),
      i = new nl(t);
  return new Rh(t, i, e._key, s, new Ah(n.hasPendingWrites, n.fromCache), e.converter);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */


var ml = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_ref64) {
  firestore_dist_index_esm2017_inherits(ml, _ref64);

  var _super48 = firestore_dist_index_esm2017_createSuper(ml);

  // This class implements the same logic as the Transaction API in the Lite SDK
  // but is subclassed in order to return its own DocumentSnapshot types.

  /** @hideconstructor */
  function ml(t, e) {
    var _this199;

    firestore_dist_index_esm2017_classCallCheck(this, ml);

    _this199 = _super48.call(this, t, e), _this199._firestore = t;
    return _this199;
  }
  /**
   * Reads the document referenced by the provided {@link DocumentReference}.
   *
   * @param documentRef - A reference to the document to be read.
   * @returns A `DocumentSnapshot` with the read data.
   */


  firestore_dist_index_esm2017_createClass(ml, [{
    key: "get",
    value: function get(t) {
      var _this200 = this;

      var e = tl(t, this._firestore),
          n = new nl(this._firestore);
      return dist_index_esm2017_get(firestore_dist_index_esm2017_getPrototypeOf(ml.prototype), "get", this).call(this, t).then(function (t) {
        return new Rh(_this200._firestore, n, e._key, t._document, new Ah(
        /* hasPendingWrites= */
        !1,
        /* fromCache= */
        !1), e.converter);
      });
    }
  }]);

  return ml;
}( /*#__PURE__*/function () {
  /** @hideconstructor */
  function _class5(t, e) {
    firestore_dist_index_esm2017_classCallCheck(this, _class5);

    this._firestore = t, this._transaction = e, this._dataReader = th(t);
  }
  /**
   * Reads the document referenced by the provided {@link DocumentReference}.
   *
   * @param documentRef - A reference to the document to be read.
   * @returns A `DocumentSnapshot` with the read data.
   */


  firestore_dist_index_esm2017_createClass(_class5, [{
    key: "get",
    value:
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be read.
     * @returns A `DocumentSnapshot` with the read data.
     */
    function get(t) {
      var _this201 = this;

      var e = tl(t, this._firestore),
          n = new Xh(this._firestore);
      return this._transaction.lookup([e._key]).then(function (t) {
        if (!t || 1 !== t.length) return dist_index_esm2017_L();
        var s = t[0];
        if (s.isFoundDocument()) return new Ih(_this201._firestore, n, s.key, s, e.converter);
        if (s.isNoDocument()) return new Ih(_this201._firestore, n, e._key, null, e.converter);
        throw dist_index_esm2017_L();
      });
    }
  }, {
    key: "set",
    value: function set(t, e, n) {
      var s = tl(t, this._firestore),
          i = Yh(s.converter, e, n),
          r = eh(this._dataReader, "Transaction.set", s._key, i, null !== s.converter, n);
      return this._transaction.set(s._key, r), this;
    }
  }, {
    key: "update",
    value: function update(t, e, n) {
      var i = tl(t, this._firestore); // For Compat types, we have to "extract" the underlying types before
      // performing validation.

      // For Compat types, we have to "extract" the underlying types before
      // performing validation.
      var r;

      for (var _len18 = arguments.length, s = new Array(_len18 > 3 ? _len18 - 3 : 0), _key18 = 3; _key18 < _len18; _key18++) {
        s[_key18 - 3] = arguments[_key18];
      }

      return r = "string" == typeof (e = getModularInstance(e)) || e instanceof index_esm2017_Kc ? ch(this._dataReader, "Transaction.update", i._key, e, n, s) : ah(this._dataReader, "Transaction.update", i._key, e), this._transaction.update(i._key, r), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */

  }, {
    key: "delete",
    value:
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */
    function _delete(t) {
      var e = tl(t, this._firestore);
      return this._transaction["delete"](e._key), this;
    }
  }]);

  return _class5;
}())));
/**
 * Executes the given `updateFunction` and then attempts to commit the changes
 * applied within the transaction. If any document read within the transaction
 * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
 * commit after 5 attempts, the transaction fails.
 *
 * The maximum number of writes allowed in a single transaction is 500.
 *
 * @param firestore - A reference to the Firestore database to run this
 * transaction against.
 * @param updateFunction - The function to execute within the transaction
 * context.
 * @returns If the transaction completed successfully or was explicitly aborted
 * (the `updateFunction` returned a failed promise), the promise returned by the
 * `updateFunction `is returned here. Otherwise, if the transaction failed, a
 * rejected promise with the corresponding failure error is returned.
 */


function gl(t, e, n) {
  t = index_esm2017_hc(t, index_esm2017_Vc);
  var s = Object.assign(Object.assign({}, Hh), n);
  !function (t) {
    if (t.maxAttempts < 1) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Max attempts must be at least 1");
  }(s);
  return index_esm2017_ec(index_esm2017_Dc(t), function (n) {
    return e(new ml(t, n));
  }, s);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or
 * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.
 */


function yl() {
  return new nh("deleteField");
}
/**
 * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to
 * include a server-generated timestamp in the written data.
 */


function pl() {
  return new ih("serverTimestamp");
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements - The elements to union into the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */


function Il() {
  for (var _len19 = arguments.length, t = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
    t[_key19] = arguments[_key19];
  }

  // NOTE: We don't actually parse the data until it's used in set() or
  // update() since we'd need the Firestore instance to do this.
  return new rh("arrayUnion", t);
}
/**
 * Returns a special value that can be used with {@link (setDoc:1)} or {@link
 * updateDoc:1} that tells the server to remove the given elements from any
 * array value that already exists on the server. All instances of each element
 * specified will be removed from the array. If the field being modified is not
 * already an array it will be overwritten with an empty array.
 *
 * @param elements - The elements to remove from the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */


function Tl() {
  for (var _len20 = arguments.length, t = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
    t[_key20] = arguments[_key20];
  }

  // NOTE: We don't actually parse the data until it's used in set() or
  // update() since we'd need the Firestore instance to do this.
  return new oh("arrayRemove", t);
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by
 * the given value.
 *
 * If either the operand or the current field value uses floating point
 * precision, all arithmetic follows IEEE 754 semantics. If both values are
 * integers, values outside of JavaScript's safe number range
 * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
 * precision loss. Furthermore, once processed by the Firestore backend, all
 * integer operations are capped between -2^63 and 2^63-1.
 *
 * If the current field value is not of type `number`, or if the field does not
 * yet exist, the transformation sets the field to the given value.
 *
 * @param n - The value to increment by.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */


function El(t) {
  return new uh("increment", t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Creates a write batch, used for performing multiple writes as a single
 * atomic operation. The maximum number of writes allowed in a single {@link WriteBatch}
 * is 500.
 *
 * Unlike transactions, write batches are persisted offline and therefore are
 * preferable when you don't need to condition your writes on read data.
 *
 * @returns A {@link WriteBatch} that can be used to atomically execute multiple
 * writes.
 */


function Al(t) {
  return index_esm2017_Dc(t = index_esm2017_hc(t, index_esm2017_Vc)), new Zh(t, function (e) {
    return _l(t, e);
  });
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function Rl(t, e) {
  index_esm2017_Dc(t = index_esm2017_hc(t, index_esm2017_Vc));
  var n = "string" == typeof e ? function (t) {
    try {
      return JSON.parse(t);
    } catch (t) {
      throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Failed to parse JSON:" + t.message);
    }
  }(e) : e,
      s = []; // PORTING NOTE: We don't return an error if the user has not enabled
  // persistence since `enableIndexeddbPersistence()` can fail on the Web.

  if (Array.isArray(n.indexes)) {
    var _iterator80 = firestore_dist_index_esm2017_createForOfIteratorHelper(n.indexes),
        _step80;

    try {
      for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
        var _t114 = _step80.value;

        var _e54 = bl(_t114, "collectionGroup"),
            _n39 = [];

        if (Array.isArray(_t114.fields)) {
          var _iterator81 = firestore_dist_index_esm2017_createForOfIteratorHelper(_t114.fields),
              _step81;

          try {
            for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
              var _e55 = _step81.value;

              var _t115 = gh("setIndexConfiguration", bl(_e55, "fieldPath"));

              "CONTAINS" === _e55.arrayConfig ? _n39.push(new index_esm2017_oe(_t115, 2
              /* CONTAINS */
              )) : "ASCENDING" === _e55.order ? _n39.push(new index_esm2017_oe(_t115, 0
              /* ASCENDING */
              )) : "DESCENDING" === _e55.order && _n39.push(new index_esm2017_oe(_t115, 1
              /* DESCENDING */
              ));
            }
          } catch (err) {
            _iterator81.e(err);
          } finally {
            _iterator81.f();
          }
        }

        s.push(new index_esm2017_se(index_esm2017_se.UNKNOWN_ID, _e54, _n39, index_esm2017_ue.empty()));
      }
    } catch (err) {
      _iterator80.e(err);
    } finally {
      _iterator80.f();
    }
  } // TODO(indexing): Configure indexes


  return Promise.resolve();
}

function bl(t, e) {
  if ("string" != typeof t[e]) throw new dist_index_esm2017_Q(index_esm2017_G.INVALID_ARGUMENT, "Missing string value for: " + e);
  return t[e];
}
/**
 * Cloud Firestore
 *
 * @packageDocumentation
 */


!function (t) {
  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
  !function (t) {
    dist_index_esm2017_x = t;
  }(SDK_VERSION), _registerComponent(new Component("firestore", function (t, _ref65) {
    var n = _ref65.options;
    var s = t.getProvider("app").getImmediate(),
        i = new index_esm2017_Vc(s, new dist_index_esm2017_J(t.getProvider("auth-internal")), new index_esm2017_tt(t.getProvider("app-check-internal")));
    return n = Object.assign({
      useFetchStreams: e
    }, n), i._setSettings(n), i;
  }, "PUBLIC")), registerVersion(dist_index_esm2017_D, "3.4.9", t), // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
  registerVersion(dist_index_esm2017_D, "3.4.9", "esm2017");
}();

;// CONCATENATED MODULE: ./node_modules/firebase/firestore/dist/index.esm.js

;// CONCATENATED MODULE: ./src/scripts/views/components/hero-game.js
var heroGame = " \n\t\t\t<header class=\"mb-6 dark:bg-gray-800\">\n\t\t\t\n\t\t\t<div class=\"w-full bg-center bg-cover bg-fixed\"\n\t\t\t\tstyle=\"background-image: url('./images/hero1.jpg');\">\n\t\t\t\t<div class=\"flex items-center justify-center w-full h-full bg-gray-900 bg-opacity-50 py-12\">\n\t\t\t\t\t<div class=\"text-center\">\n\t\t\t\t\t<div class=\"container px-4 mx-auto\">\n\t\t\t\t\t\t<div class=\"max-w-4xl mx-auto text-center\">\n\t\t\t\t\t\t\t<span class=\"text-gray-200 font-semibold uppercase tracking-widest\">SPORTS APP</span>\n\t\t\t\t\t\t\t<h2 class=\"mt-8 mb-6 text-4xl lg:text-5xl font-bold text-gray-100\">Progressive Sports</h2>\n\t\t\t\t\t\t\t<p class=\"max-w-3xl mx-auto mb-10 text-lg text-gray-300\">\n\t\t\t\t\t\t\t\tweb sport app in your hand\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<a class=\"inline-block w-full md:w-auto mb-4 md:mr-6 py-5 px-8 text-sm font-bold uppercase border-2 border-transparent bg-gray-200 rounded hover:bg-gray-100 text-gray-800 transition duration-200 focus:outline-none focus:ring focus:ring-green-500\"\n\t\t\t\t\t\t\t\thref=\"#/game-page\">Game Scheduled</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</header>\n\t";
/* harmony default export */ const hero_game = (heroGame);
;// CONCATENATED MODULE: ./src/scripts/views/pages/detailGamePage.js
/* provided dependency */ var detailGamePage_$ = __webpack_require__(957);












var detailGamePage = {
  init: function init() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", "\n        <div id=\"hero-image\"></div>\n      <div class=\"detail-games relative\">\n      </div> \n      <p class=\"text-center text-xl lg:text-4xl mb-10 font-semibold uppercase\">Head-To-Head</p>\n      <div class=\"list-standings w-full h-auto px-8 mt-4\" >\n      <div class=\"item-title w-3/4 sm:w-1/2 lg:w-1/2 h-auto mx-auto  grid gap-2 grid-cols-3 sm:grid-cols-4 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-6 bg-green-400 justify-center text-white\">\n          <div class=\"w-full text-xs mx-5 lg:text-sm\">Team</div>\n          <div class=\"w-full text-xs mx-5 lg:text-sm\">Won</div>\n          <div class=\"w-full text-xs mx-5 lg:text-sm\">Lose</div>\n          <div class=\"w-full text-xs hidden mx-5 md:inline lg:text-sm\">Draw</div>\n          <div class=\"w-full text-xs hidden lg:hidden xl:inline text-sm\">Half Time</div>\n          <div class=\"w-full text-xs hidden lg:inline xl:inline text-sm\">Full Time</div>\n      </div>\n      <div class=\"item-list w-3/4 sm:w-1/2 lg:w-1/2 h-auto py-2 mx-auto shadow-md  grid gap-2 grid-cols-3 sm:grid-cols-4 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-6 bg-green-200 justify-center text-black\">\n  </div>\n  </div>\n  </div>\n       <div class=\"form relative w-80 m-auto\">\n        <p class=\"mb-20 text-center text-xl lg:text-4xl mt-10 font-medium uppercase\">Discussion</p>\n        <div class=\"allComments mx-auto\"></div>\n             <div class=\"flex\">           \n                <form class = \"m-auto form-review\" method=\"POST\">\n                    <div class=\"mb-4\">\n                        <label for=\"name\" class=\"mb-2\">Name</label>\n                            <input type=\"name\" id=\"name\" class=\"input-name border border-black text-gray-900  rounded-lg focus:ring-black focus:border-black block w-full p-1 dark:bg-white\" placeholder=\"Input Name\" required>\n                                </div>\n                    <div class=\"mb-6\">\n                        <label for=\"message\" class=\"mb-2 block text-sm font-medium \"\">Comment</label>\n                            <textarea id=\"message\" maxlength=\"255\" rows=\"4\" class=\"block w-80 rounded-lg border border-black p-1 text-gray-900 focus:border-black focus:ring-black dark:bg-white\" placeholder=\"Leave a comment... Maximal 255 Characters\"></textarea>\n                                </div>\n                            <button type=\"submit\" class=\"btnSubmit text-white bg-black hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center mb-20\">Submit</button>\n                </form>\n            </div>\n        </div>\n    ");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  afterRender: function afterRender() {
    var _this = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              document.getElementById('hero-image').innerHTML = hero_game;
              _context2.next = 3;
              return _this.detailMatch();

            case 3:
              _context2.next = 5;
              return _this.detailItem();

            case 5:
              _context2.next = 7;
              return _this.showDiscussionCard();

            case 7:
              _context2.next = 9;
              return _this.getData({
                id: _this.getId()
              });

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  getId: function getId() {
    var url = url_parser.parseActiveUrlWithoutCombiner();
    return url.id;
  },
  detailMatch: function detailMatch() {
    var _this2 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
      var footballDataApi;
      return regenerator_default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              footballDataApi = new data_footballDataApi();
              _context3.next = 3;
              return footballDataApi.getMatchById({
                id: _this2.getId()
              }).then(function (value) {
                console.log(value);
                detailGamePage_$("custom-loading").remove();
                var match = value.match;
                document.querySelector('.detail-games').innerHTML += detail_game({
                  nameLeague: match.competition.name,
                  teamOne: match.homeTeam.name,
                  teamTwo: match.awayTeam.name,
                  pathImage: match.competition.area.ensignUrl,
                  ScoreTwo: match.score.fullTime.awayTeam,
                  ScoreOne: match.score.fullTime.homeTeam,
                  Status: match.status,
                  Stage: match.stage,
                  Venue: match.venue,
                  Date: match.utcDate
                });
              })["catch"](function (e) {
                detailGamePage_$("custom-loading").remove();

                if (e.status == 0) {
                  document.querySelector('.detail-games').innerHTML = "<message-error message=\"Limit Request waiting 1 minute\" class=\"col-span-full\"></message-error>";
                  document.querySelector('.form').innerHTML = "";
                } else {
                  document.querySelector('.detail-games').innerHTML = "<message-error message=\"".concat(e.statusText, "\" class=\"col-span-full\"></message-error>");
                  document.querySelector('.form').innerHTML = "";
                }
              });

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  detailItem: function detailItem() {
    var _this3 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
      var footballDataApi;
      return regenerator_default().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              footballDataApi = new data_footballDataApi();
              _context4.next = 3;
              return footballDataApi.getMatchById({
                id: _this3.getId()
              }).then(function (value) {
                console.log(value);
                detailGamePage_$("custom-loading").remove();
                var match = value.match;
                document.querySelector('.item-list').innerHTML += detail_table({
                  nameLeague: match.competition.name,
                  teamOne: value.head2head.awayTeam.name,
                  teamTwo: value.head2head.homeTeam.name,
                  pathImage: match.competition.area.ensignUrl,
                  ScoreFullAway: match.score.fullTime.awayTeam,
                  ScoreFullHome: match.score.fullTime.homeTeam,
                  ScoreHalfAway: match.score.halfTime.awayTeam,
                  ScoreHalfHome: match.score.halfTime.homeTeam,
                  DrawAway: value.head2head.awayTeam.draws,
                  WonAway: value.head2head.awayTeam.wins,
                  LoseAway: value.head2head.awayTeam.losses,
                  DrawHome: value.head2head.homeTeam.draws,
                  WonHome: value.head2head.homeTeam.wins,
                  LoseHome: value.head2head.homeTeam.losses
                });
              })["catch"](function (e) {
                detailGamePage_$("custom-loading").remove();

                if (e.status == 0) {
                  document.querySelector('.detail-games').innerHTML = "<message-error message=\"Limit Request waiting 1 minute\" class=\"col-span-full\"></message-error>";
                  document.querySelector('.form').innerHTML = "";
                } else {
                  document.querySelector('.detail-games').innerHTML = "<message-error message=\"".concat(e.statusText, "\" class=\"col-span-full\"></message-error>");
                  document.querySelector('.form').innerHTML = "";
                }
              });

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }))();
  },
  showDiscussionCard: function showDiscussionCard() {
    var _this4 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
      var nameInput, discussInput, btnSubmit;
      return regenerator_default().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              nameInput = document.querySelector('#name');
              discussInput = document.querySelector('#message');
              btnSubmit = document.querySelector('.btnSubmit');
              btnSubmit.addEventListener('click', function (event) {
                event.preventDefault();
                toastify_default()({
                  text: "successfully added a comment",
                  duration: 3000,
                  destination: "#/favorite-page",
                  gravity: "top",
                  // `top` or `bottom`
                  position: "center",
                  // `left`, `center` or `right`
                  stopOnFocus: true,
                  // Prevents dismissing of toast on hover
                  style: {
                    background: "linear-gradient(to right, #00b09b, #96c93d)"
                  },
                  onClick: function onClick() {} // Callback after click

                }).showToast(); // validation, discuss input can't be empty

                if (nameInput.value === '' || discussInput.value === '') {
                  alert("empty input isn't allowed");
                  nameInput.value = '';
                  discussInput.value = '';
                } else {
                  _this4.postData({
                    id: _this4.getId(),
                    name: nameInput.value,
                    comment: discussInput.value,
                    time: new Date(index_esm2017_at.now().seconds * 1000).toLocaleDateString()
                  });

                  nameInput.value = '';
                  discussInput.value = '';
                }
              });

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }))();
  },
  postData: function postData(_ref) {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
      var id, name, comment, time, docRef;
      return regenerator_default().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              id = _ref.id, name = _ref.name, comment = _ref.comment, time = _ref.time;
              _context6.prev = 1;
              _context6.next = 4;
              return Ir(fn(commentHelperFirebase, "discuss"), {
                id: id,
                name: name,
                comment: comment,
                time: time
              });

            case 4:
              docRef = _context6.sent;
              document.querySelector('.allComments').innerHTML += "\n                  <div id=\"".concat(id, " card-comment shadow-lg mb-6\">\n                    <div class=\"title-comment flex justify-center\">\n                      <div class=\"rounded-lg bg-white dark:bg-gray-700 p-6 shadow-lg w-80 border-2\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path fill-rule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clip-rule=\"evenodd\" />\n                        </svg>\n                        <span>").concat(time, "</span>\n                        <h2 class=\"mb-2 font-bold text-gray-800 dark:text-white\">").concat(name, "</h2>\n                        <p class=\"text-gray-700 dark:text-white\">").concat(comment, "</p>\n                         <button class=\"deleteComment\">\n                           <span class=\"bg-red-light mt-1 inline-block rounded-full p-1 pb-0\">\n                          <svg fill=\"red\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\">\n                            <path d=\"M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M11,16.5L18,9.5L16.59,8.09L11,13.67L7.91,10.59L6.5,12L11,16.5Z\"></path>\n                          </svg>\n                        </span>\n                        </button>\n                      </div>\n                    </div>\n                  </div>");
              _context6.next = 11;
              break;

            case 8:
              _context6.prev = 8;
              _context6.t0 = _context6["catch"](1);
              console.error("Error adding document: ", _context6.t0);

            case 11:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[1, 8]]);
    }))();
  },
  getData: function getData(_ref2) {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7() {
      var id, querySnapshot;
      return regenerator_default().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              id = _ref2.id;
              _context7.next = 3;
              return vr(fn(commentHelperFirebase, "discuss"));

            case 3:
              querySnapshot = _context7.sent;
              querySnapshot.forEach(function (doc) {
                var commentData = doc.data();

                if (commentData.id === id) {
                  document.querySelector('.allComments').innerHTML += "\n                  <div id=\"".concat(commentData.id, " card-comment shadow-lg\">\n                    <div class=\"title-comment flex justify-center\">\n                      <div class=\"rounded-lg bg-white dark:bg-gray-700 p-6 shadow-lg w-80 border-2 mb-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path fill-rule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clip-rule=\"evenodd\" />\n                        </svg>\n                        <span>").concat(commentData.time, "</span>\n                        <h2 class=\"mb-2 font-bold text-gray-800 dark:text-white\">").concat(commentData.name, "</h2>\n                        <p class=\"text-gray-700 dark:text-white\">").concat(commentData.comment, "</p>\n                         <button class=\"deleteComment\">\n                           <span class=\"bg-red-light mt-1 inline-block rounded-full p-1 pb-0\">\n                          <svg fill=\"red\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\">\n                            <path d=\"M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M11,16.5L18,9.5L16.59,8.09L11,13.67L7.91,10.59L6.5,12L11,16.5Z\"></path>\n                          </svg>\n                        </span>\n                        </button>\n                      </div>\n                    </div>\n                  </div>");
                }
              });

            case 5:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }))();
  }
};
/* harmony default export */ const pages_detailGamePage = (detailGamePage);
;// CONCATENATED MODULE: ./src/scripts/views/pages/detailLeaguePage.js
/* provided dependency */ var detailLeaguePage_$ = __webpack_require__(957);









var detailLeaguePage = {
  init: function init() {
    var _this = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.footballDataApi = new data_footballDataApi();
              _this.id = _this.getId();
              _context.next = 4;
              return _this.footballDataApi.getCompetitionsById({
                id: _this.id
              });

            case 4:
              _this.competitionDetail = _context.sent;
              return _context.abrupt("return", "\n        <div class=\"detailLeague flex flex-col\">\n            <div class=\"w-full flex flex-col p-8 flex-column\">\n                <div class=\"w-full h-full m-auto\">\n                    <img data-src=\"".concat(_this.competitionDetail.emblemUrl, "\" class=\"lazyload fade-in m-auto w-[200px] h-[200px]\">\n                    <h1 class=\"m-auto mt-2 w-fit h-fit  text-3xl underline\">").concat(_this.competitionDetail.name, "</h1>\n                    <span class=\"m-auto mt-2 w-fit h-fit text-l flex\">Start : ").concat(_this.competitionDetail.currentSeason.startDate, "</span>\n                    <span class=\"m-auto mt-2 w-fit h-fit text-l flex\">End : ").concat(_this.competitionDetail.currentSeason.endDate, "</span>\n                    <span class=\"m-auto mt-2 w-fit h-fit text-l flex\">Last Updated : ").concat(new Date(_this.competitionDetail.lastUpdated).toLocaleDateString("en-US"), "</span>\n                </div>\n            </div>\n            <div class=\"buttonSelect w-full shadow-md bg-green-200 flex justify-center p-2\">\n                <button id=\"selectTeams\" class=\"bg-white w-1/6 shadow-inner p-2 mx-4 bg-green-400 shadow-md font-semibold text-white text-sm md:text-base\">Teams</button>\n                <button id=\"selectStandings\" class=\"w-1/6 bg-white shadow-inner p-2 mx-4 text-sm md:text-base\">Standings</button>\n                <button id=\"selectSchedules\" class=\"w-1/6 bg-white shadow-inner p-2 mx-4 text-sm md:text-base\">Schedules</button>\n                <button id=\"selectTopScorers\" class=\"w-1/6 bg-white shadow-inner p-2 mx-4 text-sm md:text-base\">Top Scorers</button>\n            </div>\n            <div class=\"frame-select flex flex-col\">\n                \n            </div>\n        </div>\n        "));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  getId: function getId() {
    var url = url_parser.parseActiveUrlWithoutCombiner();
    return url.id;
  },
  afterRender: function afterRender() {
    var _this2 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _this2.prosesButton();

              _this2.renderTeams();

              document.querySelector('#selectTeams').addEventListener('click', function () {
                _this2.renderTeams();
              });
              document.querySelector('#selectStandings').addEventListener('click', function () {
                _this2.renderTable();
              });
              document.querySelector('#selectSchedules').addEventListener('click', function () {
                _this2.renderSchedules();
              });
              document.querySelector('#selectTopScorers').addEventListener('click', function () {
                _this2.renderTopScorers();
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  prosesButton: function prosesButton() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
      return regenerator_default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              detailLeaguePage_$('.buttonSelect button').click(function (event) {
                detailLeaguePage_$('.buttonSelect').children().removeClass('bg-green-400 shadow-md font-semibold text-white');
                detailLeaguePage_$(event.target).toggleClass('bg-green-400 shadow-md font-semibold text-white');
              });

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  renderSchedules: function renderSchedules() {
    var _this3 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
      var headTable, btnConfigDate, configurationDate, renderData;
      return regenerator_default().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              detailLeaguePage_$(".frame-select").children().toggleClass('hidden');
              detailLeaguePage_$(".frame-select .list-matches").removeClass('hidden');

              headTable = function headTable() {
                return "\n                <div class=\"list-matches w-full h-auto mt-4\" >\n                    <div class=\"item-title w-full h-auto py-2 grid gap-2 grid-cols-7 md:grid-cols-9 lg:grid-cols-9 xl:grid-cols-9 2xl:grid-cols-9 bg-green-400 text-white\">\n                        <div class=\"w-full col-span-2 truncate text-base md:text-lg\">Away Team</div>\n                        <div class=\"w-full col-span-2 truncate text-base md:text-lg\">Home Team</div>\n                        <div class=\"w-full col-span-2 md:col-span-1 truncate text-base md:text-lg\">Date</div>\n                        <div class=\"w-full truncate text-base md:text-lg\">Time</div>\n                        <div class=\"w-full hidden md:inline truncate text-base md:text-lg\">Winner</div>\n                        <div class=\"w-full hidden md:inline truncate text-base md:text-lg\">Stage</div>\n                        <div class=\"w-full hidden md:inline truncate text-base md:text-lg\">Status</div>\n                    </div>\n                </div>\n            ";
              };

              btnConfigDate = function btnConfigDate() {
                return "\n            <div class=\"w-full flex ml-auto mt-2  py-[1px] px-8\">\n                <div class=\"w-2/6 bg-green-400 m-auto p-2 shadow-md\">\n                    <label for=\"dateconfig\" class=\"text-white text-base\" >Date From<label>\n                    <input type=\"date\" id=\"dateFrom\" name=\"dateconfig\"  class=\"bg-green-100 w-full dateconfig text-black text-base\" value=\"".concat(configurationDate(-30), "\" class=\"\"></input>\n                </div>\n                <div class=\"w-2/6 bg-green-400 m-auto p-2 shadow-md\">\n                    <label for=\"dateconfig\" class=\"text-white text-base\" >Date To<label>\n                    <input type=\"date\" id=\"dateTo\" name=\"dateconfig\"  class=\"bg-green-100 w-full dateconfig text-black text-base\" value=\"").concat(configurationDate(+30), "\" class=\"\"></input>\n                </div>\n                 <button id=\"btn-date\" class=\"w-1/6 text-white font-semibold bg-green-200 hover:bg-green-400 p-2 m-auto\">Search</button>\n\n            </div>");
              };

              configurationDate = function configurationDate(value) {
                var date = new Date();
                date.setDate(date.getDate() + value);
                var dateFrom = date.toLocaleDateString("en-US").split('/');
                return "".concat(dateFrom[2], "-").concat(dateFrom[0] <= 9 ? "0".concat(dateFrom[0]) : "".concat(dateFrom[0]), "-").concat(dateFrom[1] <= 9 ? "0".concat(dateFrom[1]) : "".concat(dateFrom[1]));
              };

              renderData = /*#__PURE__*/function () {
                var _ref = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
                  return regenerator_default().wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          detailLeaguePage_$(".item-list").remove();
                          document.querySelector('.list-matches').innerHTML += "<custom-loading></custom-loading>";
                          _context4.next = 4;
                          return _this3.footballDataApi.getMatchesByIdCompetitions({
                            id: _this3.id,
                            dateTo: detailLeaguePage_$("#dateTo").val(),
                            dateFrom: detailLeaguePage_$("#dateFrom").val()
                          }).then(function (value) {
                            detailLeaguePage_$("custom-loading").remove();
                            document.querySelector('.list-matches').innerHTML = headTable();
                            var colorList = false;

                            var matches = _toConsumableArray(value.matches).sort(function (a, b) {
                              return a.utcDate - b.utcDate;
                            }).reverse();

                            matches.forEach(function (e) {
                              var tampClass = colorList ? "bg-green-300" : "bg-green-200";
                              var options = {
                                timeZone: 'UTC',
                                timeZoneName: 'false'
                              };
                              var startDate = new Date(e.utcDate);
                              document.querySelector('.list-matches').innerHTML += "\n                        <div class=\"item-list m-auto w-full h-full py-[1px] grid gap-2 grid-cols-7 md:grid-cols-9 lg:grid-cols-9 xl:grid-cols-9 2xl:grid-cols-9\">\n                        <div class=\"w-full ".concat(tampClass, " col-span-2 truncate text-sm md:text-base\">").concat(e.awayTeam.name, "</div>\n                        <div class=\"w-full ").concat(tampClass, " col-span-2 truncate text-sm md:text-base\">").concat(e.homeTeam.name, "</div>\n                        <div class=\"w-full ").concat(tampClass, " col-span-2 md:col-span-1 truncate text-sm md:text-base\">").concat(startDate.toLocaleDateString("en-US"), "</div>\n                        <div class=\"w-full ").concat(tampClass, " truncate text-sm md:text-base\">").concat(startDate.toLocaleTimeString("en-US"), "</div>\n                        <div class=\"w-full ").concat(tampClass, " hidden md:inline truncate text-sm md:text-base\">").concat(e.score.winner != null ? e.score.winner.split("_")[0] + " TEAM" : "Sedang Berlangsung", "</div>\n                        <div class=\"w-full ").concat(tampClass, " hidden md:inline truncate text-sm md:text-base\">").concat(e.stage.replace("_", " "), "</div>\n                        <div class=\"w-full ").concat(tampClass, " hidden md:inline truncate text-sm md:text-base\"> <a href=\"#/matches/").concat(e.id, "\">").concat(e.status, "</a></div>\n                        </div>\n                    ");
                              colorList = colorList ? false : true;
                            });
                          })["catch"](function (error) {});

                        case 4:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                return function renderData() {
                  return _ref.apply(this, arguments);
                };
              }();

              document.querySelector('.frame-select').innerHTML = btnConfigDate();
              document.querySelector('.frame-select').innerHTML += headTable();
              renderData();
              detailLeaguePage_$('#btn-date').on("click", function () {
                renderData();
                console.log("sss");
              });

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }))();
  },
  renderTopScorers: function renderTopScorers() {
    var _this4 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee6() {
      var headTable;
      return regenerator_default().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              detailLeaguePage_$(".frame-select").children().toggleClass('hidden');
              detailLeaguePage_$(".frame-select .list-scorers").removeClass('hidden');

              headTable = function headTable() {
                return "\n                <div class=\"list-scorers w-full h-auto px-8 mt-4\" >\n                    <div class=\"item-title w-full h-auto py-2 grid gap-2 grid-cols-4 sm:grid-cols-7 md:grid-cols-7 lg:grid-cols-7 xl:grid-cols-7 2xl:grid-cols-7 bg-green-400 text-white\">\n                        <div class=\"w-full \">Player Name</div>\n                        <div class=\"w-full col-span-2 truncate\">Team Name</div>\n                        <div class=\"w-full hidden sm:inline\">Nationality</div>\n                        <div class=\"w-full hidden sm:inline\">Position</div>\n                        <div class=\"w-full hidden md:inline\">Total Goals</div>\n                        <div class=\"w-full hidden md:inline\">Time Updated</div>\n                    </div>\n                </div>\n            ";
              };

              document.querySelector('.frame-select').innerHTML = headTable();
              document.querySelector('.list-scorers').innerHTML += "<custom-loading></custom-loading>";
              _context6.next = 7;
              return _this4.footballDataApi.getTopScorersByIdCompetitions({
                id: _this4.id
              }).then(function (value) {
                detailLeaguePage_$("custom-loading").remove();
                var colorList = false;
                value.scorers.forEach(function (e) {
                  var tampClass = colorList ? "bg-green-300" : "bg-green-200";
                  var startDate = new Date(e.player.lastUpdated);
                  document.querySelector('.list-scorers').innerHTML += "\n                    <div class=\"item-list m-auto w-full h-full py-[1px] grid gap-2 grid-cols-4 sm:grid-cols-7 md:grid-cols-7 lg:grid-cols-7 xl:grid-cols-7 2xl:grid-cols-7\">\n                    <div class=\"w-full ".concat(tampClass, " md:inline\"> <a href=\"#/players/").concat(e.player.id, "\">").concat(e.player.name, "</a></div>\n                    <div class=\"w-full ").concat(tampClass, " col-span-2 truncate\">").concat(e.team.name, "</div>\n                    <div class=\"w-full ").concat(tampClass, " hidden sm:inline\">").concat(e.player.nationality != null ? e.player.nationality : "N/A", "</div>\n                    <div class=\"w-full ").concat(tampClass, " hidden sm:inline\">").concat(e.player.position != null ? e.player.position : "N/A", "</div>\n                    <div class=\"w-full ").concat(tampClass, " hidden md:inline\">").concat(e.numberOfGoals, "</div>\n                    <div class=\"w-full ").concat(tampClass, " hidden md:inline\">").concat(startDate.toUTCString(), "</div>\n                    </div>\n                ");
                  colorList = colorList ? false : true;
                });
              })["catch"](function (error) {});

            case 7:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }))();
  },
  renderTable: function renderTable() {
    var _this5 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee7() {
      var titleGroup, headTable;
      return regenerator_default().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              titleGroup = function titleGroup(nameGroup) {
                return "\n            <div class=\"item-list w-full h-full py-[1px] mt-2 grid gap-2 grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-11 xl:grid-cols-11 2xl:grid-cols-11\">\n                <div class=\"item-group bg-green-400 text-white\">".concat(nameGroup, "</div>\n              </div>");
              };

              headTable = function headTable() {
                return "\n                <div class=\"list-standings w-full h-auto px-8 mt-4\" >\n                    <div class=\"item-title w-full h-auto py-2 grid gap-2 grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-11 xl:grid-cols-11 2xl:grid-cols-11 bg-green-400 text-white\">\n                        <div class=\"w-full\">Position</div>\n                        <div class=\"w-full col-span-2 truncate\">Clubs</div>\n                        <div class=\"w-full hidden sm:inline\">MP</div>\n                        <div class=\"w-full hidden sm:inline\">Won</div>\n                        <div class=\"w-full hidden md:inline\">Draw</div>\n                        <div class=\"w-full hidden md:inline\">Lose</div>\n                        <div class=\"w-full hidden lg:inline\">GF</div>\n                        <div class=\"w-full hidden lg:inline\">GA</div>\n                        <div class=\"w-full hidden lg:inline\">GD</div>\n                        <div class=\"w-full\">Points</div>\n                    </div>\n                </div>\n            ";
              };

              detailLeaguePage_$(".frame-select").children().toggleClass('hidden');
              detailLeaguePage_$(".frame-select .list-standings").removeClass('hidden');
              document.querySelector('.frame-select').innerHTML = headTable();
              document.querySelector('.list-standings').innerHTML += "<custom-loading></custom-loading>";
              _context7.next = 8;
              return _this5.footballDataApi.getAllCompetitionStandingsById({
                id: _this5.id
              }).then(function (competition) {
                detailLeaguePage_$("custom-loading").remove();
                var colorList = false;
                competition.standings.forEach(function (item) {
                  var nameGroup = item.group;

                  if (nameGroup != null) {
                    document.querySelector('.list-standings').innerHTML += titleGroup(nameGroup);
                  }

                  item.table.map(function (e) {
                    var tampClass = colorList ? "bg-green-300" : "bg-green-200";
                    document.querySelector('.list-standings').innerHTML += "\n                    <div class=\"item-list w-full h-full py-[1px] grid gap-2 grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-11 xl:grid-cols-11 2xl:grid-cols-11\">\n                        <div class=\"w-full ".concat(tampClass, " \">").concat(e.position, "</div>\n                        <div class=\"w-full flex justify-start ").concat(tampClass, " col-span-2 truncate p-2\">\n                            <img class=\"lazyload fade-in w-10 h-10 mr-4\" data-src=\"").concat(e.team.crestUrl, "\" alt=\"").concat(e.team.name, "\">\n                            <a href=\"#/teams/").concat(e.team.id, "\" class=\"m-auto truncate\">").concat(e.team.name, "</a>\n                        </div>\n                        <div class=\"w-full  ").concat(tampClass, " hidden sm:inline\">").concat(e.playedGames, "</div>\n                        <div class=\"w-full  ").concat(tampClass, " hidden sm:inline\">").concat(e.won, "</div>\n                        <div class=\"w-full  ").concat(tampClass, " hidden md:inline\">").concat(e.draw, "</div>\n                        <div class=\"w-full  ").concat(tampClass, " hidden md:inline\">").concat(e.lost, "</div>\n                        <div class=\"w-full  ").concat(tampClass, " hidden lg:inline\">").concat(e.goalsFor, "</div>\n                        <div class=\"w-full  ").concat(tampClass, " hidden lg:inline\">").concat(e.goalsAgainst, "</div>\n                        <div class=\"w-full  ").concat(tampClass, " hidden lg:inline\">").concat(e.goalDifference, "</div>\n                        <div class=\"w-full  ").concat(tampClass, "\">").concat(e.points, "</div>\n                    </div>\n                ");
                    colorList = colorList ? false : true;
                  });
                });
              })["catch"](function (error) {});

            case 8:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }))();
  },
  addColorsTeams: function addColorsTeams() {
    var colors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ["black", "white"];
    var colorsHex = [];
    var typoColorNames = {
      "navyblue": "navy",
      "claret": "#811331"
    };
    var item = '';
    var maxItem = {
      'start': 0,
      'stop': 3
    };
    colors.forEach(function (e) {
      if (maxItem['start'] != maxItem['stop']) {
        var deleteSpaceInText = e.toLowerCase().replace(/\s/g, '');
        var color = typoColorNames[deleteSpaceInText] != null ? typoColorNames[deleteSpaceInText] : deleteSpaceInText;
        colorsHex.push(color);
      }

      maxItem['start']++;
    });
    return colorsHex;
  },
  allButton: function allButton(colors) {
    var buttons = {
      "afterAdd": "<svg xmlns=\"http://www.w3.org/2000/svg\" aria-label=\"unlike\" style=\"color:".concat(colors[0] == "white" ? colors[1] : colors[0], "\" class=\" m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n                           </svg>"),
      "beforeAdd": "<svg xmlns=\"http://www.w3.org/2000/svg\" aria-label=\"like\" style=\"color:".concat(colors[0] == "white" ? colors[1] : colors[0], "\" class=\" m-auto h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n                          </svg>")
    };
    return buttons;
  },
  renderTeams: function renderTeams() {
    var _this6 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee10() {
      var headTable, prosesBtn, prosesEventClickFavorite;
      return regenerator_default().wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              detailLeaguePage_$(".frame-select").children().toggleClass('hidden');
              detailLeaguePage_$(".frame-select .list-teams").removeClass('hidden');

              headTable = function headTable() {
                return "<div id=\"list-teams\" class=\"lazyload fade-in list-teams w-full h-auto p-8 grid gap-8 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5\"></div>";
              };

              document.querySelector('.frame-select').innerHTML = headTable();
              document.querySelector('.frame-select').innerHTML += "<custom-loading></custom-loading>";
              _context10.next = 7;
              return _this6.footballDataApi.getAllTeamsByIdCompetitions({
                id: _this6.id
              }).then(function (value) {
                detailLeaguePage_$("custom-loading").remove();
                document.querySelector('.frame-select .list-teams').innerHTML = "";
                _this6.allTeams = value.teams;
                value.teams.forEach(function (e) {
                  var spitClubColors = e.clubColors != null ? e.clubColors.split(" / ") : ["white", "white"];
                  document.querySelector('.frame-select .list-teams').innerHTML += card_item_favorite({
                    idTeam: e.id,
                    nameTeam: e.shortName,
                    location: e.address,
                    stadion: e.venue,
                    pathImage: e.crestUrl,
                    clubColor: spitClubColors,
                    data: e
                  });
                });
              })["catch"](function (error) {});

            case 7:
              prosesBtn = function prosesBtn() {
                detailLeaguePage_$('.btn-favorite').each( /*#__PURE__*/function () {
                  var _ref2 = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee8(i, obj) {
                    var id, data;
                    return regenerator_default().wrap(function _callee8$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            _context8.prev = 0;
                            id = obj.attributes[1].value;
                            data = _this6.allTeams.find(function (value) {
                              return value.id == id;
                            });
                            _context8.next = 5;
                            return favoriteTeamIDB.getTeam(data.id);

                          case 5:
                            if (!_context8.sent) {
                              _context8.next = 9;
                              break;
                            }

                            obj.innerHTML = _this6.allButton(_this6.addColorsTeams(data.clubColors.split(" / ")))["afterAdd"];
                            _context8.next = 10;
                            break;

                          case 9:
                            obj.innerHTML = _this6.allButton(_this6.addColorsTeams(data.clubColors.split(" / ")))["beforeAdd"];

                          case 10:
                            _context8.next = 14;
                            break;

                          case 12:
                            _context8.prev = 12;
                            _context8.t0 = _context8["catch"](0);

                          case 14:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    }, _callee8, null, [[0, 12]]);
                  }));

                  return function (_x, _x2) {
                    return _ref2.apply(this, arguments);
                  };
                }());
              };

              prosesEventClickFavorite = function prosesEventClickFavorite() {
                detailLeaguePage_$('.btn-favorite').on('click', /*#__PURE__*/function () {
                  var _ref3 = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee9(e) {
                    var id, data;
                    return regenerator_default().wrap(function _callee9$(_context9) {
                      while (1) {
                        switch (_context9.prev = _context9.next) {
                          case 0:
                            id = e.currentTarget.attributes[1].value;
                            data = _this6.allTeams.find(function (value) {
                              return value.id == id;
                            });
                            _context9.next = 4;
                            return favoriteTeamIDB.getTeam(data.id);

                          case 4:
                            if (!_context9.sent) {
                              _context9.next = 9;
                              break;
                            }

                            _context9.next = 7;
                            return favoriteTeamIDB.deleteTeam(data.id).then(function () {
                              var target = e.currentTarget;
                              target.innerHTML = _this6.allButton(_this6.addColorsTeams(data.clubColors.split(" / ")))["beforeAdd"];
                            }).then(function () {
                              var message = "".concat(data.name, " sucessfuly deleted from favorite");
                              toastify_default()({
                                text: "".concat(data.name, " sucessfuly deleted from favorite"),
                                duration: 3000,
                                destination: "#/favorite-page",
                                close: true,
                                gravity: "top",
                                // `top` or `bottom`
                                position: "center",
                                // `left`, `center` or `right`
                                stopOnFocus: true,
                                // Prevents dismissing of toast on hover
                                style: {
                                  background: "linear-gradient(to right, #00b09b, #96c93d)"
                                },
                                onClick: function onClick() {} // Callback after click

                              }).showToast();

                              _this6.showNotification(message);
                            });

                          case 7:
                            _context9.next = 11;
                            break;

                          case 9:
                            _context9.next = 11;
                            return favoriteTeamIDB.putTeam(data).then(function () {
                              var target = e.currentTarget;
                              target.innerHTML = _this6.allButton(_this6.addColorsTeams(data.clubColors.split(" / ")))["afterAdd"];
                            }).then(function () {
                              var message = "".concat(data.name, " sucessfuly added to favorite");
                              toastify_default()({
                                text: "".concat(data.name, " sucessfuly added to favorite"),
                                duration: 3000,
                                destination: "#/favorite-page",
                                close: true,
                                gravity: "top",
                                // `top` or `bottom`
                                position: "center",
                                // `left`, `center` or `right`
                                stopOnFocus: true,
                                // Prevents dismissing of toast on hover
                                style: {
                                  background: "linear-gradient(to right, #00b09b, #96c93d)"
                                },
                                onClick: function onClick() {} // Callback after click

                              }).showToast();

                              _this6.showNotification(message);
                            });

                          case 11:
                          case "end":
                            return _context9.stop();
                        }
                      }
                    }, _callee9);
                  }));

                  return function (_x3) {
                    return _ref3.apply(this, arguments);
                  };
                }());
              };

              prosesBtn();
              prosesEventClickFavorite();

            case 11:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }))();
  },
  showNotification: function showNotification(message) {
    var title = "Progressive Web Apps";
    var options = {
      body: message,
      icon: "./icons/icon.png",
      badge: "./icons/icon.png"
    };

    if (Notification.permission === 'granted') {
      navigator.serviceWorker.ready.then(function (registration) {
        registration.showNotification(title, options);
      });
    } else {
      console.error("Feature Notification Not Allowed");
    }
  }
};
/* harmony default export */ const pages_detailLeaguePage = (detailLeaguePage);
;// CONCATENATED MODULE: ./src/scripts/views/components/card-player.js
var identityPlayer = function identityPlayer(_ref) {
  var name = _ref.name,
      firstName = _ref.firstName,
      lastName = _ref.lastName,
      dateOfBirth = _ref.dateOfBirth,
      nationality = _ref.nationality,
      position = _ref.position,
      shirtNumber = _ref.shirtNumber;

  var render = function render() {
    return " \n\t\t\t  <table class=\"table-auto\">\n\t\t\t\t  <thead>\n\t\t\t\t    <tr>\n\t\t\t\t    </tr>\n\t\t\t\t  </thead>\n\t\t\t\t  <tbody class =\"border-0\">\n\t\t\t\t    <tr>\n\t\t\t\t      <td>Name Player</td>\n\t\t\t\t      <td>".concat(name, "</td>\n\t\t\t\t    </tr>\n\t\t\t\t    <tr>\n\t\t\t\t      <td>First Name</td>\n\t\t\t\t      <td>").concat(firstName, "</td>   \n\t\t\t\t    </tr>\n\t\t\t\t    <tr>\n\t\t\t\t      <td>Last Name</td>\n\t\t\t\t      <td>").concat(lastName, "</td> \n\t\t\t\t    </tr>\n\t\t\t\t    <tr>\n\t\t\t\t      <td>Date of Birth</td>\n\t\t\t\t      <td>").concat(dateOfBirth, "</td> \n\t\t\t\t    </tr>\n\t\t\t\t    <tr>\n\t\t\t\t      <td>Nationality</td>\n\t\t\t\t      <td>").concat(nationality, "</td> \n\t\t\t\t    </tr>\n\t\t\t\t    <tr>\n\t\t\t\t      <td>Position</td>\n\t\t\t\t      <td>").concat(position, "</td> \n\t\t\t\t    </tr>\n\t\t\t\t    <tr>\n\t\t\t\t      <td>Shirt Number</td>\n\t\t\t\t      <td>").concat(shirtNumber, "</td> \n\t\t\t\t    </tr>\n\t\t\t\t  </tbody>\n\t\t\t\t</table>");
  };

  return render();
};

/* harmony default export */ const card_player = (identityPlayer);
;// CONCATENATED MODULE: ./src/scripts/views/pages/detailPlayerPage.js
/* provided dependency */ var detailPlayerPage_$ = __webpack_require__(957);





var detailPlayerPage = {
  init: function init() {
    var _this = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.footballDataApi = new data_footballDataApi();
              _this.id = _this.getId();
              return _context.abrupt("return", " \n            <div class=\"buttonSelect w-full shadow-md bg-green-200 flex justify-center p-2\">\n                <button id=\"playerBiodata\" class=\"bg-white w-1/6 shadow-inner p-2 mx-4 bg-green-400 shadow-md font-semibold dark:text-gray-800 text-white text-sm md:text-base\">Biodata</button>\n                <button id=\"matchesHistory\" class=\"w-1/6 dark:text-gray-800 bg-white shadow-inner p-2 mx-4 text-sm md:text-base\">Match History</button>\n            </div>\n            <div class=\"player container min-h-[400px] w-auto p-8 flex flex-wrap justify-center\">\n            \n            </div>\n            <div class=\"flex flex-col h-full\">\n                <div class=\"flex-grow\">\n                      <table class=\"list-history w-80 px-8 m-auto relative sm:w-full hidden\" >\n\n                      </table>\n                </div>\n            </div>\n        ");

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  processBtn: function processBtn() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              detailPlayerPage_$('.buttonSelect button').click(function (event) {
                detailPlayerPage_$('.buttonSelect').children().removeClass('bg-green-400 shadow-md font-semibold text-white');
                detailPlayerPage_$(event.target).toggleClass('bg-green-400 shadow-md font-semibold text-white');
              });

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  afterRender: function afterRender() {
    var _this2 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {
      var playerInfo, historyMatch;
      return regenerator_default().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              playerInfo = document.querySelector('#playerBiodata');
              historyMatch = document.querySelector('#matchesHistory');
              playerInfo.addEventListener('click', function () {
                detailPlayerPage_$('.list-history').addClass("hidden");
                detailPlayerPage_$('.player').removeClass("hidden");

                _this2.renderInfoPlayer();
              });
              historyMatch.addEventListener('click', function () {
                detailPlayerPage_$('.player').addClass("hidden");
                detailPlayerPage_$('.list-history').removeClass("hidden");

                _this2.renderMatchHistory();
              });
              _context3.next = 6;
              return _this2.processBtn();

            case 6:
              _this2.renderInfoPlayer();

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  getId: function getId() {
    var url = url_parser.parseActiveUrlWithoutCombiner();
    return url.id;
  },
  info: function info() {
    return "\n              <div class=\"info\">\n              </div>\n              <div class=\"info info-player dark:bg-gray-800\"></div>\n        ";
  },
  renderInfoPlayer: function renderInfoPlayer() {
    var _this3 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {
      return regenerator_default().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              detailPlayerPage_$(".list-history").children().toggleClass('hidden');
              detailPlayerPage_$(".player .info-player").removeClass('hidden');
              document.querySelector('.player').innerHTML += "<custom-loading></custom-loading>";
              _context4.next = 5;
              return _this3.footballDataApi.getDetailPlayers({
                id: _this3.id
              }).then(function (value) {
                detailPlayerPage_$("custom-loading").remove();
                document.querySelector('.player').innerHTML = _this3.info();
                var infoPlayerContainer = document.querySelector('.info-player');
                infoPlayerContainer.innerHTML += card_player({
                  name: value.name,
                  firstName: value.firstName,
                  lastName: value.lastName,
                  dateOfBirth: value.dateOfBirth,
                  nationality: value.nationality,
                  position: value.position,
                  shirtNumber: value.shirtNumber
                });
              })["catch"](function (e) {
                detailPlayerPage_$("custom-loading").remove();

                if (e.status == 0) {
                  document.querySelector('.player').innerHTML = "<message-error message=\"Limit Request waiting 1 minute\" class=\"col-span-full\"></message-error>";
                } else {
                  document.querySelector('.player').innerHTML = "<message-error message=\"".concat(e.statusText, "\" class=\"col-span-full\"></message-error>");
                }
              });

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }))();
  },
  showingHeadTable: function showingHeadTable(_ref) {
    var title = _ref.title;
    return " \n            <caption class = \"text-center text-green-600\">MATCH HISTORY WITH ".concat(title, "</caption>\n            <thead>\n             <tr class=\"bg-green-400\">\n                <th class=\"p-2\">Competition</th>\n                <th class=\"w-1/2 p-2 text-center\">Home Team</th>\n                <th class=\"p-2 text-center\">Scores</th>\n                <th class=\"w-1/2 p-2 text-center\">Away Team</th>\n                <th class=\"p-2 text-center\">Group</th>\n             </tr>\n            </thead>\n        ");
  },
  renderMatchHistory: function renderMatchHistory() {
    var _this4 = this;

    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee5() {
      var colorList;
      return regenerator_default().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              detailPlayerPage_$(".player").children().toggleClass('hidden');
              detailPlayerPage_$(".player .list-history").removeClass('hidden');
              colorList = false;
              _context5.next = 5;
              return _this4.footballDataApi.getDetailPlayersAndMatch({
                id: _this4.id
              }).then(function (value) {
                value.matches.forEach(function (item) {
                  document.querySelector('.list-history').innerHTML = _this4.showingHeadTable({
                    title: item.homeTeam.name
                  });
                });
              });

            case 5:
              _context5.next = 7;
              return _this4.footballDataApi.getDetailPlayersAndMatch({
                id: _this4.id
              }).then(function (value) {
                value.matches.forEach(function (item) {
                  var tampClass = colorList ? "bg-green-300" : "bg-green-200";
                  console.log(item);
                  document.querySelector('.list-history').innerHTML += "  \n                           <tbody>\n                                <tr>\n                                  <td class=\"".concat(tampClass, " p-2 text-center\">").concat(item.competition.name, "</td>\n                                  <td class=\"").concat(tampClass, " p-2 text-center\">").concat(item.homeTeam.name, " </td>\n                                  <td class=\"").concat(tampClass, " p-2 text-center text-slate-900\"> ").concat(item.score.fullTime.homeTeam, " : ").concat(item.score.fullTime.awayTeam, "</td>\n                                  <td class=\"").concat(tampClass, " p-2 text-center\">").concat(item.awayTeam.name, " </td>\n                                  <td class=\"").concat(tampClass, " p-2 text-center\"><span class=\"incident text-red-500\">").concat(item.group ? item.group.split('_') : '-', "</td>\n                                </tr>\n                              </tbody> \n                    ");
                  colorList = colorList ? false : true;
                });
              })["catch"](function (e) {
                detailPlayerPage_$("custom-loading").remove();

                if (e.status == 0) {
                  document.querySelector('.player').innerHTML = "<message-error message=\"Limit Request waiting 1 minute\" class=\"col-span-full\"></message-error>";
                } else {
                  document.querySelector('.player').innerHTML = "<message-error message=\"".concat(e.statusText, "\" class=\"col-span-full\"></message-error>");
                }
              });

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }))();
  }
};
/* harmony default export */ const pages_detailPlayerPage = (detailPlayerPage);
;// CONCATENATED MODULE: ./src/scripts/routes/routes.js








var routes = {
  '/': pages_homePage,
  '/favorite-page': pages_favoritePage,
  '/game-page': pages_gamePage,
  '/news-page': newsPage,
  '/teams/:id': pages_clubPage,
  '/league/:id': pages_detailLeaguePage,
  '/matches/:id': pages_detailGamePage,
  '/players/:id': pages_detailPlayerPage
};
/* harmony default export */ const routes_routes = (routes);
;// CONCATENATED MODULE: ./src/scripts/views/app.js









var App = /*#__PURE__*/function () {
  function App(_ref) {
    var header = _ref.header,
        main = _ref.main,
        footer = _ref.footer;

    _classCallCheck(this, App);

    this.header = header;
    this.main = main;
    this.footer = footer;
    this.initialAppShell();
  }

  _createClass(App, [{
    key: "initialAppShell",
    value: function initialAppShell() {
      this.header.innerHTML = components_header.init();
      this.footer.innerHTML = components_footer.init();
      components_header.afterRender();
      components_footer.afterRender();
    }
  }, {
    key: "renderPage",
    value: function () {
      var _renderPage = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var _this = this;

        var url, page;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = url_parser.parseActiveUrlWithCombiner();
                page = routes_routes[url];
                _context.next = 4;
                return page.init().then(function (e) {
                  _this.main.innerHTML = e;
                })["catch"](function (e) {
                  if (e.status == 0) {
                    _this.main.innerHTML = "<message-error message=\"Limit Request waiting 1 minute\"></message-error>";
                  } else {
                    _this.main.innerHTML = "<message-error message=\"".concat(e.statusText, "\"></message-error>");
                  }
                });

              case 4:
                _context.next = 6;
                return page.afterRender();

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function renderPage() {
        return _renderPage.apply(this, arguments);
      }

      return renderPage;
    }()
  }]);

  return App;
}();

/* harmony default export */ const views_app = (App);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(379);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(795);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(569);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(565);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(216);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(589);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles/main.css
var main = __webpack_require__(883);
;// CONCATENATED MODULE: ./src/styles/main.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(main/* default */.Z, options);




       /* harmony default export */ const styles_main = (main/* default */.Z && main/* default.locals */.Z.locals ? main/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/lazysizes/lazysizes.js
var lazysizes = __webpack_require__(358);
;// CONCATENATED MODULE: ./src/scripts/views/components/fab-darkmode.js









function fab_darkmode_createSuper(Derived) { var hasNativeReflectConstruct = fab_darkmode_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function fab_darkmode_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var FloatingBtn = /*#__PURE__*/function (_HTMLElement) {
  _inherits(FloatingBtn, _HTMLElement);

  var _super = fab_darkmode_createSuper(FloatingBtn);

  function FloatingBtn() {
    _classCallCheck(this, FloatingBtn);

    return _super.apply(this, arguments);
  }

  _createClass(FloatingBtn, [{
    key: "connectedCallback",
    value: function () {
      var _connectedCallback = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.render();

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectedCallback() {
        return _connectedCallback.apply(this, arguments);
      }

      return connectedCallback;
    }()
  }, {
    key: "settingDarkMode",
    value: function settingDarkMode() {
      var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
      var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
      var themeToggleButton = document.getElementById('theme-toggle');

      if (localStorage.getItem('color-theme') === 'dark' || !('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        themeToggleLightIcon.classList.remove('hidden');
      } else {
        themeToggleDarkIcon.classList.remove('hidden');
      }

      themeToggleButton.addEventListener('click', function () {
        themeToggleDarkIcon.classList.toggle('hidden');
        themeToggleLightIcon.classList.toggle('hidden');

        if (localStorage.getItem('color-theme')) {
          if (localStorage.getItem('color-theme') === 'light') {
            document.documentElement.classList.add('dark');
            localStorage.setItem('color-theme', 'dark');
          } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('color-theme', 'light');
          }
        } else {
          if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('color-theme', 'light');
          } else {
            document.documentElement.classList.add('dark');
            localStorage.setItem('color-theme', 'dark');
          }
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      this.innerHTML = " \n        \t <button id=\"theme-toggle\" class=\"fixed z-90 bottom-10 right-8 bg-green-500 w-20 h-20 rounded-full drop-shadow-lg flex justify-center items-center text-white text-4xl hover:bg-green-700 hover:drop-shadow-2xl hover:animate-bounce duration-300\">\n        \t\t\t\t<svg id=\"theme-toggle-dark-icon\" class=\"hidden w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\"></path></svg>\n \t\t\t\t\t\t<svg id=\"theme-toggle-light-icon\" class=\"hidden w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"></path></svg>\n        \t  </button>\n\t\t";
      this.settingDarkMode();
    }
  }]);

  return FloatingBtn;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

customElements.define('fab-darkmode', FloatingBtn);
;// CONCATENATED MODULE: ./src/scripts/views/components/message-error.js









function message_error_createSuper(Derived) { var hasNativeReflectConstruct = message_error_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function message_error_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var MessageError = /*#__PURE__*/function (_HTMLElement) {
  _inherits(MessageError, _HTMLElement);

  var _super = message_error_createSuper(MessageError);

  function MessageError() {
    _classCallCheck(this, MessageError);

    return _super.apply(this, arguments);
  }

  _createClass(MessageError, [{
    key: "connectedCallback",
    value: function () {
      var _connectedCallback = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.render();

              case 2:
                this.innerHTML = _context.sent;

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectedCallback() {
        return _connectedCallback.apply(this, arguments);
      }

      return connectedCallback;
    }()
  }, {
    key: "render",
    value: function () {
      var _render = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", "\n\t\t\t<section class=\"w-full h-screen flex\">\n\t\t\t\t<div class=\"m-auto flex flex-col\">\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-red-400 m-auto h-[5%] w-[5%]\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n\t\t\t\t\t  <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t</svg>\n\t\t\t\t\t<p class=\"m-auto text-[3vw] md:text-[1.5vw] text-center  text-semibold text-red-400\">Something wrong!! please reload this page because ".concat(this.getAttribute("message") || null, " </p>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t"));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function render() {
        return _render.apply(this, arguments);
      }

      return render;
    }()
  }]);

  return MessageError;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

customElements.define('message-error', MessageError);
;// CONCATENATED MODULE: ./src/scripts/views/components/message-null.js









function message_null_createSuper(Derived) { var hasNativeReflectConstruct = message_null_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function message_null_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var MessageNull = /*#__PURE__*/function (_HTMLElement) {
  _inherits(MessageNull, _HTMLElement);

  var _super = message_null_createSuper(MessageNull);

  function MessageNull() {
    _classCallCheck(this, MessageNull);

    return _super.apply(this, arguments);
  }

  _createClass(MessageNull, [{
    key: "connectedCallback",
    value: function () {
      var _connectedCallback = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.render();

              case 2:
                this.innerHTML = _context.sent;

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectedCallback() {
        return _connectedCallback.apply(this, arguments);
      }

      return connectedCallback;
    }()
  }, {
    key: "render",
    value: function () {
      var _render = asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", "\n\t\t\t<section class=\"w-full h-screen flex\">\n\t\t\t\t<div class=\"m-auto flex flex-col\">\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-gray-300 m-auto h-[5%] w-[5%]\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n\t\t\t\t\t  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 13h6m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t\t<p class=\"m-auto text-[3vw] md:text-[1.5vw] text-center  text-semibold text-gray-300\">Data Kosong !!.</p>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t");

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function render() {
        return _render.apply(this, arguments);
      }

      return render;
    }()
  }]);

  return MessageNull;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

customElements.define('message-null', MessageNull);
;// CONCATENATED MODULE: ./src/scripts/utils/sw-register.js



var swRegister = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!('serviceWorker' in navigator)) {
              _context.next = 12;
              break;
            }

            _context.prev = 1;
            _context.next = 4;
            return navigator.serviceWorker.register('./sw.js');

          case 4:
            console.log('Pendaftaran ServiceWorker berhasil');
            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](1);
            console.log('Pendaftaran ServiceWorker gagal', _context.t0);

          case 10:
            _context.next = 13;
            break;

          case 12:
            console.log('Browser ini tidak mendukung ServiceWorker.');

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 7]]);
  }));

  return function swRegister() {
    return _ref.apply(this, arguments);
  };
}()));

/* harmony default export */ const sw_register = ((/* unused pure expression or super */ null && (swRegister)));
;// CONCATENATED MODULE: ./src/scripts/utils/notification-helper.js



var NotificationHelper = {
  sendNotification: function sendNotification() {
    if (!this._checkAvailability()) {
      console.log('Notification not supported in this browser');
      return;
    }

    if (!this._checkPermission()) {
      console.log('User did not yet granted permission');

      this._requestPermission();

      return;
    } //this._showNotification();

  },
  _checkAvailability: function _checkAvailability() {
    return !!('Notification' in window);
  },
  _checkPermission: function _checkPermission() {
    return Notification.permission === 'granted';
  },
  _requestPermission: function _requestPermission() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {
      var status;
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Notification.requestPermission();

            case 2:
              status = _context.sent;

              if (status === 'denied') {
                console.log('Notification Denied');
              }

              if (status === 'default') {
                console.log('Permission closed');
              }

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  _showNotification: function _showNotification() {
    return asyncToGenerator_asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {
      var serviceWorkerRegistration;
      return regenerator_default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return navigator.serviceWorker.ready;

            case 2:
              serviceWorkerRegistration = _context2.sent;
              serviceWorkerRegistration.showNotification("New Massage from progressive sport", {
                body: "Lets see the next match!",
                icon: "icons/icon.png"
              });

              serviceWorkerRegistration.onclick = function () {
                window.location.href = "http://localhost:5000/#/game-page";
              };

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  }
};
/* harmony default export */ const notification_helper = (NotificationHelper);
;// CONCATENATED MODULE: ./src/scripts/utils/config.js
var config_CONFIG = {
  WEB_SOCKET_SERVER: 'wss://movies-feed.dicoding.dev'
};
/* harmony default export */ const config = ((/* unused pure expression or super */ null && (config_CONFIG)));
;// CONCATENATED MODULE: ./src/scripts/utils/websocket-initiator.js


var WebSocketInitiator = {
  init: function init(url) {
    var webSocket = new WebSocket(url);
    webSocket.onmessage = this._onMessageHandler;
  },
  _onMessageHandler: function _onMessageHandler() {
    notification_helper.sendNotification();
  }
};
/* harmony default export */ const websocket_initiator = ((/* unused pure expression or super */ null && (WebSocketInitiator)));
;// CONCATENATED MODULE: ./src/scripts/index.js













var scripts_app = new views_app({
  header: document.querySelector('header'),
  main: document.querySelector('main'),
  footer: document.querySelector('footer')
});
window.addEventListener('hashchange', function () {
  scripts_app.renderPage();
});

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function () {
    scripts_app.renderPage();
    navigator.serviceWorker.register('/sw.js'); // WebSocketInitiator.init(CONFIG.WEB_SOCKET_SERVER);
  });
}
})();

/******/ })()
;